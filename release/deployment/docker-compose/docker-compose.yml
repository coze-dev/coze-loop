services:

  app:
    profiles: [ "app", "nginx" ]
    container_name: "coze-loop-app"
    image: "${COZE_LOOP_APP_IMAGE_REGISTRY}/${COZE_LOOP_APP_IMAGE_REPOSITORY}/${COZE_LOOP_APP_IMAGE_NAME}:${COZE_LOOP_APP_IMAGE_TAG}"
    restart: always
    networks:
      - coze-loop-network
    ports:
      - "${COZE_LOOP_APP_OPENAPI_PORT}:8888"
    volumes:
      - nginx_data:/coze-loop/resources
      - ./bootstrap/app:/coze-loop/bootstrap
      - ./conf:/coze-loop/conf
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
      mysql-init:
        condition: service_completed_successfully
      clickhouse:
        condition: service_healthy
      clickhouse-init:
        condition: service_completed_successfully
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
      rocketmq-namesrv:
        condition: service_healthy
      rocketmq-broker:
        condition: service_healthy
      rocketmq-init:
        condition: service_completed_successfully
      coze-loop-python-faas:
        condition: service_healthy
      coze-loop-js-faas:
        condition: service_healthy
    environment:
      # redis
      COZE_LOOP_REDIS_DOMAIN: "${COZE_LOOP_REDIS_DOMAIN}"
      COZE_LOOP_REDIS_PORT: "${COZE_LOOP_REDIS_PORT}"
      COZE_LOOP_REDIS_PASSWORD: "${COZE_LOOP_REDIS_PASSWORD}"
      # mysql
      COZE_LOOP_MYSQL_DOMAIN: "${COZE_LOOP_MYSQL_DOMAIN}"
      COZE_LOOP_MYSQL_PORT: "${COZE_LOOP_MYSQL_PORT}"
      COZE_LOOP_MYSQL_USER: "${COZE_LOOP_MYSQL_USER}"
      COZE_LOOP_MYSQL_PASSWORD: "${COZE_LOOP_MYSQL_PASSWORD}"
      COZE_LOOP_MYSQL_DATABASE: "${COZE_LOOP_MYSQL_DATABASE}"
      # clickhouse
      COZE_LOOP_CLICKHOUSE_DOMAIN: "${COZE_LOOP_CLICKHOUSE_DOMAIN}"
      COZE_LOOP_CLICKHOUSE_PORT: "${COZE_LOOP_CLICKHOUSE_PORT}"
      COZE_LOOP_CLICKHOUSE_USER: "${COZE_LOOP_CLICKHOUSE_USER}"
      COZE_LOOP_CLICKHOUSE_PASSWORD: "${COZE_LOOP_CLICKHOUSE_PASSWORD}"
      COZE_LOOP_CLICKHOUSE_DATABASE: "${COZE_LOOP_CLICKHOUSE_DATABASE}"
      # oss
      COZE_LOOP_OSS_PROTOCOL: "${COZE_LOOP_OSS_PROTOCOL}"
      COZE_LOOP_OSS_DOMAIN: "${COZE_LOOP_OSS_DOMAIN}"
      COZE_LOOP_OSS_PORT:  "${COZE_LOOP_OSS_PORT}"
      COZE_LOOP_OSS_USER: "${COZE_LOOP_OSS_USER}"
      COZE_LOOP_OSS_PASSWORD: "${COZE_LOOP_OSS_PASSWORD}"
      COZE_LOOP_OSS_REGION: "${COZE_LOOP_OSS_REGION}"
      COZE_LOOP_OSS_BUCKET: "${COZE_LOOP_OSS_BUCKET}"
      # rmq
      COZE_LOOP_RMQ_NAMESRV_DOMAIN: "${COZE_LOOP_RMQ_NAMESRV_DOMAIN}"
      COZE_LOOP_RMQ_NAMESRV_PORT: "${COZE_LOOP_RMQ_NAMESRV_PORT}"
      # faas
      COZE_LOOP_PYTHON_FAAS_URL: "http://coze-loop-python-faas:8000"
      COZE_LOOP_JS_FAAS_URL: "http://coze-loop-js-faas:8000"
    entrypoint: [ "sh", "/coze-loop/bootstrap/entrypoint.sh" ]
    healthcheck:
      test: [ "CMD", "sh", "/coze-loop/bootstrap/healthcheck.sh" ]
      interval: 15s
      timeout: 10s
      retries: 50
      start_period: 30s

  redis:
    profiles: [ "redis" ]
    container_name: "coze-loop-redis"
    image: "${COZE_LOOP_REDIS_IMAGE_REGISTRY}/${COZE_LOOP_REDIS_IMAGE_REPOSITORY}/${COZE_LOOP_REDIS_IMAGE_NAME}:${COZE_LOOP_REDIS_IMAGE_TAG}"
    restart: always
    networks:
      - coze-loop-network
    volumes:
      - redis_data:/data # 挂载宿主机以持久化
      - ./bootstrap/redis:/coze-loop-redis/bootstrap
    environment:
      COZE_LOOP_REDIS_PASSWORD: "${COZE_LOOP_REDIS_PASSWORD}"
    entrypoint: [ "sh", "/coze-loop-redis/bootstrap/entrypoint.sh" ]
    healthcheck:
      test: [ "CMD", "sh", "/coze-loop-redis/bootstrap/healthcheck.sh" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  mysql:
    profiles: [ "mysql" ]
    container_name: "coze-loop-mysql"
    image: "${COZE_LOOP_MYSQL_IMAGE_REGISTRY}/${COZE_LOOP_MYSQL_IMAGE_REPOSITORY}/${COZE_LOOP_MYSQL_IMAGE_NAME}:${COZE_LOOP_MYSQL_IMAGE_TAG}"
    restart: always
    networks:
      - coze-loop-network
    volumes:
      - mysql_data:/var/lib/mysql # 挂载宿主机以持久化
      - ./bootstrap/mysql:/coze-loop-mysql/bootstrap
    environment:
      COZE_LOOP_MYSQL_USER: "${COZE_LOOP_MYSQL_USER}"
      COZE_LOOP_MYSQL_PASSWORD: "${COZE_LOOP_MYSQL_PASSWORD}"
      COZE_LOOP_MYSQL_DATABASE: "${COZE_LOOP_MYSQL_DATABASE}"
    entrypoint: [ "sh", "/coze-loop-mysql/bootstrap/entrypoint.sh" ]
    healthcheck:
      test: [ "CMD", "sh", "/coze-loop-mysql/bootstrap/healthcheck.sh" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 15s

  mysql-init:
    profiles: [ "mysql" ]
    container_name: "coze-loop-mysql-init"
    image: "${COZE_LOOP_MYSQL_IMAGE_REGISTRY}/${COZE_LOOP_MYSQL_IMAGE_REPOSITORY}/${COZE_LOOP_MYSQL_IMAGE_NAME}:${COZE_LOOP_MYSQL_IMAGE_TAG}"
    restart: no
    networks:
      - coze-loop-network
    volumes:
      - ./bootstrap/mysql-init:/coze-loop-mysql-init/bootstrap
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      COZE_LOOP_MYSQL_USER: "${COZE_LOOP_MYSQL_USER}"
      COZE_LOOP_MYSQL_PASSWORD: "${COZE_LOOP_MYSQL_PASSWORD}"
      COZE_LOOP_MYSQL_DATABASE: "${COZE_LOOP_MYSQL_DATABASE}"
    entrypoint: [ "sh", "/coze-loop-mysql-init/bootstrap/entrypoint.sh" ]

  clickhouse:
    profiles: [ "clickhouse" ]
    container_name: "coze-loop-clickhouse"
    image: "${COZE_LOOP_CLICKHOUSE_IMAGE_REGISTRY}/${COZE_LOOP_CLICKHOUSE_IMAGE_REPOSITORY}/${COZE_LOOP_CLICKHOUSE_IMAGE_NAME}:${COZE_LOOP_CLICKHOUSE_IMAGE_TAG}"
    restart: always
    networks:
      - coze-loop-network
    volumes:
      - clickhouse_data:/var/lib/clickhouse # 挂载宿主机以持久化
      - ./bootstrap/clickhouse:/coze-loop-clickhouse/bootstrap
    user: "101:101"
    environment:
      COZE_LOOP_CLICKHOUSE_USER: "${COZE_LOOP_CLICKHOUSE_USER}"
      COZE_LOOP_CLICKHOUSE_PASSWORD: "${COZE_LOOP_CLICKHOUSE_PASSWORD}"
    entrypoint: [ "sh", "/coze-loop-clickhouse/bootstrap/entrypoint.sh" ]
    healthcheck:
      test: [ "CMD", "sh", "/coze-loop-clickhouse/bootstrap/healthcheck.sh" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  clickhouse-init:
    profiles: [ "clickhouse" ]
    container_name: "coze-loop-clickhouse-init"
    image: "${COZE_LOOP_CLICKHOUSE_IMAGE_REGISTRY}/${COZE_LOOP_CLICKHOUSE_IMAGE_REPOSITORY}/${COZE_LOOP_CLICKHOUSE_IMAGE_NAME}:${COZE_LOOP_CLICKHOUSE_IMAGE_TAG}"
    restart: no
    networks:
      - coze-loop-network
    volumes:
      - ./bootstrap/clickhouse-init:/coze-loop-clickhouse-init/bootstrap
    depends_on:
      clickhouse:
        condition: service_healthy
    environment:
      COZE_LOOP_CLICKHOUSE_USER: "${COZE_LOOP_CLICKHOUSE_USER}"
      COZE_LOOP_CLICKHOUSE_PASSWORD: "${COZE_LOOP_CLICKHOUSE_PASSWORD}"
      COZE_LOOP_CLICKHOUSE_DATABASE: "${COZE_LOOP_CLICKHOUSE_DATABASE}"
    entrypoint: [ "sh", "/coze-loop-clickhouse-init/bootstrap/entrypoint.sh" ]

  minio:
    profiles: [ "minio" ]
    container_name: "coze-loop-minio"
    image: "${COZE_LOOP_OSS_IMAGE_REGISTRY}/${COZE_LOOP_OSS_IMAGE_REPOSITORY}/${COZE_LOOP_OSS_IMAGE_NAME}:${COZE_LOOP_OSS_IMAGE_TAG}"
    restart: always
    networks:
      - coze-loop-network
    volumes:
      - minio_data:/minio_data # 挂载宿主机以持久化
      - minio_config:/root/.minio # 挂载宿主机以持久化
      - ./bootstrap/minio:/coze-loop-minio/bootstrap
    environment:
      COZE_LOOP_OSS_USER: "${COZE_LOOP_OSS_USER}"
      COZE_LOOP_OSS_PASSWORD: "${COZE_LOOP_OSS_PASSWORD}"
    entrypoint: [ "sh", "/coze-loop-minio/bootstrap/entrypoint.sh" ]
    healthcheck:
      test: [ "CMD", "sh", "/coze-loop-minio/bootstrap/healthcheck.sh" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s

  minio-init:
    profiles: [ "minio" ]
    container_name: "coze-loop-minio-init"
    image: "${COZE_LOOP_OSS_IMAGE_REGISTRY}/${COZE_LOOP_OSS_IMAGE_REPOSITORY}/${COZE_LOOP_OSS_IMAGE_NAME}:${COZE_LOOP_OSS_IMAGE_TAG}"
    restart: no
    networks:
      - coze-loop-network
    volumes:
      - ./bootstrap/minio-init:/coze-loop-minio-init/bootstrap
    depends_on:
      minio:
        condition: service_healthy
    environment:
      COZE_LOOP_OSS_USER: "${COZE_LOOP_OSS_USER}"
      COZE_LOOP_OSS_PASSWORD: "${COZE_LOOP_OSS_PASSWORD}"
      COZE_LOOP_OSS_BUCKET: "${COZE_LOOP_OSS_BUCKET}"
    entrypoint: [ "sh", "/coze-loop-minio-init/bootstrap/entrypoint.sh" ]

  rocketmq-namesrv:
    profiles: [ "rmq" ]
    container_name: "coze-loop-rmq-namesrv"
    image: "${COZE_LOOP_RMQ_IMAGE_REGISTRY}/${COZE_LOOP_RMQ_IMAGE_REPOSITORY}/${COZE_LOOP_RMQ_IMAGE_NAME}:${COZE_LOOP_RMQ_IMAGE_TAG}"
    restart: always
    networks:
      - coze-loop-network
    volumes:
      - rmq_namesrv_data:/store # 挂载宿主机以持久化
      - ./bootstrap/rmq-namesrv:/coze-loop-rmq-namesrv/bootstrap
    user: "0:0"
    entrypoint: [ "sh", "/coze-loop-rmq-namesrv/bootstrap/entrypoint.sh" ]
    healthcheck:
      test: [ "CMD", "sh", "/coze-loop-rmq-namesrv/bootstrap/healthcheck.sh" ]
      interval: 15s
      timeout: 15s
      retries: 5
      start_period: 10s

  rocketmq-broker:
    profiles: [ "rmq" ]
    container_name: "coze-loop-rmq-broker"
    image: "${COZE_LOOP_RMQ_IMAGE_REGISTRY}/${COZE_LOOP_RMQ_IMAGE_REPOSITORY}/${COZE_LOOP_RMQ_IMAGE_NAME}:${COZE_LOOP_RMQ_IMAGE_TAG}"
    restart: no
    networks:
      - coze-loop-network
    volumes:
      - rmq_broker_data:/store
      - ./bootstrap/rmq-broker:/coze-loop-rmq-broker/bootstrap
    depends_on:
      rocketmq-namesrv:
        condition: service_healthy
    user: "0:0"
    entrypoint: [ "sh", "/coze-loop-rmq-broker/bootstrap/entrypoint.sh" ]
    healthcheck:
      test: [ "CMD", "sh", "/coze-loop-rmq-broker/bootstrap/healthcheck.sh" ]
      interval: 15s
      timeout: 15s
      retries: 5
      start_period: 20s

  rocketmq-init:
    profiles: [ "rmq" ]
    container_name: "coze-loop-rmq-init"
    image: "${COZE_LOOP_RMQ_IMAGE_REGISTRY}/${COZE_LOOP_RMQ_IMAGE_REPOSITORY}/${COZE_LOOP_RMQ_IMAGE_NAME}:${COZE_LOOP_RMQ_IMAGE_TAG}"
    restart: no
    networks:
      - coze-loop-network
    volumes:
      - ./bootstrap/rmq-init:/coze-loop-rmq-init/bootstrap
    depends_on:
      rocketmq-namesrv:
        condition: service_healthy
      rocketmq-broker:
        condition: service_healthy
    entrypoint: [ "bash", "/coze-loop-rmq-init/bootstrap/entrypoint.sh" ]

  nginx:
    profiles: [ "nginx", "app" ]
    container_name: "coze-loop-nginx"
    image: "${COZE_LOOP_NGINX_IMAGE_REGISTRY}/${COZE_LOOP_NGINX_IMAGE_REPOSITORY}/${COZE_LOOP_NGINX_IMAGE_NAME}:${COZE_LOOP_NGINX_IMAGE_TAG}"
    restart: always
    networks:
      - coze-loop-network
    ports:
      - "${COZE_LOOP_NGINX_PORT}:80"
    volumes:
      - nginx_data:/usr/share/nginx/html:ro
      - ./bootstrap/nginx:/coze-loop-nginx/bootstrap
    depends_on:
      app:
        condition: service_healthy
    environment:
      COZE_LOOP_OSS_PROTOCOL: "${COZE_LOOP_OSS_PROTOCOL}"
      COZE_LOOP_OSS_DOMAIN: "${COZE_LOOP_OSS_DOMAIN}"
      COZE_LOOP_OSS_PORT: "${COZE_LOOP_OSS_PORT}"
      COZE_LOOP_OSS_BUCKET: "${COZE_LOOP_OSS_BUCKET}"
    entrypoint: [ "sh", "/coze-loop-nginx/bootstrap/entrypoint.sh" ]
    healthcheck:
      test: [ "CMD", "sh", "/coze-loop-nginx/bootstrap/healthcheck.sh" ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Python FaaS服务 - 增强版系统Python执行
  coze-loop-python-faas:
    profiles: [ "faas", "app" ]
    container_name: "coze-loop-python-faas"
    build:
      context: ./bootstrap/python-faas
      dockerfile: Dockerfile
    restart: always
    networks:
      - coze-loop-network
    ports:
      - "${COZE_LOOP_PYTHON_FAAS_PORT:-8890}:8000"
    volumes:
      - python_faas_workspace:/tmp/faas-workspace
      - ./bootstrap/python-faas:/coze-loop/bootstrap/python-faas:ro  # 只读挂载
    environment:
      # Deno 配置
      DENO_DIR: "/tmp/.deno"
      DENO_NO_UPDATE_CHECK: "1"
      DENO_V8_FLAGS: "--max-old-space-size=2048"
      
      # FaaS 基础配置
      FAAS_WORKSPACE: "/tmp/faas-workspace"
      FAAS_PORT: "8000"
      FAAS_TIMEOUT: "30000"
      FAAS_LANGUAGE: "python"
      
      # 预装Python包版本配置（使用兼容版本）
      NUMPY_VERSION: ">=1.24.0"
      PANDAS_VERSION: ">=1.5.0"
      JSONSCHEMA_VERSION: ">=4.0.0"
      SCIPY_VERSION: ">=1.10.0"
      SKLEARN_VERSION: ">=1.3.0"
      
    working_dir: /app
    entrypoint: [ "sh", "/coze-loop/bootstrap/python-faas/entrypoint.sh" ]
    deploy:
      resources:
        limits:
          memory: "${PYTHON_FAAS_MEMORY_LIMIT:-4G}"  # 生产级内存配置
          cpus: "${PYTHON_FAAS_CPU_LIMIT:-2.0}"
        reservations:
          memory: "${PYTHON_FAAS_MEMORY_RESERVE:-2G}"
          cpus: "${PYTHON_FAAS_CPU_RESERVE:-1.0}"
    tmpfs:
      - /tmp:noexec,nosuid,size=1g,mode=1777
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    healthcheck:
      test: [ "CMD", "sh", "/coze-loop/bootstrap/python-faas/healthcheck.sh" ]
      interval: 60s
      timeout: 20s
      retries: 20
      start_period: 120s

  # JavaScript FaaS服务
  coze-loop-js-faas:
    profiles: [ "faas", "app" ]
    container_name: "coze-loop-js-faas"
    image: "denoland/deno:1.45.5"
    restart: always
    networks:
      - coze-loop-network
    ports:
      - "${COZE_LOOP_JS_FAAS_PORT:-8891}:8000"
    volumes:
      - js_faas_workspace:/tmp/faas-workspace
      - ./bootstrap/js-faas:/coze-loop/bootstrap/js-faas
    environment:
      DENO_DIR: "/tmp/.deno"
      DENO_NO_UPDATE_CHECK: "1"
      FAAS_WORKSPACE: "/tmp/faas-workspace"
      FAAS_PORT: "8000"
      FAAS_TIMEOUT: "30000"
      FAAS_LANGUAGE: "javascript"
    working_dir: /app
    entrypoint: [ "sh", "/coze-loop/bootstrap/js-faas/entrypoint.sh" ]
    deploy:
      resources:
        limits:
          memory: "${JS_FAAS_MEMORY_LIMIT:-1G}"
          cpus: "${JS_FAAS_CPU_LIMIT:-0.5}"
        reservations:
          memory: "${JS_FAAS_MEMORY_RESERVE:-256M}"
          cpus: "${JS_FAAS_CPU_RESERVE:-0.25}"
    healthcheck:
      test: [ "CMD", "sh", "/coze-loop/bootstrap/js-faas/healthcheck.sh" ]
      interval: 60s
      timeout: 20s
      retries: 20
      start_period: 120s

volumes:
  redis_data:
    name: coze-loop_redis_data
  mysql_data:
    name: coze-loop_mysql_data
  clickhouse_data:
    name: coze-loop_clickhouse_data
  minio_data:
    name: coze-loop_minio_data
  minio_config:
    name: coze-loop_minio_config
  rmq_namesrv_data:
    name: coze-loop_rmqnamesrv_data
  rmq_broker_data:
    name: coze-loop_rocketmq_broker_data
  nginx_data:
    name: coze-loop_nginx_data
  python_faas_workspace:
    name: coze-loop_python_faas_workspace
  js_faas_workspace:
    name: coze-loop_js_faas_workspace

networks:
  coze-loop-network:
    name: coze-loop-network
    driver: bridge
# 生产环境 Docker Compose 配置
# 针对生产环境优化的配置，包含安全、性能和监控特性

version: '3.8'

networks:
  coze-loop-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mysql-data:
    driver: local
  clickhouse-data:
    driver: local
  minio-data:
    driver: local
  redis-data:
    driver: local
  rmq-data:
    driver: local

services:
  # ==================== 核心应用服务 ====================
  coze-loop-app:
    profiles: ["app"]
    container_name: "coze-loop-app"
    image: "${COZE_LOOP_APP_IMAGE_REGISTRY}/${COZE_LOOP_APP_IMAGE_REPOSITORY}/${COZE_LOOP_APP_IMAGE_NAME}:${COZE_LOOP_APP_IMAGE_TAG}"
    restart: always
    networks:
      - coze-loop-network
    ports:
      - "${COZE_LOOP_APP_OPENAPI_PORT:-8888}:8888"
    volumes:
      - ./conf:/app/conf
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=500m

  # ==================== Python FaaS 服务（生产级 Pyodide）====================
  coze-loop-python-faas:
    profiles: ["faas", "app"]
    container_name: "coze-loop-python-faas"
    image: "denoland/deno:1.45.5"
    restart: always
    networks:
      - coze-loop-network
    ports:
      - "${COZE_LOOP_PYTHON_FAAS_PORT:-8890}:8000"
    volumes:
      - ./bootstrap/python-faas:/app/bootstrap
    environment:
      DENO_DIR: "/tmp/.deno"
      DENO_NO_UPDATE_CHECK: "1"
      FAAS_WORKSPACE: "/tmp/faas-workspace"
      FAAS_PORT: "8000"
      FAAS_TIMEOUT: "${FAAS_TIMEOUT:-30000}"
      FAAS_LANGUAGE: "python"
      FAAS_POOL_SIZE: "${FAAS_POOL_SIZE:-10}"
      FAAS_MAX_INSTANCES: "${FAAS_MAX_INSTANCES:-50}"
      FAAS_CACHE_SIZE: "${FAAS_CACHE_SIZE:-1000}"
      FAAS_SECURITY_LEVEL: "${FAAS_SECURITY_LEVEL:-production}"
    working_dir: /app
    command: ["deno", "run", "--allow-net=0.0.0.0:8000", "--allow-read=/app", "--allow-write=/tmp", "/app/bootstrap/production_pyodide_faas_server.ts"]
    deploy:
      resources:
        limits:
          memory: "${PYTHON_FAAS_MEMORY_LIMIT:-4G}"
          cpus: "${PYTHON_FAAS_CPU_LIMIT:-2.0}"
        reservations:
          memory: "${PYTHON_FAAS_MEMORY_RESERVE:-1G}"
          cpus: "${PYTHON_FAAS_CPU_RESERVE:-0.5}"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=1g
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "deno", "eval", "try { const resp = await fetch('http://localhost:8000/health'); if (resp.ok) { const data = await resp.json(); console.log('Health:', data.status); Deno.exit(0); } else { Deno.exit(1); } } catch (e) { console.error(e); Deno.exit(1); }"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s

  # ==================== JavaScript FaaS 服务 ====================
  coze-loop-js-faas:
    profiles: ["faas", "app"]
    container_name: "coze-loop-js-faas"
    image: "node:20-alpine"
    restart: always
    networks:
      - coze-loop-network
    ports:
      - "${COZE_LOOP_JS_FAAS_PORT:-8891}:8000"
    volumes:
      - ./bootstrap/js-faas:/app/bootstrap
    environment:
      NODE_ENV: "production"
      FAAS_PORT: "8000"
      FAAS_TIMEOUT: "30000"
    working_dir: /app
    command: ["node", "/app/bootstrap/js_faas_server.js"]
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=500m
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== 数据库服务 ====================
  coze-loop-mysql:
    profiles: ["mysql", "db", "app"]
    container_name: "coze-loop-mysql"
    image: "${COZE_LOOP_MYSQL_IMAGE_REGISTRY}/${COZE_LOOP_MYSQL_IMAGE_REPOSITORY}/${COZE_LOOP_MYSQL_IMAGE_NAME}:${COZE_LOOP_MYSQL_IMAGE_TAG}"
    restart: always
    networks:
      - coze-loop-network
    ports:
      - "${COZE_LOOP_MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./bootstrap/mysql-init:/docker-entrypoint-initdb.d
    environment:
      MYSQL_ROOT_PASSWORD: "${COZE_LOOP_MYSQL_PASSWORD}"
      MYSQL_DATABASE: "${COZE_LOOP_MYSQL_DATABASE}"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  coze-loop-clickhouse:
    profiles: ["clickhouse", "db", "app"]
    container_name: "coze-loop-clickhouse"
    image: "${COZE_LOOP_CLICKHOUSE_IMAGE_REGISTRY}/${COZE_LOOP_CLICKHOUSE_IMAGE_REPOSITORY}/${COZE_LOOP_CLICKHOUSE_IMAGE_NAME}:${COZE_LOOP_CLICKHOUSE_IMAGE_TAG}"
    restart: always
    networks:
      - coze-loop-network
    ports:
      - "${COZE_LOOP_CLICKHOUSE_PORT:-9000}:9000"
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./bootstrap/clickhouse-init:/docker-entrypoint-initdb.d
    environment:
      CLICKHOUSE_USER: "${COZE_LOOP_CLICKHOUSE_USER}"
      CLICKHOUSE_PASSWORD: "${COZE_LOOP_CLICKHOUSE_PASSWORD}"
      CLICKHOUSE_DB: "${COZE_LOOP_CLICKHOUSE_DATABASE}"
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "clickhouse-client", "--query", "SELECT 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==================== 缓存和消息队列 ====================
  coze-loop-redis:
    profiles: ["redis", "cache", "app"]
    container_name: "coze-loop-redis"
    image: "${COZE_LOOP_REDIS_IMAGE_REGISTRY}/${COZE_LOOP_REDIS_IMAGE_REPOSITORY}/${COZE_LOOP_REDIS_IMAGE_NAME}:${COZE_LOOP_REDIS_IMAGE_TAG}"
    restart: always
    networks:
      - coze-loop-network
    ports:
      - "${COZE_LOOP_REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--requirepass", "${COZE_LOOP_REDIS_PASSWORD}", "--appendonly", "yes"]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== 对象存储 ====================
  coze-loop-minio:
    profiles: ["minio", "storage", "app"]
    container_name: "coze-loop-minio"
    image: "${COZE_LOOP_OSS_IMAGE_REGISTRY}/${COZE_LOOP_OSS_IMAGE_REPOSITORY}/${COZE_LOOP_OSS_IMAGE_NAME}:${COZE_LOOP_OSS_IMAGE_TAG}"
    restart: always
    networks:
      - coze-loop-network
    ports:
      - "${COZE_LOOP_OSS_PORT:-9000}:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    environment:
      MINIO_ROOT_USER: "${COZE_LOOP_OSS_USER}"
      MINIO_ROOT_PASSWORD: "${COZE_LOOP_OSS_PASSWORD}"
    command: server /data --console-address ":9001"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== 反向代理 ====================
  coze-loop-nginx:
    profiles: ["nginx", "proxy", "app"]
    container_name: "coze-loop-nginx"
    image: "${COZE_LOOP_NGINX_IMAGE_REGISTRY}/${COZE_LOOP_NGINX_IMAGE_REPOSITORY}/${COZE_LOOP_NGINX_IMAGE_NAME}:${COZE_LOOP_NGINX_IMAGE_TAG}"
    restart: always
    networks:
      - coze-loop-network
    ports:
      - "${COZE_LOOP_NGINX_PORT:-8082}:80"
    volumes:
      - ./bootstrap/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - coze-loop-app
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== 监控服务 ====================
  prometheus:
    profiles: ["monitoring"]
    container_name: "coze-loop-prometheus"
    image: "prom/prometheus:latest"
    restart: always
    networks:
      - coze-loop-network
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
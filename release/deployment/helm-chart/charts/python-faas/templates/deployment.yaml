{{- if .Values.custom.faas.python.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "python-faas.fullname" . }}
  labels:
    {{- include "python-faas.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "python-faas.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "python-faas.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      containers:
      - name: python-faas
        image: "{{ .Values.custom.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: [
          "sh", "-c",
          "apt-get update && apt-get install -y python3 python3-pip && pip3 install --break-system-packages numpy pandas matplotlib requests && exec deno run --allow-net=0.0.0.0:8000 --allow-env --allow-read=/app --allow-write=/tmp --allow-run=python3 /app/bootstrap/enhanced_python_faas_server.ts"
        ]
        ports:
        - name: http
          containerPort: {{ .Values.service.targetPort }}
          protocol: TCP
        env:
        {{- range $key, $value := .Values.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        securityContext:
          {{- toYaml .Values.containerSecurityContext | nindent 10 }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        volumeMounts:
        - name: bootstrap
          mountPath: /app/bootstrap
          readOnly: true
        {{- if .Values.volumes.tmp.enabled }}
        - name: tmp-volume
          mountPath: /tmp
        {{- end }}
        {{- if .Values.probes.liveness.enabled }}
        livenessProbe:
          exec:
            command:
            - deno
            - eval
            - "try { const resp = await fetch('http://localhost:8000/health'); if (resp.ok) { const data = await resp.json(); if (data.status === 'healthy') { console.log('Health: OK'); Deno.exit(0); } else { console.log('Health: Degraded'); Deno.exit(1); } } else { Deno.exit(1); } } catch (e) { console.error(e); Deno.exit(1); }"
          initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
        {{- end }}
        {{- if .Values.probes.readiness.enabled }}
        readinessProbe:
          exec:
            command:
            - deno
            - eval
            - "try { const resp = await fetch('http://localhost:8000/health'); if (resp.ok) { Deno.exit(0); } else { Deno.exit(1); } } catch (e) { Deno.exit(1); }"
          initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
        {{- end }}
      volumes:
      - name: bootstrap
        configMap:
          name: {{ include "python-faas.fullname" . }}-configmap
      {{- if .Values.volumes.tmp.enabled }}
      - name: tmp-volume
        emptyDir:
          sizeLimit: {{ .Values.volumes.tmp.sizeLimit }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
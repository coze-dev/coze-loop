// Copyright (c) 2025 Bytedance Ltd. and/or its affiliates
// SPDX-License-Identifier: Apache-2.0
import { join } from 'node:path';
import { writeFile } from 'node:fs/promises';

import { localeEnUS as localeJson } from '@cozeloop/loop-lng';

import { icu2Type } from './utils';

function generateOptionsMap(localeData: Record<string, string>) {
  const noInterpolationKeys: string[] = [];
  const withInterpolation: string[] = [];
  for (const [key, content] of Object.entries(localeData)) {
    const typeInfos = icu2Type(content);
    if (!typeInfos.length) {
      noInterpolationKeys.push(key);
      continue;
    }
    const indent = '  ';
    withInterpolation.push(
      `${indent}${key}: {`,
      typeInfos
        .map(
          it =>
            `${indent}${indent}/** ${it.type} */\n${indent}${indent}${it.key}: ReactNode;`,
        )
        .join('\n'),
      `${indent}};`,
    );
  }

  return {
    withInterpolation: `export interface I18nWithInterpolation {
${withInterpolation.join('\n')}
}`,
    noInterpolationKeys: `export type I18nKeysNoInterpolation =
${noInterpolationKeys.map(it => `  | '${it}'`).join('\n')};`,
  };
}

async function main() {
  const startAt = Date.now();
  const { withInterpolation, noInterpolationKeys } =
    generateOptionsMap(localeJson);
  const localeTypes = `// Copyright (c) 2025 Bytedance Ltd. and/or its affiliates
// SPDX-License-Identifier: Apache-2.0
/** Generated by rushx gen-i18n-types */
import { type ReactNode } from 'react';

/** I18n with interpolation */
${withInterpolation}

/** I18n keys without interpolation */
${noInterpolationKeys}
`;

  const typeFile = join(__dirname, '..', 'src/locale-types.ts');
  await writeFile(typeFile, localeTypes);
  console.info(`âœ… Locale types generated in ${Date.now() - startAt}ms`);
}

main();

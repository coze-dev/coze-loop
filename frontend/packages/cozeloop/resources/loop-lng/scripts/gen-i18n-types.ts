import { join } from 'node:path';
import { writeFile } from 'node:fs/promises';

import localeJson from '../src/locales/en-US.json';
import { icu2Type } from './utils';

function tpl(segments: TemplateStringsArray, ...values: string[]) {
  return segments.reduce(
    (result, str, index) => `${result}${str}${values[index] ?? ''}`,
    '',
  );
}

function generateOptionsMap(localeData: Record<string, string>) {
  const noTypeKeys: string[] = [];
  const optionsMap: string[] = [];
  for (const [key, content] of Object.entries(localeData)) {
    const typeInfos = icu2Type(content);
    if (!typeInfos.length) {
      noTypeKeys.push(key);
      continue;
    }

    optionsMap.push(
      `  '${key}': { ${typeInfos.map(it => `${it.key}: ReactNode; /** ${it.type} */`).join('; ')} };`,
    );
  }

  return {
    optionsMap: `export interface I18nOptionsMap {
${optionsMap.join('\n')}
}`,
    keysNoOptionsType: `export type I18nKeysNoOptionsType =
${noTypeKeys.map(it => `  | '${it}'`).join('\n')};`,
  };
}

function updateLocaleType(optionsMap: string, keysNoOptionsType: string) {
  const typeFile = join(__dirname, '..', 'src/locale-data.d.ts');
  const content = tpl`/** Auto-generated by rushx gen-types */
import { type ReactNode } from 'react';

// #region I18nOptionsMap
${optionsMap}
// #endregion

// #region I18nKeysHasOptionsType
export type I18nKeysHasOptionsType = keyof I18nOptionsMap;
// #endregion

// #region I18nKeysNoOptionsType
${keysNoOptionsType}
// #endregion

// #region LocaleData
type Expand<T extends string> = T extends infer U ? U : never;
export type LocaleData = Expand<I18nKeysHasOptionsType | I18nKeysNoOptionsType>;
// #endregion`;

  return writeFile(typeFile, content);
}

async function main() {
  const { optionsMap, keysNoOptionsType } = generateOptionsMap(localeJson);
  await updateLocaleType(optionsMap, keysNoOptionsType);
}

main();

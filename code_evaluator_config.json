{
  "equals_checker": {
    "Python": {
      "receive_chat_history": false,
      "code_evaluator": {
        "language_type": "Python",
        "code_content": "def exec_evaluation(turn_data):\n    try:\n        # 获取实际输出和参考输出\n        actual_text = turn_data[\"turn\"][\"eval_target\"][\"actual_output\"][\"text\"]\n        reference_text = turn_data[\"turn\"][\"eval_set\"][\"reference_output\"][\"text\"]\n        \n        # 比较文本相似性或相等性\n        is_equal = actual_text.strip() == reference_text.strip()\n        score = 1.0 if is_equal else 0.0\n        \n        if is_equal:\n            status = \"匹配\"\n        else:\n            status = \"不匹配\"\n        reason = f\"实际输出与参考输出{status}。实际输出: '{actual_text}', 参考输出: '{reference_text}'\"\n        \n        return EvalOutput(score=score, reason=reason, err_msg=\"\")\n        \n    except KeyError as e:\n        return EvalOutput(score=0.0, reason=f\"字段路径未找到: {e}\", err_msg=str(e))\n    except Exception as e:\n        return EvalOutput(score=0.0, reason=f\"评估失败: {e}\", err_msg=str(e))",
        "code_template_key": "equals_checker",
        "code_template_name": "相等性检查器"
      }
    },
    "Python3": {
      "receive_chat_history": false,
      "code_evaluator": {
        "language_type": "Python3",
        "code_content": "def exec_evaluation(turn_data):\n    try:\n        # 获取实际输出和参考输出\n        actual_text = turn_data[\"turn\"][\"eval_target\"][\"actual_output\"][\"text\"]\n        reference_text = turn_data[\"turn\"][\"eval_set\"][\"reference_output\"][\"text\"]\n        \n        # 比较文本相似性或相等性\n        is_equal = actual_text.strip() == reference_text.strip()\n        score = 1.0 if is_equal else 0.0\n        \n        if is_equal:\n            status = \"匹配\"\n        else:\n            status = \"不匹配\"\n        reason = f\"实际输出与参考输出{status}。实际输出: '{actual_text}', 参考输出: '{reference_text}'\"\n        \n        return EvalOutput(score=score, reason=reason, err_msg=\"\")\n        \n    except KeyError as e:\n        return EvalOutput(score=0.0, reason=f\"字段路径未找到: {e}\", err_msg=str(e))\n    except Exception as e:\n        return EvalOutput(score=0.0, reason=f\"评估失败: {e}\", err_msg=str(e))",
        "code_template_key": "equals_checker",
        "code_template_name": "相等性检查器"
      }
    }
  },
  "contains_checker": {
    "JavaScript": {
      "receive_chat_history": false,
      "input_schemas": [
        {
          "name": "input",
          "type": "string",
          "description": "评估输入内容"
        },
        {
          "name": "reference_output",
          "type": "string",
          "description": "参考输出内容"
        },
        {
          "name": "actual_output",
          "type": "string",
          "description": "实际输出内容"
        }
      ],
      "code_evaluator": {
        "language_type": "JavaScript",
        "code_content": "function execEvaluation(turnData) {\n    try {\n        // 获取实际输出和参考输出\n        const actualText = turnData.turn.eval_target.actual_output.text;\n        const referenceText = turnData.turn.eval_set.reference_output.text;\n        \n        // 检查实际输出是否包含参考输出\n        const contains = actualText.includes(referenceText);\n        const score = contains ? 1.0 : 0.0;\n        \n        const status = contains ? \"包含\" : \"不包含\";\n        const reason = `实际输出${status}参考输出。实际输出: '${actualText}', 参考输出: '${referenceText}'`;\n        \n        return { score: score, reason: reason, err_msg: \"\" };\n        \n    } catch (e) {\n        return { score: 0.0, reason: `评估失败: ${e.message}`, err_msg: e.message };\n    }\n}",
        "code_template_key": "contains_checker",
        "code_template_name": "包含性检查器"
      }
    },
    "JS": {
      "receive_chat_history": false,
      "input_schemas": [
        {
          "name": "input",
          "type": "string",
          "description": "评估输入内容"
        },
        {
          "name": "reference_output",
          "type": "string",
          "description": "参考输出内容"
        },
        {
          "name": "actual_output",
          "type": "string",
          "description": "实际输出内容"
        }
      ],
      "code_evaluator": {
        "language_type": "JS",
        "code_content": "function execEvaluation(turnData) {\n    try {\n        // 获取实际输出和参考输出\n        const actualText = turnData.turn.eval_target.actual_output.text;\n        const referenceText = turnData.turn.eval_set.reference_output.text;\n        \n        // 检查实际输出是否包含参考输出\n        const contains = actualText.includes(referenceText);\n        const score = contains ? 1.0 : 0.0;\n        \n        const status = contains ? \"包含\" : \"不包含\";\n        const reason = `实际输出${status}参考输出。实际输出: '${actualText}', 参考输出: '${referenceText}'`;\n        \n        return { score: score, reason: reason, err_msg: \"\" };\n        \n    } catch (e) {\n        return { score: 0.0, reason: `评估失败: ${e.message}`, err_msg: e.message };\n    }\n}",
        "code_template_key": "contains_checker",
        "code_template_name": "包含性检查器"
      }
    }
  }
}
// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/domain/service (interfaces: ILabelService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/label_service.go -package=mocks . ILabelService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/entity"
	service "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/service"
	gomock "go.uber.org/mock/gomock"
)

// MockILabelService is a mock of ILabelService interface.
type MockILabelService struct {
	ctrl     *gomock.Controller
	recorder *MockILabelServiceMockRecorder
	isgomock struct{}
}

// MockILabelServiceMockRecorder is the mock recorder for MockILabelService.
type MockILabelServiceMockRecorder struct {
	mock *MockILabelService
}

// NewMockILabelService creates a new mock instance.
func NewMockILabelService(ctrl *gomock.Controller) *MockILabelService {
	mock := &MockILabelService{ctrl: ctrl}
	mock.recorder = &MockILabelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILabelService) EXPECT() *MockILabelServiceMockRecorder {
	return m.recorder
}

// BatchGetCommitLabels mocks base method.
func (m *MockILabelService) BatchGetCommitLabels(ctx context.Context, promptID int64, commitVersions []string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetCommitLabels", ctx, promptID, commitVersions)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetCommitLabels indicates an expected call of BatchGetCommitLabels.
func (mr *MockILabelServiceMockRecorder) BatchGetCommitLabels(ctx, promptID, commitVersions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetCommitLabels", reflect.TypeOf((*MockILabelService)(nil).BatchGetCommitLabels), ctx, promptID, commitVersions)
}

// BatchGetLabelMappingPromptVersion mocks base method.
func (m *MockILabelService) BatchGetLabelMappingPromptVersion(ctx context.Context, queries []service.PromptLabelQuery) (map[service.PromptLabelQuery]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetLabelMappingPromptVersion", ctx, queries)
	ret0, _ := ret[0].(map[service.PromptLabelQuery]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetLabelMappingPromptVersion indicates an expected call of BatchGetLabelMappingPromptVersion.
func (mr *MockILabelServiceMockRecorder) BatchGetLabelMappingPromptVersion(ctx, queries any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetLabelMappingPromptVersion", reflect.TypeOf((*MockILabelService)(nil).BatchGetLabelMappingPromptVersion), ctx, queries)
}

// CreateLabel mocks base method.
func (m *MockILabelService) CreateLabel(ctx context.Context, labelDO *entity.PromptLabel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabel", ctx, labelDO)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLabel indicates an expected call of CreateLabel.
func (mr *MockILabelServiceMockRecorder) CreateLabel(ctx, labelDO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabel", reflect.TypeOf((*MockILabelService)(nil).CreateLabel), ctx, labelDO)
}

// ListLabel mocks base method.
func (m *MockILabelService) ListLabel(ctx context.Context, param service.ListLabelParam) ([]*entity.PromptLabel, *int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabel", ctx, param)
	ret0, _ := ret[0].([]*entity.PromptLabel)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLabel indicates an expected call of ListLabel.
func (mr *MockILabelServiceMockRecorder) ListLabel(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabel", reflect.TypeOf((*MockILabelService)(nil).ListLabel), ctx, param)
}

// UpdateCommitLabels mocks base method.
func (m *MockILabelService) UpdateCommitLabels(ctx context.Context, param service.UpdateCommitLabelsParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommitLabels", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCommitLabels indicates an expected call of UpdateCommitLabels.
func (mr *MockILabelServiceMockRecorder) UpdateCommitLabels(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommitLabels", reflect.TypeOf((*MockILabelService)(nil).UpdateCommitLabels), ctx, param)
}

// ValidateLabelsExist mocks base method.
func (m *MockILabelService) ValidateLabelsExist(ctx context.Context, spaceID int64, labelKeys []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateLabelsExist", ctx, spaceID, labelKeys)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateLabelsExist indicates an expected call of ValidateLabelsExist.
func (mr *MockILabelServiceMockRecorder) ValidateLabelsExist(ctx, spaceID, labelKeys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateLabelsExist", reflect.TypeOf((*MockILabelService)(nil).ValidateLabelsExist), ctx, spaceID, labelKeys)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/domain/service (interfaces: IPromptService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/prompt_service.go -package=mocks . IPromptService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/entity"
	service "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/service"
	gomock "go.uber.org/mock/gomock"
)

// MockIPromptService is a mock of IPromptService interface.
type MockIPromptService struct {
	ctrl     *gomock.Controller
	recorder *MockIPromptServiceMockRecorder
	isgomock struct{}
}

// MockIPromptServiceMockRecorder is the mock recorder for MockIPromptService.
type MockIPromptServiceMockRecorder struct {
	mock *MockIPromptService
}

// NewMockIPromptService creates a new mock instance.
func NewMockIPromptService(ctrl *gomock.Controller) *MockIPromptService {
	mock := &MockIPromptService{ctrl: ctrl}
	mock.recorder = &MockIPromptServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPromptService) EXPECT() *MockIPromptServiceMockRecorder {
	return m.recorder
}

// BatchGetCommitLabels mocks base method.
func (m *MockIPromptService) BatchGetCommitLabels(ctx context.Context, promptID int64, commitVersions []string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetCommitLabels", ctx, promptID, commitVersions)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetCommitLabels indicates an expected call of BatchGetCommitLabels.
func (mr *MockIPromptServiceMockRecorder) BatchGetCommitLabels(ctx, promptID, commitVersions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetCommitLabels", reflect.TypeOf((*MockIPromptService)(nil).BatchGetCommitLabels), ctx, promptID, commitVersions)
}

// BatchGetLabelMappingPromptVersion mocks base method.
func (m *MockIPromptService) BatchGetLabelMappingPromptVersion(ctx context.Context, queries []service.PromptLabelQuery) (map[service.PromptLabelQuery]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetLabelMappingPromptVersion", ctx, queries)
	ret0, _ := ret[0].(map[service.PromptLabelQuery]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetLabelMappingPromptVersion indicates an expected call of BatchGetLabelMappingPromptVersion.
func (mr *MockIPromptServiceMockRecorder) BatchGetLabelMappingPromptVersion(ctx, queries any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetLabelMappingPromptVersion", reflect.TypeOf((*MockIPromptService)(nil).BatchGetLabelMappingPromptVersion), ctx, queries)
}

// CreateLabel mocks base method.
func (m *MockIPromptService) CreateLabel(ctx context.Context, labelDO *entity.PromptLabel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabel", ctx, labelDO)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLabel indicates an expected call of CreateLabel.
func (mr *MockIPromptServiceMockRecorder) CreateLabel(ctx, labelDO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabel", reflect.TypeOf((*MockIPromptService)(nil).CreateLabel), ctx, labelDO)
}

// Execute mocks base method.
func (m *MockIPromptService) Execute(ctx context.Context, param service.ExecuteParam) (*entity.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, param)
	ret0, _ := ret[0].(*entity.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockIPromptServiceMockRecorder) Execute(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIPromptService)(nil).Execute), ctx, param)
}

// ExecuteStreaming mocks base method.
func (m *MockIPromptService) ExecuteStreaming(ctx context.Context, param service.ExecuteStreamingParam) (*entity.Reply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteStreaming", ctx, param)
	ret0, _ := ret[0].(*entity.Reply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteStreaming indicates an expected call of ExecuteStreaming.
func (mr *MockIPromptServiceMockRecorder) ExecuteStreaming(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStreaming", reflect.TypeOf((*MockIPromptService)(nil).ExecuteStreaming), ctx, param)
}

// FormatPrompt mocks base method.
func (m *MockIPromptService) FormatPrompt(ctx context.Context, prompt *entity.Prompt, messages []*entity.Message, variableVals []*entity.VariableVal) ([]*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatPrompt", ctx, prompt, messages, variableVals)
	ret0, _ := ret[0].([]*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatPrompt indicates an expected call of FormatPrompt.
func (mr *MockIPromptServiceMockRecorder) FormatPrompt(ctx, prompt, messages, variableVals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatPrompt", reflect.TypeOf((*MockIPromptService)(nil).FormatPrompt), ctx, prompt, messages, variableVals)
}

// ListLabel mocks base method.
func (m *MockIPromptService) ListLabel(ctx context.Context, param service.ListLabelParam) ([]*entity.PromptLabel, *int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabel", ctx, param)
	ret0, _ := ret[0].([]*entity.PromptLabel)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLabel indicates an expected call of ListLabel.
func (mr *MockIPromptServiceMockRecorder) ListLabel(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabel", reflect.TypeOf((*MockIPromptService)(nil).ListLabel), ctx, param)
}

// MCompleteMultiModalFileURL mocks base method.
func (m *MockIPromptService) MCompleteMultiModalFileURL(ctx context.Context, messages []*entity.Message, variableVals []*entity.VariableVal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MCompleteMultiModalFileURL", ctx, messages, variableVals)
	ret0, _ := ret[0].(error)
	return ret0
}

// MCompleteMultiModalFileURL indicates an expected call of MCompleteMultiModalFileURL.
func (mr *MockIPromptServiceMockRecorder) MCompleteMultiModalFileURL(ctx, messages, variableVals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MCompleteMultiModalFileURL", reflect.TypeOf((*MockIPromptService)(nil).MCompleteMultiModalFileURL), ctx, messages, variableVals)
}

// MGetPromptIDs mocks base method.
func (m *MockIPromptService) MGetPromptIDs(ctx context.Context, spaceID int64, promptKeys []string) (map[string]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetPromptIDs", ctx, spaceID, promptKeys)
	ret0, _ := ret[0].(map[string]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetPromptIDs indicates an expected call of MGetPromptIDs.
func (mr *MockIPromptServiceMockRecorder) MGetPromptIDs(ctx, spaceID, promptKeys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetPromptIDs", reflect.TypeOf((*MockIPromptService)(nil).MGetPromptIDs), ctx, spaceID, promptKeys)
}

// MParseCommitVersion mocks base method.
func (m *MockIPromptService) MParseCommitVersion(ctx context.Context, spaceID int64, params []service.PromptQueryParam) (map[service.PromptQueryParam]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MParseCommitVersion", ctx, spaceID, params)
	ret0, _ := ret[0].(map[service.PromptQueryParam]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MParseCommitVersion indicates an expected call of MParseCommitVersion.
func (mr *MockIPromptServiceMockRecorder) MParseCommitVersion(ctx, spaceID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MParseCommitVersion", reflect.TypeOf((*MockIPromptService)(nil).MParseCommitVersion), ctx, spaceID, params)
}

// UpdateCommitLabels mocks base method.
func (m *MockIPromptService) UpdateCommitLabels(ctx context.Context, param service.UpdateCommitLabelsParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommitLabels", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCommitLabels indicates an expected call of UpdateCommitLabels.
func (mr *MockIPromptServiceMockRecorder) UpdateCommitLabels(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommitLabels", reflect.TypeOf((*MockIPromptService)(nil).UpdateCommitLabels), ctx, param)
}

// ValidateLabelsExist mocks base method.
func (m *MockIPromptService) ValidateLabelsExist(ctx context.Context, spaceID int64, labelKeys []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateLabelsExist", ctx, spaceID, labelKeys)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateLabelsExist indicates an expected call of ValidateLabelsExist.
func (mr *MockIPromptServiceMockRecorder) ValidateLabelsExist(ctx, spaceID, labelKeys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateLabelsExist", reflect.TypeOf((*MockIPromptService)(nil).ValidateLabelsExist), ctx, spaceID, labelKeys)
}

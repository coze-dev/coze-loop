// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/domain/service (interfaces: IPromptFormatter)
//
// Generated by this command:
//
//	mockgen -destination=mocks/formatter.go -package=mocks . IPromptFormatter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIPromptFormatter is a mock of IPromptFormatter interface.
type MockIPromptFormatter struct {
	ctrl     *gomock.Controller
	recorder *MockIPromptFormatterMockRecorder
	isgomock struct{}
}

// MockIPromptFormatterMockRecorder is the mock recorder for MockIPromptFormatter.
type MockIPromptFormatterMockRecorder struct {
	mock *MockIPromptFormatter
}

// NewMockIPromptFormatter creates a new mock instance.
func NewMockIPromptFormatter(ctrl *gomock.Controller) *MockIPromptFormatter {
	mock := &MockIPromptFormatter{ctrl: ctrl}
	mock.recorder = &MockIPromptFormatterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPromptFormatter) EXPECT() *MockIPromptFormatterMockRecorder {
	return m.recorder
}

// FormatPrompt mocks base method.
func (m *MockIPromptFormatter) FormatPrompt(ctx context.Context, prompt *entity.Prompt, messages []*entity.Message, variableVals []*entity.VariableVal) ([]*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatPrompt", ctx, prompt, messages, variableVals)
	ret0, _ := ret[0].([]*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FormatPrompt indicates an expected call of FormatPrompt.
func (mr *MockIPromptFormatterMockRecorder) FormatPrompt(ctx, prompt, messages, variableVals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatPrompt", reflect.TypeOf((*MockIPromptFormatter)(nil).FormatPrompt), ctx, prompt, messages, variableVals)
}

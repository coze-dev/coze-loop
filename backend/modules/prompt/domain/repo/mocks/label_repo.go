// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/domain/repo (interfaces: ILabelRepo)
//
// Generated by this command:
//
//	mockgen -destination=mocks/label_repo.go -package=mocks . ILabelRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/entity"
	repo "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/repo"
	gomock "go.uber.org/mock/gomock"
)

// MockILabelRepo is a mock of ILabelRepo interface.
type MockILabelRepo struct {
	ctrl     *gomock.Controller
	recorder *MockILabelRepoMockRecorder
	isgomock struct{}
}

// MockILabelRepoMockRecorder is the mock recorder for MockILabelRepo.
type MockILabelRepoMockRecorder struct {
	mock *MockILabelRepo
}

// NewMockILabelRepo creates a new mock instance.
func NewMockILabelRepo(ctrl *gomock.Controller) *MockILabelRepo {
	mock := &MockILabelRepo{ctrl: ctrl}
	mock.recorder = &MockILabelRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILabelRepo) EXPECT() *MockILabelRepoMockRecorder {
	return m.recorder
}

// BatchGetLabel mocks base method.
func (m *MockILabelRepo) BatchGetLabel(ctx context.Context, spaceID int64, labelKeys []string) ([]*entity.PromptLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetLabel", ctx, spaceID, labelKeys)
	ret0, _ := ret[0].([]*entity.PromptLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetLabel indicates an expected call of BatchGetLabel.
func (mr *MockILabelRepoMockRecorder) BatchGetLabel(ctx, spaceID, labelKeys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetLabel", reflect.TypeOf((*MockILabelRepo)(nil).BatchGetLabel), ctx, spaceID, labelKeys)
}

// BatchGetPromptVersionByLabel mocks base method.
func (m *MockILabelRepo) BatchGetPromptVersionByLabel(ctx context.Context, queries []repo.PromptLabelQuery, opts ...repo.GetLabelMappingOptionFunc) (map[repo.PromptLabelQuery]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, queries}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetPromptVersionByLabel", varargs...)
	ret0, _ := ret[0].(map[repo.PromptLabelQuery]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetPromptVersionByLabel indicates an expected call of BatchGetPromptVersionByLabel.
func (mr *MockILabelRepoMockRecorder) BatchGetPromptVersionByLabel(ctx, queries any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, queries}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetPromptVersionByLabel", reflect.TypeOf((*MockILabelRepo)(nil).BatchGetPromptVersionByLabel), varargs...)
}

// CreateLabel mocks base method.
func (m *MockILabelRepo) CreateLabel(ctx context.Context, labelDO *entity.PromptLabel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLabel", ctx, labelDO)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLabel indicates an expected call of CreateLabel.
func (mr *MockILabelRepoMockRecorder) CreateLabel(ctx, labelDO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLabel", reflect.TypeOf((*MockILabelRepo)(nil).CreateLabel), ctx, labelDO)
}

// GetCommitLabels mocks base method.
func (m *MockILabelRepo) GetCommitLabels(ctx context.Context, promptID int64, commitVersions []string) (map[string][]*entity.PromptLabel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitLabels", ctx, promptID, commitVersions)
	ret0, _ := ret[0].(map[string][]*entity.PromptLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitLabels indicates an expected call of GetCommitLabels.
func (mr *MockILabelRepoMockRecorder) GetCommitLabels(ctx, promptID, commitVersions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitLabels", reflect.TypeOf((*MockILabelRepo)(nil).GetCommitLabels), ctx, promptID, commitVersions)
}

// ListLabel mocks base method.
func (m *MockILabelRepo) ListLabel(ctx context.Context, param repo.ListLabelParam) ([]*entity.PromptLabel, *int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabel", ctx, param)
	ret0, _ := ret[0].([]*entity.PromptLabel)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListLabel indicates an expected call of ListLabel.
func (mr *MockILabelRepoMockRecorder) ListLabel(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabel", reflect.TypeOf((*MockILabelRepo)(nil).ListLabel), ctx, param)
}

// UpdateCommitLabels mocks base method.
func (m *MockILabelRepo) UpdateCommitLabels(ctx context.Context, param repo.UpdateCommitLabelsParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCommitLabels", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCommitLabels indicates an expected call of UpdateCommitLabels.
func (mr *MockILabelRepoMockRecorder) UpdateCommitLabels(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCommitLabels", reflect.TypeOf((*MockILabelRepo)(nil).UpdateCommitLabels), ctx, param)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/domain/component/rpc (interfaces: IAuditProvider)
//
// Generated by this command:
//
//	mockgen -destination=mocks/audit_provider.go -package=mocks . IAuditProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIAuditProvider is a mock of IAuditProvider interface.
type MockIAuditProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIAuditProviderMockRecorder
	isgomock struct{}
}

// MockIAuditProviderMockRecorder is the mock recorder for MockIAuditProvider.
type MockIAuditProviderMockRecorder struct {
	mock *MockIAuditProvider
}

// NewMockIAuditProvider creates a new mock instance.
func NewMockIAuditProvider(ctrl *gomock.Controller) *MockIAuditProvider {
	mock := &MockIAuditProvider{ctrl: ctrl}
	mock.recorder = &MockIAuditProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuditProvider) EXPECT() *MockIAuditProviderMockRecorder {
	return m.recorder
}

// AuditPrompt mocks base method.
func (m *MockIAuditProvider) AuditPrompt(ctx context.Context, promptDO *entity.Prompt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuditPrompt", ctx, promptDO)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuditPrompt indicates an expected call of AuditPrompt.
func (mr *MockIAuditProviderMockRecorder) AuditPrompt(ctx, promptDO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuditPrompt", reflect.TypeOf((*MockIAuditProvider)(nil).AuditPrompt), ctx, promptDO)
}

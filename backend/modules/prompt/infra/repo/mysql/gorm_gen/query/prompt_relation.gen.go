// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql/gorm_gen/model"
)

func newPromptRelation(db *gorm.DB, opts ...gen.DOOption) promptRelation {
	_promptRelation := promptRelation{}

	_promptRelation.promptRelationDo.UseDB(db, opts...)
	_promptRelation.promptRelationDo.UseModel(&model.PromptRelation{})

	tableName := _promptRelation.promptRelationDo.TableName()
	_promptRelation.ALL = field.NewAsterisk(tableName)
	_promptRelation.ID = field.NewInt64(tableName, "id")
	_promptRelation.SpaceID = field.NewInt64(tableName, "space_id")
	_promptRelation.MainPromptID = field.NewInt64(tableName, "main_prompt_id")
	_promptRelation.MainPromptVersion = field.NewString(tableName, "main_prompt_version")
	_promptRelation.MainDraftUserID = field.NewString(tableName, "main_draft_user_id")
	_promptRelation.SubPromptID = field.NewInt64(tableName, "sub_prompt_id")
	_promptRelation.SubPromptVersion = field.NewString(tableName, "sub_prompt_version")
	_promptRelation.CreateTime = field.NewTime(tableName, "create_time")
	_promptRelation.UpdateTime = field.NewTime(tableName, "update_time")

	_promptRelation.fillFieldMap()

	return _promptRelation
}

// promptRelation Prompt关联表
type promptRelation struct {
	promptRelationDo promptRelationDo

	ALL               field.Asterisk
	ID                field.Int64  // 主键ID
	SpaceID           field.Int64  // 空间ID
	MainPromptID      field.Int64  // 主Prompt ID
	MainPromptVersion field.String // 主Prompt版本
	MainDraftUserID   field.String // 主Prompt草稿Owner
	SubPromptID       field.Int64  // 子Prompt ID
	SubPromptVersion  field.String // 子Prompt版本
	CreateTime        field.Time   // 创建时间
	UpdateTime        field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (p promptRelation) Table(newTableName string) *promptRelation {
	p.promptRelationDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promptRelation) As(alias string) *promptRelation {
	p.promptRelationDo.DO = *(p.promptRelationDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promptRelation) updateTableName(table string) *promptRelation {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.SpaceID = field.NewInt64(table, "space_id")
	p.MainPromptID = field.NewInt64(table, "main_prompt_id")
	p.MainPromptVersion = field.NewString(table, "main_prompt_version")
	p.MainDraftUserID = field.NewString(table, "main_draft_user_id")
	p.SubPromptID = field.NewInt64(table, "sub_prompt_id")
	p.SubPromptVersion = field.NewString(table, "sub_prompt_version")
	p.CreateTime = field.NewTime(table, "create_time")
	p.UpdateTime = field.NewTime(table, "update_time")

	p.fillFieldMap()

	return p
}

func (p *promptRelation) WithContext(ctx context.Context) *promptRelationDo {
	return p.promptRelationDo.WithContext(ctx)
}

func (p promptRelation) TableName() string { return p.promptRelationDo.TableName() }

func (p promptRelation) Alias() string { return p.promptRelationDo.Alias() }

func (p promptRelation) Columns(cols ...field.Expr) gen.Columns {
	return p.promptRelationDo.Columns(cols...)
}

func (p *promptRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promptRelation) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["space_id"] = p.SpaceID
	p.fieldMap["main_prompt_id"] = p.MainPromptID
	p.fieldMap["main_prompt_version"] = p.MainPromptVersion
	p.fieldMap["main_draft_user_id"] = p.MainDraftUserID
	p.fieldMap["sub_prompt_id"] = p.SubPromptID
	p.fieldMap["sub_prompt_version"] = p.SubPromptVersion
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["update_time"] = p.UpdateTime
}

func (p promptRelation) clone(db *gorm.DB) promptRelation {
	p.promptRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promptRelation) replaceDB(db *gorm.DB) promptRelation {
	p.promptRelationDo.ReplaceDB(db)
	return p
}

type promptRelationDo struct{ gen.DO }

func (p promptRelationDo) Debug() *promptRelationDo {
	return p.withDO(p.DO.Debug())
}

func (p promptRelationDo) WithContext(ctx context.Context) *promptRelationDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promptRelationDo) ReadDB() *promptRelationDo {
	return p.Clauses(dbresolver.Read)
}

func (p promptRelationDo) WriteDB() *promptRelationDo {
	return p.Clauses(dbresolver.Write)
}

func (p promptRelationDo) Session(config *gorm.Session) *promptRelationDo {
	return p.withDO(p.DO.Session(config))
}

func (p promptRelationDo) Clauses(conds ...clause.Expression) *promptRelationDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promptRelationDo) Returning(value interface{}, columns ...string) *promptRelationDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promptRelationDo) Not(conds ...gen.Condition) *promptRelationDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promptRelationDo) Or(conds ...gen.Condition) *promptRelationDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promptRelationDo) Select(conds ...field.Expr) *promptRelationDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promptRelationDo) Where(conds ...gen.Condition) *promptRelationDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promptRelationDo) Order(conds ...field.Expr) *promptRelationDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promptRelationDo) Distinct(cols ...field.Expr) *promptRelationDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promptRelationDo) Omit(cols ...field.Expr) *promptRelationDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promptRelationDo) Join(table schema.Tabler, on ...field.Expr) *promptRelationDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promptRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *promptRelationDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promptRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) *promptRelationDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promptRelationDo) Group(cols ...field.Expr) *promptRelationDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promptRelationDo) Having(conds ...gen.Condition) *promptRelationDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promptRelationDo) Limit(limit int) *promptRelationDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promptRelationDo) Offset(offset int) *promptRelationDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promptRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *promptRelationDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promptRelationDo) Unscoped() *promptRelationDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promptRelationDo) Create(values ...*model.PromptRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promptRelationDo) CreateInBatches(values []*model.PromptRelation, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promptRelationDo) Save(values ...*model.PromptRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promptRelationDo) First() (*model.PromptRelation, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptRelation), nil
	}
}

func (p promptRelationDo) Take() (*model.PromptRelation, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptRelation), nil
	}
}

func (p promptRelationDo) Last() (*model.PromptRelation, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptRelation), nil
	}
}

func (p promptRelationDo) Find() ([]*model.PromptRelation, error) {
	result, err := p.DO.Find()
	return result.([]*model.PromptRelation), err
}

func (p promptRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromptRelation, err error) {
	buf := make([]*model.PromptRelation, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promptRelationDo) FindInBatches(result *[]*model.PromptRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promptRelationDo) Attrs(attrs ...field.AssignExpr) *promptRelationDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promptRelationDo) Assign(attrs ...field.AssignExpr) *promptRelationDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promptRelationDo) Joins(fields ...field.RelationField) *promptRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promptRelationDo) Preload(fields ...field.RelationField) *promptRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promptRelationDo) FirstOrInit() (*model.PromptRelation, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptRelation), nil
	}
}

func (p promptRelationDo) FirstOrCreate() (*model.PromptRelation, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptRelation), nil
	}
}

func (p promptRelationDo) FindByPage(offset int, limit int) (result []*model.PromptRelation, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promptRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promptRelationDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promptRelationDo) Delete(models ...*model.PromptRelation) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promptRelationDo) withDO(do gen.Dao) *promptRelationDo {
	p.DO = *do.(*gen.DO)
	return p
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql/gorm_gen/model"
)

func newPromptLabel(db *gorm.DB, opts ...gen.DOOption) promptLabel {
	_promptLabel := promptLabel{}

	_promptLabel.promptLabelDo.UseDB(db, opts...)
	_promptLabel.promptLabelDo.UseModel(&model.PromptLabel{})

	tableName := _promptLabel.promptLabelDo.TableName()
	_promptLabel.ALL = field.NewAsterisk(tableName)
	_promptLabel.ID = field.NewInt64(tableName, "id")
	_promptLabel.SpaceID = field.NewInt64(tableName, "space_id")
	_promptLabel.LabelKey = field.NewString(tableName, "label_key")
	_promptLabel.CreatedBy = field.NewString(tableName, "created_by")
	_promptLabel.CreatedAt = field.NewTime(tableName, "created_at")
	_promptLabel.UpdatedBy = field.NewString(tableName, "updated_by")
	_promptLabel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_promptLabel.DeletedAt = field.NewField(tableName, "deleted_at")

	_promptLabel.fillFieldMap()

	return _promptLabel
}

// promptLabel Prompt Label表
type promptLabel struct {
	promptLabelDo promptLabelDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键ID
	SpaceID   field.Int64  // 空间ID
	LabelKey  field.String // Label唯一标识
	CreatedBy field.String // 创建人
	CreatedAt field.Time   // 创建时间
	UpdatedBy field.String // 更新人
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (p promptLabel) Table(newTableName string) *promptLabel {
	p.promptLabelDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promptLabel) As(alias string) *promptLabel {
	p.promptLabelDo.DO = *(p.promptLabelDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promptLabel) updateTableName(table string) *promptLabel {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.SpaceID = field.NewInt64(table, "space_id")
	p.LabelKey = field.NewString(table, "label_key")
	p.CreatedBy = field.NewString(table, "created_by")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedBy = field.NewString(table, "updated_by")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *promptLabel) WithContext(ctx context.Context) *promptLabelDo {
	return p.promptLabelDo.WithContext(ctx)
}

func (p promptLabel) TableName() string { return p.promptLabelDo.TableName() }

func (p promptLabel) Alias() string { return p.promptLabelDo.Alias() }

func (p promptLabel) Columns(cols ...field.Expr) gen.Columns { return p.promptLabelDo.Columns(cols...) }

func (p *promptLabel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promptLabel) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["space_id"] = p.SpaceID
	p.fieldMap["label_key"] = p.LabelKey
	p.fieldMap["created_by"] = p.CreatedBy
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_by"] = p.UpdatedBy
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p promptLabel) clone(db *gorm.DB) promptLabel {
	p.promptLabelDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promptLabel) replaceDB(db *gorm.DB) promptLabel {
	p.promptLabelDo.ReplaceDB(db)
	return p
}

type promptLabelDo struct{ gen.DO }

func (p promptLabelDo) Debug() *promptLabelDo {
	return p.withDO(p.DO.Debug())
}

func (p promptLabelDo) WithContext(ctx context.Context) *promptLabelDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promptLabelDo) ReadDB() *promptLabelDo {
	return p.Clauses(dbresolver.Read)
}

func (p promptLabelDo) WriteDB() *promptLabelDo {
	return p.Clauses(dbresolver.Write)
}

func (p promptLabelDo) Session(config *gorm.Session) *promptLabelDo {
	return p.withDO(p.DO.Session(config))
}

func (p promptLabelDo) Clauses(conds ...clause.Expression) *promptLabelDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promptLabelDo) Returning(value interface{}, columns ...string) *promptLabelDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promptLabelDo) Not(conds ...gen.Condition) *promptLabelDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promptLabelDo) Or(conds ...gen.Condition) *promptLabelDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promptLabelDo) Select(conds ...field.Expr) *promptLabelDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promptLabelDo) Where(conds ...gen.Condition) *promptLabelDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promptLabelDo) Order(conds ...field.Expr) *promptLabelDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promptLabelDo) Distinct(cols ...field.Expr) *promptLabelDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promptLabelDo) Omit(cols ...field.Expr) *promptLabelDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promptLabelDo) Join(table schema.Tabler, on ...field.Expr) *promptLabelDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promptLabelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *promptLabelDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promptLabelDo) RightJoin(table schema.Tabler, on ...field.Expr) *promptLabelDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promptLabelDo) Group(cols ...field.Expr) *promptLabelDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promptLabelDo) Having(conds ...gen.Condition) *promptLabelDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promptLabelDo) Limit(limit int) *promptLabelDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promptLabelDo) Offset(offset int) *promptLabelDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promptLabelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *promptLabelDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promptLabelDo) Unscoped() *promptLabelDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promptLabelDo) Create(values ...*model.PromptLabel) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promptLabelDo) CreateInBatches(values []*model.PromptLabel, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promptLabelDo) Save(values ...*model.PromptLabel) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promptLabelDo) First() (*model.PromptLabel, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptLabel), nil
	}
}

func (p promptLabelDo) Take() (*model.PromptLabel, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptLabel), nil
	}
}

func (p promptLabelDo) Last() (*model.PromptLabel, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptLabel), nil
	}
}

func (p promptLabelDo) Find() ([]*model.PromptLabel, error) {
	result, err := p.DO.Find()
	return result.([]*model.PromptLabel), err
}

func (p promptLabelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromptLabel, err error) {
	buf := make([]*model.PromptLabel, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promptLabelDo) FindInBatches(result *[]*model.PromptLabel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promptLabelDo) Attrs(attrs ...field.AssignExpr) *promptLabelDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promptLabelDo) Assign(attrs ...field.AssignExpr) *promptLabelDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promptLabelDo) Joins(fields ...field.RelationField) *promptLabelDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promptLabelDo) Preload(fields ...field.RelationField) *promptLabelDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promptLabelDo) FirstOrInit() (*model.PromptLabel, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptLabel), nil
	}
}

func (p promptLabelDo) FirstOrCreate() (*model.PromptLabel, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptLabel), nil
	}
}

func (p promptLabelDo) FindByPage(offset int, limit int) (result []*model.PromptLabel, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promptLabelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promptLabelDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promptLabelDo) Delete(models ...*model.PromptLabel) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promptLabelDo) withDO(do gen.Dao) *promptLabelDo {
	p.DO = *do.(*gen.DO)
	return p
}

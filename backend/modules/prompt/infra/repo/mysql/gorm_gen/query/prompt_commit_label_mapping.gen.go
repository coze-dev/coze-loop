// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql/gorm_gen/model"
)

func newPromptCommitLabelMapping(db *gorm.DB, opts ...gen.DOOption) promptCommitLabelMapping {
	_promptCommitLabelMapping := promptCommitLabelMapping{}

	_promptCommitLabelMapping.promptCommitLabelMappingDo.UseDB(db, opts...)
	_promptCommitLabelMapping.promptCommitLabelMappingDo.UseModel(&model.PromptCommitLabelMapping{})

	tableName := _promptCommitLabelMapping.promptCommitLabelMappingDo.TableName()
	_promptCommitLabelMapping.ALL = field.NewAsterisk(tableName)
	_promptCommitLabelMapping.ID = field.NewInt64(tableName, "id")
	_promptCommitLabelMapping.SpaceID = field.NewInt64(tableName, "space_id")
	_promptCommitLabelMapping.PromptID = field.NewInt64(tableName, "prompt_id")
	_promptCommitLabelMapping.LabelKey = field.NewString(tableName, "label_key")
	_promptCommitLabelMapping.PromptVersion = field.NewString(tableName, "prompt_version")
	_promptCommitLabelMapping.CreatedBy = field.NewString(tableName, "created_by")
	_promptCommitLabelMapping.CreatedAt = field.NewTime(tableName, "created_at")
	_promptCommitLabelMapping.UpdatedBy = field.NewString(tableName, "updated_by")
	_promptCommitLabelMapping.UpdatedAt = field.NewTime(tableName, "updated_at")
	_promptCommitLabelMapping.DeletedAt = field.NewField(tableName, "deleted_at")

	_promptCommitLabelMapping.fillFieldMap()

	return _promptCommitLabelMapping
}

// promptCommitLabelMapping Prompt提交版本和Label关联表
type promptCommitLabelMapping struct {
	promptCommitLabelMappingDo promptCommitLabelMappingDo

	ALL           field.Asterisk
	ID            field.Int64  // 主键ID
	SpaceID       field.Int64  // 空间ID
	PromptID      field.Int64  // Prompt ID
	LabelKey      field.String // Label唯一标识
	PromptVersion field.String // Prompt版本
	CreatedBy     field.String // 创建人
	CreatedAt     field.Time   // 创建时间
	UpdatedBy     field.String // 更新人
	UpdatedAt     field.Time   // 更新时间
	DeletedAt     field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (p promptCommitLabelMapping) Table(newTableName string) *promptCommitLabelMapping {
	p.promptCommitLabelMappingDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promptCommitLabelMapping) As(alias string) *promptCommitLabelMapping {
	p.promptCommitLabelMappingDo.DO = *(p.promptCommitLabelMappingDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promptCommitLabelMapping) updateTableName(table string) *promptCommitLabelMapping {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.SpaceID = field.NewInt64(table, "space_id")
	p.PromptID = field.NewInt64(table, "prompt_id")
	p.LabelKey = field.NewString(table, "label_key")
	p.PromptVersion = field.NewString(table, "prompt_version")
	p.CreatedBy = field.NewString(table, "created_by")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedBy = field.NewString(table, "updated_by")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *promptCommitLabelMapping) WithContext(ctx context.Context) *promptCommitLabelMappingDo {
	return p.promptCommitLabelMappingDo.WithContext(ctx)
}

func (p promptCommitLabelMapping) TableName() string { return p.promptCommitLabelMappingDo.TableName() }

func (p promptCommitLabelMapping) Alias() string { return p.promptCommitLabelMappingDo.Alias() }

func (p promptCommitLabelMapping) Columns(cols ...field.Expr) gen.Columns {
	return p.promptCommitLabelMappingDo.Columns(cols...)
}

func (p *promptCommitLabelMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promptCommitLabelMapping) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["id"] = p.ID
	p.fieldMap["space_id"] = p.SpaceID
	p.fieldMap["prompt_id"] = p.PromptID
	p.fieldMap["label_key"] = p.LabelKey
	p.fieldMap["prompt_version"] = p.PromptVersion
	p.fieldMap["created_by"] = p.CreatedBy
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_by"] = p.UpdatedBy
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p promptCommitLabelMapping) clone(db *gorm.DB) promptCommitLabelMapping {
	p.promptCommitLabelMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promptCommitLabelMapping) replaceDB(db *gorm.DB) promptCommitLabelMapping {
	p.promptCommitLabelMappingDo.ReplaceDB(db)
	return p
}

type promptCommitLabelMappingDo struct{ gen.DO }

func (p promptCommitLabelMappingDo) Debug() *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Debug())
}

func (p promptCommitLabelMappingDo) WithContext(ctx context.Context) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promptCommitLabelMappingDo) ReadDB() *promptCommitLabelMappingDo {
	return p.Clauses(dbresolver.Read)
}

func (p promptCommitLabelMappingDo) WriteDB() *promptCommitLabelMappingDo {
	return p.Clauses(dbresolver.Write)
}

func (p promptCommitLabelMappingDo) Session(config *gorm.Session) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Session(config))
}

func (p promptCommitLabelMappingDo) Clauses(conds ...clause.Expression) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promptCommitLabelMappingDo) Returning(value interface{}, columns ...string) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promptCommitLabelMappingDo) Not(conds ...gen.Condition) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promptCommitLabelMappingDo) Or(conds ...gen.Condition) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promptCommitLabelMappingDo) Select(conds ...field.Expr) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promptCommitLabelMappingDo) Where(conds ...gen.Condition) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promptCommitLabelMappingDo) Order(conds ...field.Expr) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promptCommitLabelMappingDo) Distinct(cols ...field.Expr) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promptCommitLabelMappingDo) Omit(cols ...field.Expr) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promptCommitLabelMappingDo) Join(table schema.Tabler, on ...field.Expr) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promptCommitLabelMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promptCommitLabelMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promptCommitLabelMappingDo) Group(cols ...field.Expr) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promptCommitLabelMappingDo) Having(conds ...gen.Condition) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promptCommitLabelMappingDo) Limit(limit int) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promptCommitLabelMappingDo) Offset(offset int) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promptCommitLabelMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promptCommitLabelMappingDo) Unscoped() *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promptCommitLabelMappingDo) Create(values ...*model.PromptCommitLabelMapping) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promptCommitLabelMappingDo) CreateInBatches(values []*model.PromptCommitLabelMapping, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promptCommitLabelMappingDo) Save(values ...*model.PromptCommitLabelMapping) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promptCommitLabelMappingDo) First() (*model.PromptCommitLabelMapping, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptCommitLabelMapping), nil
	}
}

func (p promptCommitLabelMappingDo) Take() (*model.PromptCommitLabelMapping, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptCommitLabelMapping), nil
	}
}

func (p promptCommitLabelMappingDo) Last() (*model.PromptCommitLabelMapping, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptCommitLabelMapping), nil
	}
}

func (p promptCommitLabelMappingDo) Find() ([]*model.PromptCommitLabelMapping, error) {
	result, err := p.DO.Find()
	return result.([]*model.PromptCommitLabelMapping), err
}

func (p promptCommitLabelMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PromptCommitLabelMapping, err error) {
	buf := make([]*model.PromptCommitLabelMapping, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promptCommitLabelMappingDo) FindInBatches(result *[]*model.PromptCommitLabelMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promptCommitLabelMappingDo) Attrs(attrs ...field.AssignExpr) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promptCommitLabelMappingDo) Assign(attrs ...field.AssignExpr) *promptCommitLabelMappingDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promptCommitLabelMappingDo) Joins(fields ...field.RelationField) *promptCommitLabelMappingDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promptCommitLabelMappingDo) Preload(fields ...field.RelationField) *promptCommitLabelMappingDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promptCommitLabelMappingDo) FirstOrInit() (*model.PromptCommitLabelMapping, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptCommitLabelMapping), nil
	}
}

func (p promptCommitLabelMappingDo) FirstOrCreate() (*model.PromptCommitLabelMapping, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PromptCommitLabelMapping), nil
	}
}

func (p promptCommitLabelMappingDo) FindByPage(offset int, limit int) (result []*model.PromptCommitLabelMapping, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promptCommitLabelMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promptCommitLabelMappingDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promptCommitLabelMappingDo) Delete(models ...*model.PromptCommitLabelMapping) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promptCommitLabelMappingDo) withDO(do gen.Dao) *promptCommitLabelMappingDo {
	p.DO = *do.(*gen.DO)
	return p
}

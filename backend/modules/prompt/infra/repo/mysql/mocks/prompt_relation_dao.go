// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql (interfaces: IPromptRelationDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/prompt_relation_dao.go -package=mocks . IPromptRelationDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	mysql "github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql"
	model "github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIPromptRelationDAO is a mock of IPromptRelationDAO interface.
type MockIPromptRelationDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIPromptRelationDAOMockRecorder
	isgomock struct{}
}

// MockIPromptRelationDAOMockRecorder is the mock recorder for MockIPromptRelationDAO.
type MockIPromptRelationDAOMockRecorder struct {
	mock *MockIPromptRelationDAO
}

// NewMockIPromptRelationDAO creates a new mock instance.
func NewMockIPromptRelationDAO(ctrl *gomock.Controller) *MockIPromptRelationDAO {
	mock := &MockIPromptRelationDAO{ctrl: ctrl}
	mock.recorder = &MockIPromptRelationDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPromptRelationDAO) EXPECT() *MockIPromptRelationDAOMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m *MockIPromptRelationDAO) BatchCreate(ctx context.Context, relationPOs []*model.PromptRelation, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, relationPOs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockIPromptRelationDAOMockRecorder) BatchCreate(ctx, relationPOs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, relationPOs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockIPromptRelationDAO)(nil).BatchCreate), varargs...)
}

// BatchDeleteByIDs mocks base method.
func (m *MockIPromptRelationDAO) BatchDeleteByIDs(ctx context.Context, relationIDs []int64, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, relationIDs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteByIDs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDeleteByIDs indicates an expected call of BatchDeleteByIDs.
func (mr *MockIPromptRelationDAOMockRecorder) BatchDeleteByIDs(ctx, relationIDs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, relationIDs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteByIDs", reflect.TypeOf((*MockIPromptRelationDAO)(nil).BatchDeleteByIDs), varargs...)
}

// Create mocks base method.
func (m *MockIPromptRelationDAO) Create(ctx context.Context, relationPO *model.PromptRelation, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, relationPO}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIPromptRelationDAOMockRecorder) Create(ctx, relationPO any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, relationPO}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPromptRelationDAO)(nil).Create), varargs...)
}

// DeleteByMainPrompt mocks base method.
func (m *MockIPromptRelationDAO) DeleteByMainPrompt(ctx context.Context, mainPromptID int64, mainPromptVersion, mainDraftUserID string, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, mainPromptID, mainPromptVersion, mainDraftUserID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByMainPrompt", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByMainPrompt indicates an expected call of DeleteByMainPrompt.
func (mr *MockIPromptRelationDAOMockRecorder) DeleteByMainPrompt(ctx, mainPromptID, mainPromptVersion, mainDraftUserID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, mainPromptID, mainPromptVersion, mainDraftUserID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByMainPrompt", reflect.TypeOf((*MockIPromptRelationDAO)(nil).DeleteByMainPrompt), varargs...)
}

// List mocks base method.
func (m *MockIPromptRelationDAO) List(ctx context.Context, param mysql.ListPromptRelationParam, opts ...db.Option) ([]*model.PromptRelation, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, param}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*model.PromptRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIPromptRelationDAOMockRecorder) List(ctx, param any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, param}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIPromptRelationDAO)(nil).List), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql (interfaces: ILabelDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/label_dao.go -package=mocks . ILabelDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	mysql "github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql"
	model "github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockILabelDAO is a mock of ILabelDAO interface.
type MockILabelDAO struct {
	ctrl     *gomock.Controller
	recorder *MockILabelDAOMockRecorder
	isgomock struct{}
}

// MockILabelDAOMockRecorder is the mock recorder for MockILabelDAO.
type MockILabelDAOMockRecorder struct {
	mock *MockILabelDAO
}

// NewMockILabelDAO creates a new mock instance.
func NewMockILabelDAO(ctrl *gomock.Controller) *MockILabelDAO {
	mock := &MockILabelDAO{ctrl: ctrl}
	mock.recorder = &MockILabelDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILabelDAO) EXPECT() *MockILabelDAOMockRecorder {
	return m.recorder
}

// BatchGet mocks base method.
func (m *MockILabelDAO) BatchGet(ctx context.Context, spaceID int64, labelKeys []string, opts ...db.Option) ([]*model.PromptLabel, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, labelKeys}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGet", varargs...)
	ret0, _ := ret[0].([]*model.PromptLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockILabelDAOMockRecorder) BatchGet(ctx, spaceID, labelKeys any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, labelKeys}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockILabelDAO)(nil).BatchGet), varargs...)
}

// Create mocks base method.
func (m *MockILabelDAO) Create(ctx context.Context, labelPO *model.PromptLabel, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, labelPO}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockILabelDAOMockRecorder) Create(ctx, labelPO any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, labelPO}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockILabelDAO)(nil).Create), varargs...)
}

// List mocks base method.
func (m *MockILabelDAO) List(ctx context.Context, param mysql.ListLabelDAOParam, opts ...db.Option) ([]*model.PromptLabel, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, param}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*model.PromptLabel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockILabelDAOMockRecorder) List(ctx, param any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, param}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockILabelDAO)(nil).List), varargs...)
}

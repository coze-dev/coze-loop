// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/redis (interfaces: IPromptLabelVersionDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/prompt_label_version_dao.go -package=mocks . IPromptLabelVersionDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	redis "github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/redis"
	gomock "go.uber.org/mock/gomock"
)

// MockIPromptLabelVersionDAO is a mock of IPromptLabelVersionDAO interface.
type MockIPromptLabelVersionDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIPromptLabelVersionDAOMockRecorder
	isgomock struct{}
}

// MockIPromptLabelVersionDAOMockRecorder is the mock recorder for MockIPromptLabelVersionDAO.
type MockIPromptLabelVersionDAOMockRecorder struct {
	mock *MockIPromptLabelVersionDAO
}

// NewMockIPromptLabelVersionDAO creates a new mock instance.
func NewMockIPromptLabelVersionDAO(ctrl *gomock.Controller) *MockIPromptLabelVersionDAO {
	mock := &MockIPromptLabelVersionDAO{ctrl: ctrl}
	mock.recorder = &MockIPromptLabelVersionDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPromptLabelVersionDAO) EXPECT() *MockIPromptLabelVersionDAOMockRecorder {
	return m.recorder
}

// MDel mocks base method.
func (m *MockIPromptLabelVersionDAO) MDel(ctx context.Context, queries []redis.PromptLabelVersionQuery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MDel", ctx, queries)
	ret0, _ := ret[0].(error)
	return ret0
}

// MDel indicates an expected call of MDel.
func (mr *MockIPromptLabelVersionDAOMockRecorder) MDel(ctx, queries any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDel", reflect.TypeOf((*MockIPromptLabelVersionDAO)(nil).MDel), ctx, queries)
}

// MGet mocks base method.
func (m *MockIPromptLabelVersionDAO) MGet(ctx context.Context, queries []redis.PromptLabelVersionQuery) (map[redis.PromptLabelVersionQuery]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGet", ctx, queries)
	ret0, _ := ret[0].(map[redis.PromptLabelVersionQuery]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet.
func (mr *MockIPromptLabelVersionDAOMockRecorder) MGet(ctx, queries any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockIPromptLabelVersionDAO)(nil).MGet), ctx, queries)
}

// MSet mocks base method.
func (m *MockIPromptLabelVersionDAO) MSet(ctx context.Context, mappings []redis.PromptLabelVersionMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MSet", ctx, mappings)
	ret0, _ := ret[0].(error)
	return ret0
}

// MSet indicates an expected call of MSet.
func (mr *MockIPromptLabelVersionDAOMockRecorder) MSet(ctx, mappings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MSet", reflect.TypeOf((*MockIPromptLabelVersionDAO)(nil).MSet), ctx, mappings)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: backend/kitex_gen/coze/loop/foundation/file/fileservice/client.go
//
// Generated by this command:
//
//	mockgen -source=backend/kitex_gen/coze/loop/foundation/file/fileservice/client.go -destination=backend/modules/prompt/infra/rpc/mocks/fileservice_mock.go -package=mocks -mock_names Client=FileServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	callopt "github.com/cloudwego/kitex/client/callopt"
	file "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/file"
	gomock "go.uber.org/mock/gomock"
)

// FileServiceClient is a mock of Client interface.
type FileServiceClient struct {
	ctrl     *gomock.Controller
	recorder *FileServiceClientMockRecorder
	isgomock struct{}
}

// FileServiceClientMockRecorder is the mock recorder for FileServiceClient.
type FileServiceClientMockRecorder struct {
	mock *FileServiceClient
}

// NewFileServiceClient creates a new mock instance.
func NewFileServiceClient(ctrl *gomock.Controller) *FileServiceClient {
	mock := &FileServiceClient{ctrl: ctrl}
	mock.recorder = &FileServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FileServiceClient) EXPECT() *FileServiceClientMockRecorder {
	return m.recorder
}

// SignDownloadFile mocks base method.
func (m *FileServiceClient) SignDownloadFile(ctx context.Context, req *file.SignDownloadFileRequest, callOptions ...callopt.Option) (*file.SignDownloadFileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignDownloadFile", varargs...)
	ret0, _ := ret[0].(*file.SignDownloadFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignDownloadFile indicates an expected call of SignDownloadFile.
func (mr *FileServiceClientMockRecorder) SignDownloadFile(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignDownloadFile", reflect.TypeOf((*FileServiceClient)(nil).SignDownloadFile), varargs...)
}

// SignUploadFile mocks base method.
func (m *FileServiceClient) SignUploadFile(ctx context.Context, req *file.SignUploadFileRequest, callOptions ...callopt.Option) (*file.SignUploadFileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignUploadFile", varargs...)
	ret0, _ := ret[0].(*file.SignUploadFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUploadFile indicates an expected call of SignUploadFile.
func (mr *FileServiceClientMockRecorder) SignUploadFile(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUploadFile", reflect.TypeOf((*FileServiceClient)(nil).SignUploadFile), varargs...)
}

// UploadFileForServer mocks base method.
func (m *FileServiceClient) UploadFileForServer(ctx context.Context, req *file.UploadFileForServerRequest, callOptions ...callopt.Option) (*file.UploadFileForServerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadFileForServer", varargs...)
	ret0, _ := ret[0].(*file.UploadFileForServerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFileForServer indicates an expected call of UploadFileForServer.
func (mr *FileServiceClientMockRecorder) UploadFileForServer(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFileForServer", reflect.TypeOf((*FileServiceClient)(nil).UploadFileForServer), varargs...)
}

// UploadLoopFileInner mocks base method.
func (m *FileServiceClient) UploadLoopFileInner(ctx context.Context, req *file.UploadLoopFileInnerRequest, callOptions ...callopt.Option) (*file.UploadLoopFileInnerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadLoopFileInner", varargs...)
	ret0, _ := ret[0].(*file.UploadLoopFileInnerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadLoopFileInner indicates an expected call of UploadLoopFileInner.
func (mr *FileServiceClientMockRecorder) UploadLoopFileInner(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadLoopFileInner", reflect.TypeOf((*FileServiceClient)(nil).UploadLoopFileInner), varargs...)
}

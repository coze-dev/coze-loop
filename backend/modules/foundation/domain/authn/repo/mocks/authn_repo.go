// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/foundation/domain/authn/repo (interfaces: IAuthNRepo)
//
// Generated by this command:
//
//	mockgen -destination=mocks/authn_repo.go -package=mocks . IAuthNRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/foundation/domain/authn/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIAuthNRepo is a mock of IAuthNRepo interface.
type MockIAuthNRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthNRepoMockRecorder
	isgomock struct{}
}

// MockIAuthNRepoMockRecorder is the mock recorder for MockIAuthNRepo.
type MockIAuthNRepoMockRecorder struct {
	mock *MockIAuthNRepo
}

// NewMockIAuthNRepo creates a new mock instance.
func NewMockIAuthNRepo(ctrl *gomock.Controller) *MockIAuthNRepo {
	mock := &MockIAuthNRepo{ctrl: ctrl}
	mock.recorder = &MockIAuthNRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthNRepo) EXPECT() *MockIAuthNRepoMockRecorder {
	return m.recorder
}

// CreateAPIKey mocks base method.
func (m *MockIAuthNRepo) CreateAPIKey(ctx context.Context, apiKeyEntity *entity.APIKey) (int64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPIKey", ctx, apiKeyEntity)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateAPIKey indicates an expected call of CreateAPIKey.
func (mr *MockIAuthNRepoMockRecorder) CreateAPIKey(ctx, apiKeyEntity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPIKey", reflect.TypeOf((*MockIAuthNRepo)(nil).CreateAPIKey), ctx, apiKeyEntity)
}

// DeleteAPIKey mocks base method.
func (m *MockIAuthNRepo) DeleteAPIKey(ctx context.Context, apiKeyID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPIKey", ctx, apiKeyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAPIKey indicates an expected call of DeleteAPIKey.
func (mr *MockIAuthNRepoMockRecorder) DeleteAPIKey(ctx, apiKeyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPIKey", reflect.TypeOf((*MockIAuthNRepo)(nil).DeleteAPIKey), ctx, apiKeyID)
}

// FlushAPIKeyUsedTime mocks base method.
func (m *MockIAuthNRepo) FlushAPIKeyUsedTime(ctx context.Context, apiKeyID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAPIKeyUsedTime", ctx, apiKeyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushAPIKeyUsedTime indicates an expected call of FlushAPIKeyUsedTime.
func (mr *MockIAuthNRepoMockRecorder) FlushAPIKeyUsedTime(ctx, apiKeyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAPIKeyUsedTime", reflect.TypeOf((*MockIAuthNRepo)(nil).FlushAPIKeyUsedTime), ctx, apiKeyID)
}

// GetAPIKeyByIDs mocks base method.
func (m *MockIAuthNRepo) GetAPIKeyByIDs(ctx context.Context, apiKeyIDs []int64) ([]*entity.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKeyByIDs", ctx, apiKeyIDs)
	ret0, _ := ret[0].([]*entity.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKeyByIDs indicates an expected call of GetAPIKeyByIDs.
func (mr *MockIAuthNRepoMockRecorder) GetAPIKeyByIDs(ctx, apiKeyIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKeyByIDs", reflect.TypeOf((*MockIAuthNRepo)(nil).GetAPIKeyByIDs), ctx, apiKeyIDs)
}

// GetAPIKeyByKey mocks base method.
func (m *MockIAuthNRepo) GetAPIKeyByKey(ctx context.Context, key string) (*entity.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKeyByKey", ctx, key)
	ret0, _ := ret[0].(*entity.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKeyByKey indicates an expected call of GetAPIKeyByKey.
func (mr *MockIAuthNRepoMockRecorder) GetAPIKeyByKey(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKeyByKey", reflect.TypeOf((*MockIAuthNRepo)(nil).GetAPIKeyByKey), ctx, key)
}

// GetAPIKeyByUser mocks base method.
func (m *MockIAuthNRepo) GetAPIKeyByUser(ctx context.Context, userID int64, pageNumber, pageSize int) ([]*entity.APIKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIKeyByUser", ctx, userID, pageNumber, pageSize)
	ret0, _ := ret[0].([]*entity.APIKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIKeyByUser indicates an expected call of GetAPIKeyByUser.
func (mr *MockIAuthNRepoMockRecorder) GetAPIKeyByUser(ctx, userID, pageNumber, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIKeyByUser", reflect.TypeOf((*MockIAuthNRepo)(nil).GetAPIKeyByUser), ctx, userID, pageNumber, pageSize)
}

// UpdateAPIKeyName mocks base method.
func (m *MockIAuthNRepo) UpdateAPIKeyName(ctx context.Context, apiKeyID int64, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAPIKeyName", ctx, apiKeyID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAPIKeyName indicates an expected call of UpdateAPIKeyName.
func (mr *MockIAuthNRepoMockRecorder) UpdateAPIKeyName(ctx, apiKeyID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAPIKeyName", reflect.TypeOf((*MockIAuthNRepo)(nil).UpdateAPIKeyName), ctx, apiKeyID, name)
}

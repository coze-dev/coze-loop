// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/data/domain/tag/service (interfaces: ITagService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/tag_service_mock.go -package=mocks . ITagService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	entity "github.com/coze-dev/coze-loop/backend/modules/data/domain/tag/entity"
	pagination "github.com/coze-dev/coze-loop/backend/modules/data/pkg/pagination"
	gomock "go.uber.org/mock/gomock"
)

// MockITagService is a mock of ITagService interface.
type MockITagService struct {
	ctrl     *gomock.Controller
	recorder *MockITagServiceMockRecorder
	isgomock struct{}
}

// MockITagServiceMockRecorder is the mock recorder for MockITagService.
type MockITagServiceMockRecorder struct {
	mock *MockITagService
}

// NewMockITagService creates a new mock instance.
func NewMockITagService(ctrl *gomock.Controller) *MockITagService {
	mock := &MockITagService{ctrl: ctrl}
	mock.recorder = &MockITagServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITagService) EXPECT() *MockITagServiceMockRecorder {
	return m.recorder
}

// ArchiveOptionTag mocks base method.
func (m *MockITagService) ArchiveOptionTag(ctx context.Context, spaceID, tagKeyID int64, val *entity.TagKey, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, tagKeyID, val}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ArchiveOptionTag", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveOptionTag indicates an expected call of ArchiveOptionTag.
func (mr *MockITagServiceMockRecorder) ArchiveOptionTag(ctx, spaceID, tagKeyID, val any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, tagKeyID, val}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveOptionTag", reflect.TypeOf((*MockITagService)(nil).ArchiveOptionTag), varargs...)
}

// BatchGetTagsByTagKeyIDs mocks base method.
func (m *MockITagService) BatchGetTagsByTagKeyIDs(ctx context.Context, spaceID int64, tagKeyIDs []int64) ([]*entity.TagKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTagsByTagKeyIDs", ctx, spaceID, tagKeyIDs)
	ret0, _ := ret[0].([]*entity.TagKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTagsByTagKeyIDs indicates an expected call of BatchGetTagsByTagKeyIDs.
func (mr *MockITagServiceMockRecorder) BatchGetTagsByTagKeyIDs(ctx, spaceID, tagKeyIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTagsByTagKeyIDs", reflect.TypeOf((*MockITagService)(nil).BatchGetTagsByTagKeyIDs), ctx, spaceID, tagKeyIDs)
}

// BatchUpdateTagStatus mocks base method.
func (m *MockITagService) BatchUpdateTagStatus(ctx context.Context, spaceID int64, tagKeyIDs []int64, toStatus entity.TagStatus) (map[int64]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateTagStatus", ctx, spaceID, tagKeyIDs, toStatus)
	ret0, _ := ret[0].(map[int64]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchUpdateTagStatus indicates an expected call of BatchUpdateTagStatus.
func (mr *MockITagServiceMockRecorder) BatchUpdateTagStatus(ctx, spaceID, tagKeyIDs, toStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateTagStatus", reflect.TypeOf((*MockITagService)(nil).BatchUpdateTagStatus), ctx, spaceID, tagKeyIDs, toStatus)
}

// CreateTag mocks base method.
func (m *MockITagService) CreateTag(ctx context.Context, spaceID int64, val *entity.TagKey, opts ...db.Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, val}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTag", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockITagServiceMockRecorder) CreateTag(ctx, spaceID, val any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, val}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockITagService)(nil).CreateTag), varargs...)
}

// GetAllTagKeyVersionsByKeyID mocks base method.
func (m *MockITagService) GetAllTagKeyVersionsByKeyID(ctx context.Context, spaceID, tagKeyID int64, opts ...db.Option) ([]*entity.TagKey, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, tagKeyID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllTagKeyVersionsByKeyID", varargs...)
	ret0, _ := ret[0].([]*entity.TagKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTagKeyVersionsByKeyID indicates an expected call of GetAllTagKeyVersionsByKeyID.
func (mr *MockITagServiceMockRecorder) GetAllTagKeyVersionsByKeyID(ctx, spaceID, tagKeyID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, tagKeyID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTagKeyVersionsByKeyID", reflect.TypeOf((*MockITagService)(nil).GetAllTagKeyVersionsByKeyID), varargs...)
}

// GetAndBuildTagValues mocks base method.
func (m *MockITagService) GetAndBuildTagValues(ctx context.Context, spaceID, tagKeyID int64, versionNum int32, opts ...db.Option) ([]*entity.TagValue, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, tagKeyID, versionNum}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAndBuildTagValues", varargs...)
	ret0, _ := ret[0].([]*entity.TagValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAndBuildTagValues indicates an expected call of GetAndBuildTagValues.
func (mr *MockITagServiceMockRecorder) GetAndBuildTagValues(ctx, spaceID, tagKeyID, versionNum any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, tagKeyID, versionNum}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAndBuildTagValues", reflect.TypeOf((*MockITagService)(nil).GetAndBuildTagValues), varargs...)
}

// GetLatestTag mocks base method.
func (m *MockITagService) GetLatestTag(ctx context.Context, spaceID, tagKeyID int64, opts ...db.Option) (*entity.TagKey, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, tagKeyID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLatestTag", varargs...)
	ret0, _ := ret[0].(*entity.TagKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestTag indicates an expected call of GetLatestTag.
func (mr *MockITagServiceMockRecorder) GetLatestTag(ctx, spaceID, tagKeyID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, tagKeyID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestTag", reflect.TypeOf((*MockITagService)(nil).GetLatestTag), varargs...)
}

// GetTagDetail mocks base method.
func (m *MockITagService) GetTagDetail(ctx context.Context, spaceID int64, param *entity.GetTagDetailReq) (*entity.GetTagDetailResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagDetail", ctx, spaceID, param)
	ret0, _ := ret[0].(*entity.GetTagDetailResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagDetail indicates an expected call of GetTagDetail.
func (mr *MockITagServiceMockRecorder) GetTagDetail(ctx, spaceID, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagDetail", reflect.TypeOf((*MockITagService)(nil).GetTagDetail), ctx, spaceID, param)
}

// GetTagSpec mocks base method.
func (m *MockITagService) GetTagSpec(ctx context.Context, spaceID int64) (int64, int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagSpec", ctx, spaceID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetTagSpec indicates an expected call of GetTagSpec.
func (mr *MockITagServiceMockRecorder) GetTagSpec(ctx, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagSpec", reflect.TypeOf((*MockITagService)(nil).GetTagSpec), ctx, spaceID)
}

// SearchTags mocks base method.
func (m *MockITagService) SearchTags(ctx context.Context, spaceID int64, param *entity.MGetTagKeyParam) ([]*entity.TagKey, *pagination.PageResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTags", ctx, spaceID, param)
	ret0, _ := ret[0].([]*entity.TagKey)
	ret1, _ := ret[1].(*pagination.PageResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchTags indicates an expected call of SearchTags.
func (mr *MockITagServiceMockRecorder) SearchTags(ctx, spaceID, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTags", reflect.TypeOf((*MockITagService)(nil).SearchTags), ctx, spaceID, param)
}

// UpdateOptionTag mocks base method.
func (m *MockITagService) UpdateOptionTag(ctx context.Context, spaceID, tagKeyID int64, val *entity.TagKey, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, tagKeyID, val}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOptionTag", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOptionTag indicates an expected call of UpdateOptionTag.
func (mr *MockITagServiceMockRecorder) UpdateOptionTag(ctx, spaceID, tagKeyID, val any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, tagKeyID, val}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOptionTag", reflect.TypeOf((*MockITagService)(nil).UpdateOptionTag), varargs...)
}

// UpdateTag mocks base method.
func (m *MockITagService) UpdateTag(ctx context.Context, spaceID, tagKeyID int64, val *entity.TagKey, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, tagKeyID, val}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTag", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockITagServiceMockRecorder) UpdateTag(ctx, spaceID, tagKeyID, val any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, tagKeyID, val}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockITagService)(nil).UpdateTag), varargs...)
}

// UpdateTagStatus mocks base method.
func (m *MockITagService) UpdateTagStatus(ctx context.Context, spaceID, tagKeyID int64, versionNum int32, status entity.TagStatus, needLock, updatedInfo bool, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, tagKeyID, versionNum, status, needLock, updatedInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTagStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTagStatus indicates an expected call of UpdateTagStatus.
func (mr *MockITagServiceMockRecorder) UpdateTagStatus(ctx, spaceID, tagKeyID, versionNum, status, needLock, updatedInfo any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, tagKeyID, versionNum, status, needLock, updatedInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTagStatus", reflect.TypeOf((*MockITagService)(nil).UpdateTagStatus), varargs...)
}

// UpdateTagStatusWithNewVersion mocks base method.
func (m *MockITagService) UpdateTagStatusWithNewVersion(ctx context.Context, spaceID, tagKeyID int64, status entity.TagStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTagStatusWithNewVersion", ctx, spaceID, tagKeyID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTagStatusWithNewVersion indicates an expected call of UpdateTagStatusWithNewVersion.
func (mr *MockITagServiceMockRecorder) UpdateTagStatusWithNewVersion(ctx, spaceID, tagKeyID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTagStatusWithNewVersion", reflect.TypeOf((*MockITagService)(nil).UpdateTagStatusWithNewVersion), ctx, spaceID, tagKeyID, status)
}

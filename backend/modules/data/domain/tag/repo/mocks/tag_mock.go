// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/data/domain/tag/repo (interfaces: ITagAPI)
//
// Generated by this command:
//
//	mockgen -destination=mocks/tag_mock.go -package=mocks . ITagAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	entity "github.com/coze-dev/coze-loop/backend/modules/data/domain/tag/entity"
	pagination "github.com/coze-dev/coze-loop/backend/modules/data/pkg/pagination"
	gomock "go.uber.org/mock/gomock"
)

// MockITagAPI is a mock of ITagAPI interface.
type MockITagAPI struct {
	ctrl     *gomock.Controller
	recorder *MockITagAPIMockRecorder
	isgomock struct{}
}

// MockITagAPIMockRecorder is the mock recorder for MockITagAPI.
type MockITagAPIMockRecorder struct {
	mock *MockITagAPI
}

// NewMockITagAPI creates a new mock instance.
func NewMockITagAPI(ctrl *gomock.Controller) *MockITagAPI {
	mock := &MockITagAPI{ctrl: ctrl}
	mock.recorder = &MockITagAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITagAPI) EXPECT() *MockITagAPIMockRecorder {
	return m.recorder
}

// CountTagKeys mocks base method.
func (m *MockITagAPI) CountTagKeys(ctx context.Context, param *entity.MGetTagKeyParam, opts ...db.Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, param}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountTagKeys", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTagKeys indicates an expected call of CountTagKeys.
func (mr *MockITagAPIMockRecorder) CountTagKeys(ctx, param any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, param}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTagKeys", reflect.TypeOf((*MockITagAPI)(nil).CountTagKeys), varargs...)
}

// DeleteTagKey mocks base method.
func (m *MockITagAPI) DeleteTagKey(ctx context.Context, spaceID, id int64, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTagKey", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTagKey indicates an expected call of DeleteTagKey.
func (mr *MockITagAPIMockRecorder) DeleteTagKey(ctx, spaceID, id any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagKey", reflect.TypeOf((*MockITagAPI)(nil).DeleteTagKey), varargs...)
}

// DeleteTagValue mocks base method.
func (m *MockITagAPI) DeleteTagValue(ctx context.Context, spaceID, id int64, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteTagValue", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTagValue indicates an expected call of DeleteTagValue.
func (mr *MockITagAPIMockRecorder) DeleteTagValue(ctx, spaceID, id any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTagValue", reflect.TypeOf((*MockITagAPI)(nil).DeleteTagValue), varargs...)
}

// GetTagKey mocks base method.
func (m *MockITagAPI) GetTagKey(ctx context.Context, spaceID, id int64, opts ...db.Option) (*entity.TagKey, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTagKey", varargs...)
	ret0, _ := ret[0].(*entity.TagKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagKey indicates an expected call of GetTagKey.
func (mr *MockITagAPIMockRecorder) GetTagKey(ctx, spaceID, id any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagKey", reflect.TypeOf((*MockITagAPI)(nil).GetTagKey), varargs...)
}

// GetTagValue mocks base method.
func (m *MockITagAPI) GetTagValue(ctx context.Context, spaceID, id int64, opts ...db.Option) (*entity.TagValue, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTagValue", varargs...)
	ret0, _ := ret[0].(*entity.TagValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagValue indicates an expected call of GetTagValue.
func (mr *MockITagAPIMockRecorder) GetTagValue(ctx, spaceID, id any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagValue", reflect.TypeOf((*MockITagAPI)(nil).GetTagValue), varargs...)
}

// MCreateTagKeys mocks base method.
func (m *MockITagAPI) MCreateTagKeys(ctx context.Context, val []*entity.TagKey, opt ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, val}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MCreateTagKeys", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MCreateTagKeys indicates an expected call of MCreateTagKeys.
func (mr *MockITagAPIMockRecorder) MCreateTagKeys(ctx, val any, opt ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, val}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MCreateTagKeys", reflect.TypeOf((*MockITagAPI)(nil).MCreateTagKeys), varargs...)
}

// MCreateTagValues mocks base method.
func (m *MockITagAPI) MCreateTagValues(ctx context.Context, val []*entity.TagValue, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, val}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MCreateTagValues", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MCreateTagValues indicates an expected call of MCreateTagValues.
func (mr *MockITagAPIMockRecorder) MCreateTagValues(ctx, val any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, val}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MCreateTagValues", reflect.TypeOf((*MockITagAPI)(nil).MCreateTagValues), varargs...)
}

// MGetTagKeys mocks base method.
func (m *MockITagAPI) MGetTagKeys(ctx context.Context, param *entity.MGetTagKeyParam, opts ...db.Option) ([]*entity.TagKey, *pagination.PageResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, param}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetTagKeys", varargs...)
	ret0, _ := ret[0].([]*entity.TagKey)
	ret1, _ := ret[1].(*pagination.PageResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MGetTagKeys indicates an expected call of MGetTagKeys.
func (mr *MockITagAPIMockRecorder) MGetTagKeys(ctx, param any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, param}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetTagKeys", reflect.TypeOf((*MockITagAPI)(nil).MGetTagKeys), varargs...)
}

// MGetTagValue mocks base method.
func (m *MockITagAPI) MGetTagValue(ctx context.Context, param *entity.MGetTagValueParam, opts ...db.Option) ([]*entity.TagValue, *pagination.PageResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, param}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetTagValue", varargs...)
	ret0, _ := ret[0].([]*entity.TagValue)
	ret1, _ := ret[1].(*pagination.PageResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MGetTagValue indicates an expected call of MGetTagValue.
func (mr *MockITagAPIMockRecorder) MGetTagValue(ctx, param any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, param}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetTagValue", reflect.TypeOf((*MockITagAPI)(nil).MGetTagValue), varargs...)
}

// PatchTagKey mocks base method.
func (m *MockITagAPI) PatchTagKey(ctx context.Context, spaceID, id int64, patch *entity.TagKey, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, id, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTagKey", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTagKey indicates an expected call of PatchTagKey.
func (mr *MockITagAPIMockRecorder) PatchTagKey(ctx, spaceID, id, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, id, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTagKey", reflect.TypeOf((*MockITagAPI)(nil).PatchTagKey), varargs...)
}

// PatchTagValue mocks base method.
func (m *MockITagAPI) PatchTagValue(ctx context.Context, spaceID, id int64, patch *entity.TagValue, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, id, patch}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PatchTagValue", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchTagValue indicates an expected call of PatchTagValue.
func (mr *MockITagAPIMockRecorder) PatchTagValue(ctx, spaceID, id, patch any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, id, patch}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchTagValue", reflect.TypeOf((*MockITagAPI)(nil).PatchTagValue), varargs...)
}

// UpdateTagKeysStatus mocks base method.
func (m *MockITagAPI) UpdateTagKeysStatus(ctx context.Context, spaceID, tagKeyID int64, versionNum int32, toStatus entity.TagStatus, updateInfo bool, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, tagKeyID, versionNum, toStatus, updateInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTagKeysStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTagKeysStatus indicates an expected call of UpdateTagKeysStatus.
func (mr *MockITagAPIMockRecorder) UpdateTagKeysStatus(ctx, spaceID, tagKeyID, versionNum, toStatus, updateInfo any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, tagKeyID, versionNum, toStatus, updateInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTagKeysStatus", reflect.TypeOf((*MockITagAPI)(nil).UpdateTagKeysStatus), varargs...)
}

// UpdateTagValuesStatus mocks base method.
func (m *MockITagAPI) UpdateTagValuesStatus(ctx context.Context, spaceID, tagKeyID int64, versionNum int32, toStatus entity.TagStatus, updateInfo bool, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, tagKeyID, versionNum, toStatus, updateInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTagValuesStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTagValuesStatus indicates an expected call of UpdateTagValuesStatus.
func (mr *MockITagAPIMockRecorder) UpdateTagValuesStatus(ctx, spaceID, tagKeyID, versionNum, toStatus, updateInfo any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, tagKeyID, versionNum, toStatus, updateInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTagValuesStatus", reflect.TypeOf((*MockITagAPI)(nil).UpdateTagValuesStatus), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity/collector (interfaces: ConfigProvider)
//
// Generated by this command:
//
//	mockgen -destination=mocks/conf_provider.go -package=mocks . ConfigProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	collector "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity/collector"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigProvider is a mock of ConfigProvider interface.
type MockConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockConfigProviderMockRecorder
	isgomock struct{}
}

// MockConfigProviderMockRecorder is the mock recorder for MockConfigProvider.
type MockConfigProviderMockRecorder struct {
	mock *MockConfigProvider
}

// NewMockConfigProvider creates a new mock instance.
func NewMockConfigProvider(ctrl *gomock.Controller) *MockConfigProvider {
	mock := &MockConfigProvider{ctrl: ctrl}
	mock.recorder = &MockConfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigProvider) EXPECT() *MockConfigProviderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockConfigProvider) Get(ctx context.Context, factories collector.Factories) (*collector.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, factories)
	ret0, _ := ret[0].(*collector.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConfigProviderMockRecorder) Get(ctx, factories any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConfigProvider)(nil).Get), ctx, factories)
}

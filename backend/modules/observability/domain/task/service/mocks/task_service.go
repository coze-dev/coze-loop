// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/task/service (interfaces: ITaskService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/task_service.go -package=mocks . ITaskService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	service "github.com/coze-dev/coze-loop/backend/modules/observability/domain/task/service"
	gomock "go.uber.org/mock/gomock"
)

// MockITaskService is a mock of ITaskService interface.
type MockITaskService struct {
	ctrl     *gomock.Controller
	recorder *MockITaskServiceMockRecorder
}

// MockITaskServiceMockRecorder is the mock recorder for MockITaskService.
type MockITaskServiceMockRecorder struct {
	mock *MockITaskService
}

// NewMockITaskService creates a new mock instance.
func NewMockITaskService(ctrl *gomock.Controller) *MockITaskService {
	mock := &MockITaskService{ctrl: ctrl}
	mock.recorder = &MockITaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITaskService) EXPECT() *MockITaskServiceMockRecorder {
	return m.recorder
}

// CheckTaskName mocks base method.
func (m *MockITaskService) CheckTaskName(arg0 context.Context, arg1 *service.CheckTaskNameReq) (*service.CheckTaskNameResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTaskName", arg0, arg1)
	ret0, _ := ret[0].(*service.CheckTaskNameResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTaskName indicates an expected call of CheckTaskName.
func (mr *MockITaskServiceMockRecorder) CheckTaskName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTaskName", reflect.TypeOf((*MockITaskService)(nil).CheckTaskName), arg0, arg1)
}

// CreateTask mocks base method.
func (m *MockITaskService) CreateTask(arg0 context.Context, arg1 *service.CreateTaskReq) (*service.CreateTaskResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0, arg1)
	ret0, _ := ret[0].(*service.CreateTaskResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockITaskServiceMockRecorder) CreateTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockITaskService)(nil).CreateTask), arg0, arg1)
}

// GetTask mocks base method.
func (m *MockITaskService) GetTask(arg0 context.Context, arg1 *service.GetTaskReq) (*service.GetTaskResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", arg0, arg1)
	ret0, _ := ret[0].(*service.GetTaskResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockITaskServiceMockRecorder) GetTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockITaskService)(nil).GetTask), arg0, arg1)
}

// ListTasks mocks base method.
func (m *MockITaskService) ListTasks(arg0 context.Context, arg1 *service.ListTasksReq) (*service.ListTasksResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasks", arg0, arg1)
	ret0, _ := ret[0].(*service.ListTasksResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks.
func (mr *MockITaskServiceMockRecorder) ListTasks(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockITaskService)(nil).ListTasks), arg0, arg1)
}

// UpdateTask mocks base method.
func (m *MockITaskService) UpdateTask(arg0 context.Context, arg1 *service.UpdateTaskReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockITaskServiceMockRecorder) UpdateTask(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockITaskService)(nil).UpdateTask), arg0, arg1)
}

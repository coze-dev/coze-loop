// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/task/service/taskexe/tracehub (interfaces: ITraceHubService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/trace_hub_service.go -package=mocks . ITraceHubService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/observability/domain/task/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockITraceHubService is a mock of ITraceHubService interface.
type MockITraceHubService struct {
	ctrl     *gomock.Controller
	recorder *MockITraceHubServiceMockRecorder
}

// MockITraceHubServiceMockRecorder is the mock recorder for MockITraceHubService.
type MockITraceHubServiceMockRecorder struct {
	mock *MockITraceHubService
}

// NewMockITraceHubService creates a new mock instance.
func NewMockITraceHubService(ctrl *gomock.Controller) *MockITraceHubService {
	mock := &MockITraceHubService{ctrl: ctrl}
	mock.recorder = &MockITraceHubServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITraceHubService) EXPECT() *MockITraceHubServiceMockRecorder {
	return m.recorder
}

// BackFill mocks base method.
func (m *MockITraceHubService) BackFill(arg0 context.Context, arg1 *entity.BackFillEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BackFill", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BackFill indicates an expected call of BackFill.
func (mr *MockITraceHubServiceMockRecorder) BackFill(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackFill", reflect.TypeOf((*MockITraceHubService)(nil).BackFill), arg0, arg1)
}

// CallBack mocks base method.
func (m *MockITraceHubService) CallBack(arg0 context.Context, arg1 *entity.AutoEvalEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallBack", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallBack indicates an expected call of CallBack.
func (mr *MockITraceHubServiceMockRecorder) CallBack(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallBack", reflect.TypeOf((*MockITraceHubService)(nil).CallBack), arg0, arg1)
}

// Correction mocks base method.
func (m *MockITraceHubService) Correction(arg0 context.Context, arg1 *entity.CorrectionEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Correction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Correction indicates an expected call of Correction.
func (mr *MockITraceHubServiceMockRecorder) Correction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Correction", reflect.TypeOf((*MockITraceHubService)(nil).Correction), arg0, arg1)
}

// SpanTrigger mocks base method.
func (m *MockITraceHubService) SpanTrigger(arg0 context.Context, arg1 *entity.RawSpan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpanTrigger", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SpanTrigger indicates an expected call of SpanTrigger.
func (mr *MockITraceHubServiceMockRecorder) SpanTrigger(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpanTrigger", reflect.TypeOf((*MockITraceHubService)(nil).SpanTrigger), arg0, arg1)
}

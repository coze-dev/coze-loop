// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/metric/repo (interfaces: IMetricRepo)
//
// Generated by this command:
//
//	mockgen -destination=mocks/metrics.go -package=mocks . IMetricRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	repo "github.com/coze-dev/coze-loop/backend/modules/observability/domain/metric/repo"
	gomock "go.uber.org/mock/gomock"
)

// MockIMetricRepo is a mock of IMetricRepo interface.
type MockIMetricRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIMetricRepoMockRecorder
	isgomock struct{}
}

// MockIMetricRepoMockRecorder is the mock recorder for MockIMetricRepo.
type MockIMetricRepoMockRecorder struct {
	mock *MockIMetricRepo
}

// NewMockIMetricRepo creates a new mock instance.
func NewMockIMetricRepo(ctrl *gomock.Controller) *MockIMetricRepo {
	mock := &MockIMetricRepo{ctrl: ctrl}
	mock.recorder = &MockIMetricRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMetricRepo) EXPECT() *MockIMetricRepoMockRecorder {
	return m.recorder
}

// GetMetrics mocks base method.
func (m *MockIMetricRepo) GetMetrics(ctx context.Context, param *repo.GetMetricsParam) (*repo.GetMetricsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", ctx, param)
	ret0, _ := ret[0].(*repo.GetMetricsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockIMetricRepoMockRecorder) GetMetrics(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockIMetricRepo)(nil).GetMetrics), ctx, param)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/metric/service (interfaces: IMetricsService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/metrics.go -package=mocks . IMetricsService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	service "github.com/coze-dev/coze-loop/backend/modules/observability/domain/metric/service"
	gomock "go.uber.org/mock/gomock"
)

// MockIMetricsService is a mock of IMetricsService interface.
type MockIMetricsService struct {
	ctrl     *gomock.Controller
	recorder *MockIMetricsServiceMockRecorder
	isgomock struct{}
}

// MockIMetricsServiceMockRecorder is the mock recorder for MockIMetricsService.
type MockIMetricsServiceMockRecorder struct {
	mock *MockIMetricsService
}

// NewMockIMetricsService creates a new mock instance.
func NewMockIMetricsService(ctrl *gomock.Controller) *MockIMetricsService {
	mock := &MockIMetricsService{ctrl: ctrl}
	mock.recorder = &MockIMetricsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMetricsService) EXPECT() *MockIMetricsServiceMockRecorder {
	return m.recorder
}

// QueryMetrics mocks base method.
func (m *MockIMetricsService) QueryMetrics(ctx context.Context, req *service.QueryMetricsReq) (*service.QueryMetricsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMetrics", ctx, req)
	ret0, _ := ret[0].(*service.QueryMetricsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMetrics indicates an expected call of QueryMetrics.
func (mr *MockIMetricsServiceMockRecorder) QueryMetrics(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMetrics", reflect.TypeOf((*MockIMetricsService)(nil).QueryMetrics), ctx, req)
}

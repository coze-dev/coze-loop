// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/config (interfaces: ITraceConfig)
//
// Generated by this command:
//
//	mockgen -destination=mocks/config.go -package=mocks . ITraceConfig
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	config "github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/config"
	conf "github.com/coze-dev/coze-loop/backend/pkg/conf"
	gomock "go.uber.org/mock/gomock"
)

// MockITraceConfig is a mock of ITraceConfig interface.
type MockITraceConfig struct {
	ctrl     *gomock.Controller
	recorder *MockITraceConfigMockRecorder
}

// MockITraceConfigMockRecorder is the mock recorder for MockITraceConfig.
type MockITraceConfigMockRecorder struct {
	mock *MockITraceConfig
}

// NewMockITraceConfig creates a new mock instance.
func NewMockITraceConfig(ctrl *gomock.Controller) *MockITraceConfig {
	mock := &MockITraceConfig{ctrl: ctrl}
	mock.recorder = &MockITraceConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITraceConfig) EXPECT() *MockITraceConfigMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockITraceConfig) Get(arg0 context.Context, arg1 string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(any)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockITraceConfigMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockITraceConfig)(nil).Get), arg0, arg1)
}

// GetAnnotationMqProducerCfg mocks base method.
func (m *MockITraceConfig) GetAnnotationMqProducerCfg(arg0 context.Context) (*config.MqProducerCfg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotationMqProducerCfg", arg0)
	ret0, _ := ret[0].(*config.MqProducerCfg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotationMqProducerCfg indicates an expected call of GetAnnotationMqProducerCfg.
func (mr *MockITraceConfigMockRecorder) GetAnnotationMqProducerCfg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotationMqProducerCfg", reflect.TypeOf((*MockITraceConfig)(nil).GetAnnotationMqProducerCfg), arg0)
}

// GetAnnotationSourceCfg mocks base method.
func (m *MockITraceConfig) GetAnnotationSourceCfg(arg0 context.Context) (*config.AnnotationSourceConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotationSourceCfg", arg0)
	ret0, _ := ret[0].(*config.AnnotationSourceConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotationSourceCfg indicates an expected call of GetAnnotationSourceCfg.
func (mr *MockITraceConfigMockRecorder) GetAnnotationSourceCfg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotationSourceCfg", reflect.TypeOf((*MockITraceConfig)(nil).GetAnnotationSourceCfg), arg0)
}

// GetBackfillMqProducerCfg mocks base method.
func (m *MockITraceConfig) GetBackfillMqProducerCfg(arg0 context.Context) (*config.MqProducerCfg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackfillMqProducerCfg", arg0)
	ret0, _ := ret[0].(*config.MqProducerCfg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackfillMqProducerCfg indicates an expected call of GetBackfillMqProducerCfg.
func (mr *MockITraceConfigMockRecorder) GetBackfillMqProducerCfg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackfillMqProducerCfg", reflect.TypeOf((*MockITraceConfig)(nil).GetBackfillMqProducerCfg), arg0)
}

// GetDefaultTraceTenant mocks base method.
func (m *MockITraceConfig) GetDefaultTraceTenant(arg0 context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultTraceTenant", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDefaultTraceTenant indicates an expected call of GetDefaultTraceTenant.
func (mr *MockITraceConfigMockRecorder) GetDefaultTraceTenant(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultTraceTenant", reflect.TypeOf((*MockITraceConfig)(nil).GetDefaultTraceTenant), arg0)
}

// GetPlatformSpansTrans mocks base method.
func (m *MockITraceConfig) GetPlatformSpansTrans(arg0 context.Context) (*config.SpanTransHandlerConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformSpansTrans", arg0)
	ret0, _ := ret[0].(*config.SpanTransHandlerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformSpansTrans indicates an expected call of GetPlatformSpansTrans.
func (mr *MockITraceConfigMockRecorder) GetPlatformSpansTrans(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformSpansTrans", reflect.TypeOf((*MockITraceConfig)(nil).GetPlatformSpansTrans), arg0)
}

// GetPlatformTenants mocks base method.
func (m *MockITraceConfig) GetPlatformTenants(arg0 context.Context) (*config.PlatformTenantsCfg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformTenants", arg0)
	ret0, _ := ret[0].(*config.PlatformTenantsCfg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformTenants indicates an expected call of GetPlatformTenants.
func (mr *MockITraceConfigMockRecorder) GetPlatformTenants(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformTenants", reflect.TypeOf((*MockITraceConfig)(nil).GetPlatformTenants), arg0)
}

// GetQueryMaxQPS mocks base method.
func (m *MockITraceConfig) GetQueryMaxQPS(arg0 context.Context, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryMaxQPS", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryMaxQPS indicates an expected call of GetQueryMaxQPS.
func (mr *MockITraceConfigMockRecorder) GetQueryMaxQPS(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryMaxQPS", reflect.TypeOf((*MockITraceConfig)(nil).GetQueryMaxQPS), arg0, arg1)
}

// GetSystemViews mocks base method.
func (m *MockITraceConfig) GetSystemViews(arg0 context.Context) ([]*config.SystemView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemViews", arg0)
	ret0, _ := ret[0].([]*config.SystemView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemViews indicates an expected call of GetSystemViews.
func (mr *MockITraceConfigMockRecorder) GetSystemViews(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemViews", reflect.TypeOf((*MockITraceConfig)(nil).GetSystemViews), arg0)
}

// GetTenantConfig mocks base method.
func (m *MockITraceConfig) GetTenantConfig(arg0 context.Context) (*config.TenantCfg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantConfig", arg0)
	ret0, _ := ret[0].(*config.TenantCfg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantConfig indicates an expected call of GetTenantConfig.
func (mr *MockITraceConfigMockRecorder) GetTenantConfig(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantConfig", reflect.TypeOf((*MockITraceConfig)(nil).GetTenantConfig), arg0)
}

// GetTraceCkCfg mocks base method.
func (m *MockITraceConfig) GetTraceCkCfg(arg0 context.Context) (*config.TraceCKCfg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceCkCfg", arg0)
	ret0, _ := ret[0].(*config.TraceCKCfg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceCkCfg indicates an expected call of GetTraceCkCfg.
func (mr *MockITraceConfigMockRecorder) GetTraceCkCfg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceCkCfg", reflect.TypeOf((*MockITraceConfig)(nil).GetTraceCkCfg), arg0)
}

// GetTraceDataMaxDurationDay mocks base method.
func (m *MockITraceConfig) GetTraceDataMaxDurationDay(arg0 context.Context, arg1 *string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceDataMaxDurationDay", arg0, arg1)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetTraceDataMaxDurationDay indicates an expected call of GetTraceDataMaxDurationDay.
func (mr *MockITraceConfigMockRecorder) GetTraceDataMaxDurationDay(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceDataMaxDurationDay", reflect.TypeOf((*MockITraceConfig)(nil).GetTraceDataMaxDurationDay), arg0, arg1)
}

// GetTraceFieldMetaInfo mocks base method.
func (m *MockITraceConfig) GetTraceFieldMetaInfo(arg0 context.Context) (*config.TraceFieldMetaInfoCfg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceFieldMetaInfo", arg0)
	ret0, _ := ret[0].(*config.TraceFieldMetaInfoCfg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceFieldMetaInfo indicates an expected call of GetTraceFieldMetaInfo.
func (mr *MockITraceConfigMockRecorder) GetTraceFieldMetaInfo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceFieldMetaInfo", reflect.TypeOf((*MockITraceConfig)(nil).GetTraceFieldMetaInfo), arg0)
}

// GetTraceIngestTenantProducerCfg mocks base method.
func (m *MockITraceConfig) GetTraceIngestTenantProducerCfg(arg0 context.Context) (map[string]*config.IngestConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceIngestTenantProducerCfg", arg0)
	ret0, _ := ret[0].(map[string]*config.IngestConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceIngestTenantProducerCfg indicates an expected call of GetTraceIngestTenantProducerCfg.
func (mr *MockITraceConfigMockRecorder) GetTraceIngestTenantProducerCfg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceIngestTenantProducerCfg", reflect.TypeOf((*MockITraceConfig)(nil).GetTraceIngestTenantProducerCfg), arg0)
}

// Unmarshal mocks base method.
func (m *MockITraceConfig) Unmarshal(arg0 context.Context, arg1 any, arg2 ...conf.DecodeOptionFn) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unmarshal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockITraceConfigMockRecorder) Unmarshal(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockITraceConfig)(nil).Unmarshal), varargs...)
}

// UnmarshalKey mocks base method.
func (m *MockITraceConfig) UnmarshalKey(arg0 context.Context, arg1 string, arg2 any, arg3 ...conf.DecodeOptionFn) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnmarshalKey", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalKey indicates an expected call of UnmarshalKey.
func (mr *MockITraceConfigMockRecorder) UnmarshalKey(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalKey", reflect.TypeOf((*MockITraceConfig)(nil).UnmarshalKey), varargs...)
}

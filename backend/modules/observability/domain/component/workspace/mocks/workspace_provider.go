// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/workspace (interfaces: IWorkSpaceProvider)
//
// Generated by this command:
//
//	mockgen -destination=mocks/workspace_provider.go -package=mocks . IWorkSpaceProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	span "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/domain/span"
	gomock "go.uber.org/mock/gomock"
)

// MockIWorkSpaceProvider is a mock of IWorkSpaceProvider interface.
type MockIWorkSpaceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkSpaceProviderMockRecorder
	isgomock struct{}
}

// MockIWorkSpaceProviderMockRecorder is the mock recorder for MockIWorkSpaceProvider.
type MockIWorkSpaceProviderMockRecorder struct {
	mock *MockIWorkSpaceProvider
}

// NewMockIWorkSpaceProvider creates a new mock instance.
func NewMockIWorkSpaceProvider(ctrl *gomock.Controller) *MockIWorkSpaceProvider {
	mock := &MockIWorkSpaceProvider{ctrl: ctrl}
	mock.recorder = &MockIWorkSpaceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorkSpaceProvider) EXPECT() *MockIWorkSpaceProviderMockRecorder {
	return m.recorder
}

// GetIngestWorkSpaceID mocks base method.
func (m *MockIWorkSpaceProvider) GetIngestWorkSpaceID(ctx context.Context, spans []*span.InputSpan) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngestWorkSpaceID", ctx, spans)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIngestWorkSpaceID indicates an expected call of GetIngestWorkSpaceID.
func (mr *MockIWorkSpaceProviderMockRecorder) GetIngestWorkSpaceID(ctx, spans any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngestWorkSpaceID", reflect.TypeOf((*MockIWorkSpaceProvider)(nil).GetIngestWorkSpaceID), ctx, spans)
}

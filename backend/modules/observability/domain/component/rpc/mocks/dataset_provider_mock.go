// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/rpc (interfaces: IDatasetProvider)
//
// Generated by this command:
//
//	mockgen -destination=mocks/dataset_provider_mock.go -package=mocks . IDatasetProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIDatasetProvider is a mock of IDatasetProvider interface.
type MockIDatasetProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIDatasetProviderMockRecorder
	isgomock struct{}
}

// MockIDatasetProviderMockRecorder is the mock recorder for MockIDatasetProvider.
type MockIDatasetProviderMockRecorder struct {
	mock *MockIDatasetProvider
}

// NewMockIDatasetProvider creates a new mock instance.
func NewMockIDatasetProvider(ctrl *gomock.Controller) *MockIDatasetProvider {
	mock := &MockIDatasetProvider{ctrl: ctrl}
	mock.recorder = &MockIDatasetProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatasetProvider) EXPECT() *MockIDatasetProviderMockRecorder {
	return m.recorder
}

// AddDatasetItems mocks base method.
func (m *MockIDatasetProvider) AddDatasetItems(ctx context.Context, datasetID int64, category entity.DatasetCategory, items []*entity.DatasetItem) ([]*entity.DatasetItem, []entity.ItemErrorGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDatasetItems", ctx, datasetID, category, items)
	ret0, _ := ret[0].([]*entity.DatasetItem)
	ret1, _ := ret[1].([]entity.ItemErrorGroup)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddDatasetItems indicates an expected call of AddDatasetItems.
func (mr *MockIDatasetProviderMockRecorder) AddDatasetItems(ctx, datasetID, category, items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDatasetItems", reflect.TypeOf((*MockIDatasetProvider)(nil).AddDatasetItems), ctx, datasetID, category, items)
}

// ClearDatasetItems mocks base method.
func (m *MockIDatasetProvider) ClearDatasetItems(ctx context.Context, workspaceID, datasetID int64, category entity.DatasetCategory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearDatasetItems", ctx, workspaceID, datasetID, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearDatasetItems indicates an expected call of ClearDatasetItems.
func (mr *MockIDatasetProviderMockRecorder) ClearDatasetItems(ctx, workspaceID, datasetID, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDatasetItems", reflect.TypeOf((*MockIDatasetProvider)(nil).ClearDatasetItems), ctx, workspaceID, datasetID, category)
}

// CreateDataset mocks base method.
func (m *MockIDatasetProvider) CreateDataset(ctx context.Context, dataset *entity.Dataset) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataset", ctx, dataset)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataset indicates an expected call of CreateDataset.
func (mr *MockIDatasetProviderMockRecorder) CreateDataset(ctx, dataset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataset", reflect.TypeOf((*MockIDatasetProvider)(nil).CreateDataset), ctx, dataset)
}

// GetDataset mocks base method.
func (m *MockIDatasetProvider) GetDataset(ctx context.Context, workspaceID, datasetID int64, category entity.DatasetCategory) (*entity.Dataset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataset", ctx, workspaceID, datasetID, category)
	ret0, _ := ret[0].(*entity.Dataset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataset indicates an expected call of GetDataset.
func (mr *MockIDatasetProviderMockRecorder) GetDataset(ctx, workspaceID, datasetID, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataset", reflect.TypeOf((*MockIDatasetProvider)(nil).GetDataset), ctx, workspaceID, datasetID, category)
}

// SearchDatasets mocks base method.
func (m *MockIDatasetProvider) SearchDatasets(arg0 context.Context, arg1, arg2 int64, arg3 entity.DatasetCategory, arg4 string) ([]*entity.Dataset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDatasets", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entity.Dataset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDatasets indicates an expected call of SearchDatasets.
func (mr *MockIDatasetProviderMockRecorder) SearchDatasets(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDatasets", reflect.TypeOf((*MockIDatasetProvider)(nil).SearchDatasets), arg0, arg1, arg2, arg3, arg4)
}

// UpdateDatasetSchema mocks base method.
func (m *MockIDatasetProvider) UpdateDatasetSchema(ctx context.Context, dataset *entity.Dataset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatasetSchema", ctx, dataset)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDatasetSchema indicates an expected call of UpdateDatasetSchema.
func (mr *MockIDatasetProviderMockRecorder) UpdateDatasetSchema(ctx, dataset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetSchema", reflect.TypeOf((*MockIDatasetProvider)(nil).UpdateDatasetSchema), ctx, dataset)
}

// ValidateDatasetItems mocks base method.
func (m *MockIDatasetProvider) ValidateDatasetItems(ctx context.Context, dataset *entity.Dataset, items []*entity.DatasetItem, ignoreCurrentCount *bool) ([]*entity.DatasetItem, []entity.ItemErrorGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateDatasetItems", ctx, dataset, items, ignoreCurrentCount)
	ret0, _ := ret[0].([]*entity.DatasetItem)
	ret1, _ := ret[1].([]entity.ItemErrorGroup)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ValidateDatasetItems indicates an expected call of ValidateDatasetItems.
func (mr *MockIDatasetProviderMockRecorder) ValidateDatasetItems(ctx, dataset, items, ignoreCurrentCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDatasetItems", reflect.TypeOf((*MockIDatasetProvider)(nil).ValidateDatasetItems), ctx, dataset, items, ignoreCurrentCount)
}

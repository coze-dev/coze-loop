// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/rpc (interfaces: IAuthProvider)
//
// Generated by this command:
//
//	mockgen -destination=mocks/auth_provider.go -package=mocks . IAuthProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIAuthProvider is a mock of IAuthProvider interface.
type MockIAuthProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthProviderMockRecorder
}

// MockIAuthProviderMockRecorder is the mock recorder for MockIAuthProvider.
type MockIAuthProviderMockRecorder struct {
	mock *MockIAuthProvider
}

// NewMockIAuthProvider creates a new mock instance.
func NewMockIAuthProvider(ctrl *gomock.Controller) *MockIAuthProvider {
	mock := &MockIAuthProvider{ctrl: ctrl}
	mock.recorder = &MockIAuthProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthProvider) EXPECT() *MockIAuthProviderMockRecorder {
	return m.recorder
}

// CheckIngestPermission mocks base method.
func (m *MockIAuthProvider) CheckIngestPermission(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIngestPermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckIngestPermission indicates an expected call of CheckIngestPermission.
func (mr *MockIAuthProviderMockRecorder) CheckIngestPermission(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIngestPermission", reflect.TypeOf((*MockIAuthProvider)(nil).CheckIngestPermission), arg0, arg1)
}

// CheckQueryPermission mocks base method.
func (m *MockIAuthProvider) CheckQueryPermission(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckQueryPermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckQueryPermission indicates an expected call of CheckQueryPermission.
func (mr *MockIAuthProviderMockRecorder) CheckQueryPermission(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckQueryPermission", reflect.TypeOf((*MockIAuthProvider)(nil).CheckQueryPermission), arg0, arg1, arg2)
}

// CheckTaskPermission mocks base method.
func (m *MockIAuthProvider) CheckTaskPermission(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTaskPermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckTaskPermission indicates an expected call of CheckTaskPermission.
func (mr *MockIAuthProviderMockRecorder) CheckTaskPermission(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTaskPermission", reflect.TypeOf((*MockIAuthProvider)(nil).CheckTaskPermission), arg0, arg1, arg2, arg3)
}

// CheckViewPermission mocks base method.
func (m *MockIAuthProvider) CheckViewPermission(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckViewPermission", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckViewPermission indicates an expected call of CheckViewPermission.
func (mr *MockIAuthProviderMockRecorder) CheckViewPermission(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckViewPermission", reflect.TypeOf((*MockIAuthProvider)(nil).CheckViewPermission), arg0, arg1, arg2, arg3)
}

// CheckWorkspacePermission mocks base method.
func (m *MockIAuthProvider) CheckWorkspacePermission(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckWorkspacePermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckWorkspacePermission indicates an expected call of CheckWorkspacePermission.
func (mr *MockIAuthProviderMockRecorder) CheckWorkspacePermission(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckWorkspacePermission", reflect.TypeOf((*MockIAuthProvider)(nil).CheckWorkspacePermission), arg0, arg1, arg2)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/tenant (interfaces: ITenantProvider)
//
// Generated by this command:
//
//	mockgen -destination=mocks/tenant_provider.go -package=mocks . ITenantProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	loop_span "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity/loop_span"
	gomock "go.uber.org/mock/gomock"
)

// MockITenantProvider is a mock of ITenantProvider interface.
type MockITenantProvider struct {
	ctrl     *gomock.Controller
	recorder *MockITenantProviderMockRecorder
	isgomock struct{}
}

// MockITenantProviderMockRecorder is the mock recorder for MockITenantProvider.
type MockITenantProviderMockRecorder struct {
	mock *MockITenantProvider
}

// NewMockITenantProvider creates a new mock instance.
func NewMockITenantProvider(ctrl *gomock.Controller) *MockITenantProvider {
	mock := &MockITenantProvider{ctrl: ctrl}
	mock.recorder = &MockITenantProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITenantProvider) EXPECT() *MockITenantProviderMockRecorder {
	return m.recorder
}

// GetIngestTenant mocks base method.
func (m *MockITenantProvider) GetIngestTenant(ctx context.Context, spans []*loop_span.Span) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngestTenant", ctx, spans)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIngestTenant indicates an expected call of GetIngestTenant.
func (mr *MockITenantProviderMockRecorder) GetIngestTenant(ctx, spans any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngestTenant", reflect.TypeOf((*MockITenantProvider)(nil).GetIngestTenant), ctx, spans)
}

// GetOAPIQueryTenants mocks base method.
func (m *MockITenantProvider) GetOAPIQueryTenants(ctx context.Context, platformType loop_span.PlatformType) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOAPIQueryTenants", ctx, platformType)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetOAPIQueryTenants indicates an expected call of GetOAPIQueryTenants.
func (mr *MockITenantProviderMockRecorder) GetOAPIQueryTenants(ctx, platformType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOAPIQueryTenants", reflect.TypeOf((*MockITenantProvider)(nil).GetOAPIQueryTenants), ctx, platformType)
}

// GetTenantsByPlatformType mocks base method.
func (m *MockITenantProvider) GetTenantsByPlatformType(ctx context.Context, platformType loop_span.PlatformType) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantsByPlatformType", ctx, platformType)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantsByPlatformType indicates an expected call of GetTenantsByPlatformType.
func (mr *MockITenantProviderMockRecorder) GetTenantsByPlatformType(ctx, platformType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantsByPlatformType", reflect.TypeOf((*MockITenantProvider)(nil).GetTenantsByPlatformType), ctx, platformType)
}

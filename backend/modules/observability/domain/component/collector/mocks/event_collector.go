// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/collector (interfaces: ICollectorProvider)
//
// Generated by this command:
//
//	mockgen -destination=mocks/event_collector.go -package=mocks . ICollectorProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockICollectorProvider is a mock of ICollectorProvider interface.
type MockICollectorProvider struct {
	ctrl     *gomock.Controller
	recorder *MockICollectorProviderMockRecorder
	isgomock struct{}
}

// MockICollectorProviderMockRecorder is the mock recorder for MockICollectorProvider.
type MockICollectorProviderMockRecorder struct {
	mock *MockICollectorProvider
}

// NewMockICollectorProvider creates a new mock instance.
func NewMockICollectorProvider(ctrl *gomock.Controller) *MockICollectorProvider {
	mock := &MockICollectorProvider{ctrl: ctrl}
	mock.recorder = &MockICollectorProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICollectorProvider) EXPECT() *MockICollectorProviderMockRecorder {
	return m.recorder
}

// CollectTraceOpenAPIEvent mocks base method.
func (m *MockICollectorProvider) CollectTraceOpenAPIEvent(ctx context.Context, method string, workspaceId int64, platformType, spanListType string, spanSize int64, errorCode int, start time.Time, isError bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CollectTraceOpenAPIEvent", ctx, method, workspaceId, platformType, spanListType, spanSize, errorCode, start, isError)
}

// CollectTraceOpenAPIEvent indicates an expected call of CollectTraceOpenAPIEvent.
func (mr *MockICollectorProviderMockRecorder) CollectTraceOpenAPIEvent(ctx, method, workspaceId, platformType, spanListType, spanSize, errorCode, start, isError any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectTraceOpenAPIEvent", reflect.TypeOf((*MockICollectorProvider)(nil).CollectTraceOpenAPIEvent), ctx, method, workspaceId, platformType, spanListType, spanSize, errorCode, start, isError)
}

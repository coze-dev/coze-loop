// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/repo (interfaces: IRopeProvider)
//
// Generated by this command:
//
//	mockgen -destination=mocks/repo_provider.go -package=mocks . IRopeProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	repo "github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/repo"
	gomock "go.uber.org/mock/gomock"
)

// MockIRopeProvider is a mock of IRopeProvider interface.
type MockIRopeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIRopeProviderMockRecorder
	isgomock struct{}
}

// MockIRopeProviderMockRecorder is the mock recorder for MockIRopeProvider.
type MockIRopeProviderMockRecorder struct {
	mock *MockIRopeProvider
}

// NewMockIRopeProvider creates a new mock instance.
func NewMockIRopeProvider(ctrl *gomock.Controller) *MockIRopeProvider {
	mock := &MockIRopeProvider{ctrl: ctrl}
	mock.recorder = &MockIRopeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRopeProvider) EXPECT() *MockIRopeProviderMockRecorder {
	return m.recorder
}

// GetTraceRepo mocks base method.
func (m *MockIRopeProvider) GetTraceRepo(ctx context.Context, param repo.GetTraceRepoParam) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceRepo", ctx, param)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTraceRepo indicates an expected call of GetTraceRepo.
func (mr *MockIRopeProviderMockRecorder) GetTraceRepo(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceRepo", reflect.TypeOf((*MockIRopeProvider)(nil).GetTraceRepo), ctx, param)
}

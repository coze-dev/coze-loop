// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/auth/authservice (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=mocks/authservice_client_mock.go -package=mocks github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/auth/authservice Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	callopt "github.com/cloudwego/kitex/client/callopt"
	auth "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// MCheckPermission mocks base method.
func (m *MockClient) MCheckPermission(ctx context.Context, request *auth.MCheckPermissionRequest, callOptions ...callopt.Option) (*auth.MCheckPermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, request}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MCheckPermission", varargs...)
	ret0, _ := ret[0].(*auth.MCheckPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MCheckPermission indicates an expected call of MCheckPermission.
func (mr *MockClientMockRecorder) MCheckPermission(ctx, request any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, request}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MCheckPermission", reflect.TypeOf((*MockClient)(nil).MCheckPermission), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/evaluationsetservice (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=mocks/mock_evaluationsetservice_client.go github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/evaluationsetservice Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	callopt "github.com/cloudwego/kitex/client/callopt"
	eval_set "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/eval_set"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BatchCreateEvaluationSetItems mocks base method.
func (m *MockClient) BatchCreateEvaluationSetItems(ctx context.Context, req *eval_set.BatchCreateEvaluationSetItemsRequest, callOptions ...callopt.Option) (*eval_set.BatchCreateEvaluationSetItemsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreateEvaluationSetItems", varargs...)
	ret0, _ := ret[0].(*eval_set.BatchCreateEvaluationSetItemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateEvaluationSetItems indicates an expected call of BatchCreateEvaluationSetItems.
func (mr *MockClientMockRecorder) BatchCreateEvaluationSetItems(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateEvaluationSetItems", reflect.TypeOf((*MockClient)(nil).BatchCreateEvaluationSetItems), varargs...)
}

// BatchDeleteEvaluationSetItems mocks base method.
func (m *MockClient) BatchDeleteEvaluationSetItems(ctx context.Context, req *eval_set.BatchDeleteEvaluationSetItemsRequest, callOptions ...callopt.Option) (*eval_set.BatchDeleteEvaluationSetItemsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteEvaluationSetItems", varargs...)
	ret0, _ := ret[0].(*eval_set.BatchDeleteEvaluationSetItemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteEvaluationSetItems indicates an expected call of BatchDeleteEvaluationSetItems.
func (mr *MockClientMockRecorder) BatchDeleteEvaluationSetItems(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteEvaluationSetItems", reflect.TypeOf((*MockClient)(nil).BatchDeleteEvaluationSetItems), varargs...)
}

// BatchGetEvaluationSetItems mocks base method.
func (m *MockClient) BatchGetEvaluationSetItems(ctx context.Context, req *eval_set.BatchGetEvaluationSetItemsRequest, callOptions ...callopt.Option) (*eval_set.BatchGetEvaluationSetItemsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetEvaluationSetItems", varargs...)
	ret0, _ := ret[0].(*eval_set.BatchGetEvaluationSetItemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluationSetItems indicates an expected call of BatchGetEvaluationSetItems.
func (mr *MockClientMockRecorder) BatchGetEvaluationSetItems(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluationSetItems", reflect.TypeOf((*MockClient)(nil).BatchGetEvaluationSetItems), varargs...)
}

// BatchGetEvaluationSetVersions mocks base method.
func (m *MockClient) BatchGetEvaluationSetVersions(ctx context.Context, req *eval_set.BatchGetEvaluationSetVersionsRequest, callOptions ...callopt.Option) (*eval_set.BatchGetEvaluationSetVersionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetEvaluationSetVersions", varargs...)
	ret0, _ := ret[0].(*eval_set.BatchGetEvaluationSetVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluationSetVersions indicates an expected call of BatchGetEvaluationSetVersions.
func (mr *MockClientMockRecorder) BatchGetEvaluationSetVersions(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluationSetVersions", reflect.TypeOf((*MockClient)(nil).BatchGetEvaluationSetVersions), varargs...)
}

// ClearEvaluationSetDraftItem mocks base method.
func (m *MockClient) ClearEvaluationSetDraftItem(ctx context.Context, req *eval_set.ClearEvaluationSetDraftItemRequest, callOptions ...callopt.Option) (*eval_set.ClearEvaluationSetDraftItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClearEvaluationSetDraftItem", varargs...)
	ret0, _ := ret[0].(*eval_set.ClearEvaluationSetDraftItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearEvaluationSetDraftItem indicates an expected call of ClearEvaluationSetDraftItem.
func (mr *MockClientMockRecorder) ClearEvaluationSetDraftItem(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearEvaluationSetDraftItem", reflect.TypeOf((*MockClient)(nil).ClearEvaluationSetDraftItem), varargs...)
}

// CreateEvaluationSet mocks base method.
func (m *MockClient) CreateEvaluationSet(ctx context.Context, req *eval_set.CreateEvaluationSetRequest, callOptions ...callopt.Option) (*eval_set.CreateEvaluationSetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEvaluationSet", varargs...)
	ret0, _ := ret[0].(*eval_set.CreateEvaluationSetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvaluationSet indicates an expected call of CreateEvaluationSet.
func (mr *MockClientMockRecorder) CreateEvaluationSet(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluationSet", reflect.TypeOf((*MockClient)(nil).CreateEvaluationSet), varargs...)
}

// CreateEvaluationSetVersion mocks base method.
func (m *MockClient) CreateEvaluationSetVersion(ctx context.Context, req *eval_set.CreateEvaluationSetVersionRequest, callOptions ...callopt.Option) (*eval_set.CreateEvaluationSetVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEvaluationSetVersion", varargs...)
	ret0, _ := ret[0].(*eval_set.CreateEvaluationSetVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvaluationSetVersion indicates an expected call of CreateEvaluationSetVersion.
func (mr *MockClientMockRecorder) CreateEvaluationSetVersion(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluationSetVersion", reflect.TypeOf((*MockClient)(nil).CreateEvaluationSetVersion), varargs...)
}

// DeleteEvaluationSet mocks base method.
func (m *MockClient) DeleteEvaluationSet(ctx context.Context, req *eval_set.DeleteEvaluationSetRequest, callOptions ...callopt.Option) (*eval_set.DeleteEvaluationSetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEvaluationSet", varargs...)
	ret0, _ := ret[0].(*eval_set.DeleteEvaluationSetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEvaluationSet indicates an expected call of DeleteEvaluationSet.
func (mr *MockClientMockRecorder) DeleteEvaluationSet(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvaluationSet", reflect.TypeOf((*MockClient)(nil).DeleteEvaluationSet), varargs...)
}

// GetEvaluationSet mocks base method.
func (m *MockClient) GetEvaluationSet(ctx context.Context, req *eval_set.GetEvaluationSetRequest, callOptions ...callopt.Option) (*eval_set.GetEvaluationSetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvaluationSet", varargs...)
	ret0, _ := ret[0].(*eval_set.GetEvaluationSetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationSet indicates an expected call of GetEvaluationSet.
func (mr *MockClientMockRecorder) GetEvaluationSet(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationSet", reflect.TypeOf((*MockClient)(nil).GetEvaluationSet), varargs...)
}

// GetEvaluationSetVersion mocks base method.
func (m *MockClient) GetEvaluationSetVersion(ctx context.Context, req *eval_set.GetEvaluationSetVersionRequest, callOptions ...callopt.Option) (*eval_set.GetEvaluationSetVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvaluationSetVersion", varargs...)
	ret0, _ := ret[0].(*eval_set.GetEvaluationSetVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationSetVersion indicates an expected call of GetEvaluationSetVersion.
func (mr *MockClientMockRecorder) GetEvaluationSetVersion(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationSetVersion", reflect.TypeOf((*MockClient)(nil).GetEvaluationSetVersion), varargs...)
}

// ListEvaluationSetItems mocks base method.
func (m *MockClient) ListEvaluationSetItems(ctx context.Context, req *eval_set.ListEvaluationSetItemsRequest, callOptions ...callopt.Option) (*eval_set.ListEvaluationSetItemsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEvaluationSetItems", varargs...)
	ret0, _ := ret[0].(*eval_set.ListEvaluationSetItemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvaluationSetItems indicates an expected call of ListEvaluationSetItems.
func (mr *MockClientMockRecorder) ListEvaluationSetItems(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvaluationSetItems", reflect.TypeOf((*MockClient)(nil).ListEvaluationSetItems), varargs...)
}

// ListEvaluationSetVersions mocks base method.
func (m *MockClient) ListEvaluationSetVersions(ctx context.Context, req *eval_set.ListEvaluationSetVersionsRequest, callOptions ...callopt.Option) (*eval_set.ListEvaluationSetVersionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEvaluationSetVersions", varargs...)
	ret0, _ := ret[0].(*eval_set.ListEvaluationSetVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvaluationSetVersions indicates an expected call of ListEvaluationSetVersions.
func (mr *MockClientMockRecorder) ListEvaluationSetVersions(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvaluationSetVersions", reflect.TypeOf((*MockClient)(nil).ListEvaluationSetVersions), varargs...)
}

// ListEvaluationSets mocks base method.
func (m *MockClient) ListEvaluationSets(ctx context.Context, req *eval_set.ListEvaluationSetsRequest, callOptions ...callopt.Option) (*eval_set.ListEvaluationSetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEvaluationSets", varargs...)
	ret0, _ := ret[0].(*eval_set.ListEvaluationSetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvaluationSets indicates an expected call of ListEvaluationSets.
func (mr *MockClientMockRecorder) ListEvaluationSets(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvaluationSets", reflect.TypeOf((*MockClient)(nil).ListEvaluationSets), varargs...)
}

// UpdateEvaluationSet mocks base method.
func (m *MockClient) UpdateEvaluationSet(ctx context.Context, req *eval_set.UpdateEvaluationSetRequest, callOptions ...callopt.Option) (*eval_set.UpdateEvaluationSetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEvaluationSet", varargs...)
	ret0, _ := ret[0].(*eval_set.UpdateEvaluationSetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvaluationSet indicates an expected call of UpdateEvaluationSet.
func (mr *MockClientMockRecorder) UpdateEvaluationSet(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluationSet", reflect.TypeOf((*MockClient)(nil).UpdateEvaluationSet), varargs...)
}

// UpdateEvaluationSetItem mocks base method.
func (m *MockClient) UpdateEvaluationSetItem(ctx context.Context, req *eval_set.UpdateEvaluationSetItemRequest, callOptions ...callopt.Option) (*eval_set.UpdateEvaluationSetItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEvaluationSetItem", varargs...)
	ret0, _ := ret[0].(*eval_set.UpdateEvaluationSetItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvaluationSetItem indicates an expected call of UpdateEvaluationSetItem.
func (mr *MockClientMockRecorder) UpdateEvaluationSetItem(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluationSetItem", reflect.TypeOf((*MockClient)(nil).UpdateEvaluationSetItem), varargs...)
}

// UpdateEvaluationSetSchema mocks base method.
func (m *MockClient) UpdateEvaluationSetSchema(ctx context.Context, req *eval_set.UpdateEvaluationSetSchemaRequest, callOptions ...callopt.Option) (*eval_set.UpdateEvaluationSetSchemaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEvaluationSetSchema", varargs...)
	ret0, _ := ret[0].(*eval_set.UpdateEvaluationSetSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvaluationSetSchema indicates an expected call of UpdateEvaluationSetSchema.
func (mr *MockClientMockRecorder) UpdateEvaluationSetSchema(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluationSetSchema", reflect.TypeOf((*MockClient)(nil).UpdateEvaluationSetSchema), varargs...)
}

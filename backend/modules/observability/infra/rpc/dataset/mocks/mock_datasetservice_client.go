// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/datasetservice (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=modules/observability/infra/rpc/dataset/mocks/mock_datasetservice_client.go github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/datasetservice Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dataset "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/dataset"
	callopt "github.com/cloudwego/kitex/client/callopt"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// BatchCreateDatasetItems mocks base method.
func (m *MockClient) BatchCreateDatasetItems(arg0 context.Context, arg1 *dataset.BatchCreateDatasetItemsRequest, arg2 ...callopt.Option) (*dataset.BatchCreateDatasetItemsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreateDatasetItems", varargs...)
	ret0, _ := ret[0].(*dataset.BatchCreateDatasetItemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateDatasetItems indicates an expected call of BatchCreateDatasetItems.
func (mr *MockClientMockRecorder) BatchCreateDatasetItems(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateDatasetItems", reflect.TypeOf((*MockClient)(nil).BatchCreateDatasetItems), varargs...)
}

// BatchDeleteDatasetItems mocks base method.
func (m *MockClient) BatchDeleteDatasetItems(arg0 context.Context, arg1 *dataset.BatchDeleteDatasetItemsRequest, arg2 ...callopt.Option) (*dataset.BatchDeleteDatasetItemsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteDatasetItems", varargs...)
	ret0, _ := ret[0].(*dataset.BatchDeleteDatasetItemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchDeleteDatasetItems indicates an expected call of BatchDeleteDatasetItems.
func (mr *MockClientMockRecorder) BatchDeleteDatasetItems(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteDatasetItems", reflect.TypeOf((*MockClient)(nil).BatchDeleteDatasetItems), varargs...)
}

// BatchGetDatasetItems mocks base method.
func (m *MockClient) BatchGetDatasetItems(arg0 context.Context, arg1 *dataset.BatchGetDatasetItemsRequest, arg2 ...callopt.Option) (*dataset.BatchGetDatasetItemsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetDatasetItems", varargs...)
	ret0, _ := ret[0].(*dataset.BatchGetDatasetItemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDatasetItems indicates an expected call of BatchGetDatasetItems.
func (mr *MockClientMockRecorder) BatchGetDatasetItems(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDatasetItems", reflect.TypeOf((*MockClient)(nil).BatchGetDatasetItems), varargs...)
}

// BatchGetDatasetItemsByVersion mocks base method.
func (m *MockClient) BatchGetDatasetItemsByVersion(arg0 context.Context, arg1 *dataset.BatchGetDatasetItemsByVersionRequest, arg2 ...callopt.Option) (*dataset.BatchGetDatasetItemsByVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetDatasetItemsByVersion", varargs...)
	ret0, _ := ret[0].(*dataset.BatchGetDatasetItemsByVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDatasetItemsByVersion indicates an expected call of BatchGetDatasetItemsByVersion.
func (mr *MockClientMockRecorder) BatchGetDatasetItemsByVersion(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDatasetItemsByVersion", reflect.TypeOf((*MockClient)(nil).BatchGetDatasetItemsByVersion), varargs...)
}

// BatchGetDatasetVersions mocks base method.
func (m *MockClient) BatchGetDatasetVersions(arg0 context.Context, arg1 *dataset.BatchGetDatasetVersionsRequest, arg2 ...callopt.Option) (*dataset.BatchGetDatasetVersionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetDatasetVersions", varargs...)
	ret0, _ := ret[0].(*dataset.BatchGetDatasetVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDatasetVersions indicates an expected call of BatchGetDatasetVersions.
func (mr *MockClientMockRecorder) BatchGetDatasetVersions(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDatasetVersions", reflect.TypeOf((*MockClient)(nil).BatchGetDatasetVersions), varargs...)
}

// BatchGetDatasets mocks base method.
func (m *MockClient) BatchGetDatasets(arg0 context.Context, arg1 *dataset.BatchGetDatasetsRequest, arg2 ...callopt.Option) (*dataset.BatchGetDatasetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetDatasets", varargs...)
	ret0, _ := ret[0].(*dataset.BatchGetDatasetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDatasets indicates an expected call of BatchGetDatasets.
func (mr *MockClientMockRecorder) BatchGetDatasets(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDatasets", reflect.TypeOf((*MockClient)(nil).BatchGetDatasets), varargs...)
}

// ClearDatasetItem mocks base method.
func (m *MockClient) ClearDatasetItem(arg0 context.Context, arg1 *dataset.ClearDatasetItemRequest, arg2 ...callopt.Option) (*dataset.ClearDatasetItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ClearDatasetItem", varargs...)
	ret0, _ := ret[0].(*dataset.ClearDatasetItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClearDatasetItem indicates an expected call of ClearDatasetItem.
func (mr *MockClientMockRecorder) ClearDatasetItem(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDatasetItem", reflect.TypeOf((*MockClient)(nil).ClearDatasetItem), varargs...)
}

// CreateDataset mocks base method.
func (m *MockClient) CreateDataset(arg0 context.Context, arg1 *dataset.CreateDatasetRequest, arg2 ...callopt.Option) (*dataset.CreateDatasetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDataset", varargs...)
	ret0, _ := ret[0].(*dataset.CreateDatasetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataset indicates an expected call of CreateDataset.
func (mr *MockClientMockRecorder) CreateDataset(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataset", reflect.TypeOf((*MockClient)(nil).CreateDataset), varargs...)
}

// CreateDatasetVersion mocks base method.
func (m *MockClient) CreateDatasetVersion(arg0 context.Context, arg1 *dataset.CreateDatasetVersionRequest, arg2 ...callopt.Option) (*dataset.CreateDatasetVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateDatasetVersion", varargs...)
	ret0, _ := ret[0].(*dataset.CreateDatasetVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetVersion indicates an expected call of CreateDatasetVersion.
func (mr *MockClientMockRecorder) CreateDatasetVersion(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetVersion", reflect.TypeOf((*MockClient)(nil).CreateDatasetVersion), varargs...)
}

// DeleteDataset mocks base method.
func (m *MockClient) DeleteDataset(arg0 context.Context, arg1 *dataset.DeleteDatasetRequest, arg2 ...callopt.Option) (*dataset.DeleteDatasetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDataset", varargs...)
	ret0, _ := ret[0].(*dataset.DeleteDatasetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDataset indicates an expected call of DeleteDataset.
func (mr *MockClientMockRecorder) DeleteDataset(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataset", reflect.TypeOf((*MockClient)(nil).DeleteDataset), varargs...)
}

// DeleteDatasetItem mocks base method.
func (m *MockClient) DeleteDatasetItem(arg0 context.Context, arg1 *dataset.DeleteDatasetItemRequest, arg2 ...callopt.Option) (*dataset.DeleteDatasetItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteDatasetItem", varargs...)
	ret0, _ := ret[0].(*dataset.DeleteDatasetItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteDatasetItem indicates an expected call of DeleteDatasetItem.
func (mr *MockClientMockRecorder) DeleteDatasetItem(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatasetItem", reflect.TypeOf((*MockClient)(nil).DeleteDatasetItem), varargs...)
}

// GetDataset mocks base method.
func (m *MockClient) GetDataset(arg0 context.Context, arg1 *dataset.GetDatasetRequest, arg2 ...callopt.Option) (*dataset.GetDatasetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataset", varargs...)
	ret0, _ := ret[0].(*dataset.GetDatasetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataset indicates an expected call of GetDataset.
func (mr *MockClientMockRecorder) GetDataset(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataset", reflect.TypeOf((*MockClient)(nil).GetDataset), varargs...)
}

// GetDatasetIOJob mocks base method.
func (m *MockClient) GetDatasetIOJob(arg0 context.Context, arg1 *dataset.GetDatasetIOJobRequest, arg2 ...callopt.Option) (*dataset.GetDatasetIOJobResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatasetIOJob", varargs...)
	ret0, _ := ret[0].(*dataset.GetDatasetIOJobResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatasetIOJob indicates an expected call of GetDatasetIOJob.
func (mr *MockClientMockRecorder) GetDatasetIOJob(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasetIOJob", reflect.TypeOf((*MockClient)(nil).GetDatasetIOJob), varargs...)
}

// GetDatasetItem mocks base method.
func (m *MockClient) GetDatasetItem(arg0 context.Context, arg1 *dataset.GetDatasetItemRequest, arg2 ...callopt.Option) (*dataset.GetDatasetItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatasetItem", varargs...)
	ret0, _ := ret[0].(*dataset.GetDatasetItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatasetItem indicates an expected call of GetDatasetItem.
func (mr *MockClientMockRecorder) GetDatasetItem(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasetItem", reflect.TypeOf((*MockClient)(nil).GetDatasetItem), varargs...)
}

// GetDatasetSchema mocks base method.
func (m *MockClient) GetDatasetSchema(arg0 context.Context, arg1 *dataset.GetDatasetSchemaRequest, arg2 ...callopt.Option) (*dataset.GetDatasetSchemaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatasetSchema", varargs...)
	ret0, _ := ret[0].(*dataset.GetDatasetSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatasetSchema indicates an expected call of GetDatasetSchema.
func (mr *MockClientMockRecorder) GetDatasetSchema(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasetSchema", reflect.TypeOf((*MockClient)(nil).GetDatasetSchema), varargs...)
}

// GetDatasetVersion mocks base method.
func (m *MockClient) GetDatasetVersion(arg0 context.Context, arg1 *dataset.GetDatasetVersionRequest, arg2 ...callopt.Option) (*dataset.GetDatasetVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDatasetVersion", varargs...)
	ret0, _ := ret[0].(*dataset.GetDatasetVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatasetVersion indicates an expected call of GetDatasetVersion.
func (mr *MockClientMockRecorder) GetDatasetVersion(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasetVersion", reflect.TypeOf((*MockClient)(nil).GetDatasetVersion), varargs...)
}

// ImportDataset mocks base method.
func (m *MockClient) ImportDataset(arg0 context.Context, arg1 *dataset.ImportDatasetRequest, arg2 ...callopt.Option) (*dataset.ImportDatasetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ImportDataset", varargs...)
	ret0, _ := ret[0].(*dataset.ImportDatasetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportDataset indicates an expected call of ImportDataset.
func (mr *MockClientMockRecorder) ImportDataset(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportDataset", reflect.TypeOf((*MockClient)(nil).ImportDataset), varargs...)
}

// ListDatasetIOJobs mocks base method.
func (m *MockClient) ListDatasetIOJobs(arg0 context.Context, arg1 *dataset.ListDatasetIOJobsRequest, arg2 ...callopt.Option) (*dataset.ListDatasetIOJobsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetIOJobs", varargs...)
	ret0, _ := ret[0].(*dataset.ListDatasetIOJobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetIOJobs indicates an expected call of ListDatasetIOJobs.
func (mr *MockClientMockRecorder) ListDatasetIOJobs(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetIOJobs", reflect.TypeOf((*MockClient)(nil).ListDatasetIOJobs), varargs...)
}

// ListDatasetItems mocks base method.
func (m *MockClient) ListDatasetItems(arg0 context.Context, arg1 *dataset.ListDatasetItemsRequest, arg2 ...callopt.Option) (*dataset.ListDatasetItemsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetItems", varargs...)
	ret0, _ := ret[0].(*dataset.ListDatasetItemsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetItems indicates an expected call of ListDatasetItems.
func (mr *MockClientMockRecorder) ListDatasetItems(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetItems", reflect.TypeOf((*MockClient)(nil).ListDatasetItems), varargs...)
}

// ListDatasetItemsByVersion mocks base method.
func (m *MockClient) ListDatasetItemsByVersion(arg0 context.Context, arg1 *dataset.ListDatasetItemsByVersionRequest, arg2 ...callopt.Option) (*dataset.ListDatasetItemsByVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetItemsByVersion", varargs...)
	ret0, _ := ret[0].(*dataset.ListDatasetItemsByVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetItemsByVersion indicates an expected call of ListDatasetItemsByVersion.
func (mr *MockClientMockRecorder) ListDatasetItemsByVersion(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetItemsByVersion", reflect.TypeOf((*MockClient)(nil).ListDatasetItemsByVersion), varargs...)
}

// ListDatasetVersions mocks base method.
func (m *MockClient) ListDatasetVersions(arg0 context.Context, arg1 *dataset.ListDatasetVersionsRequest, arg2 ...callopt.Option) (*dataset.ListDatasetVersionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasetVersions", varargs...)
	ret0, _ := ret[0].(*dataset.ListDatasetVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasetVersions indicates an expected call of ListDatasetVersions.
func (mr *MockClientMockRecorder) ListDatasetVersions(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetVersions", reflect.TypeOf((*MockClient)(nil).ListDatasetVersions), varargs...)
}

// ListDatasets mocks base method.
func (m *MockClient) ListDatasets(arg0 context.Context, arg1 *dataset.ListDatasetsRequest, arg2 ...callopt.Option) (*dataset.ListDatasetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListDatasets", varargs...)
	ret0, _ := ret[0].(*dataset.ListDatasetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDatasets indicates an expected call of ListDatasets.
func (mr *MockClientMockRecorder) ListDatasets(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasets", reflect.TypeOf((*MockClient)(nil).ListDatasets), varargs...)
}

// UpdateDataset mocks base method.
func (m *MockClient) UpdateDataset(arg0 context.Context, arg1 *dataset.UpdateDatasetRequest, arg2 ...callopt.Option) (*dataset.UpdateDatasetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDataset", varargs...)
	ret0, _ := ret[0].(*dataset.UpdateDatasetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDataset indicates an expected call of UpdateDataset.
func (mr *MockClientMockRecorder) UpdateDataset(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataset", reflect.TypeOf((*MockClient)(nil).UpdateDataset), varargs...)
}

// UpdateDatasetItem mocks base method.
func (m *MockClient) UpdateDatasetItem(arg0 context.Context, arg1 *dataset.UpdateDatasetItemRequest, arg2 ...callopt.Option) (*dataset.UpdateDatasetItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDatasetItem", varargs...)
	ret0, _ := ret[0].(*dataset.UpdateDatasetItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatasetItem indicates an expected call of UpdateDatasetItem.
func (mr *MockClientMockRecorder) UpdateDatasetItem(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetItem", reflect.TypeOf((*MockClient)(nil).UpdateDatasetItem), varargs...)
}

// UpdateDatasetSchema mocks base method.
func (m *MockClient) UpdateDatasetSchema(arg0 context.Context, arg1 *dataset.UpdateDatasetSchemaRequest, arg2 ...callopt.Option) (*dataset.UpdateDatasetSchemaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDatasetSchema", varargs...)
	ret0, _ := ret[0].(*dataset.UpdateDatasetSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDatasetSchema indicates an expected call of UpdateDatasetSchema.
func (mr *MockClientMockRecorder) UpdateDatasetSchema(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetSchema", reflect.TypeOf((*MockClient)(nil).UpdateDatasetSchema), varargs...)
}

// ValidateDatasetItems mocks base method.
func (m *MockClient) ValidateDatasetItems(arg0 context.Context, arg1 *dataset.ValidateDatasetItemsReq, arg2 ...callopt.Option) (*dataset.ValidateDatasetItemsResp, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateDatasetItems", varargs...)
	ret0, _ := ret[0].(*dataset.ValidateDatasetItemsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateDatasetItems indicates an expected call of ValidateDatasetItems.
func (mr *MockClientMockRecorder) ValidateDatasetItems(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateDatasetItems", reflect.TypeOf((*MockClient)(nil).ValidateDatasetItems), varargs...)
}

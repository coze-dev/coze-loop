// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/repo/mysql/gorm_gen/model"
)

func newObservabilityTaskRun(db *gorm.DB, opts ...gen.DOOption) observabilityTaskRun {
	_observabilityTaskRun := observabilityTaskRun{}

	_observabilityTaskRun.observabilityTaskRunDo.UseDB(db, opts...)
	_observabilityTaskRun.observabilityTaskRunDo.UseModel(&model.ObservabilityTaskRun{})

	tableName := _observabilityTaskRun.observabilityTaskRunDo.TableName()
	_observabilityTaskRun.ALL = field.NewAsterisk(tableName)
	_observabilityTaskRun.ID = field.NewInt64(tableName, "id")
	_observabilityTaskRun.WorkspaceID = field.NewInt64(tableName, "workspace_id")
	_observabilityTaskRun.TaskID = field.NewInt64(tableName, "task_id")
	_observabilityTaskRun.TaskType = field.NewString(tableName, "task_type")
	_observabilityTaskRun.RunStatus = field.NewString(tableName, "run_status")
	_observabilityTaskRun.RunDetail = field.NewString(tableName, "run_detail")
	_observabilityTaskRun.BackfillDetail = field.NewString(tableName, "backfill_detail")
	_observabilityTaskRun.RunStartAt = field.NewTime(tableName, "run_start_at")
	_observabilityTaskRun.RunEndAt = field.NewTime(tableName, "run_end_at")
	_observabilityTaskRun.RunConfig = field.NewString(tableName, "run_config")
	_observabilityTaskRun.CreatedAt = field.NewTime(tableName, "created_at")
	_observabilityTaskRun.UpdatedAt = field.NewTime(tableName, "updated_at")

	_observabilityTaskRun.fillFieldMap()

	return _observabilityTaskRun
}

// observabilityTaskRun Task Run信息
type observabilityTaskRun struct {
	observabilityTaskRunDo observabilityTaskRunDo

	ALL            field.Asterisk
	ID             field.Int64  // TaskRun ID
	WorkspaceID    field.Int64  // 空间ID
	TaskID         field.Int64  // Task ID
	TaskType       field.String // Task类型
	RunStatus      field.String // Task Run状态
	RunDetail      field.String // Task Run运行状态详情
	BackfillDetail field.String // 历史回溯Task Run运行状态详情
	RunStartAt     field.Time   // 任务开始时间
	RunEndAt       field.Time   // 任务结束时间
	RunConfig      field.String // 相关Run的配置信息
	CreatedAt      field.Time   // 创建时间
	UpdatedAt      field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (o observabilityTaskRun) Table(newTableName string) *observabilityTaskRun {
	o.observabilityTaskRunDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o observabilityTaskRun) As(alias string) *observabilityTaskRun {
	o.observabilityTaskRunDo.DO = *(o.observabilityTaskRunDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *observabilityTaskRun) updateTableName(table string) *observabilityTaskRun {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.WorkspaceID = field.NewInt64(table, "workspace_id")
	o.TaskID = field.NewInt64(table, "task_id")
	o.TaskType = field.NewString(table, "task_type")
	o.RunStatus = field.NewString(table, "run_status")
	o.RunDetail = field.NewString(table, "run_detail")
	o.BackfillDetail = field.NewString(table, "backfill_detail")
	o.RunStartAt = field.NewTime(table, "run_start_at")
	o.RunEndAt = field.NewTime(table, "run_end_at")
	o.RunConfig = field.NewString(table, "run_config")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")

	o.fillFieldMap()

	return o
}

func (o *observabilityTaskRun) WithContext(ctx context.Context) *observabilityTaskRunDo {
	return o.observabilityTaskRunDo.WithContext(ctx)
}

func (o observabilityTaskRun) TableName() string { return o.observabilityTaskRunDo.TableName() }

func (o observabilityTaskRun) Alias() string { return o.observabilityTaskRunDo.Alias() }

func (o observabilityTaskRun) Columns(cols ...field.Expr) gen.Columns {
	return o.observabilityTaskRunDo.Columns(cols...)
}

func (o *observabilityTaskRun) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *observabilityTaskRun) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 12)
	o.fieldMap["id"] = o.ID
	o.fieldMap["workspace_id"] = o.WorkspaceID
	o.fieldMap["task_id"] = o.TaskID
	o.fieldMap["task_type"] = o.TaskType
	o.fieldMap["run_status"] = o.RunStatus
	o.fieldMap["run_detail"] = o.RunDetail
	o.fieldMap["backfill_detail"] = o.BackfillDetail
	o.fieldMap["run_start_at"] = o.RunStartAt
	o.fieldMap["run_end_at"] = o.RunEndAt
	o.fieldMap["run_config"] = o.RunConfig
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
}

func (o observabilityTaskRun) clone(db *gorm.DB) observabilityTaskRun {
	o.observabilityTaskRunDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o observabilityTaskRun) replaceDB(db *gorm.DB) observabilityTaskRun {
	o.observabilityTaskRunDo.ReplaceDB(db)
	return o
}

type observabilityTaskRunDo struct{ gen.DO }

func (o observabilityTaskRunDo) Debug() *observabilityTaskRunDo {
	return o.withDO(o.DO.Debug())
}

func (o observabilityTaskRunDo) WithContext(ctx context.Context) *observabilityTaskRunDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o observabilityTaskRunDo) ReadDB() *observabilityTaskRunDo {
	return o.Clauses(dbresolver.Read)
}

func (o observabilityTaskRunDo) WriteDB() *observabilityTaskRunDo {
	return o.Clauses(dbresolver.Write)
}

func (o observabilityTaskRunDo) Session(config *gorm.Session) *observabilityTaskRunDo {
	return o.withDO(o.DO.Session(config))
}

func (o observabilityTaskRunDo) Clauses(conds ...clause.Expression) *observabilityTaskRunDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o observabilityTaskRunDo) Returning(value interface{}, columns ...string) *observabilityTaskRunDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o observabilityTaskRunDo) Not(conds ...gen.Condition) *observabilityTaskRunDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o observabilityTaskRunDo) Or(conds ...gen.Condition) *observabilityTaskRunDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o observabilityTaskRunDo) Select(conds ...field.Expr) *observabilityTaskRunDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o observabilityTaskRunDo) Where(conds ...gen.Condition) *observabilityTaskRunDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o observabilityTaskRunDo) Order(conds ...field.Expr) *observabilityTaskRunDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o observabilityTaskRunDo) Distinct(cols ...field.Expr) *observabilityTaskRunDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o observabilityTaskRunDo) Omit(cols ...field.Expr) *observabilityTaskRunDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o observabilityTaskRunDo) Join(table schema.Tabler, on ...field.Expr) *observabilityTaskRunDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o observabilityTaskRunDo) LeftJoin(table schema.Tabler, on ...field.Expr) *observabilityTaskRunDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o observabilityTaskRunDo) RightJoin(table schema.Tabler, on ...field.Expr) *observabilityTaskRunDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o observabilityTaskRunDo) Group(cols ...field.Expr) *observabilityTaskRunDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o observabilityTaskRunDo) Having(conds ...gen.Condition) *observabilityTaskRunDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o observabilityTaskRunDo) Limit(limit int) *observabilityTaskRunDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o observabilityTaskRunDo) Offset(offset int) *observabilityTaskRunDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o observabilityTaskRunDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *observabilityTaskRunDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o observabilityTaskRunDo) Unscoped() *observabilityTaskRunDo {
	return o.withDO(o.DO.Unscoped())
}

func (o observabilityTaskRunDo) Create(values ...*model.ObservabilityTaskRun) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o observabilityTaskRunDo) CreateInBatches(values []*model.ObservabilityTaskRun, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o observabilityTaskRunDo) Save(values ...*model.ObservabilityTaskRun) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o observabilityTaskRunDo) First() (*model.ObservabilityTaskRun, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ObservabilityTaskRun), nil
	}
}

func (o observabilityTaskRunDo) Take() (*model.ObservabilityTaskRun, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ObservabilityTaskRun), nil
	}
}

func (o observabilityTaskRunDo) Last() (*model.ObservabilityTaskRun, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ObservabilityTaskRun), nil
	}
}

func (o observabilityTaskRunDo) Find() ([]*model.ObservabilityTaskRun, error) {
	result, err := o.DO.Find()
	return result.([]*model.ObservabilityTaskRun), err
}

func (o observabilityTaskRunDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ObservabilityTaskRun, err error) {
	buf := make([]*model.ObservabilityTaskRun, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o observabilityTaskRunDo) FindInBatches(result *[]*model.ObservabilityTaskRun, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o observabilityTaskRunDo) Attrs(attrs ...field.AssignExpr) *observabilityTaskRunDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o observabilityTaskRunDo) Assign(attrs ...field.AssignExpr) *observabilityTaskRunDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o observabilityTaskRunDo) Joins(fields ...field.RelationField) *observabilityTaskRunDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o observabilityTaskRunDo) Preload(fields ...field.RelationField) *observabilityTaskRunDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o observabilityTaskRunDo) FirstOrInit() (*model.ObservabilityTaskRun, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ObservabilityTaskRun), nil
	}
}

func (o observabilityTaskRunDo) FirstOrCreate() (*model.ObservabilityTaskRun, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ObservabilityTaskRun), nil
	}
}

func (o observabilityTaskRunDo) FindByPage(offset int, limit int) (result []*model.ObservabilityTaskRun, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o observabilityTaskRunDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o observabilityTaskRunDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o observabilityTaskRunDo) Delete(models ...*model.ObservabilityTaskRun) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *observabilityTaskRunDo) withDO(do gen.Dao) *observabilityTaskRunDo {
	o.DO = *do.(*gen.DO)
	return o
}

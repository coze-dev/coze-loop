// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/repo/mysql/gorm_gen/model"
)

func newObservabilityTask(db *gorm.DB, opts ...gen.DOOption) observabilityTask {
	_observabilityTask := observabilityTask{}

	_observabilityTask.observabilityTaskDo.UseDB(db, opts...)
	_observabilityTask.observabilityTaskDo.UseModel(&model.ObservabilityTask{})

	tableName := _observabilityTask.observabilityTaskDo.TableName()
	_observabilityTask.ALL = field.NewAsterisk(tableName)
	_observabilityTask.ID = field.NewInt64(tableName, "id")
	_observabilityTask.WorkspaceID = field.NewInt64(tableName, "workspace_id")
	_observabilityTask.Name = field.NewString(tableName, "name")
	_observabilityTask.Description = field.NewString(tableName, "description")
	_observabilityTask.TaskType = field.NewString(tableName, "task_type")
	_observabilityTask.TaskStatus = field.NewString(tableName, "task_status")
	_observabilityTask.TaskDetail = field.NewString(tableName, "task_detail")
	_observabilityTask.SpanFilter = field.NewString(tableName, "span_filter")
	_observabilityTask.EffectiveTime = field.NewString(tableName, "effective_time")
	_observabilityTask.BackfillEffectiveTime = field.NewString(tableName, "backfill_effective_time")
	_observabilityTask.Sampler = field.NewString(tableName, "sampler")
	_observabilityTask.TaskConfig = field.NewString(tableName, "task_config")
	_observabilityTask.CreatedAt = field.NewTime(tableName, "created_at")
	_observabilityTask.UpdatedAt = field.NewTime(tableName, "updated_at")
	_observabilityTask.CreatedBy = field.NewString(tableName, "created_by")
	_observabilityTask.UpdatedBy = field.NewString(tableName, "updated_by")

	_observabilityTask.fillFieldMap()

	return _observabilityTask
}

// observabilityTask 任务信息
type observabilityTask struct {
	observabilityTaskDo observabilityTaskDo

	ALL                   field.Asterisk
	ID                    field.Int64  // Task ID
	WorkspaceID           field.Int64  // 空间ID
	Name                  field.String // 任务名称
	Description           field.String // 任务描述
	TaskType              field.String // 任务类型
	TaskStatus            field.String // 任务状态
	TaskDetail            field.String // 任务运行状态详情
	SpanFilter            field.String // span 过滤条件
	EffectiveTime         field.String // 生效时间
	BackfillEffectiveTime field.String // 历史回溯生效时间
	Sampler               field.String // 采样器
	TaskConfig            field.String // 相关任务的配置信息
	CreatedAt             field.Time   // 创建时间
	UpdatedAt             field.Time   // 更新时间
	CreatedBy             field.String // 创建人
	UpdatedBy             field.String // 更新人

	fieldMap map[string]field.Expr
}

func (o observabilityTask) Table(newTableName string) *observabilityTask {
	o.observabilityTaskDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o observabilityTask) As(alias string) *observabilityTask {
	o.observabilityTaskDo.DO = *(o.observabilityTaskDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *observabilityTask) updateTableName(table string) *observabilityTask {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewInt64(table, "id")
	o.WorkspaceID = field.NewInt64(table, "workspace_id")
	o.Name = field.NewString(table, "name")
	o.Description = field.NewString(table, "description")
	o.TaskType = field.NewString(table, "task_type")
	o.TaskStatus = field.NewString(table, "task_status")
	o.TaskDetail = field.NewString(table, "task_detail")
	o.SpanFilter = field.NewString(table, "span_filter")
	o.EffectiveTime = field.NewString(table, "effective_time")
	o.BackfillEffectiveTime = field.NewString(table, "backfill_effective_time")
	o.Sampler = field.NewString(table, "sampler")
	o.TaskConfig = field.NewString(table, "task_config")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.CreatedBy = field.NewString(table, "created_by")
	o.UpdatedBy = field.NewString(table, "updated_by")

	o.fillFieldMap()

	return o
}

func (o *observabilityTask) WithContext(ctx context.Context) *observabilityTaskDo {
	return o.observabilityTaskDo.WithContext(ctx)
}

func (o observabilityTask) TableName() string { return o.observabilityTaskDo.TableName() }

func (o observabilityTask) Alias() string { return o.observabilityTaskDo.Alias() }

func (o observabilityTask) Columns(cols ...field.Expr) gen.Columns {
	return o.observabilityTaskDo.Columns(cols...)
}

func (o *observabilityTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *observabilityTask) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 16)
	o.fieldMap["id"] = o.ID
	o.fieldMap["workspace_id"] = o.WorkspaceID
	o.fieldMap["name"] = o.Name
	o.fieldMap["description"] = o.Description
	o.fieldMap["task_type"] = o.TaskType
	o.fieldMap["task_status"] = o.TaskStatus
	o.fieldMap["task_detail"] = o.TaskDetail
	o.fieldMap["span_filter"] = o.SpanFilter
	o.fieldMap["effective_time"] = o.EffectiveTime
	o.fieldMap["backfill_effective_time"] = o.BackfillEffectiveTime
	o.fieldMap["sampler"] = o.Sampler
	o.fieldMap["task_config"] = o.TaskConfig
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["created_by"] = o.CreatedBy
	o.fieldMap["updated_by"] = o.UpdatedBy
}

func (o observabilityTask) clone(db *gorm.DB) observabilityTask {
	o.observabilityTaskDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o observabilityTask) replaceDB(db *gorm.DB) observabilityTask {
	o.observabilityTaskDo.ReplaceDB(db)
	return o
}

type observabilityTaskDo struct{ gen.DO }

func (o observabilityTaskDo) Debug() *observabilityTaskDo {
	return o.withDO(o.DO.Debug())
}

func (o observabilityTaskDo) WithContext(ctx context.Context) *observabilityTaskDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o observabilityTaskDo) ReadDB() *observabilityTaskDo {
	return o.Clauses(dbresolver.Read)
}

func (o observabilityTaskDo) WriteDB() *observabilityTaskDo {
	return o.Clauses(dbresolver.Write)
}

func (o observabilityTaskDo) Session(config *gorm.Session) *observabilityTaskDo {
	return o.withDO(o.DO.Session(config))
}

func (o observabilityTaskDo) Clauses(conds ...clause.Expression) *observabilityTaskDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o observabilityTaskDo) Returning(value interface{}, columns ...string) *observabilityTaskDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o observabilityTaskDo) Not(conds ...gen.Condition) *observabilityTaskDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o observabilityTaskDo) Or(conds ...gen.Condition) *observabilityTaskDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o observabilityTaskDo) Select(conds ...field.Expr) *observabilityTaskDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o observabilityTaskDo) Where(conds ...gen.Condition) *observabilityTaskDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o observabilityTaskDo) Order(conds ...field.Expr) *observabilityTaskDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o observabilityTaskDo) Distinct(cols ...field.Expr) *observabilityTaskDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o observabilityTaskDo) Omit(cols ...field.Expr) *observabilityTaskDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o observabilityTaskDo) Join(table schema.Tabler, on ...field.Expr) *observabilityTaskDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o observabilityTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) *observabilityTaskDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o observabilityTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) *observabilityTaskDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o observabilityTaskDo) Group(cols ...field.Expr) *observabilityTaskDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o observabilityTaskDo) Having(conds ...gen.Condition) *observabilityTaskDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o observabilityTaskDo) Limit(limit int) *observabilityTaskDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o observabilityTaskDo) Offset(offset int) *observabilityTaskDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o observabilityTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *observabilityTaskDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o observabilityTaskDo) Unscoped() *observabilityTaskDo {
	return o.withDO(o.DO.Unscoped())
}

func (o observabilityTaskDo) Create(values ...*model.ObservabilityTask) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o observabilityTaskDo) CreateInBatches(values []*model.ObservabilityTask, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o observabilityTaskDo) Save(values ...*model.ObservabilityTask) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o observabilityTaskDo) First() (*model.ObservabilityTask, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ObservabilityTask), nil
	}
}

func (o observabilityTaskDo) Take() (*model.ObservabilityTask, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ObservabilityTask), nil
	}
}

func (o observabilityTaskDo) Last() (*model.ObservabilityTask, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ObservabilityTask), nil
	}
}

func (o observabilityTaskDo) Find() ([]*model.ObservabilityTask, error) {
	result, err := o.DO.Find()
	return result.([]*model.ObservabilityTask), err
}

func (o observabilityTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ObservabilityTask, err error) {
	buf := make([]*model.ObservabilityTask, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o observabilityTaskDo) FindInBatches(result *[]*model.ObservabilityTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o observabilityTaskDo) Attrs(attrs ...field.AssignExpr) *observabilityTaskDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o observabilityTaskDo) Assign(attrs ...field.AssignExpr) *observabilityTaskDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o observabilityTaskDo) Joins(fields ...field.RelationField) *observabilityTaskDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o observabilityTaskDo) Preload(fields ...field.RelationField) *observabilityTaskDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o observabilityTaskDo) FirstOrInit() (*model.ObservabilityTask, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ObservabilityTask), nil
	}
}

func (o observabilityTaskDo) FirstOrCreate() (*model.ObservabilityTask, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ObservabilityTask), nil
	}
}

func (o observabilityTaskDo) FindByPage(offset int, limit int) (result []*model.ObservabilityTask, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o observabilityTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o observabilityTaskDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o observabilityTaskDo) Delete(models ...*model.ObservabilityTask) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *observabilityTaskDo) withDO(do gen.Dao) *observabilityTaskDo {
	o.DO = *do.(*gen.DO)
	return o
}

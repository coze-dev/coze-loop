// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package application

import (
	"github.com/coze-dev/coze-loop/backend/infra/ck"
	"github.com/coze-dev/coze-loop/backend/infra/db"
	"github.com/coze-dev/coze-loop/backend/infra/external/benefit"
	"github.com/coze-dev/coze-loop/backend/infra/idgen"
	"github.com/coze-dev/coze-loop/backend/infra/limiter"
	"github.com/coze-dev/coze-loop/backend/infra/lock"
	"github.com/coze-dev/coze-loop/backend/infra/metrics"
	"github.com/coze-dev/coze-loop/backend/infra/mq"
	"github.com/coze-dev/coze-loop/backend/infra/redis"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/dataset/datasetservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/tag/tagservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/evaluationsetservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/evaluatorservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/experimentservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/auth/authservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/file/fileservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/user/userservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/domain/task"
	config2 "github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/config"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/rpc"
	repo3 "github.com/coze-dev/coze-loop/backend/modules/observability/domain/task/repo"
	service2 "github.com/coze-dev/coze-loop/backend/modules/observability/domain/task/service"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/task/service/taskexe/processor"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/task/service/taskexe/tracehub"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity/collector/exporter"
	processor2 "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity/collector/processor"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity/collector/receiver"
	repo2 "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/repo"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service/collector/exporter/clickhouseexporter"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service/collector/processor/queueprocessor"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service/collector/receiver/rmqreceiver"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service/trace/span_filter"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service/trace/span_processor"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/collector"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/config"
	metrics2 "github.com/coze-dev/coze-loop/backend/modules/observability/infra/metrics"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/mq/producer"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/repo"
	ck2 "github.com/coze-dev/coze-loop/backend/modules/observability/infra/repo/ck"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/repo/mysql"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/repo/redis/dao"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/rpc/auth"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/rpc/dataset"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/rpc/evaluation"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/rpc/evaluationset"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/rpc/evaluator"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/rpc/file"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/rpc/tag"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/rpc/user"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/tenant"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/workspace"
	"github.com/coze-dev/coze-loop/backend/pkg/conf"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitTraceApplication(db2 db.Provider, ckDb ck.Provider, redis2 redis.Cmdable, meter metrics.Meter, mqFactory mq.IFactory, configFactory conf.IConfigLoaderFactory, idgen2 idgen.IIDGenerator, fileClient fileservice.Client, benefit2 benefit.IBenefitService, authClient authservice.Client, userClient userservice.Client, evalService evaluatorservice.Client, evalSetService evaluationsetservice.Client, tagService tagservice.Client, datasetService datasetservice.Client) (ITraceApplication, error) {
	iSpansDao, err := ck2.NewSpansCkDaoImpl(ckDb)
	if err != nil {
		return nil, err
	}
	iAnnotationDao, err := ck2.NewAnnotationCkDaoImpl(ckDb)
	if err != nil {
		return nil, err
	}
	iConfigLoader, err := NewTraceConfigLoader(configFactory)
	if err != nil {
		return nil, err
	}
	iTraceConfig := config.NewTraceConfigCenter(iConfigLoader)
	iTraceRepo, err := repo.NewTraceCKRepoImpl(iSpansDao, iAnnotationDao, iTraceConfig)
	if err != nil {
		return nil, err
	}
	iTraceProducer, err := producer.NewTraceProducerImpl(iTraceConfig, mqFactory)
	if err != nil {
		return nil, err
	}
	iAnnotationProducer, err := producer.NewAnnotationProducerImpl(iTraceConfig, mqFactory)
	if err != nil {
		return nil, err
	}
	iTraceMetrics := metrics2.NewTraceMetricsImpl(meter)
	iFileProvider := file.NewFileRPCProvider(fileClient)
	traceFilterProcessorBuilder := NewTraceProcessorBuilder(iTraceConfig, iFileProvider, benefit2)
	iTenantProvider := tenant.NewTenantProvider(iTraceConfig)
	iEvaluatorRPCAdapter := evaluator.NewEvaluatorRPCProvider(evalService)
	iTaskDao := mysql.NewTaskDaoImpl(db2)
	iTaskDAO := dao.NewTaskDAO(redis2)
	iTaskRunDao := mysql.NewTaskRunDaoImpl(db2)
	iTaskRunDAO := dao.NewTaskRunDAO(redis2)
	iTaskRepo := repo.NewTaskRepoImpl(iTaskDao, idgen2, iTaskDAO, iTaskRunDao, iTaskRunDAO)
	iTraceService, err := service.NewTraceServiceImpl(iTraceRepo, iTraceConfig, iTraceProducer, iAnnotationProducer, iTraceMetrics, traceFilterProcessorBuilder, iTenantProvider, iEvaluatorRPCAdapter, iTaskRepo)
	if err != nil {
		return nil, err
	}
	datasetServiceAdaptor := NewDatasetServiceAdapter(evalSetService, datasetService)
	iTraceExportService, err := service.NewTraceExportServiceImpl(iTraceRepo, iTraceConfig, iTraceProducer, iAnnotationProducer, iTraceMetrics, iTenantProvider, datasetServiceAdaptor, traceFilterProcessorBuilder)
	if err != nil {
		return nil, err
	}
	iViewDao := mysql.NewViewDaoImpl(db2)
	iViewRepo := repo.NewViewRepoImpl(iViewDao, idgen2)
	iAuthProvider := auth.NewAuthProvider(authClient)
	iUserProvider := user.NewUserRPCProvider(userClient)
	iTagRPCAdapter := tag.NewTagRPCProvider(tagService)
	iTraceApplication, err := NewTraceApplication(iTraceService, iTraceExportService, iViewRepo, benefit2, iTenantProvider, iTraceMetrics, iTraceConfig, iAuthProvider, iEvaluatorRPCAdapter, iUserProvider, iTagRPCAdapter)
	if err != nil {
		return nil, err
	}
	return iTraceApplication, nil
}

func InitOpenAPIApplication(mqFactory mq.IFactory, configFactory conf.IConfigLoaderFactory, fileClient fileservice.Client, ckDb ck.Provider, benefit2 benefit.IBenefitService, limiterFactory limiter.IRateLimiterFactory, authClient authservice.Client, meter metrics.Meter, db2 db.Provider, redis2 redis.Cmdable, idgen2 idgen.IIDGenerator, evalService evaluatorservice.Client) (IObservabilityOpenAPIApplication, error) {
	iSpansDao, err := ck2.NewSpansCkDaoImpl(ckDb)
	if err != nil {
		return nil, err
	}
	iAnnotationDao, err := ck2.NewAnnotationCkDaoImpl(ckDb)
	if err != nil {
		return nil, err
	}
	iConfigLoader, err := NewTraceConfigLoader(configFactory)
	if err != nil {
		return nil, err
	}
	iTraceConfig := config.NewTraceConfigCenter(iConfigLoader)
	iTraceRepo, err := repo.NewTraceCKRepoImpl(iSpansDao, iAnnotationDao, iTraceConfig)
	if err != nil {
		return nil, err
	}
	iTraceProducer, err := producer.NewTraceProducerImpl(iTraceConfig, mqFactory)
	if err != nil {
		return nil, err
	}
	iAnnotationProducer, err := producer.NewAnnotationProducerImpl(iTraceConfig, mqFactory)
	if err != nil {
		return nil, err
	}
	iTraceMetrics := metrics2.NewTraceMetricsImpl(meter)
	iFileProvider := file.NewFileRPCProvider(fileClient)
	traceFilterProcessorBuilder := NewTraceProcessorBuilder(iTraceConfig, iFileProvider, benefit2)
	iTenantProvider := tenant.NewTenantProvider(iTraceConfig)
	iEvaluatorRPCAdapter := evaluator.NewEvaluatorRPCProvider(evalService)
	iTaskDao := mysql.NewTaskDaoImpl(db2)
	iTaskDAO := dao.NewTaskDAO(redis2)
	iTaskRunDao := mysql.NewTaskRunDaoImpl(db2)
	iTaskRunDAO := dao.NewTaskRunDAO(redis2)
	iTaskRepo := repo.NewTaskRepoImpl(iTaskDao, idgen2, iTaskDAO, iTaskRunDao, iTaskRunDAO)
	iTraceService, err := service.NewTraceServiceImpl(iTraceRepo, iTraceConfig, iTraceProducer, iAnnotationProducer, iTraceMetrics, traceFilterProcessorBuilder, iTenantProvider, iEvaluatorRPCAdapter, iTaskRepo)
	if err != nil {
		return nil, err
	}
	iAuthProvider := auth.NewAuthProvider(authClient)
	iWorkSpaceProvider := workspace.NewWorkspaceProvider()
	iCollectorProvider := collector.NewEventCollectorProvider()
	iObservabilityOpenAPIApplication, err := NewOpenAPIApplication(iTraceService, iAuthProvider, benefit2, iTenantProvider, iWorkSpaceProvider, limiterFactory, iTraceConfig, iTraceMetrics, iCollectorProvider)
	if err != nil {
		return nil, err
	}
	return iObservabilityOpenAPIApplication, nil
}

func InitTraceIngestionApplication(configFactory conf.IConfigLoaderFactory, ckDb ck.Provider, mqFactory mq.IFactory) (ITraceIngestionApplication, error) {
	iConfigLoader, err := NewTraceConfigLoader(configFactory)
	if err != nil {
		return nil, err
	}
	iSpansDao, err := ck2.NewSpansCkDaoImpl(ckDb)
	if err != nil {
		return nil, err
	}
	iAnnotationDao, err := ck2.NewAnnotationCkDaoImpl(ckDb)
	if err != nil {
		return nil, err
	}
	iTraceConfig := config.NewTraceConfigCenter(iConfigLoader)
	iTraceRepo, err := repo.NewTraceCKRepoImpl(iSpansDao, iAnnotationDao, iTraceConfig)
	if err != nil {
		return nil, err
	}
	ingestionCollectorFactory := NewIngestionCollectorFactory(mqFactory, iTraceRepo)
	ingestionService, err := service.NewIngestionServiceImpl(iConfigLoader, ingestionCollectorFactory)
	if err != nil {
		return nil, err
	}
	iTraceIngestionApplication := NewIngestionApplication(ingestionService)
	return iTraceIngestionApplication, nil
}

func InitTaskApplication(db2 db.Provider, idgen2 idgen.IIDGenerator, configFactory conf.IConfigLoaderFactory, benefit2 benefit.IBenefitService, ckDb ck.Provider, redis2 redis.Cmdable, mqFactory mq.IFactory, userClient userservice.Client, authClient authservice.Client, evalService evaluatorservice.Client, evalSetService evaluationsetservice.Client, exptService experimentservice.Client, datasetService datasetservice.Client, fileClient fileservice.Client, taskProcessor processor.TaskProcessor, aid int32) (ITaskApplication, error) {
	iTaskDao := mysql.NewTaskDaoImpl(db2)
	iTaskDAO := dao.NewTaskDAO(redis2)
	iTaskRunDao := mysql.NewTaskRunDaoImpl(db2)
	iTaskRunDAO := dao.NewTaskRunDAO(redis2)
	iTaskRepo := repo.NewTaskRepoImpl(iTaskDao, idgen2, iTaskDAO, iTaskRunDao, iTaskRunDAO)
	iUserProvider := user.NewUserRPCProvider(userClient)
	iConfigLoader, err := NewTraceConfigLoader(configFactory)
	if err != nil {
		return nil, err
	}
	iTraceConfig := config.NewTraceConfigCenter(iConfigLoader)
	iBackfillProducer, err := producer.NewBackfillProducerImpl(iTraceConfig, mqFactory)
	if err != nil {
		return nil, err
	}
	datasetServiceAdaptor := NewDatasetServiceAdapter(evalSetService, datasetService)
	iEvaluatorRPCAdapter := evaluator.NewEvaluatorRPCProvider(evalService)
	iEvaluationRPCAdapter := evaluation.NewEvaluationRPCProvider(exptService)
	processorTaskProcessor := NewInitTaskProcessor(datasetServiceAdaptor, iEvaluatorRPCAdapter, iEvaluationRPCAdapter, iTaskRepo)
	iTaskService, err := service2.NewTaskServiceImpl(iTaskRepo, iUserProvider, idgen2, iBackfillProducer, processorTaskProcessor)
	if err != nil {
		return nil, err
	}
	iAuthProvider := auth.NewAuthProvider(authClient)
	iSpansDao, err := ck2.NewSpansCkDaoImpl(ckDb)
	if err != nil {
		return nil, err
	}
	iAnnotationDao, err := ck2.NewAnnotationCkDaoImpl(ckDb)
	if err != nil {
		return nil, err
	}
	iTraceRepo, err := repo.NewTraceCKRepoImpl(iSpansDao, iAnnotationDao, iTraceConfig)
	if err != nil {
		return nil, err
	}
	iTenantProvider := tenant.NewTenantProvider(iTraceConfig)
	iFileProvider := file.NewFileRPCProvider(fileClient)
	traceFilterProcessorBuilder := NewTraceProcessorBuilder(iTraceConfig, iFileProvider, benefit2)
	iLocker := NewTaskLocker(redis2)
	iTraceHubService, err := tracehub.NewTraceHubImpl(iTaskRepo, iTraceRepo, iTenantProvider, traceFilterProcessorBuilder, processorTaskProcessor, benefit2, aid, iBackfillProducer, iLocker, iConfigLoader)
	if err != nil {
		return nil, err
	}
	iTaskApplication, err := NewTaskApplication(iTaskService, iAuthProvider, iEvaluatorRPCAdapter, iEvaluationRPCAdapter, iUserProvider, iTraceHubService, taskProcessor, traceFilterProcessorBuilder)
	if err != nil {
		return nil, err
	}
	return iTaskApplication, nil
}

// wire.go:

var (
	taskDomainSet = wire.NewSet(
		NewInitTaskProcessor, service2.NewTaskServiceImpl, repo.NewTaskRepoImpl, mysql.NewTaskDaoImpl, dao.NewTaskDAO, dao.NewTaskRunDAO, mysql.NewTaskRunDaoImpl, producer.NewBackfillProducerImpl,
	)
	traceDomainSet = wire.NewSet(service.NewTraceServiceImpl, service.NewTraceExportServiceImpl, repo.NewTraceCKRepoImpl, ck2.NewSpansCkDaoImpl, ck2.NewAnnotationCkDaoImpl, metrics2.NewTraceMetricsImpl, collector.NewEventCollectorProvider, producer.NewTraceProducerImpl, producer.NewAnnotationProducerImpl, file.NewFileRPCProvider, NewTraceConfigLoader,
		NewTraceProcessorBuilder, config.NewTraceConfigCenter, tenant.NewTenantProvider, workspace.NewWorkspaceProvider, evaluator.NewEvaluatorRPCProvider, NewDatasetServiceAdapter,
		taskDomainSet,
	)
	traceSet = wire.NewSet(
		NewTraceApplication, repo.NewViewRepoImpl, mysql.NewViewDaoImpl, auth.NewAuthProvider, user.NewUserRPCProvider, tag.NewTagRPCProvider, traceDomainSet,
	)
	traceIngestionSet = wire.NewSet(
		NewIngestionApplication, service.NewIngestionServiceImpl, repo.NewTraceCKRepoImpl, ck2.NewSpansCkDaoImpl, ck2.NewAnnotationCkDaoImpl, config.NewTraceConfigCenter, NewTraceConfigLoader,
		NewIngestionCollectorFactory,
	)
	openApiSet = wire.NewSet(
		NewOpenAPIApplication, auth.NewAuthProvider, traceDomainSet,
	)
	taskSet = wire.NewSet(tracehub.NewTraceHubImpl, NewTaskApplication, auth.NewAuthProvider, user.NewUserRPCProvider, evaluation.NewEvaluationRPCProvider, NewTaskLocker,
		traceDomainSet,
	)
)

func NewTaskLocker(cmdable redis.Cmdable) lock.ILocker {
	return lock.NewRedisLockerWithHolder(cmdable, "observability")
}

func NewTraceProcessorBuilder(
	traceConfig config2.ITraceConfig,
	fileProvider rpc.IFileProvider,
	benefitSvc benefit.IBenefitService,
) service.TraceFilterProcessorBuilder {
	return service.NewTraceFilterProcessorBuilder(span_filter.NewPlatformFilterFactory(
		[]span_filter.Factory{span_filter.NewCozeLoopFilterFactory(), span_filter.NewPromptFilterFactory(traceConfig), span_filter.NewEvaluatorFilterFactory(), span_filter.NewEvalTargetFilterFactory()}), []span_processor.Factory{span_processor.NewPlatformProcessorFactory(traceConfig), span_processor.NewCheckProcessorFactory(), span_processor.NewAttrTosProcessorFactory(fileProvider), span_processor.NewExpireErrorProcessorFactory(benefitSvc)},

		[]span_processor.Factory{span_processor.NewPlatformProcessorFactory(traceConfig), span_processor.NewExpireErrorProcessorFactory(benefitSvc)},

		[]span_processor.Factory{span_processor.NewCheckProcessorFactory()},

		[]span_processor.Factory{},

		[]span_processor.Factory{span_processor.NewPlatformProcessorFactory(traceConfig), span_processor.NewCheckProcessorFactory(), span_processor.NewAttrTosProcessorFactory(fileProvider), span_processor.NewExpireErrorProcessorFactory(benefitSvc)},

		[]span_processor.Factory{span_processor.NewPlatformProcessorFactory(traceConfig), span_processor.NewExpireErrorProcessorFactory(benefitSvc)})
}

func NewIngestionCollectorFactory(mqFactory mq.IFactory, traceRepo repo2.ITraceRepo) service.IngestionCollectorFactory {
	return service.NewIngestionCollectorFactory(
		[]receiver.Factory{rmqreceiver.NewFactory(mqFactory)},
		[]processor2.Factory{queueprocessor.NewFactory()},
		[]exporter.Factory{clickhouseexporter.NewFactory(traceRepo)},
	)
}

func NewTraceConfigLoader(confFactory conf.IConfigLoaderFactory) (conf.IConfigLoader, error) {
	return confFactory.NewConfigLoader("observability.yaml")
}

func NewDatasetServiceAdapter(evalSetService evaluationsetservice.Client, datasetService datasetservice.Client) *service.DatasetServiceAdaptor {
	adapter := service.NewDatasetServiceAdaptor()
	datasetProvider := dataset.NewDatasetProvider(datasetService)
	adapter.Register(entity.DatasetCategory_Evaluation, evaluationset.NewEvaluationSetProvider(evalSetService, datasetProvider))
	return adapter
}

func NewInitTaskProcessor(datasetServiceProvider *service.DatasetServiceAdaptor, evalService rpc.IEvaluatorRPCAdapter,
	evaluationService rpc.IEvaluationRPCAdapter, taskRepo repo3.ITaskRepo,
) *processor.TaskProcessor {
	taskProcessor := processor.NewTaskProcessor()
	taskProcessor.Register(task.TaskTypeAutoEval, processor.NewAutoEvaluteProcessor(0, datasetServiceProvider, evalService, evaluationService, taskRepo))
	return taskProcessor
}

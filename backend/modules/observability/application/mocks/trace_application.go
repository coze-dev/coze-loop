// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/application (interfaces: ITraceApplication)
//
// Generated by this command:
//
//	mockgen -destination=mocks/trace_application.go -package=mocks . ITraceApplication
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	trace "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/trace"
	application "github.com/coze-dev/coze-loop/backend/modules/observability/application"
	gomock "go.uber.org/mock/gomock"
)

// MockITraceApplication is a mock of ITraceApplication interface.
type MockITraceApplication struct {
	ctrl     *gomock.Controller
	recorder *MockITraceApplicationMockRecorder
	isgomock struct{}
}

// MockITraceApplicationMockRecorder is the mock recorder for MockITraceApplication.
type MockITraceApplicationMockRecorder struct {
	mock *MockITraceApplication
}

// NewMockITraceApplication creates a new mock instance.
func NewMockITraceApplication(ctrl *gomock.Controller) *MockITraceApplication {
	mock := &MockITraceApplication{ctrl: ctrl}
	mock.recorder = &MockITraceApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITraceApplication) EXPECT() *MockITraceApplicationMockRecorder {
	return m.recorder
}

// BatchGetTracesAdvanceInfo mocks base method.
func (m *MockITraceApplication) BatchGetTracesAdvanceInfo(ctx context.Context, req *trace.BatchGetTracesAdvanceInfoRequest) (*trace.BatchGetTracesAdvanceInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTracesAdvanceInfo", ctx, req)
	ret0, _ := ret[0].(*trace.BatchGetTracesAdvanceInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTracesAdvanceInfo indicates an expected call of BatchGetTracesAdvanceInfo.
func (mr *MockITraceApplicationMockRecorder) BatchGetTracesAdvanceInfo(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTracesAdvanceInfo", reflect.TypeOf((*MockITraceApplication)(nil).BatchGetTracesAdvanceInfo), ctx, req)
}

// ChangeEvaluatorScore mocks base method.
func (m *MockITraceApplication) ChangeEvaluatorScore(ctx context.Context, req *trace.ChangeEvaluatorScoreRequest) (*trace.ChangeEvaluatorScoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeEvaluatorScore", ctx, req)
	ret0, _ := ret[0].(*trace.ChangeEvaluatorScoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeEvaluatorScore indicates an expected call of ChangeEvaluatorScore.
func (mr *MockITraceApplicationMockRecorder) ChangeEvaluatorScore(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeEvaluatorScore", reflect.TypeOf((*MockITraceApplication)(nil).ChangeEvaluatorScore), ctx, req)
}

// CreateManualAnnotation mocks base method.
func (m *MockITraceApplication) CreateManualAnnotation(ctx context.Context, req *trace.CreateManualAnnotationRequest) (*trace.CreateManualAnnotationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManualAnnotation", ctx, req)
	ret0, _ := ret[0].(*trace.CreateManualAnnotationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateManualAnnotation indicates an expected call of CreateManualAnnotation.
func (mr *MockITraceApplicationMockRecorder) CreateManualAnnotation(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManualAnnotation", reflect.TypeOf((*MockITraceApplication)(nil).CreateManualAnnotation), ctx, req)
}

// CreateView mocks base method.
func (m *MockITraceApplication) CreateView(ctx context.Context, req *trace.CreateViewRequest) (*trace.CreateViewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateView", ctx, req)
	ret0, _ := ret[0].(*trace.CreateViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateView indicates an expected call of CreateView.
func (mr *MockITraceApplicationMockRecorder) CreateView(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateView", reflect.TypeOf((*MockITraceApplication)(nil).CreateView), ctx, req)
}

// DeleteManualAnnotation mocks base method.
func (m *MockITraceApplication) DeleteManualAnnotation(ctx context.Context, req *trace.DeleteManualAnnotationRequest) (*trace.DeleteManualAnnotationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteManualAnnotation", ctx, req)
	ret0, _ := ret[0].(*trace.DeleteManualAnnotationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteManualAnnotation indicates an expected call of DeleteManualAnnotation.
func (mr *MockITraceApplicationMockRecorder) DeleteManualAnnotation(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManualAnnotation", reflect.TypeOf((*MockITraceApplication)(nil).DeleteManualAnnotation), ctx, req)
}

// DeleteView mocks base method.
func (m *MockITraceApplication) DeleteView(ctx context.Context, req *trace.DeleteViewRequest) (*trace.DeleteViewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteView", ctx, req)
	ret0, _ := ret[0].(*trace.DeleteViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteView indicates an expected call of DeleteView.
func (mr *MockITraceApplicationMockRecorder) DeleteView(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteView", reflect.TypeOf((*MockITraceApplication)(nil).DeleteView), ctx, req)
}

// ExportTracesToDataset mocks base method.
func (m *MockITraceApplication) ExportTracesToDataset(ctx context.Context, req *trace.ExportTracesToDatasetRequest) (*trace.ExportTracesToDatasetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportTracesToDataset", ctx, req)
	ret0, _ := ret[0].(*trace.ExportTracesToDatasetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportTracesToDataset indicates an expected call of ExportTracesToDataset.
func (mr *MockITraceApplicationMockRecorder) ExportTracesToDataset(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportTracesToDataset", reflect.TypeOf((*MockITraceApplication)(nil).ExportTracesToDataset), ctx, req)
}

// ExtractSpanInfo mocks base method.
func (m *MockITraceApplication) ExtractSpanInfo(ctx context.Context, req *trace.ExtractSpanInfoRequest) (*trace.ExtractSpanInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractSpanInfo", ctx, req)
	ret0, _ := ret[0].(*trace.ExtractSpanInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractSpanInfo indicates an expected call of ExtractSpanInfo.
func (mr *MockITraceApplicationMockRecorder) ExtractSpanInfo(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractSpanInfo", reflect.TypeOf((*MockITraceApplication)(nil).ExtractSpanInfo), ctx, req)
}

// GetDisplayInfo mocks base method.
func (m *MockITraceApplication) GetDisplayInfo(arg0 context.Context, arg1 *application.GetDisplayInfoRequest) application.GetDisplayInfoResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisplayInfo", arg0, arg1)
	ret0, _ := ret[0].(application.GetDisplayInfoResponse)
	return ret0
}

// GetDisplayInfo indicates an expected call of GetDisplayInfo.
func (mr *MockITraceApplicationMockRecorder) GetDisplayInfo(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisplayInfo", reflect.TypeOf((*MockITraceApplication)(nil).GetDisplayInfo), arg0, arg1)
}

// GetTrace mocks base method.
func (m *MockITraceApplication) GetTrace(ctx context.Context, req *trace.GetTraceRequest) (*trace.GetTraceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrace", ctx, req)
	ret0, _ := ret[0].(*trace.GetTraceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrace indicates an expected call of GetTrace.
func (mr *MockITraceApplicationMockRecorder) GetTrace(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrace", reflect.TypeOf((*MockITraceApplication)(nil).GetTrace), ctx, req)
}

// GetTracesMetaInfo mocks base method.
func (m *MockITraceApplication) GetTracesMetaInfo(ctx context.Context, req *trace.GetTracesMetaInfoRequest) (*trace.GetTracesMetaInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracesMetaInfo", ctx, req)
	ret0, _ := ret[0].(*trace.GetTracesMetaInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracesMetaInfo indicates an expected call of GetTracesMetaInfo.
func (mr *MockITraceApplicationMockRecorder) GetTracesMetaInfo(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracesMetaInfo", reflect.TypeOf((*MockITraceApplication)(nil).GetTracesMetaInfo), ctx, req)
}

// IngestTracesInner mocks base method.
func (m *MockITraceApplication) IngestTracesInner(ctx context.Context, req *trace.IngestTracesRequest) (*trace.IngestTracesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestTracesInner", ctx, req)
	ret0, _ := ret[0].(*trace.IngestTracesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngestTracesInner indicates an expected call of IngestTracesInner.
func (mr *MockITraceApplicationMockRecorder) IngestTracesInner(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestTracesInner", reflect.TypeOf((*MockITraceApplication)(nil).IngestTracesInner), ctx, req)
}

// ListAnnotationEvaluators mocks base method.
func (m *MockITraceApplication) ListAnnotationEvaluators(ctx context.Context, req *trace.ListAnnotationEvaluatorsRequest) (*trace.ListAnnotationEvaluatorsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnnotationEvaluators", ctx, req)
	ret0, _ := ret[0].(*trace.ListAnnotationEvaluatorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnnotationEvaluators indicates an expected call of ListAnnotationEvaluators.
func (mr *MockITraceApplicationMockRecorder) ListAnnotationEvaluators(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnnotationEvaluators", reflect.TypeOf((*MockITraceApplication)(nil).ListAnnotationEvaluators), ctx, req)
}

// ListAnnotations mocks base method.
func (m *MockITraceApplication) ListAnnotations(ctx context.Context, req *trace.ListAnnotationsRequest) (*trace.ListAnnotationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnnotations", ctx, req)
	ret0, _ := ret[0].(*trace.ListAnnotationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnnotations indicates an expected call of ListAnnotations.
func (mr *MockITraceApplicationMockRecorder) ListAnnotations(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnnotations", reflect.TypeOf((*MockITraceApplication)(nil).ListAnnotations), ctx, req)
}

// ListSpans mocks base method.
func (m *MockITraceApplication) ListSpans(ctx context.Context, req *trace.ListSpansRequest) (*trace.ListSpansResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpans", ctx, req)
	ret0, _ := ret[0].(*trace.ListSpansResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpans indicates an expected call of ListSpans.
func (mr *MockITraceApplicationMockRecorder) ListSpans(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpans", reflect.TypeOf((*MockITraceApplication)(nil).ListSpans), ctx, req)
}

// ListViews mocks base method.
func (m *MockITraceApplication) ListViews(ctx context.Context, req *trace.ListViewsRequest) (*trace.ListViewsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListViews", ctx, req)
	ret0, _ := ret[0].(*trace.ListViewsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListViews indicates an expected call of ListViews.
func (mr *MockITraceApplicationMockRecorder) ListViews(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListViews", reflect.TypeOf((*MockITraceApplication)(nil).ListViews), ctx, req)
}

// PreviewExportTracesToDataset mocks base method.
func (m *MockITraceApplication) PreviewExportTracesToDataset(ctx context.Context, req *trace.PreviewExportTracesToDatasetRequest) (*trace.PreviewExportTracesToDatasetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreviewExportTracesToDataset", ctx, req)
	ret0, _ := ret[0].(*trace.PreviewExportTracesToDatasetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreviewExportTracesToDataset indicates an expected call of PreviewExportTracesToDataset.
func (mr *MockITraceApplicationMockRecorder) PreviewExportTracesToDataset(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewExportTracesToDataset", reflect.TypeOf((*MockITraceApplication)(nil).PreviewExportTracesToDataset), ctx, req)
}

// SearchTraceTree mocks base method.
func (m *MockITraceApplication) SearchTraceTree(ctx context.Context, req *trace.SearchTraceTreeRequest) (*trace.SearchTraceTreeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTraceTree", ctx, req)
	ret0, _ := ret[0].(*trace.SearchTraceTreeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTraceTree indicates an expected call of SearchTraceTree.
func (mr *MockITraceApplicationMockRecorder) SearchTraceTree(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTraceTree", reflect.TypeOf((*MockITraceApplication)(nil).SearchTraceTree), ctx, req)
}

// UpdateManualAnnotation mocks base method.
func (m *MockITraceApplication) UpdateManualAnnotation(ctx context.Context, req *trace.UpdateManualAnnotationRequest) (*trace.UpdateManualAnnotationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateManualAnnotation", ctx, req)
	ret0, _ := ret[0].(*trace.UpdateManualAnnotationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateManualAnnotation indicates an expected call of UpdateManualAnnotation.
func (mr *MockITraceApplicationMockRecorder) UpdateManualAnnotation(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateManualAnnotation", reflect.TypeOf((*MockITraceApplication)(nil).UpdateManualAnnotation), ctx, req)
}

// UpdateView mocks base method.
func (m *MockITraceApplication) UpdateView(ctx context.Context, req *trace.UpdateViewRequest) (*trace.UpdateViewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateView", ctx, req)
	ret0, _ := ret[0].(*trace.UpdateViewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateView indicates an expected call of UpdateView.
func (mr *MockITraceApplicationMockRecorder) UpdateView(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateView", reflect.TypeOf((*MockITraceApplication)(nil).UpdateView), ctx, req)
}

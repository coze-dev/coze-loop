// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/file/fileservice (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=mocks/fileservice_client.go -package=mocks github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/file/fileservice Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	file "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/file"
	callopt "github.com/cloudwego/kitex/client/callopt"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// SignDownloadFile mocks base method.
func (m *MockClient) SignDownloadFile(ctx context.Context, req *file.SignDownloadFileRequest, callOptions ...callopt.Option) (*file.SignDownloadFileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignDownloadFile", varargs...)
	ret0, _ := ret[0].(*file.SignDownloadFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignDownloadFile indicates an expected call of SignDownloadFile.
func (mr *MockClientMockRecorder) SignDownloadFile(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignDownloadFile", reflect.TypeOf((*MockClient)(nil).SignDownloadFile), varargs...)
}

// SignUploadFile mocks base method.
func (m *MockClient) SignUploadFile(ctx context.Context, req *file.SignUploadFileRequest, callOptions ...callopt.Option) (*file.SignUploadFileResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignUploadFile", varargs...)
	ret0, _ := ret[0].(*file.SignUploadFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUploadFile indicates an expected call of SignUploadFile.
func (mr *MockClientMockRecorder) SignUploadFile(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUploadFile", reflect.TypeOf((*MockClient)(nil).SignUploadFile), varargs...)
}

// UploadLoopFileInner mocks base method.
func (m *MockClient) UploadLoopFileInner(ctx context.Context, req *file.UploadLoopFileInnerRequest, callOptions ...callopt.Option) (*file.UploadLoopFileInnerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range callOptions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadLoopFileInner", varargs...)
	ret0, _ := ret[0].(*file.UploadLoopFileInnerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadLoopFileInner indicates an expected call of UploadLoopFileInner.
func (mr *MockClientMockRecorder) UploadLoopFileInner(ctx, req any, callOptions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, callOptions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadLoopFileInner", reflect.TypeOf((*MockClient)(nil).UploadLoopFileInner), varargs...)
}

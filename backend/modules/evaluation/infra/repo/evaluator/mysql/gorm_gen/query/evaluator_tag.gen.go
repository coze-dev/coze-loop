// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/evaluator/mysql/gorm_gen/model"
)

func newEvaluatorTag(db *gorm.DB, opts ...gen.DOOption) evaluatorTag {
	_evaluatorTag := evaluatorTag{}

	_evaluatorTag.evaluatorTagDo.UseDB(db, opts...)
	_evaluatorTag.evaluatorTagDo.UseModel(&model.EvaluatorTag{})

	tableName := _evaluatorTag.evaluatorTagDo.TableName()
	_evaluatorTag.ALL = field.NewAsterisk(tableName)
	_evaluatorTag.ID = field.NewInt64(tableName, "id")
	_evaluatorTag.SourceID = field.NewInt64(tableName, "source_id")
	_evaluatorTag.TagType = field.NewInt32(tableName, "tag_type")
	_evaluatorTag.TagKey = field.NewString(tableName, "tag_key")
	_evaluatorTag.TagValue = field.NewString(tableName, "tag_value")
	_evaluatorTag.LangType = field.NewString(tableName, "lang_type")
	_evaluatorTag.CreatedBy = field.NewString(tableName, "created_by")
	_evaluatorTag.UpdatedBy = field.NewString(tableName, "updated_by")
	_evaluatorTag.CreatedAt = field.NewTime(tableName, "created_at")
	_evaluatorTag.UpdatedAt = field.NewTime(tableName, "updated_at")
	_evaluatorTag.DeletedAt = field.NewField(tableName, "deleted_at")

	_evaluatorTag.fillFieldMap()

	return _evaluatorTag
}

// evaluatorTag NDB_SHARE_TABLE;评估器tag
type evaluatorTag struct {
	evaluatorTagDo evaluatorTagDo

	ALL       field.Asterisk
	ID        field.Int64  // idgen id
	SourceID  field.Int64  // 资源id
	TagType   field.Int32  // tag类型，1:评估器；2:模板
	TagKey    field.String // tag键
	TagValue  field.String // tag值
	LangType  field.String // 语言类型
	CreatedBy field.String // 创建人
	UpdatedBy field.String // 更新人
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (e evaluatorTag) Table(newTableName string) *evaluatorTag {
	e.evaluatorTagDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e evaluatorTag) As(alias string) *evaluatorTag {
	e.evaluatorTagDo.DO = *(e.evaluatorTagDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *evaluatorTag) updateTableName(table string) *evaluatorTag {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.SourceID = field.NewInt64(table, "source_id")
	e.TagType = field.NewInt32(table, "tag_type")
	e.TagKey = field.NewString(table, "tag_key")
	e.TagValue = field.NewString(table, "tag_value")
	e.LangType = field.NewString(table, "lang_type")
	e.CreatedBy = field.NewString(table, "created_by")
	e.UpdatedBy = field.NewString(table, "updated_by")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *evaluatorTag) WithContext(ctx context.Context) *evaluatorTagDo {
	return e.evaluatorTagDo.WithContext(ctx)
}

func (e evaluatorTag) TableName() string { return e.evaluatorTagDo.TableName() }

func (e evaluatorTag) Alias() string { return e.evaluatorTagDo.Alias() }

func (e evaluatorTag) Columns(cols ...field.Expr) gen.Columns {
	return e.evaluatorTagDo.Columns(cols...)
}

func (e *evaluatorTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *evaluatorTag) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 11)
	e.fieldMap["id"] = e.ID
	e.fieldMap["source_id"] = e.SourceID
	e.fieldMap["tag_type"] = e.TagType
	e.fieldMap["tag_key"] = e.TagKey
	e.fieldMap["tag_value"] = e.TagValue
	e.fieldMap["lang_type"] = e.LangType
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["updated_by"] = e.UpdatedBy
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e evaluatorTag) clone(db *gorm.DB) evaluatorTag {
	e.evaluatorTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e evaluatorTag) replaceDB(db *gorm.DB) evaluatorTag {
	e.evaluatorTagDo.ReplaceDB(db)
	return e
}

type evaluatorTagDo struct{ gen.DO }

func (e evaluatorTagDo) Debug() *evaluatorTagDo {
	return e.withDO(e.DO.Debug())
}

func (e evaluatorTagDo) WithContext(ctx context.Context) *evaluatorTagDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e evaluatorTagDo) ReadDB() *evaluatorTagDo {
	return e.Clauses(dbresolver.Read)
}

func (e evaluatorTagDo) WriteDB() *evaluatorTagDo {
	return e.Clauses(dbresolver.Write)
}

func (e evaluatorTagDo) Session(config *gorm.Session) *evaluatorTagDo {
	return e.withDO(e.DO.Session(config))
}

func (e evaluatorTagDo) Clauses(conds ...clause.Expression) *evaluatorTagDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e evaluatorTagDo) Returning(value interface{}, columns ...string) *evaluatorTagDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e evaluatorTagDo) Not(conds ...gen.Condition) *evaluatorTagDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e evaluatorTagDo) Or(conds ...gen.Condition) *evaluatorTagDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e evaluatorTagDo) Select(conds ...field.Expr) *evaluatorTagDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e evaluatorTagDo) Where(conds ...gen.Condition) *evaluatorTagDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e evaluatorTagDo) Order(conds ...field.Expr) *evaluatorTagDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e evaluatorTagDo) Distinct(cols ...field.Expr) *evaluatorTagDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e evaluatorTagDo) Omit(cols ...field.Expr) *evaluatorTagDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e evaluatorTagDo) Join(table schema.Tabler, on ...field.Expr) *evaluatorTagDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e evaluatorTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) *evaluatorTagDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e evaluatorTagDo) RightJoin(table schema.Tabler, on ...field.Expr) *evaluatorTagDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e evaluatorTagDo) Group(cols ...field.Expr) *evaluatorTagDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e evaluatorTagDo) Having(conds ...gen.Condition) *evaluatorTagDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e evaluatorTagDo) Limit(limit int) *evaluatorTagDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e evaluatorTagDo) Offset(offset int) *evaluatorTagDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e evaluatorTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *evaluatorTagDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e evaluatorTagDo) Unscoped() *evaluatorTagDo {
	return e.withDO(e.DO.Unscoped())
}

func (e evaluatorTagDo) Create(values ...*model.EvaluatorTag) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e evaluatorTagDo) CreateInBatches(values []*model.EvaluatorTag, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e evaluatorTagDo) Save(values ...*model.EvaluatorTag) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e evaluatorTagDo) First() (*model.EvaluatorTag, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluatorTag), nil
	}
}

func (e evaluatorTagDo) Take() (*model.EvaluatorTag, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluatorTag), nil
	}
}

func (e evaluatorTagDo) Last() (*model.EvaluatorTag, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluatorTag), nil
	}
}

func (e evaluatorTagDo) Find() ([]*model.EvaluatorTag, error) {
	result, err := e.DO.Find()
	return result.([]*model.EvaluatorTag), err
}

func (e evaluatorTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EvaluatorTag, err error) {
	buf := make([]*model.EvaluatorTag, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e evaluatorTagDo) FindInBatches(result *[]*model.EvaluatorTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e evaluatorTagDo) Attrs(attrs ...field.AssignExpr) *evaluatorTagDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e evaluatorTagDo) Assign(attrs ...field.AssignExpr) *evaluatorTagDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e evaluatorTagDo) Joins(fields ...field.RelationField) *evaluatorTagDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e evaluatorTagDo) Preload(fields ...field.RelationField) *evaluatorTagDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e evaluatorTagDo) FirstOrInit() (*model.EvaluatorTag, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluatorTag), nil
	}
}

func (e evaluatorTagDo) FirstOrCreate() (*model.EvaluatorTag, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EvaluatorTag), nil
	}
}

func (e evaluatorTagDo) FindByPage(offset int, limit int) (result []*model.EvaluatorTag, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e evaluatorTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e evaluatorTagDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e evaluatorTagDo) Delete(models ...*model.EvaluatorTag) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *evaluatorTagDo) withDO(do gen.Dao) *evaluatorTagDo {
	e.DO = *do.(*gen.DO)
	return e
}

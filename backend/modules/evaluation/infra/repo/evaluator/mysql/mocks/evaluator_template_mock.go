// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/evaluator/mysql (interfaces: EvaluatorTemplateDAO)
//
// Generated by this command:
//
//	mockgen -destination mocks/evaluator_template_mock.go -package=mocks . EvaluatorTemplateDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	mysql "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/evaluator/mysql"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/evaluator/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockEvaluatorTemplateDAO is a mock of EvaluatorTemplateDAO interface.
type MockEvaluatorTemplateDAO struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluatorTemplateDAOMockRecorder
	isgomock struct{}
}

// MockEvaluatorTemplateDAOMockRecorder is the mock recorder for MockEvaluatorTemplateDAO.
type MockEvaluatorTemplateDAOMockRecorder struct {
	mock *MockEvaluatorTemplateDAO
}

// NewMockEvaluatorTemplateDAO creates a new mock instance.
func NewMockEvaluatorTemplateDAO(ctrl *gomock.Controller) *MockEvaluatorTemplateDAO {
	mock := &MockEvaluatorTemplateDAO{ctrl: ctrl}
	mock.recorder = &MockEvaluatorTemplateDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluatorTemplateDAO) EXPECT() *MockEvaluatorTemplateDAOMockRecorder {
	return m.recorder
}

// CreateEvaluatorTemplate mocks base method.
func (m *MockEvaluatorTemplateDAO) CreateEvaluatorTemplate(ctx context.Context, template *model.EvaluatorTemplate, opts ...db.Option) (*model.EvaluatorTemplate, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, template}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEvaluatorTemplate", varargs...)
	ret0, _ := ret[0].(*model.EvaluatorTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvaluatorTemplate indicates an expected call of CreateEvaluatorTemplate.
func (mr *MockEvaluatorTemplateDAOMockRecorder) CreateEvaluatorTemplate(ctx, template any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, template}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluatorTemplate", reflect.TypeOf((*MockEvaluatorTemplateDAO)(nil).CreateEvaluatorTemplate), varargs...)
}

// DeleteEvaluatorTemplate mocks base method.
func (m *MockEvaluatorTemplateDAO) DeleteEvaluatorTemplate(ctx context.Context, id int64, userID string, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, userID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteEvaluatorTemplate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvaluatorTemplate indicates an expected call of DeleteEvaluatorTemplate.
func (mr *MockEvaluatorTemplateDAOMockRecorder) DeleteEvaluatorTemplate(ctx, id, userID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, userID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvaluatorTemplate", reflect.TypeOf((*MockEvaluatorTemplateDAO)(nil).DeleteEvaluatorTemplate), varargs...)
}

// GetEvaluatorTemplate mocks base method.
func (m *MockEvaluatorTemplateDAO) GetEvaluatorTemplate(ctx context.Context, id int64, includeDeleted bool, opts ...db.Option) (*model.EvaluatorTemplate, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id, includeDeleted}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvaluatorTemplate", varargs...)
	ret0, _ := ret[0].(*model.EvaluatorTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluatorTemplate indicates an expected call of GetEvaluatorTemplate.
func (mr *MockEvaluatorTemplateDAOMockRecorder) GetEvaluatorTemplate(ctx, id, includeDeleted any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id, includeDeleted}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluatorTemplate", reflect.TypeOf((*MockEvaluatorTemplateDAO)(nil).GetEvaluatorTemplate), varargs...)
}

// ListEvaluatorTemplate mocks base method.
func (m *MockEvaluatorTemplateDAO) ListEvaluatorTemplate(ctx context.Context, req *mysql.ListEvaluatorTemplateRequest, opts ...db.Option) (*mysql.ListEvaluatorTemplateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListEvaluatorTemplate", varargs...)
	ret0, _ := ret[0].(*mysql.ListEvaluatorTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvaluatorTemplate indicates an expected call of ListEvaluatorTemplate.
func (mr *MockEvaluatorTemplateDAOMockRecorder) ListEvaluatorTemplate(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvaluatorTemplate", reflect.TypeOf((*MockEvaluatorTemplateDAO)(nil).ListEvaluatorTemplate), varargs...)
}

// UpdateEvaluatorTemplate mocks base method.
func (m *MockEvaluatorTemplateDAO) UpdateEvaluatorTemplate(ctx context.Context, template *model.EvaluatorTemplate, opts ...db.Option) (*model.EvaluatorTemplate, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, template}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEvaluatorTemplate", varargs...)
	ret0, _ := ret[0].(*model.EvaluatorTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvaluatorTemplate indicates an expected call of UpdateEvaluatorTemplate.
func (mr *MockEvaluatorTemplateDAOMockRecorder) UpdateEvaluatorTemplate(ctx, template any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, template}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluatorTemplate", reflect.TypeOf((*MockEvaluatorTemplateDAO)(nil).UpdateEvaluatorTemplate), varargs...)
}

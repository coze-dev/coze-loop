// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/evaluator/mysql (interfaces: EvaluatorRecordDAO)
//
// Generated by this command:
//
//	mockgen -destination mocks/evaluator_record_mock.go -package=mocks . EvaluatorRecordDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/evaluator/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockEvaluatorRecordDAO is a mock of EvaluatorRecordDAO interface.
type MockEvaluatorRecordDAO struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluatorRecordDAOMockRecorder
	isgomock struct{}
}

// MockEvaluatorRecordDAOMockRecorder is the mock recorder for MockEvaluatorRecordDAO.
type MockEvaluatorRecordDAOMockRecorder struct {
	mock *MockEvaluatorRecordDAO
}

// NewMockEvaluatorRecordDAO creates a new mock instance.
func NewMockEvaluatorRecordDAO(ctrl *gomock.Controller) *MockEvaluatorRecordDAO {
	mock := &MockEvaluatorRecordDAO{ctrl: ctrl}
	mock.recorder = &MockEvaluatorRecordDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluatorRecordDAO) EXPECT() *MockEvaluatorRecordDAOMockRecorder {
	return m.recorder
}

// BatchGetEvaluatorRecord mocks base method.
func (m *MockEvaluatorRecordDAO) BatchGetEvaluatorRecord(ctx context.Context, evaluatorRecordIDs []int64, includeDeleted bool, opts ...db.Option) ([]*model.EvaluatorRecord, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, evaluatorRecordIDs, includeDeleted}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetEvaluatorRecord", varargs...)
	ret0, _ := ret[0].([]*model.EvaluatorRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluatorRecord indicates an expected call of BatchGetEvaluatorRecord.
func (mr *MockEvaluatorRecordDAOMockRecorder) BatchGetEvaluatorRecord(ctx, evaluatorRecordIDs, includeDeleted any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, evaluatorRecordIDs, includeDeleted}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluatorRecord", reflect.TypeOf((*MockEvaluatorRecordDAO)(nil).BatchGetEvaluatorRecord), varargs...)
}

// CreateEvaluatorRecord mocks base method.
func (m *MockEvaluatorRecordDAO) CreateEvaluatorRecord(ctx context.Context, evaluatorRecord *model.EvaluatorRecord, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, evaluatorRecord}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEvaluatorRecord", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEvaluatorRecord indicates an expected call of CreateEvaluatorRecord.
func (mr *MockEvaluatorRecordDAOMockRecorder) CreateEvaluatorRecord(ctx, evaluatorRecord any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, evaluatorRecord}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluatorRecord", reflect.TypeOf((*MockEvaluatorRecordDAO)(nil).CreateEvaluatorRecord), varargs...)
}

// GetEvaluatorRecord mocks base method.
func (m *MockEvaluatorRecordDAO) GetEvaluatorRecord(ctx context.Context, evaluatorRecordID int64, includeDeleted bool, opts ...db.Option) (*model.EvaluatorRecord, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, evaluatorRecordID, includeDeleted}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEvaluatorRecord", varargs...)
	ret0, _ := ret[0].(*model.EvaluatorRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluatorRecord indicates an expected call of GetEvaluatorRecord.
func (mr *MockEvaluatorRecordDAOMockRecorder) GetEvaluatorRecord(ctx, evaluatorRecordID, includeDeleted any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, evaluatorRecordID, includeDeleted}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluatorRecord", reflect.TypeOf((*MockEvaluatorRecordDAO)(nil).GetEvaluatorRecord), varargs...)
}

// UpdateEvaluatorRecord mocks base method.
func (m *MockEvaluatorRecordDAO) UpdateEvaluatorRecord(ctx context.Context, evaluatorRecord *model.EvaluatorRecord, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, evaluatorRecord}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateEvaluatorRecord", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvaluatorRecord indicates an expected call of UpdateEvaluatorRecord.
func (mr *MockEvaluatorRecordDAOMockRecorder) UpdateEvaluatorRecord(ctx, evaluatorRecord any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, evaluatorRecord}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluatorRecord", reflect.TypeOf((*MockEvaluatorRecordDAO)(nil).UpdateEvaluatorRecord), varargs...)
}

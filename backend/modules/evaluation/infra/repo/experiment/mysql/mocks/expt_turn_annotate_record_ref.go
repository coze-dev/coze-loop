// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: IExptTurnAnnotateRecordRefDAO)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
	"go.uber.org/mock/gomock"
)

// MockIExptTurnAnnotateRecordRefDAO is a mock of IExptTurnAnnotateRecordRefDAO interface.
type MockIExptTurnAnnotateRecordRefDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIExptTurnAnnotateRecordRefDAOMockRecorder
}

// MockIExptTurnAnnotateRecordRefDAOMockRecorder is the mock recorder for MockIExptTurnAnnotateRecordRefDAO.
type MockIExptTurnAnnotateRecordRefDAOMockRecorder struct {
	mock *MockIExptTurnAnnotateRecordRefDAO
}

// NewMockIExptTurnAnnotateRecordRefDAO creates a new mock instance.
func NewMockIExptTurnAnnotateRecordRefDAO(ctrl *gomock.Controller) *MockIExptTurnAnnotateRecordRefDAO {
	mock := &MockIExptTurnAnnotateRecordRefDAO{ctrl: ctrl}
	mock.recorder = &MockIExptTurnAnnotateRecordRefDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptTurnAnnotateRecordRefDAO) EXPECT() *MockIExptTurnAnnotateRecordRefDAOMockRecorder {
	return m.recorder
}

// BatchGet mocks base method.
func (m *MockIExptTurnAnnotateRecordRefDAO) BatchGet(arg0 context.Context, arg1 int64, arg2 []int64, arg3 ...db.Option) ([]*model.ExptTurnAnnotateRecordRef, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGet", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnAnnotateRecordRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockIExptTurnAnnotateRecordRefDAOMockRecorder) BatchGet(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockIExptTurnAnnotateRecordRefDAO)(nil).BatchGet), varargs...)
}

// BatchGetByExptIDs mocks base method.
func (m *MockIExptTurnAnnotateRecordRefDAO) BatchGetByExptIDs(arg0 context.Context, arg1 int64, arg2 []int64, arg3 ...db.Option) ([]*model.ExptTurnAnnotateRecordRef, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetByExptIDs", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnAnnotateRecordRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetByExptIDs indicates an expected call of BatchGetByExptIDs.
func (mr *MockIExptTurnAnnotateRecordRefDAOMockRecorder) BatchGetByExptIDs(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetByExptIDs", reflect.TypeOf((*MockIExptTurnAnnotateRecordRefDAO)(nil).BatchGetByExptIDs), varargs...)
}

// DeleteByTagKeyID mocks base method.
func (m *MockIExptTurnAnnotateRecordRefDAO) DeleteByTagKeyID(arg0 context.Context, arg1, arg2, arg3 int64, arg4 ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByTagKeyID", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByTagKeyID indicates an expected call of DeleteByTagKeyID.
func (mr *MockIExptTurnAnnotateRecordRefDAOMockRecorder) DeleteByTagKeyID(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByTagKeyID", reflect.TypeOf((*MockIExptTurnAnnotateRecordRefDAO)(nil).DeleteByTagKeyID), varargs...)
}

// GetByExptID mocks base method.
func (m *MockIExptTurnAnnotateRecordRefDAO) GetByExptID(arg0 context.Context, arg1, arg2 int64, arg3 ...db.Option) ([]*model.ExptTurnAnnotateRecordRef, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByExptID", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnAnnotateRecordRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExptID indicates an expected call of GetByExptID.
func (mr *MockIExptTurnAnnotateRecordRefDAOMockRecorder) GetByExptID(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExptID", reflect.TypeOf((*MockIExptTurnAnnotateRecordRefDAO)(nil).GetByExptID), varargs...)
}

// GetByTagKeyID mocks base method.
func (m *MockIExptTurnAnnotateRecordRefDAO) GetByTagKeyID(arg0 context.Context, arg1, arg2, arg3 int64, arg4 ...db.Option) ([]*model.ExptTurnAnnotateRecordRef, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByTagKeyID", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnAnnotateRecordRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTagKeyID indicates an expected call of GetByTagKeyID.
func (mr *MockIExptTurnAnnotateRecordRefDAOMockRecorder) GetByTagKeyID(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTagKeyID", reflect.TypeOf((*MockIExptTurnAnnotateRecordRefDAO)(nil).GetByTagKeyID), varargs...)
}

// Save mocks base method.
func (m *MockIExptTurnAnnotateRecordRefDAO) Save(arg0 context.Context, arg1 *model.ExptTurnAnnotateRecordRef, arg2 ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIExptTurnAnnotateRecordRefDAOMockRecorder) Save(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIExptTurnAnnotateRecordRefDAO)(nil).Save), varargs...)
}

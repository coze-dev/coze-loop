// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: IExptTurnAnnotateRecordRefDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/expt_turn_annotate_record_ref.go -package=mocks . IExptTurnAnnotateRecordRefDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIExptTurnAnnotateRecordRefDAO is a mock of IExptTurnAnnotateRecordRefDAO interface.
type MockIExptTurnAnnotateRecordRefDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIExptTurnAnnotateRecordRefDAOMockRecorder
	isgomock struct{}
}

// MockIExptTurnAnnotateRecordRefDAOMockRecorder is the mock recorder for MockIExptTurnAnnotateRecordRefDAO.
type MockIExptTurnAnnotateRecordRefDAOMockRecorder struct {
	mock *MockIExptTurnAnnotateRecordRefDAO
}

// NewMockIExptTurnAnnotateRecordRefDAO creates a new mock instance.
func NewMockIExptTurnAnnotateRecordRefDAO(ctrl *gomock.Controller) *MockIExptTurnAnnotateRecordRefDAO {
	mock := &MockIExptTurnAnnotateRecordRefDAO{ctrl: ctrl}
	mock.recorder = &MockIExptTurnAnnotateRecordRefDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptTurnAnnotateRecordRefDAO) EXPECT() *MockIExptTurnAnnotateRecordRefDAOMockRecorder {
	return m.recorder
}

// BatchGet mocks base method.
func (m *MockIExptTurnAnnotateRecordRefDAO) BatchGet(ctx context.Context, spaceID int64, exptTurnResultIDs []int64, opts ...db.Option) ([]*model.ExptTurnAnnotateRecordRef, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, exptTurnResultIDs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGet", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnAnnotateRecordRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockIExptTurnAnnotateRecordRefDAOMockRecorder) BatchGet(ctx, spaceID, exptTurnResultIDs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, exptTurnResultIDs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockIExptTurnAnnotateRecordRefDAO)(nil).BatchGet), varargs...)
}

// BatchGetByExptIDs mocks base method.
func (m *MockIExptTurnAnnotateRecordRefDAO) BatchGetByExptIDs(ctx context.Context, spaceID int64, exptIDs []int64, opts ...db.Option) ([]*model.ExptTurnAnnotateRecordRef, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, exptIDs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGetByExptIDs", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnAnnotateRecordRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetByExptIDs indicates an expected call of BatchGetByExptIDs.
func (mr *MockIExptTurnAnnotateRecordRefDAOMockRecorder) BatchGetByExptIDs(ctx, spaceID, exptIDs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, exptIDs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetByExptIDs", reflect.TypeOf((*MockIExptTurnAnnotateRecordRefDAO)(nil).BatchGetByExptIDs), varargs...)
}

// DeleteByTagKeyID mocks base method.
func (m *MockIExptTurnAnnotateRecordRefDAO) DeleteByTagKeyID(ctx context.Context, spaceID, exptID, tagKeyID int64, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, exptID, tagKeyID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByTagKeyID", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByTagKeyID indicates an expected call of DeleteByTagKeyID.
func (mr *MockIExptTurnAnnotateRecordRefDAOMockRecorder) DeleteByTagKeyID(ctx, spaceID, exptID, tagKeyID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, exptID, tagKeyID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByTagKeyID", reflect.TypeOf((*MockIExptTurnAnnotateRecordRefDAO)(nil).DeleteByTagKeyID), varargs...)
}

// GetByExptID mocks base method.
func (m *MockIExptTurnAnnotateRecordRefDAO) GetByExptID(ctx context.Context, spaceID, exptID int64, opts ...db.Option) ([]*model.ExptTurnAnnotateRecordRef, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, exptID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByExptID", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnAnnotateRecordRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExptID indicates an expected call of GetByExptID.
func (mr *MockIExptTurnAnnotateRecordRefDAOMockRecorder) GetByExptID(ctx, spaceID, exptID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, exptID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExptID", reflect.TypeOf((*MockIExptTurnAnnotateRecordRefDAO)(nil).GetByExptID), varargs...)
}

// GetByTagKeyID mocks base method.
func (m *MockIExptTurnAnnotateRecordRefDAO) GetByTagKeyID(ctx context.Context, spaceID, exptID, tagKeyID int64, opts ...db.Option) ([]*model.ExptTurnAnnotateRecordRef, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, exptID, tagKeyID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByTagKeyID", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnAnnotateRecordRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTagKeyID indicates an expected call of GetByTagKeyID.
func (mr *MockIExptTurnAnnotateRecordRefDAOMockRecorder) GetByTagKeyID(ctx, spaceID, exptID, tagKeyID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, exptID, tagKeyID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTagKeyID", reflect.TypeOf((*MockIExptTurnAnnotateRecordRefDAO)(nil).GetByTagKeyID), varargs...)
}

// Save mocks base method.
func (m *MockIExptTurnAnnotateRecordRefDAO) Save(ctx context.Context, refs *model.ExptTurnAnnotateRecordRef, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, refs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIExptTurnAnnotateRecordRefDAOMockRecorder) Save(ctx, refs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, refs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIExptTurnAnnotateRecordRefDAO)(nil).Save), varargs...)
}

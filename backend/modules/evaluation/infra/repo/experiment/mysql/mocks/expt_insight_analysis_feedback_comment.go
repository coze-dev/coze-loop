// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: IExptInsightAnalysisFeedbackCommentDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/expt_insight_analysis_feedback_comment.go -package mocks . IExptInsightAnalysisFeedbackCommentDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIExptInsightAnalysisFeedbackCommentDAO is a mock of IExptInsightAnalysisFeedbackCommentDAO interface.
type MockIExptInsightAnalysisFeedbackCommentDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIExptInsightAnalysisFeedbackCommentDAOMockRecorder
	isgomock struct{}
}

// MockIExptInsightAnalysisFeedbackCommentDAOMockRecorder is the mock recorder for MockIExptInsightAnalysisFeedbackCommentDAO.
type MockIExptInsightAnalysisFeedbackCommentDAOMockRecorder struct {
	mock *MockIExptInsightAnalysisFeedbackCommentDAO
}

// NewMockIExptInsightAnalysisFeedbackCommentDAO creates a new mock instance.
func NewMockIExptInsightAnalysisFeedbackCommentDAO(ctrl *gomock.Controller) *MockIExptInsightAnalysisFeedbackCommentDAO {
	mock := &MockIExptInsightAnalysisFeedbackCommentDAO{ctrl: ctrl}
	mock.recorder = &MockIExptInsightAnalysisFeedbackCommentDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptInsightAnalysisFeedbackCommentDAO) EXPECT() *MockIExptInsightAnalysisFeedbackCommentDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIExptInsightAnalysisFeedbackCommentDAO) Create(ctx context.Context, feedbackComment *model.ExptInsightAnalysisFeedbackComment, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, feedbackComment}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIExptInsightAnalysisFeedbackCommentDAOMockRecorder) Create(ctx, feedbackComment any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, feedbackComment}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIExptInsightAnalysisFeedbackCommentDAO)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockIExptInsightAnalysisFeedbackCommentDAO) Delete(ctx context.Context, spaceID, exptID, commentID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, spaceID, exptID, commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIExptInsightAnalysisFeedbackCommentDAOMockRecorder) Delete(ctx, spaceID, exptID, commentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIExptInsightAnalysisFeedbackCommentDAO)(nil).Delete), ctx, spaceID, exptID, commentID)
}

// GetByRecordID mocks base method.
func (m *MockIExptInsightAnalysisFeedbackCommentDAO) GetByRecordID(ctx context.Context, spaceID, exptID, recordID int64, opts ...db.Option) (*model.ExptInsightAnalysisFeedbackComment, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, exptID, recordID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByRecordID", varargs...)
	ret0, _ := ret[0].(*model.ExptInsightAnalysisFeedbackComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRecordID indicates an expected call of GetByRecordID.
func (mr *MockIExptInsightAnalysisFeedbackCommentDAOMockRecorder) GetByRecordID(ctx, spaceID, exptID, recordID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, exptID, recordID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRecordID", reflect.TypeOf((*MockIExptInsightAnalysisFeedbackCommentDAO)(nil).GetByRecordID), varargs...)
}

// List mocks base method.
func (m *MockIExptInsightAnalysisFeedbackCommentDAO) List(ctx context.Context, spaceID, exptID, recordID int64, page entity.Page) ([]*model.ExptInsightAnalysisFeedbackComment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, spaceID, exptID, recordID, page)
	ret0, _ := ret[0].([]*model.ExptInsightAnalysisFeedbackComment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockIExptInsightAnalysisFeedbackCommentDAOMockRecorder) List(ctx, spaceID, exptID, recordID, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIExptInsightAnalysisFeedbackCommentDAO)(nil).List), ctx, spaceID, exptID, recordID, page)
}

// Update mocks base method.
func (m *MockIExptInsightAnalysisFeedbackCommentDAO) Update(ctx context.Context, feedbackComment *model.ExptInsightAnalysisFeedbackComment, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, feedbackComment}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIExptInsightAnalysisFeedbackCommentDAOMockRecorder) Update(ctx, feedbackComment any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, feedbackComment}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIExptInsightAnalysisFeedbackCommentDAO)(nil).Update), varargs...)
}

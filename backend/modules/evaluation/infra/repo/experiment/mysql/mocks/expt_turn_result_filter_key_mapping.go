// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: IExptTurnResultFilterKeyMappingDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/expt_turn_result_filter_key_mapping.go -package mocks . IExptTurnResultFilterKeyMappingDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIExptTurnResultFilterKeyMappingDAO is a mock of IExptTurnResultFilterKeyMappingDAO interface.
type MockIExptTurnResultFilterKeyMappingDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIExptTurnResultFilterKeyMappingDAOMockRecorder
	isgomock struct{}
}

// MockIExptTurnResultFilterKeyMappingDAOMockRecorder is the mock recorder for MockIExptTurnResultFilterKeyMappingDAO.
type MockIExptTurnResultFilterKeyMappingDAOMockRecorder struct {
	mock *MockIExptTurnResultFilterKeyMappingDAO
}

// NewMockIExptTurnResultFilterKeyMappingDAO creates a new mock instance.
func NewMockIExptTurnResultFilterKeyMappingDAO(ctrl *gomock.Controller) *MockIExptTurnResultFilterKeyMappingDAO {
	mock := &MockIExptTurnResultFilterKeyMappingDAO{ctrl: ctrl}
	mock.recorder = &MockIExptTurnResultFilterKeyMappingDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptTurnResultFilterKeyMappingDAO) EXPECT() *MockIExptTurnResultFilterKeyMappingDAOMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockIExptTurnResultFilterKeyMappingDAO) Delete(ctx context.Context, mapping *model.ExptTurnResultFilterKeyMapping, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, mapping}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIExptTurnResultFilterKeyMappingDAOMockRecorder) Delete(ctx, mapping any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, mapping}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIExptTurnResultFilterKeyMappingDAO)(nil).Delete), varargs...)
}

// GetByExptID mocks base method.
func (m *MockIExptTurnResultFilterKeyMappingDAO) GetByExptID(ctx context.Context, spaceID, exptID int64, opts ...db.Option) ([]*model.ExptTurnResultFilterKeyMapping, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, exptID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByExptID", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnResultFilterKeyMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExptID indicates an expected call of GetByExptID.
func (mr *MockIExptTurnResultFilterKeyMappingDAOMockRecorder) GetByExptID(ctx, spaceID, exptID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, exptID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExptID", reflect.TypeOf((*MockIExptTurnResultFilterKeyMappingDAO)(nil).GetByExptID), varargs...)
}

// Insert mocks base method.
func (m *MockIExptTurnResultFilterKeyMappingDAO) Insert(ctx context.Context, exptTurnResultFilterKeyMappings []*model.ExptTurnResultFilterKeyMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, exptTurnResultFilterKeyMappings)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIExptTurnResultFilterKeyMappingDAOMockRecorder) Insert(ctx, exptTurnResultFilterKeyMappings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIExptTurnResultFilterKeyMappingDAO)(nil).Insert), ctx, exptTurnResultFilterKeyMappings)
}

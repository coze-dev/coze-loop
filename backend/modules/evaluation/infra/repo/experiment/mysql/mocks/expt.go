// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: IExptDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/expt.go -package=mocks . IExptDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIExptDAO is a mock of IExptDAO interface.
type MockIExptDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIExptDAOMockRecorder
	isgomock struct{}
}

// MockIExptDAOMockRecorder is the mock recorder for MockIExptDAO.
type MockIExptDAOMockRecorder struct {
	mock *MockIExptDAO
}

// NewMockIExptDAO creates a new mock instance.
func NewMockIExptDAO(ctrl *gomock.Controller) *MockIExptDAO {
	mock := &MockIExptDAO{ctrl: ctrl}
	mock.recorder = &MockIExptDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptDAO) EXPECT() *MockIExptDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIExptDAO) Create(ctx context.Context, expt *model.Experiment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, expt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIExptDAOMockRecorder) Create(ctx, expt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIExptDAO)(nil).Create), ctx, expt)
}

// Delete mocks base method.
func (m *MockIExptDAO) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIExptDAOMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIExptDAO)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockIExptDAO) GetByID(ctx context.Context, id int64) (*model.Experiment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Experiment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIExptDAOMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIExptDAO)(nil).GetByID), ctx, id)
}

// GetByName mocks base method.
func (m *MockIExptDAO) GetByName(ctx context.Context, name string, spaceID int64) (*model.Experiment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name, spaceID)
	ret0, _ := ret[0].(*model.Experiment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockIExptDAOMockRecorder) GetByName(ctx, name, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIExptDAO)(nil).GetByName), ctx, name, spaceID)
}

// List mocks base method.
func (m *MockIExptDAO) List(ctx context.Context, page, size int32, filter *entity.ExptListFilter, orders []*entity.OrderBy, spaceID int64) ([]*model.Experiment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, page, size, filter, orders, spaceID)
	ret0, _ := ret[0].([]*model.Experiment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockIExptDAOMockRecorder) List(ctx, page, size, filter, orders, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIExptDAO)(nil).List), ctx, page, size, filter, orders, spaceID)
}

// MDelete mocks base method.
func (m *MockIExptDAO) MDelete(ctx context.Context, ids []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MDelete", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// MDelete indicates an expected call of MDelete.
func (mr *MockIExptDAOMockRecorder) MDelete(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDelete", reflect.TypeOf((*MockIExptDAO)(nil).MDelete), ctx, ids)
}

// MGetByID mocks base method.
func (m *MockIExptDAO) MGetByID(ctx context.Context, ids []int64) ([]*model.Experiment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetByID", ctx, ids)
	ret0, _ := ret[0].([]*model.Experiment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetByID indicates an expected call of MGetByID.
func (mr *MockIExptDAOMockRecorder) MGetByID(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetByID", reflect.TypeOf((*MockIExptDAO)(nil).MGetByID), ctx, ids)
}

// Update mocks base method.
func (m *MockIExptDAO) Update(ctx context.Context, expt *model.Experiment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, expt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIExptDAOMockRecorder) Update(ctx, expt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIExptDAO)(nil).Update), ctx, expt)
}

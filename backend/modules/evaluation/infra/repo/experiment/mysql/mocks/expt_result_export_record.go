// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: ExptResultExportRecordDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/expt_result_export_record.go -package=mocks . ExptResultExportRecordDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockExptResultExportRecordDAO is a mock of ExptResultExportRecordDAO interface.
type MockExptResultExportRecordDAO struct {
	ctrl     *gomock.Controller
	recorder *MockExptResultExportRecordDAOMockRecorder
	isgomock struct{}
}

// MockExptResultExportRecordDAOMockRecorder is the mock recorder for MockExptResultExportRecordDAO.
type MockExptResultExportRecordDAOMockRecorder struct {
	mock *MockExptResultExportRecordDAO
}

// NewMockExptResultExportRecordDAO creates a new mock instance.
func NewMockExptResultExportRecordDAO(ctrl *gomock.Controller) *MockExptResultExportRecordDAO {
	mock := &MockExptResultExportRecordDAO{ctrl: ctrl}
	mock.recorder = &MockExptResultExportRecordDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExptResultExportRecordDAO) EXPECT() *MockExptResultExportRecordDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExptResultExportRecordDAO) Create(ctx context.Context, exptResultExportRecord *model.ExptResultExportRecord, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptResultExportRecord}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockExptResultExportRecordDAOMockRecorder) Create(ctx, exptResultExportRecord any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptResultExportRecord}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExptResultExportRecordDAO)(nil).Create), varargs...)
}

// Get mocks base method.
func (m *MockExptResultExportRecordDAO) Get(ctx context.Context, spaceID, exportID int64, opts ...db.Option) (*model.ExptResultExportRecord, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, exportID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*model.ExptResultExportRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExptResultExportRecordDAOMockRecorder) Get(ctx, spaceID, exportID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, exportID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExptResultExportRecordDAO)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockExptResultExportRecordDAO) List(ctx context.Context, spaceID, exptID int64, page entity.Page, csvExportStatus *int32) ([]*model.ExptResultExportRecord, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, spaceID, exptID, page, csvExportStatus)
	ret0, _ := ret[0].([]*model.ExptResultExportRecord)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockExptResultExportRecordDAOMockRecorder) List(ctx, spaceID, exptID, page, csvExportStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExptResultExportRecordDAO)(nil).List), ctx, spaceID, exptID, page, csvExportStatus)
}

// Update mocks base method.
func (m *MockExptResultExportRecordDAO) Update(ctx context.Context, exptResultExportRecord *model.ExptResultExportRecord, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptResultExportRecord}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockExptResultExportRecordDAOMockRecorder) Update(ctx, exptResultExportRecord any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptResultExportRecord}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExptResultExportRecordDAO)(nil).Update), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: IExptTurnResultTagRefDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/expt_turn_result_tag_ref.go -package=mocks . IExptTurnResultTagRefDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIExptTurnResultTagRefDAO is a mock of IExptTurnResultTagRefDAO interface.
type MockIExptTurnResultTagRefDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIExptTurnResultTagRefDAOMockRecorder
	isgomock struct{}
}

// MockIExptTurnResultTagRefDAOMockRecorder is the mock recorder for MockIExptTurnResultTagRefDAO.
type MockIExptTurnResultTagRefDAOMockRecorder struct {
	mock *MockIExptTurnResultTagRefDAO
}

// NewMockIExptTurnResultTagRefDAO creates a new mock instance.
func NewMockIExptTurnResultTagRefDAO(ctrl *gomock.Controller) *MockIExptTurnResultTagRefDAO {
	mock := &MockIExptTurnResultTagRefDAO{ctrl: ctrl}
	mock.recorder = &MockIExptTurnResultTagRefDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptTurnResultTagRefDAO) EXPECT() *MockIExptTurnResultTagRefDAOMockRecorder {
	return m.recorder
}

// BatchGetByExptIDs mocks base method.
func (m *MockIExptTurnResultTagRefDAO) BatchGetByExptIDs(ctx context.Context, exptIDs []int64, spaceID int64) ([]*model.ExptTurnResultTagRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetByExptIDs", ctx, exptIDs, spaceID)
	ret0, _ := ret[0].([]*model.ExptTurnResultTagRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetByExptIDs indicates an expected call of BatchGetByExptIDs.
func (mr *MockIExptTurnResultTagRefDAOMockRecorder) BatchGetByExptIDs(ctx, exptIDs, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetByExptIDs", reflect.TypeOf((*MockIExptTurnResultTagRefDAO)(nil).BatchGetByExptIDs), ctx, exptIDs, spaceID)
}

// Create mocks base method.
func (m *MockIExptTurnResultTagRefDAO) Create(ctx context.Context, refs []*model.ExptTurnResultTagRef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, refs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIExptTurnResultTagRefDAOMockRecorder) Create(ctx, refs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIExptTurnResultTagRefDAO)(nil).Create), ctx, refs)
}

// Delete mocks base method.
func (m *MockIExptTurnResultTagRefDAO) Delete(ctx context.Context, exptID, spaceID, tagKeyID int64, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptID, spaceID, tagKeyID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIExptTurnResultTagRefDAOMockRecorder) Delete(ctx, exptID, spaceID, tagKeyID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptID, spaceID, tagKeyID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIExptTurnResultTagRefDAO)(nil).Delete), varargs...)
}

// GetByExptID mocks base method.
func (m *MockIExptTurnResultTagRefDAO) GetByExptID(ctx context.Context, exptID, spaceID int64) ([]*model.ExptTurnResultTagRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExptID", ctx, exptID, spaceID)
	ret0, _ := ret[0].([]*model.ExptTurnResultTagRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExptID indicates an expected call of GetByExptID.
func (mr *MockIExptTurnResultTagRefDAOMockRecorder) GetByExptID(ctx, exptID, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExptID", reflect.TypeOf((*MockIExptTurnResultTagRefDAO)(nil).GetByExptID), ctx, exptID, spaceID)
}

// GetByTagKeyID mocks base method.
func (m *MockIExptTurnResultTagRefDAO) GetByTagKeyID(ctx context.Context, exptID, spaceID, tagKeyID int64) (*model.ExptTurnResultTagRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTagKeyID", ctx, exptID, spaceID, tagKeyID)
	ret0, _ := ret[0].(*model.ExptTurnResultTagRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTagKeyID indicates an expected call of GetByTagKeyID.
func (mr *MockIExptTurnResultTagRefDAOMockRecorder) GetByTagKeyID(ctx, exptID, spaceID, tagKeyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTagKeyID", reflect.TypeOf((*MockIExptTurnResultTagRefDAO)(nil).GetByTagKeyID), ctx, exptID, spaceID, tagKeyID)
}

// UpdateCompleteCount mocks base method.
func (m *MockIExptTurnResultTagRefDAO) UpdateCompleteCount(ctx context.Context, exptID, spaceID, tagKeyID int64, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptID, spaceID, tagKeyID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCompleteCount", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCompleteCount indicates an expected call of UpdateCompleteCount.
func (mr *MockIExptTurnResultTagRefDAOMockRecorder) UpdateCompleteCount(ctx, exptID, spaceID, tagKeyID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptID, spaceID, tagKeyID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompleteCount", reflect.TypeOf((*MockIExptTurnResultTagRefDAO)(nil).UpdateCompleteCount), varargs...)
}

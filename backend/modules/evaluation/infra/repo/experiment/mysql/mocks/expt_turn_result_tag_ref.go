// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: IExptTurnResultTagRefDAO)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
	"go.uber.org/mock/gomock"
)

// MockIExptTurnResultTagRefDAO is a mock of IExptTurnResultTagRefDAO interface.
type MockIExptTurnResultTagRefDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIExptTurnResultTagRefDAOMockRecorder
}

// MockIExptTurnResultTagRefDAOMockRecorder is the mock recorder for MockIExptTurnResultTagRefDAO.
type MockIExptTurnResultTagRefDAOMockRecorder struct {
	mock *MockIExptTurnResultTagRefDAO
}

// NewMockIExptTurnResultTagRefDAO creates a new mock instance.
func NewMockIExptTurnResultTagRefDAO(ctrl *gomock.Controller) *MockIExptTurnResultTagRefDAO {
	mock := &MockIExptTurnResultTagRefDAO{ctrl: ctrl}
	mock.recorder = &MockIExptTurnResultTagRefDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptTurnResultTagRefDAO) EXPECT() *MockIExptTurnResultTagRefDAOMockRecorder {
	return m.recorder
}

// BatchGetByExptIDs mocks base method.
func (m *MockIExptTurnResultTagRefDAO) BatchGetByExptIDs(arg0 context.Context, arg1 []int64, arg2 int64) ([]*model.ExptTurnResultTagRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetByExptIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.ExptTurnResultTagRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetByExptIDs indicates an expected call of BatchGetByExptIDs.
func (mr *MockIExptTurnResultTagRefDAOMockRecorder) BatchGetByExptIDs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetByExptIDs", reflect.TypeOf((*MockIExptTurnResultTagRefDAO)(nil).BatchGetByExptIDs), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockIExptTurnResultTagRefDAO) Create(arg0 context.Context, arg1 []*model.ExptTurnResultTagRef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIExptTurnResultTagRefDAOMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIExptTurnResultTagRefDAO)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIExptTurnResultTagRefDAO) Delete(arg0 context.Context, arg1, arg2, arg3 int64, arg4 ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIExptTurnResultTagRefDAOMockRecorder) Delete(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIExptTurnResultTagRefDAO)(nil).Delete), varargs...)
}

// GetByExptID mocks base method.
func (m *MockIExptTurnResultTagRefDAO) GetByExptID(arg0 context.Context, arg1, arg2 int64) ([]*model.ExptTurnResultTagRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExptID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*model.ExptTurnResultTagRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExptID indicates an expected call of GetByExptID.
func (mr *MockIExptTurnResultTagRefDAOMockRecorder) GetByExptID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExptID", reflect.TypeOf((*MockIExptTurnResultTagRefDAO)(nil).GetByExptID), arg0, arg1, arg2)
}

// GetByTagKeyID mocks base method.
func (m *MockIExptTurnResultTagRefDAO) GetByTagKeyID(arg0 context.Context, arg1, arg2, arg3 int64) (*model.ExptTurnResultTagRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTagKeyID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*model.ExptTurnResultTagRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTagKeyID indicates an expected call of GetByTagKeyID.
func (mr *MockIExptTurnResultTagRefDAOMockRecorder) GetByTagKeyID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTagKeyID", reflect.TypeOf((*MockIExptTurnResultTagRefDAO)(nil).GetByTagKeyID), arg0, arg1, arg2, arg3)
}

// UpdateCompleteCount mocks base method.
func (m *MockIExptTurnResultTagRefDAO) UpdateCompleteCount(arg0 context.Context, arg1, arg2, arg3 int64, arg4 ...db.Option) (int32, int32, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCompleteCount", varargs...)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateCompleteCount indicates an expected call of UpdateCompleteCount.
func (mr *MockIExptTurnResultTagRefDAOMockRecorder) UpdateCompleteCount(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCompleteCount", reflect.TypeOf((*MockIExptTurnResultTagRefDAO)(nil).UpdateCompleteCount), varargs...)
}

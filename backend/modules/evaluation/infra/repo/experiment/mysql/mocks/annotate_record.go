// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: IAnnotateRecordDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/annotate_record.go -package=mocks . IAnnotateRecordDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIAnnotateRecordDAO is a mock of IAnnotateRecordDAO interface.
type MockIAnnotateRecordDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIAnnotateRecordDAOMockRecorder
	isgomock struct{}
}

// MockIAnnotateRecordDAOMockRecorder is the mock recorder for MockIAnnotateRecordDAO.
type MockIAnnotateRecordDAOMockRecorder struct {
	mock *MockIAnnotateRecordDAO
}

// NewMockIAnnotateRecordDAO creates a new mock instance.
func NewMockIAnnotateRecordDAO(ctrl *gomock.Controller) *MockIAnnotateRecordDAO {
	mock := &MockIAnnotateRecordDAO{ctrl: ctrl}
	mock.recorder = &MockIAnnotateRecordDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAnnotateRecordDAO) EXPECT() *MockIAnnotateRecordDAOMockRecorder {
	return m.recorder
}

// BatchSave mocks base method.
func (m *MockIAnnotateRecordDAO) BatchSave(ctx context.Context, annotateRecord []*model.AnnotateRecord, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, annotateRecord}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchSave", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchSave indicates an expected call of BatchSave.
func (mr *MockIAnnotateRecordDAOMockRecorder) BatchSave(ctx, annotateRecord any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, annotateRecord}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchSave", reflect.TypeOf((*MockIAnnotateRecordDAO)(nil).BatchSave), varargs...)
}

// MGetByID mocks base method.
func (m *MockIAnnotateRecordDAO) MGetByID(ctx context.Context, ids []int64) ([]*model.AnnotateRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetByID", ctx, ids)
	ret0, _ := ret[0].([]*model.AnnotateRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetByID indicates an expected call of MGetByID.
func (mr *MockIAnnotateRecordDAOMockRecorder) MGetByID(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetByID", reflect.TypeOf((*MockIAnnotateRecordDAO)(nil).MGetByID), ctx, ids)
}

// Save mocks base method.
func (m *MockIAnnotateRecordDAO) Save(ctx context.Context, annotateRecord *model.AnnotateRecord, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, annotateRecord}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIAnnotateRecordDAOMockRecorder) Save(ctx, annotateRecord any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, annotateRecord}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIAnnotateRecordDAO)(nil).Save), varargs...)
}

// Update mocks base method.
func (m *MockIAnnotateRecordDAO) Update(ctx context.Context, annotateRecord *model.AnnotateRecord, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, annotateRecord}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIAnnotateRecordDAOMockRecorder) Update(ctx, annotateRecord any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, annotateRecord}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIAnnotateRecordDAO)(nil).Update), varargs...)
}

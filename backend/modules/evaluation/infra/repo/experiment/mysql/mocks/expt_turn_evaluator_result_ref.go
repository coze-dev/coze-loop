// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: IExptTurnEvaluatorResultRefDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/expt_turn_evaluator_result_ref.go -package mocks . IExptTurnEvaluatorResultRefDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIExptTurnEvaluatorResultRefDAO is a mock of IExptTurnEvaluatorResultRefDAO interface.
type MockIExptTurnEvaluatorResultRefDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIExptTurnEvaluatorResultRefDAOMockRecorder
	isgomock struct{}
}

// MockIExptTurnEvaluatorResultRefDAOMockRecorder is the mock recorder for MockIExptTurnEvaluatorResultRefDAO.
type MockIExptTurnEvaluatorResultRefDAOMockRecorder struct {
	mock *MockIExptTurnEvaluatorResultRefDAO
}

// NewMockIExptTurnEvaluatorResultRefDAO creates a new mock instance.
func NewMockIExptTurnEvaluatorResultRefDAO(ctrl *gomock.Controller) *MockIExptTurnEvaluatorResultRefDAO {
	mock := &MockIExptTurnEvaluatorResultRefDAO{ctrl: ctrl}
	mock.recorder = &MockIExptTurnEvaluatorResultRefDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptTurnEvaluatorResultRefDAO) EXPECT() *MockIExptTurnEvaluatorResultRefDAOMockRecorder {
	return m.recorder
}

// BatchGet mocks base method.
func (m *MockIExptTurnEvaluatorResultRefDAO) BatchGet(ctx context.Context, spaceID int64, exptTurnResultIDs []int64, opts ...db.Option) ([]*model.ExptTurnEvaluatorResultRef, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, exptTurnResultIDs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGet", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnEvaluatorResultRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockIExptTurnEvaluatorResultRefDAOMockRecorder) BatchGet(ctx, spaceID, exptTurnResultIDs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, exptTurnResultIDs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockIExptTurnEvaluatorResultRefDAO)(nil).BatchGet), varargs...)
}

// GetByExptEvaluatorVersionID mocks base method.
func (m *MockIExptTurnEvaluatorResultRefDAO) GetByExptEvaluatorVersionID(ctx context.Context, spaceID, exptID, evaluatorVersionID int64, opts ...db.Option) ([]*model.ExptTurnEvaluatorResultRef, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, exptID, evaluatorVersionID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByExptEvaluatorVersionID", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnEvaluatorResultRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExptEvaluatorVersionID indicates an expected call of GetByExptEvaluatorVersionID.
func (mr *MockIExptTurnEvaluatorResultRefDAOMockRecorder) GetByExptEvaluatorVersionID(ctx, spaceID, exptID, evaluatorVersionID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, exptID, evaluatorVersionID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExptEvaluatorVersionID", reflect.TypeOf((*MockIExptTurnEvaluatorResultRefDAO)(nil).GetByExptEvaluatorVersionID), varargs...)
}

// GetByExptID mocks base method.
func (m *MockIExptTurnEvaluatorResultRefDAO) GetByExptID(ctx context.Context, spaceID, exptID int64, opts ...db.Option) ([]*model.ExptTurnEvaluatorResultRef, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, exptID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByExptID", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnEvaluatorResultRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExptID indicates an expected call of GetByExptID.
func (mr *MockIExptTurnEvaluatorResultRefDAOMockRecorder) GetByExptID(ctx, spaceID, exptID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, exptID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExptID", reflect.TypeOf((*MockIExptTurnEvaluatorResultRefDAO)(nil).GetByExptID), varargs...)
}

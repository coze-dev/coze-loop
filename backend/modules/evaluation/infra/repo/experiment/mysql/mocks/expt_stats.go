// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: IExptStatsDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/expt_stats.go -package mocks . IExptStatsDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIExptStatsDAO is a mock of IExptStatsDAO interface.
type MockIExptStatsDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIExptStatsDAOMockRecorder
	isgomock struct{}
}

// MockIExptStatsDAOMockRecorder is the mock recorder for MockIExptStatsDAO.
type MockIExptStatsDAOMockRecorder struct {
	mock *MockIExptStatsDAO
}

// NewMockIExptStatsDAO creates a new mock instance.
func NewMockIExptStatsDAO(ctrl *gomock.Controller) *MockIExptStatsDAO {
	mock := &MockIExptStatsDAO{ctrl: ctrl}
	mock.recorder = &MockIExptStatsDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptStatsDAO) EXPECT() *MockIExptStatsDAOMockRecorder {
	return m.recorder
}

// ArithOperateCount mocks base method.
func (m *MockIExptStatsDAO) ArithOperateCount(ctx context.Context, exptID, spaceID int64, cntArithOp *entity.StatsCntArithOp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArithOperateCount", ctx, exptID, spaceID, cntArithOp)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArithOperateCount indicates an expected call of ArithOperateCount.
func (mr *MockIExptStatsDAOMockRecorder) ArithOperateCount(ctx, exptID, spaceID, cntArithOp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArithOperateCount", reflect.TypeOf((*MockIExptStatsDAO)(nil).ArithOperateCount), ctx, exptID, spaceID, cntArithOp)
}

// Create mocks base method.
func (m *MockIExptStatsDAO) Create(ctx context.Context, stats *model.ExptStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIExptStatsDAOMockRecorder) Create(ctx, stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIExptStatsDAO)(nil).Create), ctx, stats)
}

// Get mocks base method.
func (m *MockIExptStatsDAO) Get(ctx context.Context, exptID, spaceID int64) (*model.ExptStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, exptID, spaceID)
	ret0, _ := ret[0].(*model.ExptStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIExptStatsDAOMockRecorder) Get(ctx, exptID, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIExptStatsDAO)(nil).Get), ctx, exptID, spaceID)
}

// MGet mocks base method.
func (m *MockIExptStatsDAO) MGet(ctx context.Context, exptIDs []int64, spaceID int64) ([]*model.ExptStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGet", ctx, exptIDs, spaceID)
	ret0, _ := ret[0].([]*model.ExptStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet.
func (mr *MockIExptStatsDAOMockRecorder) MGet(ctx, exptIDs, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockIExptStatsDAO)(nil).MGet), ctx, exptIDs, spaceID)
}

// Save mocks base method.
func (m *MockIExptStatsDAO) Save(ctx context.Context, stats *model.ExptStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIExptStatsDAOMockRecorder) Save(ctx, stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIExptStatsDAO)(nil).Save), ctx, stats)
}

// UpdateByExptID mocks base method.
func (m *MockIExptStatsDAO) UpdateByExptID(ctx context.Context, exptID, spaceID int64, stats *model.ExptStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByExptID", ctx, exptID, spaceID, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByExptID indicates an expected call of UpdateByExptID.
func (mr *MockIExptStatsDAOMockRecorder) UpdateByExptID(ctx, exptID, spaceID, stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByExptID", reflect.TypeOf((*MockIExptStatsDAO)(nil).UpdateByExptID), ctx, exptID, spaceID, stats)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: IExptRunLogDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/expt_run_log.go -package mocks . IExptRunLogDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIExptRunLogDAO is a mock of IExptRunLogDAO interface.
type MockIExptRunLogDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIExptRunLogDAOMockRecorder
	isgomock struct{}
}

// MockIExptRunLogDAOMockRecorder is the mock recorder for MockIExptRunLogDAO.
type MockIExptRunLogDAOMockRecorder struct {
	mock *MockIExptRunLogDAO
}

// NewMockIExptRunLogDAO creates a new mock instance.
func NewMockIExptRunLogDAO(ctrl *gomock.Controller) *MockIExptRunLogDAO {
	mock := &MockIExptRunLogDAO{ctrl: ctrl}
	mock.recorder = &MockIExptRunLogDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptRunLogDAO) EXPECT() *MockIExptRunLogDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIExptRunLogDAO) Create(ctx context.Context, exptRunLog *model.ExptRunLog, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptRunLog}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIExptRunLogDAOMockRecorder) Create(ctx, exptRunLog any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptRunLog}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIExptRunLogDAO)(nil).Create), varargs...)
}

// Get mocks base method.
func (m *MockIExptRunLogDAO) Get(ctx context.Context, exptID, exptRunID int64, opts ...db.Option) (*model.ExptRunLog, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptID, exptRunID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*model.ExptRunLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIExptRunLogDAOMockRecorder) Get(ctx, exptID, exptRunID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptID, exptRunID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIExptRunLogDAO)(nil).Get), varargs...)
}

// Save mocks base method.
func (m *MockIExptRunLogDAO) Save(ctx context.Context, exptRunLog *model.ExptRunLog, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptRunLog}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIExptRunLogDAOMockRecorder) Save(ctx, exptRunLog any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptRunLog}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIExptRunLogDAO)(nil).Save), varargs...)
}

// Update mocks base method.
func (m *MockIExptRunLogDAO) Update(ctx context.Context, exptID, exptRunID int64, ufields map[string]any, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptID, exptRunID, ufields}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIExptRunLogDAOMockRecorder) Update(ctx, exptID, exptRunID, ufields any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptID, exptRunID, ufields}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIExptRunLogDAO)(nil).Update), varargs...)
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
)

func newExptTurnResultTagRef(db *gorm.DB, opts ...gen.DOOption) exptTurnResultTagRef {
	_exptTurnResultTagRef := exptTurnResultTagRef{}

	_exptTurnResultTagRef.exptTurnResultTagRefDo.UseDB(db, opts...)
	_exptTurnResultTagRef.exptTurnResultTagRefDo.UseModel(&model.ExptTurnResultTagRef{})

	tableName := _exptTurnResultTagRef.exptTurnResultTagRefDo.TableName()
	_exptTurnResultTagRef.ALL = field.NewAsterisk(tableName)
	_exptTurnResultTagRef.ID = field.NewInt64(tableName, "id")
	_exptTurnResultTagRef.SpaceID = field.NewInt64(tableName, "space_id")
	_exptTurnResultTagRef.ExptID = field.NewInt64(tableName, "expt_id")
	_exptTurnResultTagRef.TagKeyID = field.NewInt64(tableName, "tag_key_id")
	_exptTurnResultTagRef.TotalCnt = field.NewInt32(tableName, "total_cnt")
	_exptTurnResultTagRef.CompleteCnt = field.NewInt32(tableName, "complete_cnt")
	_exptTurnResultTagRef.CreatedAt = field.NewTime(tableName, "created_at")
	_exptTurnResultTagRef.UpdatedAt = field.NewTime(tableName, "updated_at")
	_exptTurnResultTagRef.DeletedAt = field.NewField(tableName, "deleted_at")

	_exptTurnResultTagRef.fillFieldMap()

	return _exptTurnResultTagRef
}

// exptTurnResultTagRef expt_turn_result_tag_ref
type exptTurnResultTagRef struct {
	exptTurnResultTagRefDo exptTurnResultTagRefDo

	ALL         field.Asterisk
	ID          field.Int64 // id
	SpaceID     field.Int64 // 空间 id
	ExptID      field.Int64 // 实验 id
	TagKeyID    field.Int64 // 标签 id
	TotalCnt    field.Int32 // total_cnt
	CompleteCnt field.Int32 // complete_cnt
	CreatedAt   field.Time  // 创建时间
	UpdatedAt   field.Time  // 更新时间
	DeletedAt   field.Field // 删除时间

	fieldMap map[string]field.Expr
}

func (e exptTurnResultTagRef) Table(newTableName string) *exptTurnResultTagRef {
	e.exptTurnResultTagRefDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e exptTurnResultTagRef) As(alias string) *exptTurnResultTagRef {
	e.exptTurnResultTagRefDo.DO = *(e.exptTurnResultTagRefDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *exptTurnResultTagRef) updateTableName(table string) *exptTurnResultTagRef {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.SpaceID = field.NewInt64(table, "space_id")
	e.ExptID = field.NewInt64(table, "expt_id")
	e.TagKeyID = field.NewInt64(table, "tag_key_id")
	e.TotalCnt = field.NewInt32(table, "total_cnt")
	e.CompleteCnt = field.NewInt32(table, "complete_cnt")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *exptTurnResultTagRef) WithContext(ctx context.Context) *exptTurnResultTagRefDo {
	return e.exptTurnResultTagRefDo.WithContext(ctx)
}

func (e exptTurnResultTagRef) TableName() string { return e.exptTurnResultTagRefDo.TableName() }

func (e exptTurnResultTagRef) Alias() string { return e.exptTurnResultTagRefDo.Alias() }

func (e exptTurnResultTagRef) Columns(cols ...field.Expr) gen.Columns {
	return e.exptTurnResultTagRefDo.Columns(cols...)
}

func (e *exptTurnResultTagRef) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *exptTurnResultTagRef) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 9)
	e.fieldMap["id"] = e.ID
	e.fieldMap["space_id"] = e.SpaceID
	e.fieldMap["expt_id"] = e.ExptID
	e.fieldMap["tag_key_id"] = e.TagKeyID
	e.fieldMap["total_cnt"] = e.TotalCnt
	e.fieldMap["complete_cnt"] = e.CompleteCnt
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e exptTurnResultTagRef) clone(db *gorm.DB) exptTurnResultTagRef {
	e.exptTurnResultTagRefDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e exptTurnResultTagRef) replaceDB(db *gorm.DB) exptTurnResultTagRef {
	e.exptTurnResultTagRefDo.ReplaceDB(db)
	return e
}

type exptTurnResultTagRefDo struct{ gen.DO }

func (e exptTurnResultTagRefDo) Debug() *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Debug())
}

func (e exptTurnResultTagRefDo) WithContext(ctx context.Context) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e exptTurnResultTagRefDo) ReadDB() *exptTurnResultTagRefDo {
	return e.Clauses(dbresolver.Read)
}

func (e exptTurnResultTagRefDo) WriteDB() *exptTurnResultTagRefDo {
	return e.Clauses(dbresolver.Write)
}

func (e exptTurnResultTagRefDo) Session(config *gorm.Session) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Session(config))
}

func (e exptTurnResultTagRefDo) Clauses(conds ...clause.Expression) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e exptTurnResultTagRefDo) Returning(value interface{}, columns ...string) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e exptTurnResultTagRefDo) Not(conds ...gen.Condition) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e exptTurnResultTagRefDo) Or(conds ...gen.Condition) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e exptTurnResultTagRefDo) Select(conds ...field.Expr) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e exptTurnResultTagRefDo) Where(conds ...gen.Condition) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e exptTurnResultTagRefDo) Order(conds ...field.Expr) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e exptTurnResultTagRefDo) Distinct(cols ...field.Expr) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e exptTurnResultTagRefDo) Omit(cols ...field.Expr) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e exptTurnResultTagRefDo) Join(table schema.Tabler, on ...field.Expr) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e exptTurnResultTagRefDo) LeftJoin(table schema.Tabler, on ...field.Expr) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e exptTurnResultTagRefDo) RightJoin(table schema.Tabler, on ...field.Expr) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e exptTurnResultTagRefDo) Group(cols ...field.Expr) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e exptTurnResultTagRefDo) Having(conds ...gen.Condition) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e exptTurnResultTagRefDo) Limit(limit int) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e exptTurnResultTagRefDo) Offset(offset int) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e exptTurnResultTagRefDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e exptTurnResultTagRefDo) Unscoped() *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Unscoped())
}

func (e exptTurnResultTagRefDo) Create(values ...*model.ExptTurnResultTagRef) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e exptTurnResultTagRefDo) CreateInBatches(values []*model.ExptTurnResultTagRef, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e exptTurnResultTagRefDo) Save(values ...*model.ExptTurnResultTagRef) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e exptTurnResultTagRefDo) First() (*model.ExptTurnResultTagRef, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultTagRef), nil
	}
}

func (e exptTurnResultTagRefDo) Take() (*model.ExptTurnResultTagRef, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultTagRef), nil
	}
}

func (e exptTurnResultTagRefDo) Last() (*model.ExptTurnResultTagRef, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultTagRef), nil
	}
}

func (e exptTurnResultTagRefDo) Find() ([]*model.ExptTurnResultTagRef, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExptTurnResultTagRef), err
}

func (e exptTurnResultTagRefDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExptTurnResultTagRef, err error) {
	buf := make([]*model.ExptTurnResultTagRef, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e exptTurnResultTagRefDo) FindInBatches(result *[]*model.ExptTurnResultTagRef, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e exptTurnResultTagRefDo) Attrs(attrs ...field.AssignExpr) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e exptTurnResultTagRefDo) Assign(attrs ...field.AssignExpr) *exptTurnResultTagRefDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e exptTurnResultTagRefDo) Joins(fields ...field.RelationField) *exptTurnResultTagRefDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e exptTurnResultTagRefDo) Preload(fields ...field.RelationField) *exptTurnResultTagRefDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e exptTurnResultTagRefDo) FirstOrInit() (*model.ExptTurnResultTagRef, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultTagRef), nil
	}
}

func (e exptTurnResultTagRefDo) FirstOrCreate() (*model.ExptTurnResultTagRef, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultTagRef), nil
	}
}

func (e exptTurnResultTagRefDo) FindByPage(offset int, limit int) (result []*model.ExptTurnResultTagRef, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e exptTurnResultTagRefDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e exptTurnResultTagRefDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e exptTurnResultTagRefDo) Delete(models ...*model.ExptTurnResultTagRef) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *exptTurnResultTagRefDo) withDO(do gen.Dao) *exptTurnResultTagRefDo {
	e.DO = *do.(*gen.DO)
	return e
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
)

func newExptResultExportRecord(db *gorm.DB, opts ...gen.DOOption) exptResultExportRecord {
	_exptResultExportRecord := exptResultExportRecord{}

	_exptResultExportRecord.exptResultExportRecordDo.UseDB(db, opts...)
	_exptResultExportRecord.exptResultExportRecordDo.UseModel(&model.ExptResultExportRecord{})

	tableName := _exptResultExportRecord.exptResultExportRecordDo.TableName()
	_exptResultExportRecord.ALL = field.NewAsterisk(tableName)
	_exptResultExportRecord.ID = field.NewInt64(tableName, "id")
	_exptResultExportRecord.SpaceID = field.NewInt64(tableName, "space_id")
	_exptResultExportRecord.ExptID = field.NewInt64(tableName, "expt_id")
	_exptResultExportRecord.CsvExportStatus = field.NewInt32(tableName, "csv_export_status")
	_exptResultExportRecord.FilePath = field.NewString(tableName, "file_path")
	_exptResultExportRecord.StartAt = field.NewTime(tableName, "start_at")
	_exptResultExportRecord.EndAt = field.NewTime(tableName, "end_at")
	_exptResultExportRecord.CreatedBy = field.NewString(tableName, "created_by")
	_exptResultExportRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_exptResultExportRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_exptResultExportRecord.DeletedAt = field.NewField(tableName, "deleted_at")
	_exptResultExportRecord.ErrMsg = field.NewBytes(tableName, "err_msg")

	_exptResultExportRecord.fillFieldMap()

	return _exptResultExportRecord
}

// exptResultExportRecord 实验导出信息表
type exptResultExportRecord struct {
	exptResultExportRecordDo exptResultExportRecordDo

	ALL             field.Asterisk
	ID              field.Int64  // export_id 导出的唯一标识 idgen生成
	SpaceID         field.Int64  // SpaceID
	ExptID          field.Int64  // exptID
	CsvExportStatus field.Int32  // CSV导出状态：1-导出中, 2-导出成功 3-导出失败
	FilePath        field.String // tos文件路径
	StartAt         field.Time   // 开始执行时间
	EndAt           field.Time   // 结束执行时间
	CreatedBy       field.String // 创建者 id
	CreatedAt       field.Time   // 创建时间
	UpdatedAt       field.Time   // 更新时间
	DeletedAt       field.Field  // 删除时间
	ErrMsg          field.Bytes  // 错误信息

	fieldMap map[string]field.Expr
}

func (e exptResultExportRecord) Table(newTableName string) *exptResultExportRecord {
	e.exptResultExportRecordDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e exptResultExportRecord) As(alias string) *exptResultExportRecord {
	e.exptResultExportRecordDo.DO = *(e.exptResultExportRecordDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *exptResultExportRecord) updateTableName(table string) *exptResultExportRecord {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.SpaceID = field.NewInt64(table, "space_id")
	e.ExptID = field.NewInt64(table, "expt_id")
	e.CsvExportStatus = field.NewInt32(table, "csv_export_status")
	e.FilePath = field.NewString(table, "file_path")
	e.StartAt = field.NewTime(table, "start_at")
	e.EndAt = field.NewTime(table, "end_at")
	e.CreatedBy = field.NewString(table, "created_by")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")
	e.ErrMsg = field.NewBytes(table, "err_msg")

	e.fillFieldMap()

	return e
}

func (e *exptResultExportRecord) WithContext(ctx context.Context) *exptResultExportRecordDo {
	return e.exptResultExportRecordDo.WithContext(ctx)
}

func (e exptResultExportRecord) TableName() string { return e.exptResultExportRecordDo.TableName() }

func (e exptResultExportRecord) Alias() string { return e.exptResultExportRecordDo.Alias() }

func (e exptResultExportRecord) Columns(cols ...field.Expr) gen.Columns {
	return e.exptResultExportRecordDo.Columns(cols...)
}

func (e *exptResultExportRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *exptResultExportRecord) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["id"] = e.ID
	e.fieldMap["space_id"] = e.SpaceID
	e.fieldMap["expt_id"] = e.ExptID
	e.fieldMap["csv_export_status"] = e.CsvExportStatus
	e.fieldMap["file_path"] = e.FilePath
	e.fieldMap["start_at"] = e.StartAt
	e.fieldMap["end_at"] = e.EndAt
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
	e.fieldMap["err_msg"] = e.ErrMsg
}

func (e exptResultExportRecord) clone(db *gorm.DB) exptResultExportRecord {
	e.exptResultExportRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e exptResultExportRecord) replaceDB(db *gorm.DB) exptResultExportRecord {
	e.exptResultExportRecordDo.ReplaceDB(db)
	return e
}

type exptResultExportRecordDo struct{ gen.DO }

func (e exptResultExportRecordDo) Debug() *exptResultExportRecordDo {
	return e.withDO(e.DO.Debug())
}

func (e exptResultExportRecordDo) WithContext(ctx context.Context) *exptResultExportRecordDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e exptResultExportRecordDo) ReadDB() *exptResultExportRecordDo {
	return e.Clauses(dbresolver.Read)
}

func (e exptResultExportRecordDo) WriteDB() *exptResultExportRecordDo {
	return e.Clauses(dbresolver.Write)
}

func (e exptResultExportRecordDo) Session(config *gorm.Session) *exptResultExportRecordDo {
	return e.withDO(e.DO.Session(config))
}

func (e exptResultExportRecordDo) Clauses(conds ...clause.Expression) *exptResultExportRecordDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e exptResultExportRecordDo) Returning(value interface{}, columns ...string) *exptResultExportRecordDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e exptResultExportRecordDo) Not(conds ...gen.Condition) *exptResultExportRecordDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e exptResultExportRecordDo) Or(conds ...gen.Condition) *exptResultExportRecordDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e exptResultExportRecordDo) Select(conds ...field.Expr) *exptResultExportRecordDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e exptResultExportRecordDo) Where(conds ...gen.Condition) *exptResultExportRecordDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e exptResultExportRecordDo) Order(conds ...field.Expr) *exptResultExportRecordDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e exptResultExportRecordDo) Distinct(cols ...field.Expr) *exptResultExportRecordDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e exptResultExportRecordDo) Omit(cols ...field.Expr) *exptResultExportRecordDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e exptResultExportRecordDo) Join(table schema.Tabler, on ...field.Expr) *exptResultExportRecordDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e exptResultExportRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *exptResultExportRecordDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e exptResultExportRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *exptResultExportRecordDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e exptResultExportRecordDo) Group(cols ...field.Expr) *exptResultExportRecordDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e exptResultExportRecordDo) Having(conds ...gen.Condition) *exptResultExportRecordDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e exptResultExportRecordDo) Limit(limit int) *exptResultExportRecordDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e exptResultExportRecordDo) Offset(offset int) *exptResultExportRecordDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e exptResultExportRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *exptResultExportRecordDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e exptResultExportRecordDo) Unscoped() *exptResultExportRecordDo {
	return e.withDO(e.DO.Unscoped())
}

func (e exptResultExportRecordDo) Create(values ...*model.ExptResultExportRecord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e exptResultExportRecordDo) CreateInBatches(values []*model.ExptResultExportRecord, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e exptResultExportRecordDo) Save(values ...*model.ExptResultExportRecord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e exptResultExportRecordDo) First() (*model.ExptResultExportRecord, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptResultExportRecord), nil
	}
}

func (e exptResultExportRecordDo) Take() (*model.ExptResultExportRecord, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptResultExportRecord), nil
	}
}

func (e exptResultExportRecordDo) Last() (*model.ExptResultExportRecord, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptResultExportRecord), nil
	}
}

func (e exptResultExportRecordDo) Find() ([]*model.ExptResultExportRecord, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExptResultExportRecord), err
}

func (e exptResultExportRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExptResultExportRecord, err error) {
	buf := make([]*model.ExptResultExportRecord, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e exptResultExportRecordDo) FindInBatches(result *[]*model.ExptResultExportRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e exptResultExportRecordDo) Attrs(attrs ...field.AssignExpr) *exptResultExportRecordDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e exptResultExportRecordDo) Assign(attrs ...field.AssignExpr) *exptResultExportRecordDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e exptResultExportRecordDo) Joins(fields ...field.RelationField) *exptResultExportRecordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e exptResultExportRecordDo) Preload(fields ...field.RelationField) *exptResultExportRecordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e exptResultExportRecordDo) FirstOrInit() (*model.ExptResultExportRecord, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptResultExportRecord), nil
	}
}

func (e exptResultExportRecordDo) FirstOrCreate() (*model.ExptResultExportRecord, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptResultExportRecord), nil
	}
}

func (e exptResultExportRecordDo) FindByPage(offset int, limit int) (result []*model.ExptResultExportRecord, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e exptResultExportRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e exptResultExportRecordDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e exptResultExportRecordDo) Delete(models ...*model.ExptResultExportRecord) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *exptResultExportRecordDo) withDO(do gen.Dao) *exptResultExportRecordDo {
	e.DO = *do.(*gen.DO)
	return e
}

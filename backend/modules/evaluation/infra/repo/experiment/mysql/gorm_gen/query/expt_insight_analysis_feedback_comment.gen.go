// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
)

func newExptInsightAnalysisFeedbackComment(db *gorm.DB, opts ...gen.DOOption) exptInsightAnalysisFeedbackComment {
	_exptInsightAnalysisFeedbackComment := exptInsightAnalysisFeedbackComment{}

	_exptInsightAnalysisFeedbackComment.exptInsightAnalysisFeedbackCommentDo.UseDB(db, opts...)
	_exptInsightAnalysisFeedbackComment.exptInsightAnalysisFeedbackCommentDo.UseModel(&model.ExptInsightAnalysisFeedbackComment{})

	tableName := _exptInsightAnalysisFeedbackComment.exptInsightAnalysisFeedbackCommentDo.TableName()
	_exptInsightAnalysisFeedbackComment.ALL = field.NewAsterisk(tableName)
	_exptInsightAnalysisFeedbackComment.ID = field.NewInt64(tableName, "id")
	_exptInsightAnalysisFeedbackComment.SpaceID = field.NewInt64(tableName, "space_id")
	_exptInsightAnalysisFeedbackComment.ExptID = field.NewInt64(tableName, "expt_id")
	_exptInsightAnalysisFeedbackComment.AnalysisRecordID = field.NewInt64(tableName, "analysis_record_id")
	_exptInsightAnalysisFeedbackComment.Comment = field.NewString(tableName, "comment")
	_exptInsightAnalysisFeedbackComment.CreatedBy = field.NewString(tableName, "created_by")
	_exptInsightAnalysisFeedbackComment.CreatedAt = field.NewTime(tableName, "created_at")
	_exptInsightAnalysisFeedbackComment.UpdatedAt = field.NewTime(tableName, "updated_at")
	_exptInsightAnalysisFeedbackComment.DeletedAt = field.NewField(tableName, "deleted_at")

	_exptInsightAnalysisFeedbackComment.fillFieldMap()

	return _exptInsightAnalysisFeedbackComment
}

// exptInsightAnalysisFeedbackComment 实验洞察分析反馈评论表
type exptInsightAnalysisFeedbackComment struct {
	exptInsightAnalysisFeedbackCommentDo exptInsightAnalysisFeedbackCommentDo

	ALL              field.Asterisk
	ID               field.Int64  // 唯一标识 idgen生成
	SpaceID          field.Int64  // SpaceID
	ExptID           field.Int64  // exptID
	AnalysisRecordID field.Int64  // 洞察分析记录ID
	Comment          field.String // 评论内容
	CreatedBy        field.String // 创建者 id
	CreatedAt        field.Time   // 创建时间
	UpdatedAt        field.Time   // 更新时间
	DeletedAt        field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (e exptInsightAnalysisFeedbackComment) Table(newTableName string) *exptInsightAnalysisFeedbackComment {
	e.exptInsightAnalysisFeedbackCommentDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e exptInsightAnalysisFeedbackComment) As(alias string) *exptInsightAnalysisFeedbackComment {
	e.exptInsightAnalysisFeedbackCommentDo.DO = *(e.exptInsightAnalysisFeedbackCommentDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *exptInsightAnalysisFeedbackComment) updateTableName(table string) *exptInsightAnalysisFeedbackComment {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.SpaceID = field.NewInt64(table, "space_id")
	e.ExptID = field.NewInt64(table, "expt_id")
	e.AnalysisRecordID = field.NewInt64(table, "analysis_record_id")
	e.Comment = field.NewString(table, "comment")
	e.CreatedBy = field.NewString(table, "created_by")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *exptInsightAnalysisFeedbackComment) WithContext(ctx context.Context) *exptInsightAnalysisFeedbackCommentDo {
	return e.exptInsightAnalysisFeedbackCommentDo.WithContext(ctx)
}

func (e exptInsightAnalysisFeedbackComment) TableName() string {
	return e.exptInsightAnalysisFeedbackCommentDo.TableName()
}

func (e exptInsightAnalysisFeedbackComment) Alias() string {
	return e.exptInsightAnalysisFeedbackCommentDo.Alias()
}

func (e exptInsightAnalysisFeedbackComment) Columns(cols ...field.Expr) gen.Columns {
	return e.exptInsightAnalysisFeedbackCommentDo.Columns(cols...)
}

func (e *exptInsightAnalysisFeedbackComment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *exptInsightAnalysisFeedbackComment) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 9)
	e.fieldMap["id"] = e.ID
	e.fieldMap["space_id"] = e.SpaceID
	e.fieldMap["expt_id"] = e.ExptID
	e.fieldMap["analysis_record_id"] = e.AnalysisRecordID
	e.fieldMap["comment"] = e.Comment
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e exptInsightAnalysisFeedbackComment) clone(db *gorm.DB) exptInsightAnalysisFeedbackComment {
	e.exptInsightAnalysisFeedbackCommentDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e exptInsightAnalysisFeedbackComment) replaceDB(db *gorm.DB) exptInsightAnalysisFeedbackComment {
	e.exptInsightAnalysisFeedbackCommentDo.ReplaceDB(db)
	return e
}

type exptInsightAnalysisFeedbackCommentDo struct{ gen.DO }

func (e exptInsightAnalysisFeedbackCommentDo) Debug() *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Debug())
}

func (e exptInsightAnalysisFeedbackCommentDo) WithContext(ctx context.Context) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e exptInsightAnalysisFeedbackCommentDo) ReadDB() *exptInsightAnalysisFeedbackCommentDo {
	return e.Clauses(dbresolver.Read)
}

func (e exptInsightAnalysisFeedbackCommentDo) WriteDB() *exptInsightAnalysisFeedbackCommentDo {
	return e.Clauses(dbresolver.Write)
}

func (e exptInsightAnalysisFeedbackCommentDo) Session(config *gorm.Session) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Session(config))
}

func (e exptInsightAnalysisFeedbackCommentDo) Clauses(conds ...clause.Expression) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e exptInsightAnalysisFeedbackCommentDo) Returning(value interface{}, columns ...string) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e exptInsightAnalysisFeedbackCommentDo) Not(conds ...gen.Condition) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e exptInsightAnalysisFeedbackCommentDo) Or(conds ...gen.Condition) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e exptInsightAnalysisFeedbackCommentDo) Select(conds ...field.Expr) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e exptInsightAnalysisFeedbackCommentDo) Where(conds ...gen.Condition) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e exptInsightAnalysisFeedbackCommentDo) Order(conds ...field.Expr) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e exptInsightAnalysisFeedbackCommentDo) Distinct(cols ...field.Expr) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e exptInsightAnalysisFeedbackCommentDo) Omit(cols ...field.Expr) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e exptInsightAnalysisFeedbackCommentDo) Join(table schema.Tabler, on ...field.Expr) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e exptInsightAnalysisFeedbackCommentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e exptInsightAnalysisFeedbackCommentDo) RightJoin(table schema.Tabler, on ...field.Expr) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e exptInsightAnalysisFeedbackCommentDo) Group(cols ...field.Expr) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e exptInsightAnalysisFeedbackCommentDo) Having(conds ...gen.Condition) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e exptInsightAnalysisFeedbackCommentDo) Limit(limit int) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e exptInsightAnalysisFeedbackCommentDo) Offset(offset int) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e exptInsightAnalysisFeedbackCommentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e exptInsightAnalysisFeedbackCommentDo) Unscoped() *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Unscoped())
}

func (e exptInsightAnalysisFeedbackCommentDo) Create(values ...*model.ExptInsightAnalysisFeedbackComment) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e exptInsightAnalysisFeedbackCommentDo) CreateInBatches(values []*model.ExptInsightAnalysisFeedbackComment, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e exptInsightAnalysisFeedbackCommentDo) Save(values ...*model.ExptInsightAnalysisFeedbackComment) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e exptInsightAnalysisFeedbackCommentDo) First() (*model.ExptInsightAnalysisFeedbackComment, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptInsightAnalysisFeedbackComment), nil
	}
}

func (e exptInsightAnalysisFeedbackCommentDo) Take() (*model.ExptInsightAnalysisFeedbackComment, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptInsightAnalysisFeedbackComment), nil
	}
}

func (e exptInsightAnalysisFeedbackCommentDo) Last() (*model.ExptInsightAnalysisFeedbackComment, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptInsightAnalysisFeedbackComment), nil
	}
}

func (e exptInsightAnalysisFeedbackCommentDo) Find() ([]*model.ExptInsightAnalysisFeedbackComment, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExptInsightAnalysisFeedbackComment), err
}

func (e exptInsightAnalysisFeedbackCommentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExptInsightAnalysisFeedbackComment, err error) {
	buf := make([]*model.ExptInsightAnalysisFeedbackComment, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e exptInsightAnalysisFeedbackCommentDo) FindInBatches(result *[]*model.ExptInsightAnalysisFeedbackComment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e exptInsightAnalysisFeedbackCommentDo) Attrs(attrs ...field.AssignExpr) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e exptInsightAnalysisFeedbackCommentDo) Assign(attrs ...field.AssignExpr) *exptInsightAnalysisFeedbackCommentDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e exptInsightAnalysisFeedbackCommentDo) Joins(fields ...field.RelationField) *exptInsightAnalysisFeedbackCommentDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e exptInsightAnalysisFeedbackCommentDo) Preload(fields ...field.RelationField) *exptInsightAnalysisFeedbackCommentDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e exptInsightAnalysisFeedbackCommentDo) FirstOrInit() (*model.ExptInsightAnalysisFeedbackComment, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptInsightAnalysisFeedbackComment), nil
	}
}

func (e exptInsightAnalysisFeedbackCommentDo) FirstOrCreate() (*model.ExptInsightAnalysisFeedbackComment, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptInsightAnalysisFeedbackComment), nil
	}
}

func (e exptInsightAnalysisFeedbackCommentDo) FindByPage(offset int, limit int) (result []*model.ExptInsightAnalysisFeedbackComment, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e exptInsightAnalysisFeedbackCommentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e exptInsightAnalysisFeedbackCommentDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e exptInsightAnalysisFeedbackCommentDo) Delete(models ...*model.ExptInsightAnalysisFeedbackComment) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *exptInsightAnalysisFeedbackCommentDo) withDO(do gen.Dao) *exptInsightAnalysisFeedbackCommentDo {
	e.DO = *do.(*gen.DO)
	return e
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
)

func newAnnotateRecord(db *gorm.DB, opts ...gen.DOOption) annotateRecord {
	_annotateRecord := annotateRecord{}

	_annotateRecord.annotateRecordDo.UseDB(db, opts...)
	_annotateRecord.annotateRecordDo.UseModel(&model.AnnotateRecord{})

	tableName := _annotateRecord.annotateRecordDo.TableName()
	_annotateRecord.ALL = field.NewAsterisk(tableName)
	_annotateRecord.ID = field.NewInt64(tableName, "id")
	_annotateRecord.SpaceID = field.NewInt64(tableName, "space_id")
	_annotateRecord.TagKeyID = field.NewInt64(tableName, "tag_key_id")
	_annotateRecord.ExperimentID = field.NewInt64(tableName, "experiment_id")
	_annotateRecord.Score = field.NewFloat64(tableName, "score")
	_annotateRecord.TextValue = field.NewString(tableName, "text_value")
	_annotateRecord.AnnotateData = field.NewBytes(tableName, "annotate_data")
	_annotateRecord.CreatedAt = field.NewInt64(tableName, "created_at")
	_annotateRecord.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_annotateRecord.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_annotateRecord.CreatedBy = field.NewInt64(tableName, "created_by")
	_annotateRecord.TagValueID = field.NewInt64(tableName, "tag_value_id")

	_annotateRecord.fillFieldMap()

	return _annotateRecord
}

// annotateRecord annotate_record
type annotateRecord struct {
	annotateRecordDo annotateRecordDo

	ALL          field.Asterisk
	ID           field.Int64   // idgen record id
	SpaceID      field.Int64   // 空间id，分片键
	TagKeyID     field.Int64   // 标签 id
	ExperimentID field.Int64   // 实验id
	Score        field.Float64 // 得分结果
	TextValue    field.String  // 文本结果
	AnnotateData field.Bytes   // 标注结果, json
	CreatedAt    field.Int64   // 创建时间
	UpdatedAt    field.Int64   // 更新时间
	DeletedAt    field.Int64   // 软删除时间
	CreatedBy    field.Int64   // 创建人userID
	TagValueID   field.Int64   // 标签值 id

	fieldMap map[string]field.Expr
}

func (a annotateRecord) Table(newTableName string) *annotateRecord {
	a.annotateRecordDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a annotateRecord) As(alias string) *annotateRecord {
	a.annotateRecordDo.DO = *(a.annotateRecordDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *annotateRecord) updateTableName(table string) *annotateRecord {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.SpaceID = field.NewInt64(table, "space_id")
	a.TagKeyID = field.NewInt64(table, "tag_key_id")
	a.ExperimentID = field.NewInt64(table, "experiment_id")
	a.Score = field.NewFloat64(table, "score")
	a.TextValue = field.NewString(table, "text_value")
	a.AnnotateData = field.NewBytes(table, "annotate_data")
	a.CreatedAt = field.NewInt64(table, "created_at")
	a.UpdatedAt = field.NewInt64(table, "updated_at")
	a.DeletedAt = field.NewInt64(table, "deleted_at")
	a.CreatedBy = field.NewInt64(table, "created_by")
	a.TagValueID = field.NewInt64(table, "tag_value_id")

	a.fillFieldMap()

	return a
}

func (a *annotateRecord) WithContext(ctx context.Context) *annotateRecordDo {
	return a.annotateRecordDo.WithContext(ctx)
}

func (a annotateRecord) TableName() string { return a.annotateRecordDo.TableName() }

func (a annotateRecord) Alias() string { return a.annotateRecordDo.Alias() }

func (a annotateRecord) Columns(cols ...field.Expr) gen.Columns {
	return a.annotateRecordDo.Columns(cols...)
}

func (a *annotateRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *annotateRecord) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 12)
	a.fieldMap["id"] = a.ID
	a.fieldMap["space_id"] = a.SpaceID
	a.fieldMap["tag_key_id"] = a.TagKeyID
	a.fieldMap["experiment_id"] = a.ExperimentID
	a.fieldMap["score"] = a.Score
	a.fieldMap["text_value"] = a.TextValue
	a.fieldMap["annotate_data"] = a.AnnotateData
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["created_by"] = a.CreatedBy
	a.fieldMap["tag_value_id"] = a.TagValueID
}

func (a annotateRecord) clone(db *gorm.DB) annotateRecord {
	a.annotateRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a annotateRecord) replaceDB(db *gorm.DB) annotateRecord {
	a.annotateRecordDo.ReplaceDB(db)
	return a
}

type annotateRecordDo struct{ gen.DO }

func (a annotateRecordDo) Debug() *annotateRecordDo {
	return a.withDO(a.DO.Debug())
}

func (a annotateRecordDo) WithContext(ctx context.Context) *annotateRecordDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a annotateRecordDo) ReadDB() *annotateRecordDo {
	return a.Clauses(dbresolver.Read)
}

func (a annotateRecordDo) WriteDB() *annotateRecordDo {
	return a.Clauses(dbresolver.Write)
}

func (a annotateRecordDo) Session(config *gorm.Session) *annotateRecordDo {
	return a.withDO(a.DO.Session(config))
}

func (a annotateRecordDo) Clauses(conds ...clause.Expression) *annotateRecordDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a annotateRecordDo) Returning(value interface{}, columns ...string) *annotateRecordDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a annotateRecordDo) Not(conds ...gen.Condition) *annotateRecordDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a annotateRecordDo) Or(conds ...gen.Condition) *annotateRecordDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a annotateRecordDo) Select(conds ...field.Expr) *annotateRecordDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a annotateRecordDo) Where(conds ...gen.Condition) *annotateRecordDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a annotateRecordDo) Order(conds ...field.Expr) *annotateRecordDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a annotateRecordDo) Distinct(cols ...field.Expr) *annotateRecordDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a annotateRecordDo) Omit(cols ...field.Expr) *annotateRecordDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a annotateRecordDo) Join(table schema.Tabler, on ...field.Expr) *annotateRecordDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a annotateRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *annotateRecordDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a annotateRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *annotateRecordDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a annotateRecordDo) Group(cols ...field.Expr) *annotateRecordDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a annotateRecordDo) Having(conds ...gen.Condition) *annotateRecordDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a annotateRecordDo) Limit(limit int) *annotateRecordDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a annotateRecordDo) Offset(offset int) *annotateRecordDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a annotateRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *annotateRecordDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a annotateRecordDo) Unscoped() *annotateRecordDo {
	return a.withDO(a.DO.Unscoped())
}

func (a annotateRecordDo) Create(values ...*model.AnnotateRecord) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a annotateRecordDo) CreateInBatches(values []*model.AnnotateRecord, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a annotateRecordDo) Save(values ...*model.AnnotateRecord) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a annotateRecordDo) First() (*model.AnnotateRecord, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnnotateRecord), nil
	}
}

func (a annotateRecordDo) Take() (*model.AnnotateRecord, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnnotateRecord), nil
	}
}

func (a annotateRecordDo) Last() (*model.AnnotateRecord, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnnotateRecord), nil
	}
}

func (a annotateRecordDo) Find() ([]*model.AnnotateRecord, error) {
	result, err := a.DO.Find()
	return result.([]*model.AnnotateRecord), err
}

func (a annotateRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AnnotateRecord, err error) {
	buf := make([]*model.AnnotateRecord, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a annotateRecordDo) FindInBatches(result *[]*model.AnnotateRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a annotateRecordDo) Attrs(attrs ...field.AssignExpr) *annotateRecordDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a annotateRecordDo) Assign(attrs ...field.AssignExpr) *annotateRecordDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a annotateRecordDo) Joins(fields ...field.RelationField) *annotateRecordDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a annotateRecordDo) Preload(fields ...field.RelationField) *annotateRecordDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a annotateRecordDo) FirstOrInit() (*model.AnnotateRecord, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnnotateRecord), nil
	}
}

func (a annotateRecordDo) FirstOrCreate() (*model.AnnotateRecord, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AnnotateRecord), nil
	}
}

func (a annotateRecordDo) FindByPage(offset int, limit int) (result []*model.AnnotateRecord, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a annotateRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a annotateRecordDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a annotateRecordDo) Delete(models ...*model.AnnotateRecord) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *annotateRecordDo) withDO(do gen.Dao) *annotateRecordDo {
	a.DO = *do.(*gen.DO)
	return a
}

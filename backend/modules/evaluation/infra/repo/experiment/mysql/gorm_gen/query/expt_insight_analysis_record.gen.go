// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
)

func newExptInsightAnalysisRecord(db *gorm.DB, opts ...gen.DOOption) exptInsightAnalysisRecord {
	_exptInsightAnalysisRecord := exptInsightAnalysisRecord{}

	_exptInsightAnalysisRecord.exptInsightAnalysisRecordDo.UseDB(db, opts...)
	_exptInsightAnalysisRecord.exptInsightAnalysisRecordDo.UseModel(&model.ExptInsightAnalysisRecord{})

	tableName := _exptInsightAnalysisRecord.exptInsightAnalysisRecordDo.TableName()
	_exptInsightAnalysisRecord.ALL = field.NewAsterisk(tableName)
	_exptInsightAnalysisRecord.ID = field.NewInt64(tableName, "id")
	_exptInsightAnalysisRecord.SpaceID = field.NewInt64(tableName, "space_id")
	_exptInsightAnalysisRecord.ExptID = field.NewInt64(tableName, "expt_id")
	_exptInsightAnalysisRecord.Status = field.NewInt32(tableName, "status")
	_exptInsightAnalysisRecord.ExptResultFilePath = field.NewString(tableName, "expt_result_file_path")
	_exptInsightAnalysisRecord.AnalysisReportID = field.NewInt64(tableName, "analysis_report_id")
	_exptInsightAnalysisRecord.CreatedBy = field.NewString(tableName, "created_by")
	_exptInsightAnalysisRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_exptInsightAnalysisRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_exptInsightAnalysisRecord.DeletedAt = field.NewField(tableName, "deleted_at")

	_exptInsightAnalysisRecord.fillFieldMap()

	return _exptInsightAnalysisRecord
}

// exptInsightAnalysisRecord 实验洞察分析记录表
type exptInsightAnalysisRecord struct {
	exptInsightAnalysisRecordDo exptInsightAnalysisRecordDo

	ALL                field.Asterisk
	ID                 field.Int64  // 唯一标识 idgen生成
	SpaceID            field.Int64  // SpaceID
	ExptID             field.Int64  // exptID
	Status             field.Int32  // 状态
	ExptResultFilePath field.String // 原始报告文件路径
	AnalysisReportID   field.Int64  // 洞察分析报告ID
	CreatedBy          field.String // 创建者 id
	CreatedAt          field.Time   // 创建时间
	UpdatedAt          field.Time   // 更新时间
	DeletedAt          field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (e exptInsightAnalysisRecord) Table(newTableName string) *exptInsightAnalysisRecord {
	e.exptInsightAnalysisRecordDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e exptInsightAnalysisRecord) As(alias string) *exptInsightAnalysisRecord {
	e.exptInsightAnalysisRecordDo.DO = *(e.exptInsightAnalysisRecordDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *exptInsightAnalysisRecord) updateTableName(table string) *exptInsightAnalysisRecord {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.SpaceID = field.NewInt64(table, "space_id")
	e.ExptID = field.NewInt64(table, "expt_id")
	e.Status = field.NewInt32(table, "status")
	e.ExptResultFilePath = field.NewString(table, "expt_result_file_path")
	e.AnalysisReportID = field.NewInt64(table, "analysis_report_id")
	e.CreatedBy = field.NewString(table, "created_by")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *exptInsightAnalysisRecord) WithContext(ctx context.Context) *exptInsightAnalysisRecordDo {
	return e.exptInsightAnalysisRecordDo.WithContext(ctx)
}

func (e exptInsightAnalysisRecord) TableName() string {
	return e.exptInsightAnalysisRecordDo.TableName()
}

func (e exptInsightAnalysisRecord) Alias() string { return e.exptInsightAnalysisRecordDo.Alias() }

func (e exptInsightAnalysisRecord) Columns(cols ...field.Expr) gen.Columns {
	return e.exptInsightAnalysisRecordDo.Columns(cols...)
}

func (e *exptInsightAnalysisRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *exptInsightAnalysisRecord) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 10)
	e.fieldMap["id"] = e.ID
	e.fieldMap["space_id"] = e.SpaceID
	e.fieldMap["expt_id"] = e.ExptID
	e.fieldMap["status"] = e.Status
	e.fieldMap["expt_result_file_path"] = e.ExptResultFilePath
	e.fieldMap["analysis_report_id"] = e.AnalysisReportID
	e.fieldMap["created_by"] = e.CreatedBy
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e exptInsightAnalysisRecord) clone(db *gorm.DB) exptInsightAnalysisRecord {
	e.exptInsightAnalysisRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e exptInsightAnalysisRecord) replaceDB(db *gorm.DB) exptInsightAnalysisRecord {
	e.exptInsightAnalysisRecordDo.ReplaceDB(db)
	return e
}

type exptInsightAnalysisRecordDo struct{ gen.DO }

func (e exptInsightAnalysisRecordDo) Debug() *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Debug())
}

func (e exptInsightAnalysisRecordDo) WithContext(ctx context.Context) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e exptInsightAnalysisRecordDo) ReadDB() *exptInsightAnalysisRecordDo {
	return e.Clauses(dbresolver.Read)
}

func (e exptInsightAnalysisRecordDo) WriteDB() *exptInsightAnalysisRecordDo {
	return e.Clauses(dbresolver.Write)
}

func (e exptInsightAnalysisRecordDo) Session(config *gorm.Session) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Session(config))
}

func (e exptInsightAnalysisRecordDo) Clauses(conds ...clause.Expression) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e exptInsightAnalysisRecordDo) Returning(value interface{}, columns ...string) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e exptInsightAnalysisRecordDo) Not(conds ...gen.Condition) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e exptInsightAnalysisRecordDo) Or(conds ...gen.Condition) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e exptInsightAnalysisRecordDo) Select(conds ...field.Expr) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e exptInsightAnalysisRecordDo) Where(conds ...gen.Condition) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e exptInsightAnalysisRecordDo) Order(conds ...field.Expr) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e exptInsightAnalysisRecordDo) Distinct(cols ...field.Expr) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e exptInsightAnalysisRecordDo) Omit(cols ...field.Expr) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e exptInsightAnalysisRecordDo) Join(table schema.Tabler, on ...field.Expr) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e exptInsightAnalysisRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e exptInsightAnalysisRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e exptInsightAnalysisRecordDo) Group(cols ...field.Expr) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e exptInsightAnalysisRecordDo) Having(conds ...gen.Condition) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e exptInsightAnalysisRecordDo) Limit(limit int) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e exptInsightAnalysisRecordDo) Offset(offset int) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e exptInsightAnalysisRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e exptInsightAnalysisRecordDo) Unscoped() *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Unscoped())
}

func (e exptInsightAnalysisRecordDo) Create(values ...*model.ExptInsightAnalysisRecord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e exptInsightAnalysisRecordDo) CreateInBatches(values []*model.ExptInsightAnalysisRecord, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e exptInsightAnalysisRecordDo) Save(values ...*model.ExptInsightAnalysisRecord) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e exptInsightAnalysisRecordDo) First() (*model.ExptInsightAnalysisRecord, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptInsightAnalysisRecord), nil
	}
}

func (e exptInsightAnalysisRecordDo) Take() (*model.ExptInsightAnalysisRecord, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptInsightAnalysisRecord), nil
	}
}

func (e exptInsightAnalysisRecordDo) Last() (*model.ExptInsightAnalysisRecord, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptInsightAnalysisRecord), nil
	}
}

func (e exptInsightAnalysisRecordDo) Find() ([]*model.ExptInsightAnalysisRecord, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExptInsightAnalysisRecord), err
}

func (e exptInsightAnalysisRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExptInsightAnalysisRecord, err error) {
	buf := make([]*model.ExptInsightAnalysisRecord, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e exptInsightAnalysisRecordDo) FindInBatches(result *[]*model.ExptInsightAnalysisRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e exptInsightAnalysisRecordDo) Attrs(attrs ...field.AssignExpr) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e exptInsightAnalysisRecordDo) Assign(attrs ...field.AssignExpr) *exptInsightAnalysisRecordDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e exptInsightAnalysisRecordDo) Joins(fields ...field.RelationField) *exptInsightAnalysisRecordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e exptInsightAnalysisRecordDo) Preload(fields ...field.RelationField) *exptInsightAnalysisRecordDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e exptInsightAnalysisRecordDo) FirstOrInit() (*model.ExptInsightAnalysisRecord, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptInsightAnalysisRecord), nil
	}
}

func (e exptInsightAnalysisRecordDo) FirstOrCreate() (*model.ExptInsightAnalysisRecord, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptInsightAnalysisRecord), nil
	}
}

func (e exptInsightAnalysisRecordDo) FindByPage(offset int, limit int) (result []*model.ExptInsightAnalysisRecord, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e exptInsightAnalysisRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e exptInsightAnalysisRecordDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e exptInsightAnalysisRecordDo) Delete(models ...*model.ExptInsightAnalysisRecord) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *exptInsightAnalysisRecordDo) withDO(do gen.Dao) *exptInsightAnalysisRecordDo {
	e.DO = *do.(*gen.DO)
	return e
}

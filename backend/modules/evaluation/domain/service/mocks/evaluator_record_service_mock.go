// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: EvaluatorRecordService)
//
// Generated by this command:
//
//	mockgen -destination mocks/evaluator_record_service_mock.go -package mocks . EvaluatorRecordService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockEvaluatorRecordService is a mock of EvaluatorRecordService interface.
type MockEvaluatorRecordService struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluatorRecordServiceMockRecorder
	isgomock struct{}
}

// MockEvaluatorRecordServiceMockRecorder is the mock recorder for MockEvaluatorRecordService.
type MockEvaluatorRecordServiceMockRecorder struct {
	mock *MockEvaluatorRecordService
}

// NewMockEvaluatorRecordService creates a new mock instance.
func NewMockEvaluatorRecordService(ctrl *gomock.Controller) *MockEvaluatorRecordService {
	mock := &MockEvaluatorRecordService{ctrl: ctrl}
	mock.recorder = &MockEvaluatorRecordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluatorRecordService) EXPECT() *MockEvaluatorRecordServiceMockRecorder {
	return m.recorder
}

// BatchGetEvaluatorRecord mocks base method.
func (m *MockEvaluatorRecordService) BatchGetEvaluatorRecord(ctx context.Context, evaluatorRecordIDs []int64, includeDeleted bool) ([]*entity.EvaluatorRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluatorRecord", ctx, evaluatorRecordIDs, includeDeleted)
	ret0, _ := ret[0].([]*entity.EvaluatorRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluatorRecord indicates an expected call of BatchGetEvaluatorRecord.
func (mr *MockEvaluatorRecordServiceMockRecorder) BatchGetEvaluatorRecord(ctx, evaluatorRecordIDs, includeDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluatorRecord", reflect.TypeOf((*MockEvaluatorRecordService)(nil).BatchGetEvaluatorRecord), ctx, evaluatorRecordIDs, includeDeleted)
}

// CorrectEvaluatorRecord mocks base method.
func (m *MockEvaluatorRecordService) CorrectEvaluatorRecord(ctx context.Context, evaluatorRecordDO *entity.EvaluatorRecord, correctionDO *entity.Correction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CorrectEvaluatorRecord", ctx, evaluatorRecordDO, correctionDO)
	ret0, _ := ret[0].(error)
	return ret0
}

// CorrectEvaluatorRecord indicates an expected call of CorrectEvaluatorRecord.
func (mr *MockEvaluatorRecordServiceMockRecorder) CorrectEvaluatorRecord(ctx, evaluatorRecordDO, correctionDO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CorrectEvaluatorRecord", reflect.TypeOf((*MockEvaluatorRecordService)(nil).CorrectEvaluatorRecord), ctx, evaluatorRecordDO, correctionDO)
}

// GetEvaluatorRecord mocks base method.
func (m *MockEvaluatorRecordService) GetEvaluatorRecord(ctx context.Context, evaluatorRecordID int64, includeDeleted bool) (*entity.EvaluatorRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluatorRecord", ctx, evaluatorRecordID, includeDeleted)
	ret0, _ := ret[0].(*entity.EvaluatorRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluatorRecord indicates an expected call of GetEvaluatorRecord.
func (mr *MockEvaluatorRecordServiceMockRecorder) GetEvaluatorRecord(ctx, evaluatorRecordID, includeDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluatorRecord", reflect.TypeOf((*MockEvaluatorRecordService)(nil).GetEvaluatorRecord), ctx, evaluatorRecordID, includeDeleted)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: ExptSchedulerEvent,ExptItemEvalEvent,QuotaService)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/expt_run.go --package mocks . ExptSchedulerEvent,ExptItemEvalEvent,QuotaService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockExptSchedulerEvent is a mock of ExptSchedulerEvent interface.
type MockExptSchedulerEvent struct {
	ctrl     *gomock.Controller
	recorder *MockExptSchedulerEventMockRecorder
	isgomock struct{}
}

// MockExptSchedulerEventMockRecorder is the mock recorder for MockExptSchedulerEvent.
type MockExptSchedulerEventMockRecorder struct {
	mock *MockExptSchedulerEvent
}

// NewMockExptSchedulerEvent creates a new mock instance.
func NewMockExptSchedulerEvent(ctrl *gomock.Controller) *MockExptSchedulerEvent {
	mock := &MockExptSchedulerEvent{ctrl: ctrl}
	mock.recorder = &MockExptSchedulerEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExptSchedulerEvent) EXPECT() *MockExptSchedulerEventMockRecorder {
	return m.recorder
}

// Schedule mocks base method.
func (m *MockExptSchedulerEvent) Schedule(ctx context.Context, event *entity.ExptScheduleEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Schedule indicates an expected call of Schedule.
func (mr *MockExptSchedulerEventMockRecorder) Schedule(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockExptSchedulerEvent)(nil).Schedule), ctx, event)
}

// MockExptItemEvalEvent is a mock of ExptItemEvalEvent interface.
type MockExptItemEvalEvent struct {
	ctrl     *gomock.Controller
	recorder *MockExptItemEvalEventMockRecorder
	isgomock struct{}
}

// MockExptItemEvalEventMockRecorder is the mock recorder for MockExptItemEvalEvent.
type MockExptItemEvalEventMockRecorder struct {
	mock *MockExptItemEvalEvent
}

// NewMockExptItemEvalEvent creates a new mock instance.
func NewMockExptItemEvalEvent(ctrl *gomock.Controller) *MockExptItemEvalEvent {
	mock := &MockExptItemEvalEvent{ctrl: ctrl}
	mock.recorder = &MockExptItemEvalEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExptItemEvalEvent) EXPECT() *MockExptItemEvalEventMockRecorder {
	return m.recorder
}

// Eval mocks base method.
func (m *MockExptItemEvalEvent) Eval(ctx context.Context, event *entity.ExptItemEvalEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eval", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Eval indicates an expected call of Eval.
func (mr *MockExptItemEvalEventMockRecorder) Eval(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eval", reflect.TypeOf((*MockExptItemEvalEvent)(nil).Eval), ctx, event)
}

// MockQuotaService is a mock of QuotaService interface.
type MockQuotaService struct {
	ctrl     *gomock.Controller
	recorder *MockQuotaServiceMockRecorder
	isgomock struct{}
}

// MockQuotaServiceMockRecorder is the mock recorder for MockQuotaService.
type MockQuotaServiceMockRecorder struct {
	mock *MockQuotaService
}

// NewMockQuotaService creates a new mock instance.
func NewMockQuotaService(ctrl *gomock.Controller) *MockQuotaService {
	mock := &MockQuotaService{ctrl: ctrl}
	mock.recorder = &MockQuotaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuotaService) EXPECT() *MockQuotaServiceMockRecorder {
	return m.recorder
}

// AllowExptRun mocks base method.
func (m *MockQuotaService) AllowExptRun(ctx context.Context, exptID, spaceID int64, session *entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowExptRun", ctx, exptID, spaceID, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllowExptRun indicates an expected call of AllowExptRun.
func (mr *MockQuotaServiceMockRecorder) AllowExptRun(ctx, exptID, spaceID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowExptRun", reflect.TypeOf((*MockQuotaService)(nil).AllowExptRun), ctx, exptID, spaceID, session)
}

// ReleaseExptRun mocks base method.
func (m *MockQuotaService) ReleaseExptRun(ctx context.Context, exptID, spaceID int64, session *entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseExptRun", ctx, exptID, spaceID, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseExptRun indicates an expected call of ReleaseExptRun.
func (mr *MockQuotaServiceMockRecorder) ReleaseExptRun(ctx, exptID, spaceID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseExptRun", reflect.TypeOf((*MockQuotaService)(nil).ReleaseExptRun), ctx, exptID, spaceID, session)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: EvaluationSetItemService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/evaluation_set_item.go -package=mocks . EvaluationSetItemService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockEvaluationSetItemService is a mock of EvaluationSetItemService interface.
type MockEvaluationSetItemService struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluationSetItemServiceMockRecorder
	isgomock struct{}
}

// MockEvaluationSetItemServiceMockRecorder is the mock recorder for MockEvaluationSetItemService.
type MockEvaluationSetItemServiceMockRecorder struct {
	mock *MockEvaluationSetItemService
}

// NewMockEvaluationSetItemService creates a new mock instance.
func NewMockEvaluationSetItemService(ctrl *gomock.Controller) *MockEvaluationSetItemService {
	mock := &MockEvaluationSetItemService{ctrl: ctrl}
	mock.recorder = &MockEvaluationSetItemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluationSetItemService) EXPECT() *MockEvaluationSetItemServiceMockRecorder {
	return m.recorder
}

// BatchCreateEvaluationSetItems mocks base method.
func (m *MockEvaluationSetItemService) BatchCreateEvaluationSetItems(ctx context.Context, param *entity.BatchCreateEvaluationSetItemsParam) (map[int64]int64, []*entity.ItemErrorGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateEvaluationSetItems", ctx, param)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].([]*entity.ItemErrorGroup)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BatchCreateEvaluationSetItems indicates an expected call of BatchCreateEvaluationSetItems.
func (mr *MockEvaluationSetItemServiceMockRecorder) BatchCreateEvaluationSetItems(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateEvaluationSetItems", reflect.TypeOf((*MockEvaluationSetItemService)(nil).BatchCreateEvaluationSetItems), ctx, param)
}

// BatchDeleteEvaluationSetItems mocks base method.
func (m *MockEvaluationSetItemService) BatchDeleteEvaluationSetItems(ctx context.Context, spaceID, evaluationSetID int64, itemIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteEvaluationSetItems", ctx, spaceID, evaluationSetID, itemIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDeleteEvaluationSetItems indicates an expected call of BatchDeleteEvaluationSetItems.
func (mr *MockEvaluationSetItemServiceMockRecorder) BatchDeleteEvaluationSetItems(ctx, spaceID, evaluationSetID, itemIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteEvaluationSetItems", reflect.TypeOf((*MockEvaluationSetItemService)(nil).BatchDeleteEvaluationSetItems), ctx, spaceID, evaluationSetID, itemIDs)
}

// BatchGetEvaluationSetItems mocks base method.
func (m *MockEvaluationSetItemService) BatchGetEvaluationSetItems(ctx context.Context, param *entity.BatchGetEvaluationSetItemsParam) ([]*entity.EvaluationSetItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluationSetItems", ctx, param)
	ret0, _ := ret[0].([]*entity.EvaluationSetItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluationSetItems indicates an expected call of BatchGetEvaluationSetItems.
func (mr *MockEvaluationSetItemServiceMockRecorder) BatchGetEvaluationSetItems(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluationSetItems", reflect.TypeOf((*MockEvaluationSetItemService)(nil).BatchGetEvaluationSetItems), ctx, param)
}

// ClearEvaluationSetDraftItem mocks base method.
func (m *MockEvaluationSetItemService) ClearEvaluationSetDraftItem(ctx context.Context, spaceID, evaluationSetID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearEvaluationSetDraftItem", ctx, spaceID, evaluationSetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearEvaluationSetDraftItem indicates an expected call of ClearEvaluationSetDraftItem.
func (mr *MockEvaluationSetItemServiceMockRecorder) ClearEvaluationSetDraftItem(ctx, spaceID, evaluationSetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearEvaluationSetDraftItem", reflect.TypeOf((*MockEvaluationSetItemService)(nil).ClearEvaluationSetDraftItem), ctx, spaceID, evaluationSetID)
}

// ListEvaluationSetItems mocks base method.
func (m *MockEvaluationSetItemService) ListEvaluationSetItems(ctx context.Context, param *entity.ListEvaluationSetItemsParam) ([]*entity.EvaluationSetItem, *int64, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvaluationSetItems", ctx, param)
	ret0, _ := ret[0].([]*entity.EvaluationSetItem)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(*string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListEvaluationSetItems indicates an expected call of ListEvaluationSetItems.
func (mr *MockEvaluationSetItemServiceMockRecorder) ListEvaluationSetItems(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvaluationSetItems", reflect.TypeOf((*MockEvaluationSetItemService)(nil).ListEvaluationSetItems), ctx, param)
}

// UpdateEvaluationSetItem mocks base method.
func (m *MockEvaluationSetItemService) UpdateEvaluationSetItem(ctx context.Context, spaceID, evaluationSetID, itemID int64, turns []*entity.Turn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvaluationSetItem", ctx, spaceID, evaluationSetID, itemID, turns)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvaluationSetItem indicates an expected call of UpdateEvaluationSetItem.
func (mr *MockEvaluationSetItemServiceMockRecorder) UpdateEvaluationSetItem(ctx, spaceID, evaluationSetID, itemID, turns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluationSetItem", reflect.TypeOf((*MockEvaluationSetItemService)(nil).UpdateEvaluationSetItem), ctx, spaceID, evaluationSetID, itemID, turns)
}

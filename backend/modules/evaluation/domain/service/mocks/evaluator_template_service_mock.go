// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: EvaluatorTemplateService)
//
// Generated by this command:
//
//	mockgen -destination mocks/evaluator_template_service_mock.go -package=mocks . EvaluatorTemplateService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockEvaluatorTemplateService is a mock of EvaluatorTemplateService interface.
type MockEvaluatorTemplateService struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluatorTemplateServiceMockRecorder
	isgomock struct{}
}

// MockEvaluatorTemplateServiceMockRecorder is the mock recorder for MockEvaluatorTemplateService.
type MockEvaluatorTemplateServiceMockRecorder struct {
	mock *MockEvaluatorTemplateService
}

// NewMockEvaluatorTemplateService creates a new mock instance.
func NewMockEvaluatorTemplateService(ctrl *gomock.Controller) *MockEvaluatorTemplateService {
	mock := &MockEvaluatorTemplateService{ctrl: ctrl}
	mock.recorder = &MockEvaluatorTemplateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluatorTemplateService) EXPECT() *MockEvaluatorTemplateServiceMockRecorder {
	return m.recorder
}

// CreateEvaluatorTemplate mocks base method.
func (m *MockEvaluatorTemplateService) CreateEvaluatorTemplate(ctx context.Context, req *entity.CreateEvaluatorTemplateRequest) (*entity.CreateEvaluatorTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvaluatorTemplate", ctx, req)
	ret0, _ := ret[0].(*entity.CreateEvaluatorTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvaluatorTemplate indicates an expected call of CreateEvaluatorTemplate.
func (mr *MockEvaluatorTemplateServiceMockRecorder) CreateEvaluatorTemplate(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluatorTemplate", reflect.TypeOf((*MockEvaluatorTemplateService)(nil).CreateEvaluatorTemplate), ctx, req)
}

// DeleteEvaluatorTemplate mocks base method.
func (m *MockEvaluatorTemplateService) DeleteEvaluatorTemplate(ctx context.Context, req *entity.DeleteEvaluatorTemplateRequest) (*entity.DeleteEvaluatorTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvaluatorTemplate", ctx, req)
	ret0, _ := ret[0].(*entity.DeleteEvaluatorTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEvaluatorTemplate indicates an expected call of DeleteEvaluatorTemplate.
func (mr *MockEvaluatorTemplateServiceMockRecorder) DeleteEvaluatorTemplate(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvaluatorTemplate", reflect.TypeOf((*MockEvaluatorTemplateService)(nil).DeleteEvaluatorTemplate), ctx, req)
}

// GetEvaluatorTemplate mocks base method.
func (m *MockEvaluatorTemplateService) GetEvaluatorTemplate(ctx context.Context, req *entity.GetEvaluatorTemplateRequest) (*entity.GetEvaluatorTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluatorTemplate", ctx, req)
	ret0, _ := ret[0].(*entity.GetEvaluatorTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluatorTemplate indicates an expected call of GetEvaluatorTemplate.
func (mr *MockEvaluatorTemplateServiceMockRecorder) GetEvaluatorTemplate(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluatorTemplate", reflect.TypeOf((*MockEvaluatorTemplateService)(nil).GetEvaluatorTemplate), ctx, req)
}

// ListEvaluatorTemplate mocks base method.
func (m *MockEvaluatorTemplateService) ListEvaluatorTemplate(ctx context.Context, req *entity.ListEvaluatorTemplateRequest) (*entity.ListEvaluatorTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvaluatorTemplate", ctx, req)
	ret0, _ := ret[0].(*entity.ListEvaluatorTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvaluatorTemplate indicates an expected call of ListEvaluatorTemplate.
func (mr *MockEvaluatorTemplateServiceMockRecorder) ListEvaluatorTemplate(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvaluatorTemplate", reflect.TypeOf((*MockEvaluatorTemplateService)(nil).ListEvaluatorTemplate), ctx, req)
}

// UpdateEvaluatorTemplate mocks base method.
func (m *MockEvaluatorTemplateService) UpdateEvaluatorTemplate(ctx context.Context, req *entity.UpdateEvaluatorTemplateRequest) (*entity.UpdateEvaluatorTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvaluatorTemplate", ctx, req)
	ret0, _ := ret[0].(*entity.UpdateEvaluatorTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvaluatorTemplate indicates an expected call of UpdateEvaluatorTemplate.
func (mr *MockEvaluatorTemplateServiceMockRecorder) UpdateEvaluatorTemplate(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluatorTemplate", reflect.TypeOf((*MockEvaluatorTemplateService)(nil).UpdateEvaluatorTemplate), ctx, req)
}

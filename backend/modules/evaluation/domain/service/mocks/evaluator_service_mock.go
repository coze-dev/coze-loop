// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: EvaluatorService)
//
// Generated by this command:
//
//	mockgen -destination mocks/evaluator_service_mock.go -package mocks . EvaluatorService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockEvaluatorService is a mock of EvaluatorService interface.
type MockEvaluatorService struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluatorServiceMockRecorder
	isgomock struct{}
}

// MockEvaluatorServiceMockRecorder is the mock recorder for MockEvaluatorService.
type MockEvaluatorServiceMockRecorder struct {
	mock *MockEvaluatorService
}

// NewMockEvaluatorService creates a new mock instance.
func NewMockEvaluatorService(ctrl *gomock.Controller) *MockEvaluatorService {
	mock := &MockEvaluatorService{ctrl: ctrl}
	mock.recorder = &MockEvaluatorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluatorService) EXPECT() *MockEvaluatorServiceMockRecorder {
	return m.recorder
}

// BatchGetEvaluator mocks base method.
func (m *MockEvaluatorService) BatchGetEvaluator(ctx context.Context, spaceID int64, evaluatorIDs []int64, includeDeleted bool) ([]*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluator", ctx, spaceID, evaluatorIDs, includeDeleted)
	ret0, _ := ret[0].([]*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluator indicates an expected call of BatchGetEvaluator.
func (mr *MockEvaluatorServiceMockRecorder) BatchGetEvaluator(ctx, spaceID, evaluatorIDs, includeDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluator", reflect.TypeOf((*MockEvaluatorService)(nil).BatchGetEvaluator), ctx, spaceID, evaluatorIDs, includeDeleted)
}

// BatchGetEvaluatorVersion mocks base method.
func (m *MockEvaluatorService) BatchGetEvaluatorVersion(ctx context.Context, spaceID *int64, evaluatorVersionIDs []int64, includeDeleted bool) ([]*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluatorVersion", ctx, spaceID, evaluatorVersionIDs, includeDeleted)
	ret0, _ := ret[0].([]*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluatorVersion indicates an expected call of BatchGetEvaluatorVersion.
func (mr *MockEvaluatorServiceMockRecorder) BatchGetEvaluatorVersion(ctx, spaceID, evaluatorVersionIDs, includeDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluatorVersion", reflect.TypeOf((*MockEvaluatorService)(nil).BatchGetEvaluatorVersion), ctx, spaceID, evaluatorVersionIDs, includeDeleted)
}

// CheckNameExist mocks base method.
func (m *MockEvaluatorService) CheckNameExist(ctx context.Context, spaceID, evaluatorID int64, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNameExist", ctx, spaceID, evaluatorID, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNameExist indicates an expected call of CheckNameExist.
func (mr *MockEvaluatorServiceMockRecorder) CheckNameExist(ctx, spaceID, evaluatorID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNameExist", reflect.TypeOf((*MockEvaluatorService)(nil).CheckNameExist), ctx, spaceID, evaluatorID, name)
}

// CreateEvaluator mocks base method.
func (m *MockEvaluatorService) CreateEvaluator(ctx context.Context, evaluator *entity.Evaluator, cid string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvaluator", ctx, evaluator, cid)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvaluator indicates an expected call of CreateEvaluator.
func (mr *MockEvaluatorServiceMockRecorder) CreateEvaluator(ctx, evaluator, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluator", reflect.TypeOf((*MockEvaluatorService)(nil).CreateEvaluator), ctx, evaluator, cid)
}

// DebugEvaluator mocks base method.
func (m *MockEvaluatorService) DebugEvaluator(ctx context.Context, evaluatorDO *entity.Evaluator, inputData *entity.EvaluatorInputData) (*entity.EvaluatorOutputData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugEvaluator", ctx, evaluatorDO, inputData)
	ret0, _ := ret[0].(*entity.EvaluatorOutputData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebugEvaluator indicates an expected call of DebugEvaluator.
func (mr *MockEvaluatorServiceMockRecorder) DebugEvaluator(ctx, evaluatorDO, inputData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugEvaluator", reflect.TypeOf((*MockEvaluatorService)(nil).DebugEvaluator), ctx, evaluatorDO, inputData)
}

// DeleteEvaluator mocks base method.
func (m *MockEvaluatorService) DeleteEvaluator(ctx context.Context, evaluatorIDs []int64, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvaluator", ctx, evaluatorIDs, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvaluator indicates an expected call of DeleteEvaluator.
func (mr *MockEvaluatorServiceMockRecorder) DeleteEvaluator(ctx, evaluatorIDs, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvaluator", reflect.TypeOf((*MockEvaluatorService)(nil).DeleteEvaluator), ctx, evaluatorIDs, userID)
}

// GetEvaluator mocks base method.
func (m *MockEvaluatorService) GetEvaluator(ctx context.Context, spaceID, evaluatorID int64, includeDeleted bool) (*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluator", ctx, spaceID, evaluatorID, includeDeleted)
	ret0, _ := ret[0].(*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluator indicates an expected call of GetEvaluator.
func (mr *MockEvaluatorServiceMockRecorder) GetEvaluator(ctx, spaceID, evaluatorID, includeDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluator", reflect.TypeOf((*MockEvaluatorService)(nil).GetEvaluator), ctx, spaceID, evaluatorID, includeDeleted)
}

// GetEvaluatorVersion mocks base method.
func (m *MockEvaluatorService) GetEvaluatorVersion(ctx context.Context, evaluatorVersionID int64, includeDeleted bool) (*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluatorVersion", ctx, evaluatorVersionID, includeDeleted)
	ret0, _ := ret[0].(*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluatorVersion indicates an expected call of GetEvaluatorVersion.
func (mr *MockEvaluatorServiceMockRecorder) GetEvaluatorVersion(ctx, evaluatorVersionID, includeDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluatorVersion", reflect.TypeOf((*MockEvaluatorService)(nil).GetEvaluatorVersion), ctx, evaluatorVersionID, includeDeleted)
}

// ListEvaluator mocks base method.
func (m *MockEvaluatorService) ListEvaluator(ctx context.Context, request *entity.ListEvaluatorRequest) ([]*entity.Evaluator, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvaluator", ctx, request)
	ret0, _ := ret[0].([]*entity.Evaluator)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEvaluator indicates an expected call of ListEvaluator.
func (mr *MockEvaluatorServiceMockRecorder) ListEvaluator(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvaluator", reflect.TypeOf((*MockEvaluatorService)(nil).ListEvaluator), ctx, request)
}

// ListEvaluatorVersion mocks base method.
func (m *MockEvaluatorService) ListEvaluatorVersion(ctx context.Context, request *entity.ListEvaluatorVersionRequest) ([]*entity.Evaluator, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvaluatorVersion", ctx, request)
	ret0, _ := ret[0].([]*entity.Evaluator)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEvaluatorVersion indicates an expected call of ListEvaluatorVersion.
func (mr *MockEvaluatorServiceMockRecorder) ListEvaluatorVersion(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvaluatorVersion", reflect.TypeOf((*MockEvaluatorService)(nil).ListEvaluatorVersion), ctx, request)
}

// RunEvaluator mocks base method.
func (m *MockEvaluatorService) RunEvaluator(ctx context.Context, request *entity.RunEvaluatorRequest) (*entity.EvaluatorRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunEvaluator", ctx, request)
	ret0, _ := ret[0].(*entity.EvaluatorRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunEvaluator indicates an expected call of RunEvaluator.
func (mr *MockEvaluatorServiceMockRecorder) RunEvaluator(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunEvaluator", reflect.TypeOf((*MockEvaluatorService)(nil).RunEvaluator), ctx, request)
}

// SubmitEvaluatorVersion mocks base method.
func (m *MockEvaluatorService) SubmitEvaluatorVersion(ctx context.Context, evaluatorVersionDO *entity.Evaluator, version, description, cid string) (*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitEvaluatorVersion", ctx, evaluatorVersionDO, version, description, cid)
	ret0, _ := ret[0].(*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitEvaluatorVersion indicates an expected call of SubmitEvaluatorVersion.
func (mr *MockEvaluatorServiceMockRecorder) SubmitEvaluatorVersion(ctx, evaluatorVersionDO, version, description, cid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitEvaluatorVersion", reflect.TypeOf((*MockEvaluatorService)(nil).SubmitEvaluatorVersion), ctx, evaluatorVersionDO, version, description, cid)
}

// UpdateEvaluatorDraft mocks base method.
func (m *MockEvaluatorService) UpdateEvaluatorDraft(ctx context.Context, versionDO *entity.Evaluator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvaluatorDraft", ctx, versionDO)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvaluatorDraft indicates an expected call of UpdateEvaluatorDraft.
func (mr *MockEvaluatorServiceMockRecorder) UpdateEvaluatorDraft(ctx, versionDO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluatorDraft", reflect.TypeOf((*MockEvaluatorService)(nil).UpdateEvaluatorDraft), ctx, versionDO)
}

// UpdateEvaluatorMeta mocks base method.
func (m *MockEvaluatorService) UpdateEvaluatorMeta(ctx context.Context, id, spaceID int64, name, description, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvaluatorMeta", ctx, id, spaceID, name, description, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvaluatorMeta indicates an expected call of UpdateEvaluatorMeta.
func (mr *MockEvaluatorServiceMockRecorder) UpdateEvaluatorMeta(ctx, id, spaceID, name, description, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluatorMeta", reflect.TypeOf((*MockEvaluatorService)(nil).UpdateEvaluatorMeta), ctx, id, spaceID, name, description, userID)
}

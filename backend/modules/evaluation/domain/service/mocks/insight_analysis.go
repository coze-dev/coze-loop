// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: IExptInsightAnalysisService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIExptInsightAnalysisService is a mock of IExptInsightAnalysisService interface.
type MockIExptInsightAnalysisService struct {
	ctrl     *gomock.Controller
	recorder *MockIExptInsightAnalysisServiceMockRecorder
}

// MockIExptInsightAnalysisServiceMockRecorder is the mock recorder for MockIExptInsightAnalysisService.
type MockIExptInsightAnalysisServiceMockRecorder struct {
	mock *MockIExptInsightAnalysisService
}

// NewMockIExptInsightAnalysisService creates a new mock instance.
func NewMockIExptInsightAnalysisService(ctrl *gomock.Controller) *MockIExptInsightAnalysisService {
	mock := &MockIExptInsightAnalysisService{ctrl: ctrl}
	mock.recorder = &MockIExptInsightAnalysisServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptInsightAnalysisService) EXPECT() *MockIExptInsightAnalysisServiceMockRecorder {
	return m.recorder
}

// CreateAnalysisRecord mocks base method.
func (m *MockIExptInsightAnalysisService) CreateAnalysisRecord(arg0 context.Context, arg1 *entity.ExptInsightAnalysisRecord, arg2 *entity.Session) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnalysisRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnalysisRecord indicates an expected call of CreateAnalysisRecord.
func (mr *MockIExptInsightAnalysisServiceMockRecorder) CreateAnalysisRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnalysisRecord", reflect.TypeOf((*MockIExptInsightAnalysisService)(nil).CreateAnalysisRecord), arg0, arg1, arg2)
}

// DeleteAnalysisRecord mocks base method.
func (m *MockIExptInsightAnalysisService) DeleteAnalysisRecord(arg0 context.Context, arg1, arg2, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnalysisRecord", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnalysisRecord indicates an expected call of DeleteAnalysisRecord.
func (mr *MockIExptInsightAnalysisServiceMockRecorder) DeleteAnalysisRecord(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnalysisRecord", reflect.TypeOf((*MockIExptInsightAnalysisService)(nil).DeleteAnalysisRecord), arg0, arg1, arg2, arg3)
}

// FeedbackExptInsightAnalysis mocks base method.
func (m *MockIExptInsightAnalysisService) FeedbackExptInsightAnalysis(arg0 context.Context, arg1 *entity.ExptInsightAnalysisFeedbackParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeedbackExptInsightAnalysis", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FeedbackExptInsightAnalysis indicates an expected call of FeedbackExptInsightAnalysis.
func (mr *MockIExptInsightAnalysisServiceMockRecorder) FeedbackExptInsightAnalysis(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeedbackExptInsightAnalysis", reflect.TypeOf((*MockIExptInsightAnalysisService)(nil).FeedbackExptInsightAnalysis), arg0, arg1)
}

// GenAnalysisReport mocks base method.
func (m *MockIExptInsightAnalysisService) GenAnalysisReport(arg0 context.Context, arg1, arg2, arg3, arg4 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenAnalysisReport", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenAnalysisReport indicates an expected call of GenAnalysisReport.
func (mr *MockIExptInsightAnalysisServiceMockRecorder) GenAnalysisReport(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenAnalysisReport", reflect.TypeOf((*MockIExptInsightAnalysisService)(nil).GenAnalysisReport), arg0, arg1, arg2, arg3, arg4)
}

// GetAnalysisRecordByID mocks base method.
func (m *MockIExptInsightAnalysisService) GetAnalysisRecordByID(arg0 context.Context, arg1, arg2, arg3 int64, arg4 *entity.Session) (*entity.ExptInsightAnalysisRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnalysisRecordByID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*entity.ExptInsightAnalysisRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnalysisRecordByID indicates an expected call of GetAnalysisRecordByID.
func (mr *MockIExptInsightAnalysisServiceMockRecorder) GetAnalysisRecordByID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalysisRecordByID", reflect.TypeOf((*MockIExptInsightAnalysisService)(nil).GetAnalysisRecordByID), arg0, arg1, arg2, arg3, arg4)
}

// ListAnalysisRecord mocks base method.
func (m *MockIExptInsightAnalysisService) ListAnalysisRecord(arg0 context.Context, arg1, arg2 int64, arg3 entity.Page, arg4 *entity.Session) ([]*entity.ExptInsightAnalysisRecord, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnalysisRecord", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entity.ExptInsightAnalysisRecord)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAnalysisRecord indicates an expected call of ListAnalysisRecord.
func (mr *MockIExptInsightAnalysisServiceMockRecorder) ListAnalysisRecord(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnalysisRecord", reflect.TypeOf((*MockIExptInsightAnalysisService)(nil).ListAnalysisRecord), arg0, arg1, arg2, arg3, arg4)
}

// ListExptInsightAnalysisFeedbackComment mocks base method.
func (m *MockIExptInsightAnalysisService) ListExptInsightAnalysisFeedbackComment(arg0 context.Context, arg1, arg2, arg3 int64, arg4 entity.Page) ([]*entity.ExptInsightAnalysisFeedbackComment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExptInsightAnalysisFeedbackComment", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entity.ExptInsightAnalysisFeedbackComment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListExptInsightAnalysisFeedbackComment indicates an expected call of ListExptInsightAnalysisFeedbackComment.
func (mr *MockIExptInsightAnalysisServiceMockRecorder) ListExptInsightAnalysisFeedbackComment(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExptInsightAnalysisFeedbackComment", reflect.TypeOf((*MockIExptInsightAnalysisService)(nil).ListExptInsightAnalysisFeedbackComment), arg0, arg1, arg2, arg3, arg4)
}

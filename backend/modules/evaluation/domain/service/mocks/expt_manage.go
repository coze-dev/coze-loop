// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: IExptManager)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/expt_manage.go --package mocks . IExptManager
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIExptManager is a mock of IExptManager interface.
type MockIExptManager struct {
	ctrl     *gomock.Controller
	recorder *MockIExptManagerMockRecorder
	isgomock struct{}
}

// MockIExptManagerMockRecorder is the mock recorder for MockIExptManager.
type MockIExptManagerMockRecorder struct {
	mock *MockIExptManager
}

// NewMockIExptManager creates a new mock instance.
func NewMockIExptManager(ctrl *gomock.Controller) *MockIExptManager {
	mock := &MockIExptManager{ctrl: ctrl}
	mock.recorder = &MockIExptManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptManager) EXPECT() *MockIExptManagerMockRecorder {
	return m.recorder
}

// CheckName mocks base method.
func (m *MockIExptManager) CheckName(ctx context.Context, name string, spaceID int64, session *entity.Session) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckName", ctx, name, spaceID, session)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckName indicates an expected call of CheckName.
func (mr *MockIExptManagerMockRecorder) CheckName(ctx, name, spaceID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckName", reflect.TypeOf((*MockIExptManager)(nil).CheckName), ctx, name, spaceID, session)
}

// CheckRun mocks base method.
func (m *MockIExptManager) CheckRun(ctx context.Context, expt *entity.Experiment, spaceID int64, session *entity.Session, opts ...entity.ExptRunCheckOptionFn) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, expt, spaceID, session}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckRun", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckRun indicates an expected call of CheckRun.
func (mr *MockIExptManagerMockRecorder) CheckRun(ctx, expt, spaceID, session any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, expt, spaceID, session}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRun", reflect.TypeOf((*MockIExptManager)(nil).CheckRun), varargs...)
}

// Clone mocks base method.
func (m *MockIExptManager) Clone(ctx context.Context, exptID, spaceID int64, session *entity.Session) (*entity.Experiment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", ctx, exptID, spaceID, session)
	ret0, _ := ret[0].(*entity.Experiment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Clone indicates an expected call of Clone.
func (mr *MockIExptManagerMockRecorder) Clone(ctx, exptID, spaceID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockIExptManager)(nil).Clone), ctx, exptID, spaceID, session)
}

// CompleteExpt mocks base method.
func (m *MockIExptManager) CompleteExpt(ctx context.Context, exptID, spaceID int64, session *entity.Session, opts ...entity.CompleteExptOptionFn) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptID, spaceID, session}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteExpt", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteExpt indicates an expected call of CompleteExpt.
func (mr *MockIExptManagerMockRecorder) CompleteExpt(ctx, exptID, spaceID, session any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptID, spaceID, session}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteExpt", reflect.TypeOf((*MockIExptManager)(nil).CompleteExpt), varargs...)
}

// CompleteRun mocks base method.
func (m *MockIExptManager) CompleteRun(ctx context.Context, exptID, exptRunID int64, mode entity.ExptRunMode, spaceID int64, session *entity.Session, opts ...entity.CompleteExptOptionFn) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptID, exptRunID, mode, spaceID, session}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CompleteRun", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteRun indicates an expected call of CompleteRun.
func (mr *MockIExptManagerMockRecorder) CompleteRun(ctx, exptID, exptRunID, mode, spaceID, session any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptID, exptRunID, mode, spaceID, session}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteRun", reflect.TypeOf((*MockIExptManager)(nil).CompleteRun), varargs...)
}

// CreateExpt mocks base method.
func (m *MockIExptManager) CreateExpt(ctx context.Context, req *entity.CreateExptParam, session *entity.Session) (*entity.Experiment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExpt", ctx, req, session)
	ret0, _ := ret[0].(*entity.Experiment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExpt indicates an expected call of CreateExpt.
func (mr *MockIExptManagerMockRecorder) CreateExpt(ctx, req, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExpt", reflect.TypeOf((*MockIExptManager)(nil).CreateExpt), ctx, req, session)
}

// Delete mocks base method.
func (m *MockIExptManager) Delete(ctx context.Context, exptID, spaceID int64, session *entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, exptID, spaceID, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIExptManagerMockRecorder) Delete(ctx, exptID, spaceID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIExptManager)(nil).Delete), ctx, exptID, spaceID, session)
}

// Finish mocks base method.
func (m *MockIExptManager) Finish(ctx context.Context, exptID *entity.Experiment, exptRunID int64, session *entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finish", ctx, exptID, exptRunID, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Finish indicates an expected call of Finish.
func (mr *MockIExptManagerMockRecorder) Finish(ctx, exptID, exptRunID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockIExptManager)(nil).Finish), ctx, exptID, exptRunID, session)
}

// Get mocks base method.
func (m *MockIExptManager) Get(ctx context.Context, exptID, spaceID int64, session *entity.Session) (*entity.Experiment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, exptID, spaceID, session)
	ret0, _ := ret[0].(*entity.Experiment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIExptManagerMockRecorder) Get(ctx, exptID, spaceID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIExptManager)(nil).Get), ctx, exptID, spaceID, session)
}

// GetDetail mocks base method.
func (m *MockIExptManager) GetDetail(ctx context.Context, exptID, spaceID int64, session *entity.Session, opts ...entity.GetExptTupleOptionFn) (*entity.Experiment, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptID, spaceID, session}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDetail", varargs...)
	ret0, _ := ret[0].(*entity.Experiment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetail indicates an expected call of GetDetail.
func (mr *MockIExptManagerMockRecorder) GetDetail(ctx, exptID, spaceID, session any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptID, spaceID, session}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetail", reflect.TypeOf((*MockIExptManager)(nil).GetDetail), varargs...)
}

// GetRunLog mocks base method.
func (m *MockIExptManager) GetRunLog(ctx context.Context, exptID, exptRunID, spaceID int64, session *entity.Session) (*entity.ExptRunLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunLog", ctx, exptID, exptRunID, spaceID, session)
	ret0, _ := ret[0].(*entity.ExptRunLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunLog indicates an expected call of GetRunLog.
func (mr *MockIExptManagerMockRecorder) GetRunLog(ctx, exptID, exptRunID, spaceID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunLog", reflect.TypeOf((*MockIExptManager)(nil).GetRunLog), ctx, exptID, exptRunID, spaceID, session)
}

// Invoke mocks base method.
func (m *MockIExptManager) Invoke(ctx context.Context, invokeExptReq *entity.InvokeExptReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", ctx, invokeExptReq)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invoke indicates an expected call of Invoke.
func (mr *MockIExptManagerMockRecorder) Invoke(ctx, invokeExptReq any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockIExptManager)(nil).Invoke), ctx, invokeExptReq)
}

// List mocks base method.
func (m *MockIExptManager) List(ctx context.Context, page, pageSize int32, spaceID int64, filter *entity.ExptListFilter, orders []*entity.OrderBy, session *entity.Session) ([]*entity.Experiment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, page, pageSize, spaceID, filter, orders, session)
	ret0, _ := ret[0].([]*entity.Experiment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockIExptManagerMockRecorder) List(ctx, page, pageSize, spaceID, filter, orders, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIExptManager)(nil).List), ctx, page, pageSize, spaceID, filter, orders, session)
}

// ListExptRaw mocks base method.
func (m *MockIExptManager) ListExptRaw(ctx context.Context, page, pageSize int32, spaceID int64, filter *entity.ExptListFilter) ([]*entity.Experiment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExptRaw", ctx, page, pageSize, spaceID, filter)
	ret0, _ := ret[0].([]*entity.Experiment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListExptRaw indicates an expected call of ListExptRaw.
func (mr *MockIExptManagerMockRecorder) ListExptRaw(ctx, page, pageSize, spaceID, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExptRaw", reflect.TypeOf((*MockIExptManager)(nil).ListExptRaw), ctx, page, pageSize, spaceID, filter)
}

// LogRun mocks base method.
func (m *MockIExptManager) LogRun(ctx context.Context, exptID, exptRunID int64, mode entity.ExptRunMode, spaceID int64, session *entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogRun", ctx, exptID, exptRunID, mode, spaceID, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogRun indicates an expected call of LogRun.
func (mr *MockIExptManagerMockRecorder) LogRun(ctx, exptID, exptRunID, mode, spaceID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogRun", reflect.TypeOf((*MockIExptManager)(nil).LogRun), ctx, exptID, exptRunID, mode, spaceID, session)
}

// MDelete mocks base method.
func (m *MockIExptManager) MDelete(ctx context.Context, exptIDs []int64, spaceID int64, session *entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MDelete", ctx, exptIDs, spaceID, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// MDelete indicates an expected call of MDelete.
func (mr *MockIExptManagerMockRecorder) MDelete(ctx, exptIDs, spaceID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDelete", reflect.TypeOf((*MockIExptManager)(nil).MDelete), ctx, exptIDs, spaceID, session)
}

// MGet mocks base method.
func (m *MockIExptManager) MGet(ctx context.Context, exptIDs []int64, spaceID int64, session *entity.Session) ([]*entity.Experiment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGet", ctx, exptIDs, spaceID, session)
	ret0, _ := ret[0].([]*entity.Experiment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet.
func (mr *MockIExptManagerMockRecorder) MGet(ctx, exptIDs, spaceID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockIExptManager)(nil).MGet), ctx, exptIDs, spaceID, session)
}

// MGetDetail mocks base method.
func (m *MockIExptManager) MGetDetail(ctx context.Context, exptIDs []int64, spaceID int64, session *entity.Session) ([]*entity.Experiment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetDetail", ctx, exptIDs, spaceID, session)
	ret0, _ := ret[0].([]*entity.Experiment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetDetail indicates an expected call of MGetDetail.
func (mr *MockIExptManagerMockRecorder) MGetDetail(ctx, exptIDs, spaceID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetDetail", reflect.TypeOf((*MockIExptManager)(nil).MGetDetail), ctx, exptIDs, spaceID, session)
}

// PendExpt mocks base method.
func (m *MockIExptManager) PendExpt(ctx context.Context, exptID, spaceID int64, session *entity.Session, opts ...entity.CompleteExptOptionFn) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptID, spaceID, session}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PendExpt", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PendExpt indicates an expected call of PendExpt.
func (mr *MockIExptManagerMockRecorder) PendExpt(ctx, exptID, spaceID, session any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptID, spaceID, session}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendExpt", reflect.TypeOf((*MockIExptManager)(nil).PendExpt), varargs...)
}

// PendRun mocks base method.
func (m *MockIExptManager) PendRun(ctx context.Context, exptID, exptRunID, spaceID int64, session *entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendRun", ctx, exptID, exptRunID, spaceID, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// PendRun indicates an expected call of PendRun.
func (mr *MockIExptManagerMockRecorder) PendRun(ctx, exptID, exptRunID, spaceID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendRun", reflect.TypeOf((*MockIExptManager)(nil).PendRun), ctx, exptID, exptRunID, spaceID, session)
}

// RetryUnSuccess mocks base method.
func (m *MockIExptManager) RetryUnSuccess(ctx context.Context, exptID, runID, spaceID int64, session *entity.Session, ext map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryUnSuccess", ctx, exptID, runID, spaceID, session, ext)
	ret0, _ := ret[0].(error)
	return ret0
}

// RetryUnSuccess indicates an expected call of RetryUnSuccess.
func (mr *MockIExptManagerMockRecorder) RetryUnSuccess(ctx, exptID, runID, spaceID, session, ext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryUnSuccess", reflect.TypeOf((*MockIExptManager)(nil).RetryUnSuccess), ctx, exptID, runID, spaceID, session, ext)
}

// Run mocks base method.
func (m *MockIExptManager) Run(ctx context.Context, exptID, runID, spaceID int64, session *entity.Session, runMode entity.ExptRunMode, ext map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, exptID, runID, spaceID, session, runMode, ext)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockIExptManagerMockRecorder) Run(ctx, exptID, runID, spaceID, session, runMode, ext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIExptManager)(nil).Run), ctx, exptID, runID, spaceID, session, runMode, ext)
}

// Update mocks base method.
func (m *MockIExptManager) Update(ctx context.Context, expt *entity.Experiment, session *entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, expt, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIExptManagerMockRecorder) Update(ctx, expt, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIExptManager)(nil).Update), ctx, expt, session)
}

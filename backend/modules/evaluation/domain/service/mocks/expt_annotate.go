// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: IExptAnnotateService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	"go.uber.org/mock/gomock"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
)

// MockIExptAnnotateService is a mock of IExptAnnotateService interface.
type MockIExptAnnotateService struct {
	ctrl     *gomock.Controller
	recorder *MockIExptAnnotateServiceMockRecorder
}

// MockIExptAnnotateServiceMockRecorder is the mock recorder for MockIExptAnnotateService.
type MockIExptAnnotateServiceMockRecorder struct {
	mock *MockIExptAnnotateService
}

// NewMockIExptAnnotateService creates a new mock instance.
func NewMockIExptAnnotateService(ctrl *gomock.Controller) *MockIExptAnnotateService {
	mock := &MockIExptAnnotateService{ctrl: ctrl}
	mock.recorder = &MockIExptAnnotateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptAnnotateService) EXPECT() *MockIExptAnnotateServiceMockRecorder {
	return m.recorder
}

// CreateExptTurnResultTagRefs mocks base method.
func (m *MockIExptAnnotateService) CreateExptTurnResultTagRefs(arg0 context.Context, arg1 []*entity.ExptTurnResultTagRef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExptTurnResultTagRefs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExptTurnResultTagRefs indicates an expected call of CreateExptTurnResultTagRefs.
func (mr *MockIExptAnnotateServiceMockRecorder) CreateExptTurnResultTagRefs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExptTurnResultTagRefs", reflect.TypeOf((*MockIExptAnnotateService)(nil).CreateExptTurnResultTagRefs), arg0, arg1)
}

// DeleteExptTurnResultTagRef mocks base method.
func (m *MockIExptAnnotateService) DeleteExptTurnResultTagRef(arg0 context.Context, arg1, arg2, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExptTurnResultTagRef", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExptTurnResultTagRef indicates an expected call of DeleteExptTurnResultTagRef.
func (mr *MockIExptAnnotateServiceMockRecorder) DeleteExptTurnResultTagRef(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExptTurnResultTagRef", reflect.TypeOf((*MockIExptAnnotateService)(nil).DeleteExptTurnResultTagRef), arg0, arg1, arg2, arg3)
}

// GetAnnotateRecordsByIDs mocks base method.
func (m *MockIExptAnnotateService) GetAnnotateRecordsByIDs(arg0 context.Context, arg1 int64, arg2 []int64) ([]*entity.AnnotateRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotateRecordsByIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.AnnotateRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotateRecordsByIDs indicates an expected call of GetAnnotateRecordsByIDs.
func (mr *MockIExptAnnotateServiceMockRecorder) GetAnnotateRecordsByIDs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotateRecordsByIDs", reflect.TypeOf((*MockIExptAnnotateService)(nil).GetAnnotateRecordsByIDs), arg0, arg1, arg2)
}

// GetExptTurnResultTagRefs mocks base method.
func (m *MockIExptAnnotateService) GetExptTurnResultTagRefs(arg0 context.Context, arg1, arg2 int64) ([]*entity.ExptTurnResultTagRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExptTurnResultTagRefs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.ExptTurnResultTagRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExptTurnResultTagRefs indicates an expected call of GetExptTurnResultTagRefs.
func (mr *MockIExptAnnotateServiceMockRecorder) GetExptTurnResultTagRefs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExptTurnResultTagRefs", reflect.TypeOf((*MockIExptAnnotateService)(nil).GetExptTurnResultTagRefs), arg0, arg1, arg2)
}

// SaveAnnotateRecord mocks base method.
func (m *MockIExptAnnotateService) SaveAnnotateRecord(arg0 context.Context, arg1, arg2, arg3 int64, arg4 *entity.AnnotateRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAnnotateRecord", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAnnotateRecord indicates an expected call of SaveAnnotateRecord.
func (mr *MockIExptAnnotateServiceMockRecorder) SaveAnnotateRecord(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAnnotateRecord", reflect.TypeOf((*MockIExptAnnotateService)(nil).SaveAnnotateRecord), arg0, arg1, arg2, arg3, arg4)
}

// UpdateAnnotateRecord mocks base method.
func (m *MockIExptAnnotateService) UpdateAnnotateRecord(arg0 context.Context, arg1, arg2 int64, arg3 *entity.AnnotateRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnnotateRecord", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAnnotateRecord indicates an expected call of UpdateAnnotateRecord.
func (mr *MockIExptAnnotateServiceMockRecorder) UpdateAnnotateRecord(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnnotateRecord", reflect.TypeOf((*MockIExptAnnotateService)(nil).UpdateAnnotateRecord), arg0, arg1, arg2, arg3)
}

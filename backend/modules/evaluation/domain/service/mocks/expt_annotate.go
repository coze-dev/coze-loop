// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: IExptAnnotateService)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/expt_annotate.go --package mocks . IExptAnnotateService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIExptAnnotateService is a mock of IExptAnnotateService interface.
type MockIExptAnnotateService struct {
	ctrl     *gomock.Controller
	recorder *MockIExptAnnotateServiceMockRecorder
	isgomock struct{}
}

// MockIExptAnnotateServiceMockRecorder is the mock recorder for MockIExptAnnotateService.
type MockIExptAnnotateServiceMockRecorder struct {
	mock *MockIExptAnnotateService
}

// NewMockIExptAnnotateService creates a new mock instance.
func NewMockIExptAnnotateService(ctrl *gomock.Controller) *MockIExptAnnotateService {
	mock := &MockIExptAnnotateService{ctrl: ctrl}
	mock.recorder = &MockIExptAnnotateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptAnnotateService) EXPECT() *MockIExptAnnotateServiceMockRecorder {
	return m.recorder
}

// CreateExptTurnResultTagRefs mocks base method.
func (m *MockIExptAnnotateService) CreateExptTurnResultTagRefs(ctx context.Context, refs []*entity.ExptTurnResultTagRef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExptTurnResultTagRefs", ctx, refs)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExptTurnResultTagRefs indicates an expected call of CreateExptTurnResultTagRefs.
func (mr *MockIExptAnnotateServiceMockRecorder) CreateExptTurnResultTagRefs(ctx, refs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExptTurnResultTagRefs", reflect.TypeOf((*MockIExptAnnotateService)(nil).CreateExptTurnResultTagRefs), ctx, refs)
}

// DeleteExptTurnResultTagRef mocks base method.
func (m *MockIExptAnnotateService) DeleteExptTurnResultTagRef(ctx context.Context, exptID, spaceID, tagKeyID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExptTurnResultTagRef", ctx, exptID, spaceID, tagKeyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExptTurnResultTagRef indicates an expected call of DeleteExptTurnResultTagRef.
func (mr *MockIExptAnnotateServiceMockRecorder) DeleteExptTurnResultTagRef(ctx, exptID, spaceID, tagKeyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExptTurnResultTagRef", reflect.TypeOf((*MockIExptAnnotateService)(nil).DeleteExptTurnResultTagRef), ctx, exptID, spaceID, tagKeyID)
}

// GetAnnotateRecordsByIDs mocks base method.
func (m *MockIExptAnnotateService) GetAnnotateRecordsByIDs(ctx context.Context, spaceID int64, recordIDs []int64) ([]*entity.AnnotateRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotateRecordsByIDs", ctx, spaceID, recordIDs)
	ret0, _ := ret[0].([]*entity.AnnotateRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotateRecordsByIDs indicates an expected call of GetAnnotateRecordsByIDs.
func (mr *MockIExptAnnotateServiceMockRecorder) GetAnnotateRecordsByIDs(ctx, spaceID, recordIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotateRecordsByIDs", reflect.TypeOf((*MockIExptAnnotateService)(nil).GetAnnotateRecordsByIDs), ctx, spaceID, recordIDs)
}

// GetExptTurnResultTagRefs mocks base method.
func (m *MockIExptAnnotateService) GetExptTurnResultTagRefs(ctx context.Context, exptID, spaceID int64) ([]*entity.ExptTurnResultTagRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExptTurnResultTagRefs", ctx, exptID, spaceID)
	ret0, _ := ret[0].([]*entity.ExptTurnResultTagRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExptTurnResultTagRefs indicates an expected call of GetExptTurnResultTagRefs.
func (mr *MockIExptAnnotateServiceMockRecorder) GetExptTurnResultTagRefs(ctx, exptID, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExptTurnResultTagRefs", reflect.TypeOf((*MockIExptAnnotateService)(nil).GetExptTurnResultTagRefs), ctx, exptID, spaceID)
}

// SaveAnnotateRecord mocks base method.
func (m *MockIExptAnnotateService) SaveAnnotateRecord(ctx context.Context, exptID, itemID, turnID int64, record *entity.AnnotateRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAnnotateRecord", ctx, exptID, itemID, turnID, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAnnotateRecord indicates an expected call of SaveAnnotateRecord.
func (mr *MockIExptAnnotateServiceMockRecorder) SaveAnnotateRecord(ctx, exptID, itemID, turnID, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAnnotateRecord", reflect.TypeOf((*MockIExptAnnotateService)(nil).SaveAnnotateRecord), ctx, exptID, itemID, turnID, record)
}

// UpdateAnnotateRecord mocks base method.
func (m *MockIExptAnnotateService) UpdateAnnotateRecord(ctx context.Context, itemID, turnID int64, record *entity.AnnotateRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnnotateRecord", ctx, itemID, turnID, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAnnotateRecord indicates an expected call of UpdateAnnotateRecord.
func (mr *MockIExptAnnotateServiceMockRecorder) UpdateAnnotateRecord(ctx, itemID, turnID, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnnotateRecord", reflect.TypeOf((*MockIExptAnnotateService)(nil).UpdateAnnotateRecord), ctx, itemID, turnID, record)
}

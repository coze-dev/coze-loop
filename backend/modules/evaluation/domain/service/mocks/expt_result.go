// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: ExptResultService,ExptAggrResultService)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/expt_result.go --package mocks . ExptResultService,ExptAggrResultService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockExptResultService is a mock of ExptResultService interface.
type MockExptResultService struct {
	ctrl     *gomock.Controller
	recorder *MockExptResultServiceMockRecorder
	isgomock struct{}
}

// MockExptResultServiceMockRecorder is the mock recorder for MockExptResultService.
type MockExptResultServiceMockRecorder struct {
	mock *MockExptResultService
}

// NewMockExptResultService creates a new mock instance.
func NewMockExptResultService(ctrl *gomock.Controller) *MockExptResultService {
	mock := &MockExptResultService{ctrl: ctrl}
	mock.recorder = &MockExptResultServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExptResultService) EXPECT() *MockExptResultServiceMockRecorder {
	return m.recorder
}

// CalculateStats mocks base method.
func (m *MockExptResultService) CalculateStats(ctx context.Context, exptID, spaceID int64, session *entity.Session) (*entity.ExptCalculateStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateStats", ctx, exptID, spaceID, session)
	ret0, _ := ret[0].(*entity.ExptCalculateStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateStats indicates an expected call of CalculateStats.
func (mr *MockExptResultServiceMockRecorder) CalculateStats(ctx, exptID, spaceID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateStats", reflect.TypeOf((*MockExptResultService)(nil).CalculateStats), ctx, exptID, spaceID, session)
}

// CompareExptTurnResultFilters mocks base method.
func (m *MockExptResultService) CompareExptTurnResultFilters(ctx context.Context, spaceID, exptID int64, itemIDs []int64, retryTimes int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareExptTurnResultFilters", ctx, spaceID, exptID, itemIDs, retryTimes)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareExptTurnResultFilters indicates an expected call of CompareExptTurnResultFilters.
func (mr *MockExptResultServiceMockRecorder) CompareExptTurnResultFilters(ctx, spaceID, exptID, itemIDs, retryTimes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareExptTurnResultFilters", reflect.TypeOf((*MockExptResultService)(nil).CompareExptTurnResultFilters), ctx, spaceID, exptID, itemIDs, retryTimes)
}

// CreateStats mocks base method.
func (m *MockExptResultService) CreateStats(ctx context.Context, exptStats *entity.ExptStats, session *entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStats", ctx, exptStats, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStats indicates an expected call of CreateStats.
func (mr *MockExptResultServiceMockRecorder) CreateStats(ctx, exptStats, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStats", reflect.TypeOf((*MockExptResultService)(nil).CreateStats), ctx, exptStats, session)
}

// GetExptItemTurnResults mocks base method.
func (m *MockExptResultService) GetExptItemTurnResults(ctx context.Context, exptID, itemID, spaceID int64, session *entity.Session) ([]*entity.ExptTurnResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExptItemTurnResults", ctx, exptID, itemID, spaceID, session)
	ret0, _ := ret[0].([]*entity.ExptTurnResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExptItemTurnResults indicates an expected call of GetExptItemTurnResults.
func (mr *MockExptResultServiceMockRecorder) GetExptItemTurnResults(ctx, exptID, itemID, spaceID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExptItemTurnResults", reflect.TypeOf((*MockExptResultService)(nil).GetExptItemTurnResults), ctx, exptID, itemID, spaceID, session)
}

// GetStats mocks base method.
func (m *MockExptResultService) GetStats(ctx context.Context, exptID, spaceID int64, session *entity.Session) (*entity.ExptStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx, exptID, spaceID, session)
	ret0, _ := ret[0].(*entity.ExptStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockExptResultServiceMockRecorder) GetStats(ctx, exptID, spaceID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockExptResultService)(nil).GetStats), ctx, exptID, spaceID, session)
}

// InsertExptTurnResultFilterKeyMappings mocks base method.
func (m *MockExptResultService) InsertExptTurnResultFilterKeyMappings(ctx context.Context, mappings []*entity.ExptTurnResultFilterKeyMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertExptTurnResultFilterKeyMappings", ctx, mappings)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertExptTurnResultFilterKeyMappings indicates an expected call of InsertExptTurnResultFilterKeyMappings.
func (mr *MockExptResultServiceMockRecorder) InsertExptTurnResultFilterKeyMappings(ctx, mappings any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertExptTurnResultFilterKeyMappings", reflect.TypeOf((*MockExptResultService)(nil).InsertExptTurnResultFilterKeyMappings), ctx, mappings)
}

// MGetExperimentResult mocks base method.
func (m *MockExptResultService) MGetExperimentResult(ctx context.Context, param *entity.MGetExperimentResultParam) ([]*entity.ColumnEvaluator, []*entity.ExptColumnEvaluator, []*entity.ColumnEvalSetField, []*entity.ExptColumnAnnotation, []*entity.ItemResult, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetExperimentResult", ctx, param)
	ret0, _ := ret[0].([]*entity.ColumnEvaluator)
	ret1, _ := ret[1].([]*entity.ExptColumnEvaluator)
	ret2, _ := ret[2].([]*entity.ColumnEvalSetField)
	ret3, _ := ret[3].([]*entity.ExptColumnAnnotation)
	ret4, _ := ret[4].([]*entity.ItemResult)
	ret5, _ := ret[5].(int64)
	ret6, _ := ret[6].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5, ret6
}

// MGetExperimentResult indicates an expected call of MGetExperimentResult.
func (mr *MockExptResultServiceMockRecorder) MGetExperimentResult(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetExperimentResult", reflect.TypeOf((*MockExptResultService)(nil).MGetExperimentResult), ctx, param)
}

// MGetStats mocks base method.
func (m *MockExptResultService) MGetStats(ctx context.Context, exptIDs []int64, spaceID int64, session *entity.Session) ([]*entity.ExptStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetStats", ctx, exptIDs, spaceID, session)
	ret0, _ := ret[0].([]*entity.ExptStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetStats indicates an expected call of MGetStats.
func (mr *MockExptResultServiceMockRecorder) MGetStats(ctx, exptIDs, spaceID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetStats", reflect.TypeOf((*MockExptResultService)(nil).MGetStats), ctx, exptIDs, spaceID, session)
}

// ManualUpsertExptTurnResultFilter mocks base method.
func (m *MockExptResultService) ManualUpsertExptTurnResultFilter(ctx context.Context, spaceID, exptID int64, itemIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManualUpsertExptTurnResultFilter", ctx, spaceID, exptID, itemIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// ManualUpsertExptTurnResultFilter indicates an expected call of ManualUpsertExptTurnResultFilter.
func (mr *MockExptResultServiceMockRecorder) ManualUpsertExptTurnResultFilter(ctx, spaceID, exptID, itemIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManualUpsertExptTurnResultFilter", reflect.TypeOf((*MockExptResultService)(nil).ManualUpsertExptTurnResultFilter), ctx, spaceID, exptID, itemIDs)
}

// RecordItemRunLogs mocks base method.
func (m *MockExptResultService) RecordItemRunLogs(ctx context.Context, exptID, exptRunID, itemID, spaceID int64) ([]*entity.ExptTurnEvaluatorResultRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordItemRunLogs", ctx, exptID, exptRunID, itemID, spaceID)
	ret0, _ := ret[0].([]*entity.ExptTurnEvaluatorResultRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordItemRunLogs indicates an expected call of RecordItemRunLogs.
func (mr *MockExptResultServiceMockRecorder) RecordItemRunLogs(ctx, exptID, exptRunID, itemID, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordItemRunLogs", reflect.TypeOf((*MockExptResultService)(nil).RecordItemRunLogs), ctx, exptID, exptRunID, itemID, spaceID)
}

// UpsertExptTurnResultFilter mocks base method.
func (m *MockExptResultService) UpsertExptTurnResultFilter(ctx context.Context, spaceID, exptID int64, itemID []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertExptTurnResultFilter", ctx, spaceID, exptID, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertExptTurnResultFilter indicates an expected call of UpsertExptTurnResultFilter.
func (mr *MockExptResultServiceMockRecorder) UpsertExptTurnResultFilter(ctx, spaceID, exptID, itemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertExptTurnResultFilter", reflect.TypeOf((*MockExptResultService)(nil).UpsertExptTurnResultFilter), ctx, spaceID, exptID, itemID)
}

// MockExptAggrResultService is a mock of ExptAggrResultService interface.
type MockExptAggrResultService struct {
	ctrl     *gomock.Controller
	recorder *MockExptAggrResultServiceMockRecorder
	isgomock struct{}
}

// MockExptAggrResultServiceMockRecorder is the mock recorder for MockExptAggrResultService.
type MockExptAggrResultServiceMockRecorder struct {
	mock *MockExptAggrResultService
}

// NewMockExptAggrResultService creates a new mock instance.
func NewMockExptAggrResultService(ctrl *gomock.Controller) *MockExptAggrResultService {
	mock := &MockExptAggrResultService{ctrl: ctrl}
	mock.recorder = &MockExptAggrResultServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExptAggrResultService) EXPECT() *MockExptAggrResultServiceMockRecorder {
	return m.recorder
}

// BatchGetExptAggrResultByExperimentIDs mocks base method.
func (m *MockExptAggrResultService) BatchGetExptAggrResultByExperimentIDs(ctx context.Context, spaceID int64, experimentIDs []int64) ([]*entity.ExptAggregateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetExptAggrResultByExperimentIDs", ctx, spaceID, experimentIDs)
	ret0, _ := ret[0].([]*entity.ExptAggregateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetExptAggrResultByExperimentIDs indicates an expected call of BatchGetExptAggrResultByExperimentIDs.
func (mr *MockExptAggrResultServiceMockRecorder) BatchGetExptAggrResultByExperimentIDs(ctx, spaceID, experimentIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetExptAggrResultByExperimentIDs", reflect.TypeOf((*MockExptAggrResultService)(nil).BatchGetExptAggrResultByExperimentIDs), ctx, spaceID, experimentIDs)
}

// CreateAnnotationAggrResult mocks base method.
func (m *MockExptAggrResultService) CreateAnnotationAggrResult(ctx context.Context, param *entity.CreateSpecificFieldAggrResultParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnnotationAggrResult", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAnnotationAggrResult indicates an expected call of CreateAnnotationAggrResult.
func (mr *MockExptAggrResultServiceMockRecorder) CreateAnnotationAggrResult(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnnotationAggrResult", reflect.TypeOf((*MockExptAggrResultService)(nil).CreateAnnotationAggrResult), ctx, param)
}

// CreateExptAggrResult mocks base method.
func (m *MockExptAggrResultService) CreateExptAggrResult(ctx context.Context, spaceID, experimentID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExptAggrResult", ctx, spaceID, experimentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExptAggrResult indicates an expected call of CreateExptAggrResult.
func (mr *MockExptAggrResultServiceMockRecorder) CreateExptAggrResult(ctx, spaceID, experimentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExptAggrResult", reflect.TypeOf((*MockExptAggrResultService)(nil).CreateExptAggrResult), ctx, spaceID, experimentID)
}

// UpdateAnnotationAggrResult mocks base method.
func (m *MockExptAggrResultService) UpdateAnnotationAggrResult(ctx context.Context, param *entity.UpdateExptAggrResultParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnnotationAggrResult", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAnnotationAggrResult indicates an expected call of UpdateAnnotationAggrResult.
func (mr *MockExptAggrResultServiceMockRecorder) UpdateAnnotationAggrResult(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnnotationAggrResult", reflect.TypeOf((*MockExptAggrResultService)(nil).UpdateAnnotationAggrResult), ctx, param)
}

// UpdateExptAggrResult mocks base method.
func (m *MockExptAggrResultService) UpdateExptAggrResult(ctx context.Context, param *entity.UpdateExptAggrResultParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExptAggrResult", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExptAggrResult indicates an expected call of UpdateExptAggrResult.
func (mr *MockExptAggrResultServiceMockRecorder) UpdateExptAggrResult(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExptAggrResult", reflect.TypeOf((*MockExptAggrResultService)(nil).UpdateExptAggrResult), ctx, param)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: IExptResultExportService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
)

// MockIExptResultExportService is a mock of IExptResultExportService interface.
type MockIExptResultExportService struct {
	ctrl     *gomock.Controller
	recorder *MockIExptResultExportServiceMockRecorder
}

// MockIExptResultExportServiceMockRecorder is the mock recorder for MockIExptResultExportService.
type MockIExptResultExportServiceMockRecorder struct {
	mock *MockIExptResultExportService
}

// NewMockIExptResultExportService creates a new mock instance.
func NewMockIExptResultExportService(ctrl *gomock.Controller) *MockIExptResultExportService {
	mock := &MockIExptResultExportService{ctrl: ctrl}
	mock.recorder = &MockIExptResultExportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptResultExportService) EXPECT() *MockIExptResultExportServiceMockRecorder {
	return m.recorder
}

// DoExportCSV mocks base method.
func (m *MockIExptResultExportService) DoExportCSV(arg0 context.Context, arg1, arg2, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoExportCSV", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoExportCSV indicates an expected call of DoExportCSV.
func (mr *MockIExptResultExportServiceMockRecorder) DoExportCSV(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoExportCSV", reflect.TypeOf((*MockIExptResultExportService)(nil).DoExportCSV), arg0, arg1, arg2, arg3)
}

// ExportCSV mocks base method.
func (m *MockIExptResultExportService) ExportCSV(arg0 context.Context, arg1, arg2 int64, arg3 *entity.Session) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportCSV", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportCSV indicates an expected call of ExportCSV.
func (mr *MockIExptResultExportServiceMockRecorder) ExportCSV(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportCSV", reflect.TypeOf((*MockIExptResultExportService)(nil).ExportCSV), arg0, arg1, arg2, arg3)
}

// GetExptExportRecord mocks base method.
func (m *MockIExptResultExportService) GetExptExportRecord(arg0 context.Context, arg1, arg2 int64) (*entity.ExptResultExportRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExptExportRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.ExptResultExportRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExptExportRecord indicates an expected call of GetExptExportRecord.
func (mr *MockIExptResultExportServiceMockRecorder) GetExptExportRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExptExportRecord", reflect.TypeOf((*MockIExptResultExportService)(nil).GetExptExportRecord), arg0, arg1, arg2)
}

// ListExportRecord mocks base method.
func (m *MockIExptResultExportService) ListExportRecord(arg0 context.Context, arg1, arg2 int64, arg3 entity.Page) ([]*entity.ExptResultExportRecord, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExportRecord", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entity.ExptResultExportRecord)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListExportRecord indicates an expected call of ListExportRecord.
func (mr *MockIExptResultExportServiceMockRecorder) ListExportRecord(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExportRecord", reflect.TypeOf((*MockIExptResultExportService)(nil).ListExportRecord), arg0, arg1, arg2, arg3)
}

// UpdateExportRecord mocks base method.
func (m *MockIExptResultExportService) UpdateExportRecord(arg0 context.Context, arg1 *entity.ExptResultExportRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExportRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExportRecord indicates an expected call of UpdateExportRecord.
func (mr *MockIExptResultExportServiceMockRecorder) UpdateExportRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExportRecord", reflect.TypeOf((*MockIExptResultExportService)(nil).UpdateExportRecord), arg0, arg1)
}

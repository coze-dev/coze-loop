// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: IExptResultExportService)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/expt_export.go --package mocks . IExptResultExportService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIExptResultExportService is a mock of IExptResultExportService interface.
type MockIExptResultExportService struct {
	ctrl     *gomock.Controller
	recorder *MockIExptResultExportServiceMockRecorder
	isgomock struct{}
}

// MockIExptResultExportServiceMockRecorder is the mock recorder for MockIExptResultExportService.
type MockIExptResultExportServiceMockRecorder struct {
	mock *MockIExptResultExportService
}

// NewMockIExptResultExportService creates a new mock instance.
func NewMockIExptResultExportService(ctrl *gomock.Controller) *MockIExptResultExportService {
	mock := &MockIExptResultExportService{ctrl: ctrl}
	mock.recorder = &MockIExptResultExportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptResultExportService) EXPECT() *MockIExptResultExportServiceMockRecorder {
	return m.recorder
}

// DoExportCSV mocks base method.
func (m *MockIExptResultExportService) DoExportCSV(ctx context.Context, spaceID, exptID int64, fileName string, withLogID bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoExportCSV", ctx, spaceID, exptID, fileName, withLogID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoExportCSV indicates an expected call of DoExportCSV.
func (mr *MockIExptResultExportServiceMockRecorder) DoExportCSV(ctx, spaceID, exptID, fileName, withLogID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoExportCSV", reflect.TypeOf((*MockIExptResultExportService)(nil).DoExportCSV), ctx, spaceID, exptID, fileName, withLogID)
}

// ExportCSV mocks base method.
func (m *MockIExptResultExportService) ExportCSV(ctx context.Context, spaceID, exptID int64, session *entity.Session) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportCSV", ctx, spaceID, exptID, session)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportCSV indicates an expected call of ExportCSV.
func (mr *MockIExptResultExportServiceMockRecorder) ExportCSV(ctx, spaceID, exptID, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportCSV", reflect.TypeOf((*MockIExptResultExportService)(nil).ExportCSV), ctx, spaceID, exptID, session)
}

// GetExptExportRecord mocks base method.
func (m *MockIExptResultExportService) GetExptExportRecord(ctx context.Context, spaceID, exportID int64) (*entity.ExptResultExportRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExptExportRecord", ctx, spaceID, exportID)
	ret0, _ := ret[0].(*entity.ExptResultExportRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExptExportRecord indicates an expected call of GetExptExportRecord.
func (mr *MockIExptResultExportServiceMockRecorder) GetExptExportRecord(ctx, spaceID, exportID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExptExportRecord", reflect.TypeOf((*MockIExptResultExportService)(nil).GetExptExportRecord), ctx, spaceID, exportID)
}

// HandleExportEvent mocks base method.
func (m *MockIExptResultExportService) HandleExportEvent(ctx context.Context, spaceID, exptID, exportID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleExportEvent", ctx, spaceID, exptID, exportID)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleExportEvent indicates an expected call of HandleExportEvent.
func (mr *MockIExptResultExportServiceMockRecorder) HandleExportEvent(ctx, spaceID, exptID, exportID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleExportEvent", reflect.TypeOf((*MockIExptResultExportService)(nil).HandleExportEvent), ctx, spaceID, exptID, exportID)
}

// ListExportRecord mocks base method.
func (m *MockIExptResultExportService) ListExportRecord(ctx context.Context, spaceID, exptID int64, page entity.Page) ([]*entity.ExptResultExportRecord, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExportRecord", ctx, spaceID, exptID, page)
	ret0, _ := ret[0].([]*entity.ExptResultExportRecord)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListExportRecord indicates an expected call of ListExportRecord.
func (mr *MockIExptResultExportServiceMockRecorder) ListExportRecord(ctx, spaceID, exptID, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExportRecord", reflect.TypeOf((*MockIExptResultExportService)(nil).ListExportRecord), ctx, spaceID, exptID, page)
}

// UpdateExportRecord mocks base method.
func (m *MockIExptResultExportService) UpdateExportRecord(ctx context.Context, exportRecord *entity.ExptResultExportRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExportRecord", ctx, exportRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExportRecord indicates an expected call of UpdateExportRecord.
func (mr *MockIExptResultExportServiceMockRecorder) UpdateExportRecord(ctx, exportRecord any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExportRecord", reflect.TypeOf((*MockIExptResultExportService)(nil).UpdateExportRecord), ctx, exportRecord)
}

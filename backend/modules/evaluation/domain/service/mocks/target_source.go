// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: ISourceEvalTargetOperateService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockISourceEvalTargetOperateService is a mock of ISourceEvalTargetOperateService interface.
type MockISourceEvalTargetOperateService struct {
	ctrl     *gomock.Controller
	recorder *MockISourceEvalTargetOperateServiceMockRecorder
}

// MockISourceEvalTargetOperateServiceMockRecorder is the mock recorder for MockISourceEvalTargetOperateService.
type MockISourceEvalTargetOperateServiceMockRecorder struct {
	mock *MockISourceEvalTargetOperateService
}

// NewMockISourceEvalTargetOperateService creates a new mock instance.
func NewMockISourceEvalTargetOperateService(ctrl *gomock.Controller) *MockISourceEvalTargetOperateService {
	mock := &MockISourceEvalTargetOperateService{ctrl: ctrl}
	mock.recorder = &MockISourceEvalTargetOperateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISourceEvalTargetOperateService) EXPECT() *MockISourceEvalTargetOperateServiceMockRecorder {
	return m.recorder
}

// BatchGetSource mocks base method.
func (m *MockISourceEvalTargetOperateService) BatchGetSource(arg0 context.Context, arg1 int64, arg2 []string) ([]*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetSource", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetSource indicates an expected call of BatchGetSource.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) BatchGetSource(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetSource", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).BatchGetSource), arg0, arg1, arg2)
}

// BuildBySource mocks base method.
func (m *MockISourceEvalTargetOperateService) BuildBySource(arg0 context.Context, arg1 int64, arg2, arg3 string, arg4 ...entity.Option) (*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildBySource", varargs...)
	ret0, _ := ret[0].(*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildBySource indicates an expected call of BuildBySource.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) BuildBySource(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildBySource", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).BuildBySource), varargs...)
}

// EvalType mocks base method.
func (m *MockISourceEvalTargetOperateService) EvalType() entity.EvalTargetType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvalType")
	ret0, _ := ret[0].(entity.EvalTargetType)
	return ret0
}

// EvalType indicates an expected call of EvalType.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) EvalType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalType", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).EvalType))
}

// Execute mocks base method.
func (m *MockISourceEvalTargetOperateService) Execute(arg0 context.Context, arg1 int64, arg2 *entity.ExecuteEvalTargetParam) (*entity.EvalTargetOutputData, entity.EvalTargetRunStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.EvalTargetOutputData)
	ret1, _ := ret[1].(entity.EvalTargetRunStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) Execute(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).Execute), arg0, arg1, arg2)
}

// ListSource mocks base method.
func (m *MockISourceEvalTargetOperateService) ListSource(arg0 context.Context, arg1 *entity.ListSourceParam) ([]*entity.EvalTarget, string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSource", arg0, arg1)
	ret0, _ := ret[0].([]*entity.EvalTarget)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListSource indicates an expected call of ListSource.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) ListSource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSource", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).ListSource), arg0, arg1)
}

// ListSourceVersion mocks base method.
func (m *MockISourceEvalTargetOperateService) ListSourceVersion(arg0 context.Context, arg1 *entity.ListSourceVersionParam) ([]*entity.EvalTargetVersion, string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSourceVersion", arg0, arg1)
	ret0, _ := ret[0].([]*entity.EvalTargetVersion)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListSourceVersion indicates an expected call of ListSourceVersion.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) ListSourceVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSourceVersion", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).ListSourceVersion), arg0, arg1)
}

// PackSourceInfo mocks base method.
func (m *MockISourceEvalTargetOperateService) PackSourceInfo(arg0 context.Context, arg1 int64, arg2 []*entity.EvalTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackSourceInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PackSourceInfo indicates an expected call of PackSourceInfo.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) PackSourceInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackSourceInfo", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).PackSourceInfo), arg0, arg1, arg2)
}

// PackSourceVersionInfo mocks base method.
func (m *MockISourceEvalTargetOperateService) PackSourceVersionInfo(arg0 context.Context, arg1 int64, arg2 []*entity.EvalTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackSourceVersionInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PackSourceVersionInfo indicates an expected call of PackSourceVersionInfo.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) PackSourceVersionInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackSourceVersionInfo", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).PackSourceVersionInfo), arg0, arg1, arg2)
}

// RuntimeParam mocks base method.
func (m *MockISourceEvalTargetOperateService) RuntimeParam() entity.IRuntimeParam {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RuntimeParam")
	ret0, _ := ret[0].(entity.IRuntimeParam)
	return ret0
}

// RuntimeParam indicates an expected call of RuntimeParam.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) RuntimeParam() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RuntimeParam", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).RuntimeParam))
}

// ValidateInput mocks base method.
func (m *MockISourceEvalTargetOperateService) ValidateInput(arg0 context.Context, arg1 int64, arg2 []*entity.ArgsSchema, arg3 *entity.EvalTargetInputData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateInput", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateInput indicates an expected call of ValidateInput.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) ValidateInput(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateInput", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).ValidateInput), arg0, arg1, arg2, arg3)
}

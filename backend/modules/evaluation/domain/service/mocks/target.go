// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: IEvalTargetService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIEvalTargetService is a mock of IEvalTargetService interface.
type MockIEvalTargetService struct {
	ctrl     *gomock.Controller
	recorder *MockIEvalTargetServiceMockRecorder
}

// MockIEvalTargetServiceMockRecorder is the mock recorder for MockIEvalTargetService.
type MockIEvalTargetServiceMockRecorder struct {
	mock *MockIEvalTargetService
}

// NewMockIEvalTargetService creates a new mock instance.
func NewMockIEvalTargetService(ctrl *gomock.Controller) *MockIEvalTargetService {
	mock := &MockIEvalTargetService{ctrl: ctrl}
	mock.recorder = &MockIEvalTargetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEvalTargetService) EXPECT() *MockIEvalTargetServiceMockRecorder {
	return m.recorder
}

// BatchGetEvalTargetBySource mocks base method.
func (m *MockIEvalTargetService) BatchGetEvalTargetBySource(arg0 context.Context, arg1 *entity.BatchGetEvalTargetBySourceParam) ([]*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvalTargetBySource", arg0, arg1)
	ret0, _ := ret[0].([]*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvalTargetBySource indicates an expected call of BatchGetEvalTargetBySource.
func (mr *MockIEvalTargetServiceMockRecorder) BatchGetEvalTargetBySource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvalTargetBySource", reflect.TypeOf((*MockIEvalTargetService)(nil).BatchGetEvalTargetBySource), arg0, arg1)
}

// BatchGetEvalTargetVersion mocks base method.
func (m *MockIEvalTargetService) BatchGetEvalTargetVersion(arg0 context.Context, arg1 int64, arg2 []int64, arg3 bool) ([]*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvalTargetVersion", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvalTargetVersion indicates an expected call of BatchGetEvalTargetVersion.
func (mr *MockIEvalTargetServiceMockRecorder) BatchGetEvalTargetVersion(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvalTargetVersion", reflect.TypeOf((*MockIEvalTargetService)(nil).BatchGetEvalTargetVersion), arg0, arg1, arg2, arg3)
}

// BatchGetRecordByIDs mocks base method.
func (m *MockIEvalTargetService) BatchGetRecordByIDs(arg0 context.Context, arg1 int64, arg2 []int64) ([]*entity.EvalTargetRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetRecordByIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.EvalTargetRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetRecordByIDs indicates an expected call of BatchGetRecordByIDs.
func (mr *MockIEvalTargetServiceMockRecorder) BatchGetRecordByIDs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetRecordByIDs", reflect.TypeOf((*MockIEvalTargetService)(nil).BatchGetRecordByIDs), arg0, arg1, arg2)
}

// CreateEvalTarget mocks base method.
func (m *MockIEvalTargetService) CreateEvalTarget(arg0 context.Context, arg1 int64, arg2, arg3 string, arg4 entity.EvalTargetType, arg5 ...entity.Option) (int64, int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEvalTarget", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateEvalTarget indicates an expected call of CreateEvalTarget.
func (mr *MockIEvalTargetServiceMockRecorder) CreateEvalTarget(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvalTarget", reflect.TypeOf((*MockIEvalTargetService)(nil).CreateEvalTarget), varargs...)
}

// ExecuteTarget mocks base method.
func (m *MockIEvalTargetService) ExecuteTarget(arg0 context.Context, arg1, arg2, arg3 int64, arg4 *entity.ExecuteTargetCtx, arg5 *entity.EvalTargetInputData) (*entity.EvalTargetRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTarget", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*entity.EvalTargetRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteTarget indicates an expected call of ExecuteTarget.
func (mr *MockIEvalTargetServiceMockRecorder) ExecuteTarget(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTarget", reflect.TypeOf((*MockIEvalTargetService)(nil).ExecuteTarget), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GenerateMockOutputData mocks base method.
func (m *MockIEvalTargetService) GenerateMockOutputData(arg0 []*entity.ArgsSchema) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateMockOutputData", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateMockOutputData indicates an expected call of GenerateMockOutputData.
func (mr *MockIEvalTargetServiceMockRecorder) GenerateMockOutputData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateMockOutputData", reflect.TypeOf((*MockIEvalTargetService)(nil).GenerateMockOutputData), arg0)
}

// GetEvalTarget mocks base method.
func (m *MockIEvalTargetService) GetEvalTarget(arg0 context.Context, arg1 int64) (*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvalTarget", arg0, arg1)
	ret0, _ := ret[0].(*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvalTarget indicates an expected call of GetEvalTarget.
func (mr *MockIEvalTargetServiceMockRecorder) GetEvalTarget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvalTarget", reflect.TypeOf((*MockIEvalTargetService)(nil).GetEvalTarget), arg0, arg1)
}

// GetEvalTargetVersion mocks base method.
func (m *MockIEvalTargetService) GetEvalTargetVersion(arg0 context.Context, arg1, arg2 int64, arg3 bool) (*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvalTargetVersion", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvalTargetVersion indicates an expected call of GetEvalTargetVersion.
func (mr *MockIEvalTargetServiceMockRecorder) GetEvalTargetVersion(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvalTargetVersion", reflect.TypeOf((*MockIEvalTargetService)(nil).GetEvalTargetVersion), arg0, arg1, arg2, arg3)
}

// GetRecordByID mocks base method.
func (m *MockIEvalTargetService) GetRecordByID(arg0 context.Context, arg1, arg2 int64) (*entity.EvalTargetRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecordByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.EvalTargetRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecordByID indicates an expected call of GetRecordByID.
func (mr *MockIEvalTargetServiceMockRecorder) GetRecordByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecordByID", reflect.TypeOf((*MockIEvalTargetService)(nil).GetRecordByID), arg0, arg1, arg2)
}

// ValidateRuntimeParam mocks base method.
func (m *MockIEvalTargetService) ValidateRuntimeParam(ctx context.Context, targetType entity.EvalTargetType, runtimeParam string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateRuntimeParam", ctx, targetType, runtimeParam)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateRuntimeParam indicates an expected call of ValidateRuntimeParam.
func (mr *MockIEvalTargetServiceMockRecorder) ValidateRuntimeParam(ctx, targetType, runtimeParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateRuntimeParam", reflect.TypeOf((*MockIEvalTargetService)(nil).ValidateRuntimeParam), ctx, targetType, runtimeParam)
}

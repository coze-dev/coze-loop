// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component (interfaces: IConfiger)
//
// Generated by this command:
//
//	mockgen -destination=mocks/expt_configer.go -package=mocks . IConfiger
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIConfiger is a mock of IConfiger interface.
type MockIConfiger struct {
	ctrl     *gomock.Controller
	recorder *MockIConfigerMockRecorder
	isgomock struct{}
}

// MockIConfigerMockRecorder is the mock recorder for MockIConfiger.
type MockIConfigerMockRecorder struct {
	mock *MockIConfiger
}

// NewMockIConfiger creates a new mock instance.
func NewMockIConfiger(ctrl *gomock.Controller) *MockIConfiger {
	mock := &MockIConfiger{ctrl: ctrl}
	mock.recorder = &MockIConfigerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConfiger) EXPECT() *MockIConfigerMockRecorder {
	return m.recorder
}

// GetCKDBName mocks base method.
func (m *MockIConfiger) GetCKDBName(ctx context.Context) *entity.CKDBConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCKDBName", ctx)
	ret0, _ := ret[0].(*entity.CKDBConfig)
	return ret0
}

// GetCKDBName indicates an expected call of GetCKDBName.
func (mr *MockIConfigerMockRecorder) GetCKDBName(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCKDBName", reflect.TypeOf((*MockIConfiger)(nil).GetCKDBName), ctx)
}

// GetConsumerConf mocks base method.
func (m *MockIConfiger) GetConsumerConf(ctx context.Context) *entity.ExptConsumerConf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumerConf", ctx)
	ret0, _ := ret[0].(*entity.ExptConsumerConf)
	return ret0
}

// GetConsumerConf indicates an expected call of GetConsumerConf.
func (mr *MockIConfigerMockRecorder) GetConsumerConf(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumerConf", reflect.TypeOf((*MockIConfiger)(nil).GetConsumerConf), ctx)
}

// GetErrCtrl mocks base method.
func (m *MockIConfiger) GetErrCtrl(ctx context.Context) *entity.ExptErrCtrl {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrCtrl", ctx)
	ret0, _ := ret[0].(*entity.ExptErrCtrl)
	return ret0
}

// GetErrCtrl indicates an expected call of GetErrCtrl.
func (mr *MockIConfigerMockRecorder) GetErrCtrl(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrCtrl", reflect.TypeOf((*MockIConfiger)(nil).GetErrCtrl), ctx)
}

// GetErrRetryConf mocks base method.
func (m *MockIConfiger) GetErrRetryConf(ctx context.Context, spaceID int64, err error) *entity.RetryConf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetErrRetryConf", ctx, spaceID, err)
	ret0, _ := ret[0].(*entity.RetryConf)
	return ret0
}

// GetErrRetryConf indicates an expected call of GetErrRetryConf.
func (mr *MockIConfigerMockRecorder) GetErrRetryConf(ctx, spaceID, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetErrRetryConf", reflect.TypeOf((*MockIConfiger)(nil).GetErrRetryConf), ctx, spaceID, err)
}

// GetExptExecConf mocks base method.
func (m *MockIConfiger) GetExptExecConf(ctx context.Context, spaceID int64) *entity.ExptExecConf {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExptExecConf", ctx, spaceID)
	ret0, _ := ret[0].(*entity.ExptExecConf)
	return ret0
}

// GetExptExecConf indicates an expected call of GetExptExecConf.
func (mr *MockIConfigerMockRecorder) GetExptExecConf(ctx, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExptExecConf", reflect.TypeOf((*MockIConfiger)(nil).GetExptExecConf), ctx, spaceID)
}

// GetExptExportWhiteList mocks base method.
func (m *MockIConfiger) GetExptExportWhiteList(ctx context.Context) *entity.ExptExportWhiteList {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExptExportWhiteList", ctx)
	ret0, _ := ret[0].(*entity.ExptExportWhiteList)
	return ret0
}

// GetExptExportWhiteList indicates an expected call of GetExptExportWhiteList.
func (mr *MockIConfigerMockRecorder) GetExptExportWhiteList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExptExportWhiteList", reflect.TypeOf((*MockIConfiger)(nil).GetExptExportWhiteList), ctx)
}

// GetExptTurnResultFilterBmqProducerCfg mocks base method.
func (m *MockIConfiger) GetExptTurnResultFilterBmqProducerCfg(ctx context.Context) *entity.BmqProducerCfg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExptTurnResultFilterBmqProducerCfg", ctx)
	ret0, _ := ret[0].(*entity.BmqProducerCfg)
	return ret0
}

// GetExptTurnResultFilterBmqProducerCfg indicates an expected call of GetExptTurnResultFilterBmqProducerCfg.
func (mr *MockIConfigerMockRecorder) GetExptTurnResultFilterBmqProducerCfg(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExptTurnResultFilterBmqProducerCfg", reflect.TypeOf((*MockIConfiger)(nil).GetExptTurnResultFilterBmqProducerCfg), ctx)
}

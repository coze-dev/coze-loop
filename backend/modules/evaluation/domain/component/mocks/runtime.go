// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component (interfaces: IRuntime,IRuntimeManager,IRuntimeFactory)
//
// Generated by this command:
//
//	mockgen -destination=mocks/runtime.go -package=mocks . IRuntime,IRuntimeManager,IRuntimeFactory
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	component "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component"
	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIRuntime is a mock of IRuntime interface.
type MockIRuntime struct {
	ctrl     *gomock.Controller
	recorder *MockIRuntimeMockRecorder
	isgomock struct{}
}

// MockIRuntimeMockRecorder is the mock recorder for MockIRuntime.
type MockIRuntimeMockRecorder struct {
	mock *MockIRuntime
}

// NewMockIRuntime creates a new mock instance.
func NewMockIRuntime(ctrl *gomock.Controller) *MockIRuntime {
	mock := &MockIRuntime{ctrl: ctrl}
	mock.recorder = &MockIRuntimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRuntime) EXPECT() *MockIRuntimeMockRecorder {
	return m.recorder
}

// GetLanguageType mocks base method.
func (m *MockIRuntime) GetLanguageType() entity.LanguageType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguageType")
	ret0, _ := ret[0].(entity.LanguageType)
	return ret0
}

// GetLanguageType indicates an expected call of GetLanguageType.
func (mr *MockIRuntimeMockRecorder) GetLanguageType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguageType", reflect.TypeOf((*MockIRuntime)(nil).GetLanguageType))
}

// GetReturnValFunction mocks base method.
func (m *MockIRuntime) GetReturnValFunction() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReturnValFunction")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetReturnValFunction indicates an expected call of GetReturnValFunction.
func (mr *MockIRuntimeMockRecorder) GetReturnValFunction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReturnValFunction", reflect.TypeOf((*MockIRuntime)(nil).GetReturnValFunction))
}

// RunCode mocks base method.
func (m *MockIRuntime) RunCode(ctx context.Context, code, language string, timeoutMS int64, ext map[string]string) (*entity.ExecutionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCode", ctx, code, language, timeoutMS, ext)
	ret0, _ := ret[0].(*entity.ExecutionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunCode indicates an expected call of RunCode.
func (mr *MockIRuntimeMockRecorder) RunCode(ctx, code, language, timeoutMS, ext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCode", reflect.TypeOf((*MockIRuntime)(nil).RunCode), ctx, code, language, timeoutMS, ext)
}

// MockIRuntimeManager is a mock of IRuntimeManager interface.
type MockIRuntimeManager struct {
	ctrl     *gomock.Controller
	recorder *MockIRuntimeManagerMockRecorder
	isgomock struct{}
}

// MockIRuntimeManagerMockRecorder is the mock recorder for MockIRuntimeManager.
type MockIRuntimeManagerMockRecorder struct {
	mock *MockIRuntimeManager
}

// NewMockIRuntimeManager creates a new mock instance.
func NewMockIRuntimeManager(ctrl *gomock.Controller) *MockIRuntimeManager {
	mock := &MockIRuntimeManager{ctrl: ctrl}
	mock.recorder = &MockIRuntimeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRuntimeManager) EXPECT() *MockIRuntimeManagerMockRecorder {
	return m.recorder
}

// ClearCache mocks base method.
func (m *MockIRuntimeManager) ClearCache() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearCache")
}

// ClearCache indicates an expected call of ClearCache.
func (mr *MockIRuntimeManagerMockRecorder) ClearCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearCache", reflect.TypeOf((*MockIRuntimeManager)(nil).ClearCache))
}

// GetRuntime mocks base method.
func (m *MockIRuntimeManager) GetRuntime(languageType entity.LanguageType) (component.IRuntime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRuntime", languageType)
	ret0, _ := ret[0].(component.IRuntime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRuntime indicates an expected call of GetRuntime.
func (mr *MockIRuntimeManagerMockRecorder) GetRuntime(languageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRuntime", reflect.TypeOf((*MockIRuntimeManager)(nil).GetRuntime), languageType)
}

// GetSupportedLanguages mocks base method.
func (m *MockIRuntimeManager) GetSupportedLanguages() []entity.LanguageType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedLanguages")
	ret0, _ := ret[0].([]entity.LanguageType)
	return ret0
}

// GetSupportedLanguages indicates an expected call of GetSupportedLanguages.
func (mr *MockIRuntimeManagerMockRecorder) GetSupportedLanguages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedLanguages", reflect.TypeOf((*MockIRuntimeManager)(nil).GetSupportedLanguages))
}

// MockIRuntimeFactory is a mock of IRuntimeFactory interface.
type MockIRuntimeFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIRuntimeFactoryMockRecorder
	isgomock struct{}
}

// MockIRuntimeFactoryMockRecorder is the mock recorder for MockIRuntimeFactory.
type MockIRuntimeFactoryMockRecorder struct {
	mock *MockIRuntimeFactory
}

// NewMockIRuntimeFactory creates a new mock instance.
func NewMockIRuntimeFactory(ctrl *gomock.Controller) *MockIRuntimeFactory {
	mock := &MockIRuntimeFactory{ctrl: ctrl}
	mock.recorder = &MockIRuntimeFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRuntimeFactory) EXPECT() *MockIRuntimeFactoryMockRecorder {
	return m.recorder
}

// CreateRuntime mocks base method.
func (m *MockIRuntimeFactory) CreateRuntime(languageType entity.LanguageType) (component.IRuntime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRuntime", languageType)
	ret0, _ := ret[0].(component.IRuntime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRuntime indicates an expected call of CreateRuntime.
func (mr *MockIRuntimeFactoryMockRecorder) CreateRuntime(languageType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRuntime", reflect.TypeOf((*MockIRuntimeFactory)(nil).CreateRuntime), languageType)
}

// GetSupportedLanguages mocks base method.
func (m *MockIRuntimeFactory) GetSupportedLanguages() []entity.LanguageType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedLanguages")
	ret0, _ := ret[0].([]entity.LanguageType)
	return ret0
}

// GetSupportedLanguages indicates an expected call of GetSupportedLanguages.
func (mr *MockIRuntimeFactoryMockRecorder) GetSupportedLanguages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedLanguages", reflect.TypeOf((*MockIRuntimeFactory)(nil).GetSupportedLanguages))
}

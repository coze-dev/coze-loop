// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/idem (interfaces: IdempotentService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/idempotent_service.go -package=mocks . IdempotentService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockIdempotentService is a mock of IdempotentService interface.
type MockIdempotentService struct {
	ctrl     *gomock.Controller
	recorder *MockIdempotentServiceMockRecorder
	isgomock struct{}
}

// MockIdempotentServiceMockRecorder is the mock recorder for MockIdempotentService.
type MockIdempotentServiceMockRecorder struct {
	mock *MockIdempotentService
}

// NewMockIdempotentService creates a new mock instance.
func NewMockIdempotentService(ctrl *gomock.Controller) *MockIdempotentService {
	mock := &MockIdempotentService{ctrl: ctrl}
	mock.recorder = &MockIdempotentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdempotentService) EXPECT() *MockIdempotentServiceMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockIdempotentService) Del(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockIdempotentServiceMockRecorder) Del(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockIdempotentService)(nil).Del), ctx, key)
}

// Exist mocks base method.
func (m *MockIdempotentService) Exist(ctx context.Context, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", ctx, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exist indicates an expected call of Exist.
func (mr *MockIdempotentServiceMockRecorder) Exist(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockIdempotentService)(nil).Exist), ctx, key)
}

// Set mocks base method.
func (m *MockIdempotentService) Set(ctx context.Context, key string, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIdempotentServiceMockRecorder) Set(ctx, key, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIdempotentService)(nil).Set), ctx, key, duration)
}

// SetNX mocks base method.
func (m *MockIdempotentService) SetNX(ctx context.Context, key string, duration time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNX", ctx, key, duration)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNX indicates an expected call of SetNX.
func (mr *MockIdempotentServiceMockRecorder) SetNX(ctx, key, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNX", reflect.TypeOf((*MockIdempotentService)(nil).SetNX), ctx, key, duration)
}

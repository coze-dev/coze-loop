// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/rpc (interfaces: IDatasetRPCAdapter)
//
// Generated by this command:
//
//	mockgen -destination=mocks/data_provider.go -package=mocks . IDatasetRPCAdapter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	rpc "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/rpc"
	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIDatasetRPCAdapter is a mock of IDatasetRPCAdapter interface.
type MockIDatasetRPCAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockIDatasetRPCAdapterMockRecorder
	isgomock struct{}
}

// MockIDatasetRPCAdapterMockRecorder is the mock recorder for MockIDatasetRPCAdapter.
type MockIDatasetRPCAdapterMockRecorder struct {
	mock *MockIDatasetRPCAdapter
}

// NewMockIDatasetRPCAdapter creates a new mock instance.
func NewMockIDatasetRPCAdapter(ctrl *gomock.Controller) *MockIDatasetRPCAdapter {
	mock := &MockIDatasetRPCAdapter{ctrl: ctrl}
	mock.recorder = &MockIDatasetRPCAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatasetRPCAdapter) EXPECT() *MockIDatasetRPCAdapterMockRecorder {
	return m.recorder
}

// BatchCreateDatasetItems mocks base method.
func (m *MockIDatasetRPCAdapter) BatchCreateDatasetItems(ctx context.Context, param *rpc.BatchCreateDatasetItemsParam) (map[int64]int64, []*entity.ItemErrorGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateDatasetItems", ctx, param)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].([]*entity.ItemErrorGroup)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BatchCreateDatasetItems indicates an expected call of BatchCreateDatasetItems.
func (mr *MockIDatasetRPCAdapterMockRecorder) BatchCreateDatasetItems(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateDatasetItems", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).BatchCreateDatasetItems), ctx, param)
}

// BatchDeleteDatasetItems mocks base method.
func (m *MockIDatasetRPCAdapter) BatchDeleteDatasetItems(ctx context.Context, spaceID, evaluationSetID int64, itemIDs []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteDatasetItems", ctx, spaceID, evaluationSetID, itemIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDeleteDatasetItems indicates an expected call of BatchDeleteDatasetItems.
func (mr *MockIDatasetRPCAdapterMockRecorder) BatchDeleteDatasetItems(ctx, spaceID, evaluationSetID, itemIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteDatasetItems", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).BatchDeleteDatasetItems), ctx, spaceID, evaluationSetID, itemIDs)
}

// BatchGetDatasetItems mocks base method.
func (m *MockIDatasetRPCAdapter) BatchGetDatasetItems(ctx context.Context, param *rpc.BatchGetDatasetItemsParam) ([]*entity.EvaluationSetItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetDatasetItems", ctx, param)
	ret0, _ := ret[0].([]*entity.EvaluationSetItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDatasetItems indicates an expected call of BatchGetDatasetItems.
func (mr *MockIDatasetRPCAdapterMockRecorder) BatchGetDatasetItems(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDatasetItems", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).BatchGetDatasetItems), ctx, param)
}

// BatchGetDatasetItemsByVersion mocks base method.
func (m *MockIDatasetRPCAdapter) BatchGetDatasetItemsByVersion(ctx context.Context, param *rpc.BatchGetDatasetItemsParam) ([]*entity.EvaluationSetItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetDatasetItemsByVersion", ctx, param)
	ret0, _ := ret[0].([]*entity.EvaluationSetItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDatasetItemsByVersion indicates an expected call of BatchGetDatasetItemsByVersion.
func (mr *MockIDatasetRPCAdapterMockRecorder) BatchGetDatasetItemsByVersion(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDatasetItemsByVersion", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).BatchGetDatasetItemsByVersion), ctx, param)
}

// BatchGetDatasets mocks base method.
func (m *MockIDatasetRPCAdapter) BatchGetDatasets(ctx context.Context, spaceID *int64, evaluationSetID []int64, deletedAt *bool) ([]*entity.EvaluationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetDatasets", ctx, spaceID, evaluationSetID, deletedAt)
	ret0, _ := ret[0].([]*entity.EvaluationSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDatasets indicates an expected call of BatchGetDatasets.
func (mr *MockIDatasetRPCAdapterMockRecorder) BatchGetDatasets(ctx, spaceID, evaluationSetID, deletedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDatasets", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).BatchGetDatasets), ctx, spaceID, evaluationSetID, deletedAt)
}

// BatchGetVersionedDatasets mocks base method.
func (m *MockIDatasetRPCAdapter) BatchGetVersionedDatasets(ctx context.Context, spaceID *int64, versionIDs []int64, deletedAt *bool) ([]*rpc.BatchGetVersionedDatasetsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetVersionedDatasets", ctx, spaceID, versionIDs, deletedAt)
	ret0, _ := ret[0].([]*rpc.BatchGetVersionedDatasetsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetVersionedDatasets indicates an expected call of BatchGetVersionedDatasets.
func (mr *MockIDatasetRPCAdapterMockRecorder) BatchGetVersionedDatasets(ctx, spaceID, versionIDs, deletedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetVersionedDatasets", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).BatchGetVersionedDatasets), ctx, spaceID, versionIDs, deletedAt)
}

// ClearEvaluationSetDraftItem mocks base method.
func (m *MockIDatasetRPCAdapter) ClearEvaluationSetDraftItem(ctx context.Context, spaceID, evaluationSetID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearEvaluationSetDraftItem", ctx, spaceID, evaluationSetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearEvaluationSetDraftItem indicates an expected call of ClearEvaluationSetDraftItem.
func (mr *MockIDatasetRPCAdapterMockRecorder) ClearEvaluationSetDraftItem(ctx, spaceID, evaluationSetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearEvaluationSetDraftItem", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).ClearEvaluationSetDraftItem), ctx, spaceID, evaluationSetID)
}

// CreateDataset mocks base method.
func (m *MockIDatasetRPCAdapter) CreateDataset(ctx context.Context, param *rpc.CreateDatasetParam) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataset", ctx, param)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataset indicates an expected call of CreateDataset.
func (mr *MockIDatasetRPCAdapterMockRecorder) CreateDataset(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataset", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).CreateDataset), ctx, param)
}

// CreateDatasetVersion mocks base method.
func (m *MockIDatasetRPCAdapter) CreateDatasetVersion(ctx context.Context, spaceID, evaluationSetID int64, version string, desc *string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetVersion", ctx, spaceID, evaluationSetID, version, desc)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetVersion indicates an expected call of CreateDatasetVersion.
func (mr *MockIDatasetRPCAdapterMockRecorder) CreateDatasetVersion(ctx, spaceID, evaluationSetID, version, desc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetVersion", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).CreateDatasetVersion), ctx, spaceID, evaluationSetID, version, desc)
}

// DeleteDataset mocks base method.
func (m *MockIDatasetRPCAdapter) DeleteDataset(ctx context.Context, spaceID, evaluationSetID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataset", ctx, spaceID, evaluationSetID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataset indicates an expected call of DeleteDataset.
func (mr *MockIDatasetRPCAdapterMockRecorder) DeleteDataset(ctx, spaceID, evaluationSetID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataset", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).DeleteDataset), ctx, spaceID, evaluationSetID)
}

// GetDataset mocks base method.
func (m *MockIDatasetRPCAdapter) GetDataset(ctx context.Context, spaceID *int64, evaluationSetID int64, deletedAt *bool) (*entity.EvaluationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataset", ctx, spaceID, evaluationSetID, deletedAt)
	ret0, _ := ret[0].(*entity.EvaluationSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataset indicates an expected call of GetDataset.
func (mr *MockIDatasetRPCAdapterMockRecorder) GetDataset(ctx, spaceID, evaluationSetID, deletedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataset", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).GetDataset), ctx, spaceID, evaluationSetID, deletedAt)
}

// GetDatasetVersion mocks base method.
func (m *MockIDatasetRPCAdapter) GetDatasetVersion(ctx context.Context, spaceID, versionID int64, deletedAt *bool) (*entity.EvaluationSetVersion, *entity.EvaluationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatasetVersion", ctx, spaceID, versionID, deletedAt)
	ret0, _ := ret[0].(*entity.EvaluationSetVersion)
	ret1, _ := ret[1].(*entity.EvaluationSet)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDatasetVersion indicates an expected call of GetDatasetVersion.
func (mr *MockIDatasetRPCAdapterMockRecorder) GetDatasetVersion(ctx, spaceID, versionID, deletedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasetVersion", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).GetDatasetVersion), ctx, spaceID, versionID, deletedAt)
}

// ListDatasetItems mocks base method.
func (m *MockIDatasetRPCAdapter) ListDatasetItems(ctx context.Context, param *rpc.ListDatasetItemsParam) ([]*entity.EvaluationSetItem, *int64, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetItems", ctx, param)
	ret0, _ := ret[0].([]*entity.EvaluationSetItem)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(*string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListDatasetItems indicates an expected call of ListDatasetItems.
func (mr *MockIDatasetRPCAdapterMockRecorder) ListDatasetItems(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetItems", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).ListDatasetItems), ctx, param)
}

// ListDatasetItemsByVersion mocks base method.
func (m *MockIDatasetRPCAdapter) ListDatasetItemsByVersion(ctx context.Context, param *rpc.ListDatasetItemsParam) ([]*entity.EvaluationSetItem, *int64, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetItemsByVersion", ctx, param)
	ret0, _ := ret[0].([]*entity.EvaluationSetItem)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(*string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListDatasetItemsByVersion indicates an expected call of ListDatasetItemsByVersion.
func (mr *MockIDatasetRPCAdapterMockRecorder) ListDatasetItemsByVersion(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetItemsByVersion", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).ListDatasetItemsByVersion), ctx, param)
}

// ListDatasetVersions mocks base method.
func (m *MockIDatasetRPCAdapter) ListDatasetVersions(ctx context.Context, spaceID, evaluationSetID int64, pageToken *string, pageNumber, pageSize *int32, versionLike *string) ([]*entity.EvaluationSetVersion, *int64, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetVersions", ctx, spaceID, evaluationSetID, pageToken, pageNumber, pageSize, versionLike)
	ret0, _ := ret[0].([]*entity.EvaluationSetVersion)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(*string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListDatasetVersions indicates an expected call of ListDatasetVersions.
func (mr *MockIDatasetRPCAdapterMockRecorder) ListDatasetVersions(ctx, spaceID, evaluationSetID, pageToken, pageNumber, pageSize, versionLike any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetVersions", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).ListDatasetVersions), ctx, spaceID, evaluationSetID, pageToken, pageNumber, pageSize, versionLike)
}

// ListDatasets mocks base method.
func (m *MockIDatasetRPCAdapter) ListDatasets(ctx context.Context, param *rpc.ListDatasetsParam) ([]*entity.EvaluationSet, *int64, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasets", ctx, param)
	ret0, _ := ret[0].([]*entity.EvaluationSet)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(*string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListDatasets indicates an expected call of ListDatasets.
func (mr *MockIDatasetRPCAdapterMockRecorder) ListDatasets(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasets", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).ListDatasets), ctx, param)
}

// QueryItemSnapshotMappings mocks base method.
func (m *MockIDatasetRPCAdapter) QueryItemSnapshotMappings(arg0 context.Context, arg1, arg2 int64, arg3 *int64) ([]*entity.ItemSnapshotFieldMapping, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryItemSnapshotMappings", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entity.ItemSnapshotFieldMapping)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryItemSnapshotMappings indicates an expected call of QueryItemSnapshotMappings.
func (mr *MockIDatasetRPCAdapterMockRecorder) QueryItemSnapshotMappings(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryItemSnapshotMappings", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).QueryItemSnapshotMappings), arg0, arg1, arg2, arg3)
}

// UpdateDataset mocks base method.
func (m *MockIDatasetRPCAdapter) UpdateDataset(ctx context.Context, spaceID, evaluationSetID int64, name, desc *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataset", ctx, spaceID, evaluationSetID, name, desc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDataset indicates an expected call of UpdateDataset.
func (mr *MockIDatasetRPCAdapterMockRecorder) UpdateDataset(ctx, spaceID, evaluationSetID, name, desc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataset", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).UpdateDataset), ctx, spaceID, evaluationSetID, name, desc)
}

// UpdateDatasetItem mocks base method.
func (m *MockIDatasetRPCAdapter) UpdateDatasetItem(ctx context.Context, spaceID, evaluationSetID, itemID int64, turns []*entity.Turn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatasetItem", ctx, spaceID, evaluationSetID, itemID, turns)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDatasetItem indicates an expected call of UpdateDatasetItem.
func (mr *MockIDatasetRPCAdapterMockRecorder) UpdateDatasetItem(ctx, spaceID, evaluationSetID, itemID, turns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetItem", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).UpdateDatasetItem), ctx, spaceID, evaluationSetID, itemID, turns)
}

// UpdateDatasetSchema mocks base method.
func (m *MockIDatasetRPCAdapter) UpdateDatasetSchema(ctx context.Context, spaceID, evaluationSetID int64, schemas []*entity.FieldSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatasetSchema", ctx, spaceID, evaluationSetID, schemas)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDatasetSchema indicates an expected call of UpdateDatasetSchema.
func (mr *MockIDatasetRPCAdapterMockRecorder) UpdateDatasetSchema(ctx, spaceID, evaluationSetID, schemas any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetSchema", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).UpdateDatasetSchema), ctx, spaceID, evaluationSetID, schemas)
}

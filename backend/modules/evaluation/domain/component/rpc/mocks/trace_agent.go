// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/rpc (interfaces: IAgentAdapter)
//
// Generated by this command:
//
//	mockgen -destination=mocks/trace_agent.go -package=mocks . IAgentAdapter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIAgentAdapter is a mock of IAgentAdapter interface.
type MockIAgentAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockIAgentAdapterMockRecorder
	isgomock struct{}
}

// MockIAgentAdapterMockRecorder is the mock recorder for MockIAgentAdapter.
type MockIAgentAdapterMockRecorder struct {
	mock *MockIAgentAdapter
}

// NewMockIAgentAdapter creates a new mock instance.
func NewMockIAgentAdapter(ctrl *gomock.Controller) *MockIAgentAdapter {
	mock := &MockIAgentAdapter{ctrl: ctrl}
	mock.recorder = &MockIAgentAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAgentAdapter) EXPECT() *MockIAgentAdapterMockRecorder {
	return m.recorder
}

// CallTraceAgent mocks base method.
func (m *MockIAgentAdapter) CallTraceAgent(ctx context.Context, spaceID int64, url string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallTraceAgent", ctx, spaceID, url)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallTraceAgent indicates an expected call of CallTraceAgent.
func (mr *MockIAgentAdapterMockRecorder) CallTraceAgent(ctx, spaceID, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallTraceAgent", reflect.TypeOf((*MockIAgentAdapter)(nil).CallTraceAgent), ctx, spaceID, url)
}

// GetReport mocks base method.
func (m *MockIAgentAdapter) GetReport(ctx context.Context, spaceID, reportID int64) (string, entity.ReportStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport", ctx, spaceID, reportID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(entity.ReportStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetReport indicates an expected call of GetReport.
func (mr *MockIAgentAdapterMockRecorder) GetReport(ctx, spaceID, reportID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockIAgentAdapter)(nil).GetReport), ctx, spaceID, reportID)
}

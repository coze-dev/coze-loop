// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/rpc (interfaces: INotifyRPCAdapter)
//
// Generated by this command:
//
//	mockgen -destination=mocks/notify.go -package=mocks . INotifyRPCAdapter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockINotifyRPCAdapter is a mock of INotifyRPCAdapter interface.
type MockINotifyRPCAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockINotifyRPCAdapterMockRecorder
	isgomock struct{}
}

// MockINotifyRPCAdapterMockRecorder is the mock recorder for MockINotifyRPCAdapter.
type MockINotifyRPCAdapterMockRecorder struct {
	mock *MockINotifyRPCAdapter
}

// NewMockINotifyRPCAdapter creates a new mock instance.
func NewMockINotifyRPCAdapter(ctrl *gomock.Controller) *MockINotifyRPCAdapter {
	mock := &MockINotifyRPCAdapter{ctrl: ctrl}
	mock.recorder = &MockINotifyRPCAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINotifyRPCAdapter) EXPECT() *MockINotifyRPCAdapterMockRecorder {
	return m.recorder
}

// SendMessageCard mocks base method.
func (m *MockINotifyRPCAdapter) SendMessageCard(ctx context.Context, userID, cardID string, param map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageCard", ctx, userID, cardID, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessageCard indicates an expected call of SendMessageCard.
func (mr *MockINotifyRPCAdapterMockRecorder) SendMessageCard(ctx, userID, cardID, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageCard", reflect.TypeOf((*MockINotifyRPCAdapter)(nil).SendMessageCard), ctx, userID, cardID, param)
}

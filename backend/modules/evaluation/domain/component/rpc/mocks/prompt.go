// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/rpc (interfaces: IPromptRPCAdapter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	rpc "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockIPromptRPCAdapter is a mock of IPromptRPCAdapter interface.
type MockIPromptRPCAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockIPromptRPCAdapterMockRecorder
}

// MockIPromptRPCAdapterMockRecorder is the mock recorder for MockIPromptRPCAdapter.
type MockIPromptRPCAdapterMockRecorder struct {
	mock *MockIPromptRPCAdapter
}

// NewMockIPromptRPCAdapter creates a new mock instance.
func NewMockIPromptRPCAdapter(ctrl *gomock.Controller) *MockIPromptRPCAdapter {
	mock := &MockIPromptRPCAdapter{ctrl: ctrl}
	mock.recorder = &MockIPromptRPCAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPromptRPCAdapter) EXPECT() *MockIPromptRPCAdapterMockRecorder {
	return m.recorder
}

// ExecutePrompt mocks base method.
func (m *MockIPromptRPCAdapter) ExecutePrompt(arg0 context.Context, arg1 int64, arg2 *rpc.ExecutePromptParam) (*rpc.ExecutePromptResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecutePrompt", arg0, arg1, arg2)
	ret0, _ := ret[0].(*rpc.ExecutePromptResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecutePrompt indicates an expected call of ExecutePrompt.
func (mr *MockIPromptRPCAdapterMockRecorder) ExecutePrompt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutePrompt", reflect.TypeOf((*MockIPromptRPCAdapter)(nil).ExecutePrompt), arg0, arg1, arg2)
}

// GetPrompt mocks base method.
func (m *MockIPromptRPCAdapter) GetPrompt(arg0 context.Context, arg1, arg2 int64, arg3 rpc.GetPromptParams) (*rpc.LoopPrompt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrompt", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*rpc.LoopPrompt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrompt indicates an expected call of GetPrompt.
func (mr *MockIPromptRPCAdapterMockRecorder) GetPrompt(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrompt", reflect.TypeOf((*MockIPromptRPCAdapter)(nil).GetPrompt), arg0, arg1, arg2, arg3)
}

// ListPrompt mocks base method.
func (m *MockIPromptRPCAdapter) ListPrompt(arg0 context.Context, arg1 *rpc.ListPromptParam) ([]*rpc.LoopPrompt, *int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPrompt", arg0, arg1)
	ret0, _ := ret[0].([]*rpc.LoopPrompt)
	ret1, _ := ret[1].(*int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPrompt indicates an expected call of ListPrompt.
func (mr *MockIPromptRPCAdapterMockRecorder) ListPrompt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPrompt", reflect.TypeOf((*MockIPromptRPCAdapter)(nil).ListPrompt), arg0, arg1)
}

// ListPromptVersion mocks base method.
func (m *MockIPromptRPCAdapter) ListPromptVersion(arg0 context.Context, arg1 *rpc.ListPromptVersionParam) ([]*rpc.CommitInfo, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPromptVersion", arg0, arg1)
	ret0, _ := ret[0].([]*rpc.CommitInfo)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListPromptVersion indicates an expected call of ListPromptVersion.
func (mr *MockIPromptRPCAdapterMockRecorder) ListPromptVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPromptVersion", reflect.TypeOf((*MockIPromptRPCAdapter)(nil).ListPromptVersion), arg0, arg1)
}

// MGetPrompt mocks base method.
func (m *MockIPromptRPCAdapter) MGetPrompt(arg0 context.Context, arg1 int64, arg2 []*rpc.MGetPromptQuery) ([]*rpc.LoopPrompt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetPrompt", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*rpc.LoopPrompt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetPrompt indicates an expected call of MGetPrompt.
func (mr *MockIPromptRPCAdapterMockRecorder) MGetPrompt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetPrompt", reflect.TypeOf((*MockIPromptRPCAdapter)(nil).MGetPrompt), arg0, arg1, arg2)
}

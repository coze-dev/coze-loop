// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/metrics (interfaces: EvalTargetMetrics)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockEvalTargetMetrics is a mock of EvalTargetMetrics interface.
type MockEvalTargetMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockEvalTargetMetricsMockRecorder
}

// MockEvalTargetMetricsMockRecorder is the mock recorder for MockEvalTargetMetrics.
type MockEvalTargetMetricsMockRecorder struct {
	mock *MockEvalTargetMetrics
}

// NewMockEvalTargetMetrics creates a new mock instance.
func NewMockEvalTargetMetrics(ctrl *gomock.Controller) *MockEvalTargetMetrics {
	mock := &MockEvalTargetMetrics{ctrl: ctrl}
	mock.recorder = &MockEvalTargetMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvalTargetMetrics) EXPECT() *MockEvalTargetMetricsMockRecorder {
	return m.recorder
}

// EmitCreate mocks base method.
func (m *MockEvalTargetMetrics) EmitCreate(arg0 int64, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitCreate", arg0, arg1)
}

// EmitCreate indicates an expected call of EmitCreate.
func (mr *MockEvalTargetMetricsMockRecorder) EmitCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitCreate", reflect.TypeOf((*MockEvalTargetMetrics)(nil).EmitCreate), arg0, arg1)
}

// EmitRun mocks base method.
func (m *MockEvalTargetMetrics) EmitRun(arg0 int64, arg1 error, arg2 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitRun", arg0, arg1, arg2)
}

// EmitRun indicates an expected call of EmitRun.
func (mr *MockEvalTargetMetricsMockRecorder) EmitRun(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitRun", reflect.TypeOf((*MockEvalTargetMetrics)(nil).EmitRun), arg0, arg1, arg2)
}

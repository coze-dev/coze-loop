// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/metrics (interfaces: EvaluatorExecMetrics)
//
// Generated by this command:
//
//	mockgen -destination=mocks/evaluator.go -package=mocks . EvaluatorExecMetrics
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockEvaluatorExecMetrics is a mock of EvaluatorExecMetrics interface.
type MockEvaluatorExecMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluatorExecMetricsMockRecorder
	isgomock struct{}
}

// MockEvaluatorExecMetricsMockRecorder is the mock recorder for MockEvaluatorExecMetrics.
type MockEvaluatorExecMetricsMockRecorder struct {
	mock *MockEvaluatorExecMetrics
}

// NewMockEvaluatorExecMetrics creates a new mock instance.
func NewMockEvaluatorExecMetrics(ctrl *gomock.Controller) *MockEvaluatorExecMetrics {
	mock := &MockEvaluatorExecMetrics{ctrl: ctrl}
	mock.recorder = &MockEvaluatorExecMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluatorExecMetrics) EXPECT() *MockEvaluatorExecMetricsMockRecorder {
	return m.recorder
}

// EmitCreate mocks base method.
func (m *MockEvaluatorExecMetrics) EmitCreate(spaceID int64, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitCreate", spaceID, err)
}

// EmitCreate indicates an expected call of EmitCreate.
func (mr *MockEvaluatorExecMetricsMockRecorder) EmitCreate(spaceID, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitCreate", reflect.TypeOf((*MockEvaluatorExecMetrics)(nil).EmitCreate), spaceID, err)
}

// EmitRun mocks base method.
func (m *MockEvaluatorExecMetrics) EmitRun(spaceID int64, err error, start time.Time, modelName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitRun", spaceID, err, start, modelName)
}

// EmitRun indicates an expected call of EmitRun.
func (mr *MockEvaluatorExecMetricsMockRecorder) EmitRun(spaceID, err, start, modelName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitRun", reflect.TypeOf((*MockEvaluatorExecMetrics)(nil).EmitRun), spaceID, err, start, modelName)
}

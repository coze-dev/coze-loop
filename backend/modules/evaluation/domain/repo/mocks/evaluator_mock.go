// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/repo (interfaces: IEvaluatorRepo)
//
// Generated by this command:
//
//	mockgen -destination mocks/evaluator_mock.go -package mocks . IEvaluatorRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	repo "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/repo"
	gomock "go.uber.org/mock/gomock"
)

// MockIEvaluatorRepo is a mock of IEvaluatorRepo interface.
type MockIEvaluatorRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIEvaluatorRepoMockRecorder
	isgomock struct{}
}

// MockIEvaluatorRepoMockRecorder is the mock recorder for MockIEvaluatorRepo.
type MockIEvaluatorRepoMockRecorder struct {
	mock *MockIEvaluatorRepo
}

// NewMockIEvaluatorRepo creates a new mock instance.
func NewMockIEvaluatorRepo(ctrl *gomock.Controller) *MockIEvaluatorRepo {
	mock := &MockIEvaluatorRepo{ctrl: ctrl}
	mock.recorder = &MockIEvaluatorRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEvaluatorRepo) EXPECT() *MockIEvaluatorRepoMockRecorder {
	return m.recorder
}

// BatchDeleteEvaluator mocks base method.
func (m *MockIEvaluatorRepo) BatchDeleteEvaluator(ctx context.Context, ids []int64, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteEvaluator", ctx, ids, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDeleteEvaluator indicates an expected call of BatchDeleteEvaluator.
func (mr *MockIEvaluatorRepoMockRecorder) BatchDeleteEvaluator(ctx, ids, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteEvaluator", reflect.TypeOf((*MockIEvaluatorRepo)(nil).BatchDeleteEvaluator), ctx, ids, userID)
}

// BatchGetEvaluatorByVersionID mocks base method.
func (m *MockIEvaluatorRepo) BatchGetEvaluatorByVersionID(ctx context.Context, spaceID *int64, ids []int64, includeDeleted bool) ([]*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluatorByVersionID", ctx, spaceID, ids, includeDeleted)
	ret0, _ := ret[0].([]*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluatorByVersionID indicates an expected call of BatchGetEvaluatorByVersionID.
func (mr *MockIEvaluatorRepoMockRecorder) BatchGetEvaluatorByVersionID(ctx, spaceID, ids, includeDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluatorByVersionID", reflect.TypeOf((*MockIEvaluatorRepo)(nil).BatchGetEvaluatorByVersionID), ctx, spaceID, ids, includeDeleted)
}

// BatchGetEvaluatorDraftByEvaluatorID mocks base method.
func (m *MockIEvaluatorRepo) BatchGetEvaluatorDraftByEvaluatorID(ctx context.Context, spaceID int64, ids []int64, includeDeleted bool) ([]*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluatorDraftByEvaluatorID", ctx, spaceID, ids, includeDeleted)
	ret0, _ := ret[0].([]*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluatorDraftByEvaluatorID indicates an expected call of BatchGetEvaluatorDraftByEvaluatorID.
func (mr *MockIEvaluatorRepoMockRecorder) BatchGetEvaluatorDraftByEvaluatorID(ctx, spaceID, ids, includeDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluatorDraftByEvaluatorID", reflect.TypeOf((*MockIEvaluatorRepo)(nil).BatchGetEvaluatorDraftByEvaluatorID), ctx, spaceID, ids, includeDeleted)
}

// BatchGetEvaluatorMetaByID mocks base method.
func (m *MockIEvaluatorRepo) BatchGetEvaluatorMetaByID(ctx context.Context, ids []int64, includeDeleted bool) ([]*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluatorMetaByID", ctx, ids, includeDeleted)
	ret0, _ := ret[0].([]*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluatorMetaByID indicates an expected call of BatchGetEvaluatorMetaByID.
func (mr *MockIEvaluatorRepoMockRecorder) BatchGetEvaluatorMetaByID(ctx, ids, includeDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluatorMetaByID", reflect.TypeOf((*MockIEvaluatorRepo)(nil).BatchGetEvaluatorMetaByID), ctx, ids, includeDeleted)
}

// BatchGetEvaluatorVersionsByEvaluatorIDs mocks base method.
func (m *MockIEvaluatorRepo) BatchGetEvaluatorVersionsByEvaluatorIDs(ctx context.Context, evaluatorIDs []int64, includeDeleted bool) ([]*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluatorVersionsByEvaluatorIDs", ctx, evaluatorIDs, includeDeleted)
	ret0, _ := ret[0].([]*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluatorVersionsByEvaluatorIDs indicates an expected call of BatchGetEvaluatorVersionsByEvaluatorIDs.
func (mr *MockIEvaluatorRepoMockRecorder) BatchGetEvaluatorVersionsByEvaluatorIDs(ctx, evaluatorIDs, includeDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluatorVersionsByEvaluatorIDs", reflect.TypeOf((*MockIEvaluatorRepo)(nil).BatchGetEvaluatorVersionsByEvaluatorIDs), ctx, evaluatorIDs, includeDeleted)
}

// CheckNameExist mocks base method.
func (m *MockIEvaluatorRepo) CheckNameExist(ctx context.Context, spaceID, evaluatorID int64, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNameExist", ctx, spaceID, evaluatorID, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNameExist indicates an expected call of CheckNameExist.
func (mr *MockIEvaluatorRepoMockRecorder) CheckNameExist(ctx, spaceID, evaluatorID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNameExist", reflect.TypeOf((*MockIEvaluatorRepo)(nil).CheckNameExist), ctx, spaceID, evaluatorID, name)
}

// CheckVersionExist mocks base method.
func (m *MockIEvaluatorRepo) CheckVersionExist(ctx context.Context, evaluatorID int64, version string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckVersionExist", ctx, evaluatorID, version)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckVersionExist indicates an expected call of CheckVersionExist.
func (mr *MockIEvaluatorRepoMockRecorder) CheckVersionExist(ctx, evaluatorID, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVersionExist", reflect.TypeOf((*MockIEvaluatorRepo)(nil).CheckVersionExist), ctx, evaluatorID, version)
}

// CreateEvaluator mocks base method.
func (m *MockIEvaluatorRepo) CreateEvaluator(ctx context.Context, evaluator *entity.Evaluator) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvaluator", ctx, evaluator)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvaluator indicates an expected call of CreateEvaluator.
func (mr *MockIEvaluatorRepoMockRecorder) CreateEvaluator(ctx, evaluator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluator", reflect.TypeOf((*MockIEvaluatorRepo)(nil).CreateEvaluator), ctx, evaluator)
}

// ListEvaluator mocks base method.
func (m *MockIEvaluatorRepo) ListEvaluator(ctx context.Context, req *repo.ListEvaluatorRequest) (*repo.ListEvaluatorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvaluator", ctx, req)
	ret0, _ := ret[0].(*repo.ListEvaluatorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvaluator indicates an expected call of ListEvaluator.
func (mr *MockIEvaluatorRepoMockRecorder) ListEvaluator(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvaluator", reflect.TypeOf((*MockIEvaluatorRepo)(nil).ListEvaluator), ctx, req)
}

// ListEvaluatorVersion mocks base method.
func (m *MockIEvaluatorRepo) ListEvaluatorVersion(ctx context.Context, req *repo.ListEvaluatorVersionRequest) (*repo.ListEvaluatorVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvaluatorVersion", ctx, req)
	ret0, _ := ret[0].(*repo.ListEvaluatorVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvaluatorVersion indicates an expected call of ListEvaluatorVersion.
func (mr *MockIEvaluatorRepoMockRecorder) ListEvaluatorVersion(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvaluatorVersion", reflect.TypeOf((*MockIEvaluatorRepo)(nil).ListEvaluatorVersion), ctx, req)
}

// SubmitEvaluatorVersion mocks base method.
func (m *MockIEvaluatorRepo) SubmitEvaluatorVersion(ctx context.Context, evaluatorVersionDO *entity.Evaluator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitEvaluatorVersion", ctx, evaluatorVersionDO)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitEvaluatorVersion indicates an expected call of SubmitEvaluatorVersion.
func (mr *MockIEvaluatorRepoMockRecorder) SubmitEvaluatorVersion(ctx, evaluatorVersionDO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitEvaluatorVersion", reflect.TypeOf((*MockIEvaluatorRepo)(nil).SubmitEvaluatorVersion), ctx, evaluatorVersionDO)
}

// UpdateEvaluatorDraft mocks base method.
func (m *MockIEvaluatorRepo) UpdateEvaluatorDraft(ctx context.Context, version *entity.Evaluator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvaluatorDraft", ctx, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvaluatorDraft indicates an expected call of UpdateEvaluatorDraft.
func (mr *MockIEvaluatorRepoMockRecorder) UpdateEvaluatorDraft(ctx, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluatorDraft", reflect.TypeOf((*MockIEvaluatorRepo)(nil).UpdateEvaluatorDraft), ctx, version)
}

// UpdateEvaluatorMeta mocks base method.
func (m *MockIEvaluatorRepo) UpdateEvaluatorMeta(ctx context.Context, id int64, name, description, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvaluatorMeta", ctx, id, name, description, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvaluatorMeta indicates an expected call of UpdateEvaluatorMeta.
func (mr *MockIEvaluatorRepoMockRecorder) UpdateEvaluatorMeta(ctx, id, name, description, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluatorMeta", reflect.TypeOf((*MockIEvaluatorRepo)(nil).UpdateEvaluatorMeta), ctx, id, name, description, userID)
}

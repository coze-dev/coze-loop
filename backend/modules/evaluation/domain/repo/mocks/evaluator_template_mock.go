// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/repo (interfaces: EvaluatorTemplateRepo)
//
// Generated by this command:
//
//	mockgen -destination mocks/evaluator_template_mock.go -package=mocks . EvaluatorTemplateRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	repo "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/repo"
	gomock "go.uber.org/mock/gomock"
)

// MockEvaluatorTemplateRepo is a mock of EvaluatorTemplateRepo interface.
type MockEvaluatorTemplateRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluatorTemplateRepoMockRecorder
	isgomock struct{}
}

// MockEvaluatorTemplateRepoMockRecorder is the mock recorder for MockEvaluatorTemplateRepo.
type MockEvaluatorTemplateRepoMockRecorder struct {
	mock *MockEvaluatorTemplateRepo
}

// NewMockEvaluatorTemplateRepo creates a new mock instance.
func NewMockEvaluatorTemplateRepo(ctrl *gomock.Controller) *MockEvaluatorTemplateRepo {
	mock := &MockEvaluatorTemplateRepo{ctrl: ctrl}
	mock.recorder = &MockEvaluatorTemplateRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluatorTemplateRepo) EXPECT() *MockEvaluatorTemplateRepoMockRecorder {
	return m.recorder
}

// CreateEvaluatorTemplate mocks base method.
func (m *MockEvaluatorTemplateRepo) CreateEvaluatorTemplate(ctx context.Context, template *entity.EvaluatorTemplate) (*entity.EvaluatorTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvaluatorTemplate", ctx, template)
	ret0, _ := ret[0].(*entity.EvaluatorTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvaluatorTemplate indicates an expected call of CreateEvaluatorTemplate.
func (mr *MockEvaluatorTemplateRepoMockRecorder) CreateEvaluatorTemplate(ctx, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluatorTemplate", reflect.TypeOf((*MockEvaluatorTemplateRepo)(nil).CreateEvaluatorTemplate), ctx, template)
}

// DeleteEvaluatorTemplate mocks base method.
func (m *MockEvaluatorTemplateRepo) DeleteEvaluatorTemplate(ctx context.Context, id int64, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvaluatorTemplate", ctx, id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvaluatorTemplate indicates an expected call of DeleteEvaluatorTemplate.
func (mr *MockEvaluatorTemplateRepoMockRecorder) DeleteEvaluatorTemplate(ctx, id, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvaluatorTemplate", reflect.TypeOf((*MockEvaluatorTemplateRepo)(nil).DeleteEvaluatorTemplate), ctx, id, userID)
}

// GetEvaluatorTemplate mocks base method.
func (m *MockEvaluatorTemplateRepo) GetEvaluatorTemplate(ctx context.Context, id int64, includeDeleted bool) (*entity.EvaluatorTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluatorTemplate", ctx, id, includeDeleted)
	ret0, _ := ret[0].(*entity.EvaluatorTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluatorTemplate indicates an expected call of GetEvaluatorTemplate.
func (mr *MockEvaluatorTemplateRepoMockRecorder) GetEvaluatorTemplate(ctx, id, includeDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluatorTemplate", reflect.TypeOf((*MockEvaluatorTemplateRepo)(nil).GetEvaluatorTemplate), ctx, id, includeDeleted)
}

// IncrPopularityByID mocks base method.
func (m *MockEvaluatorTemplateRepo) IncrPopularityByID(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrPopularityByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrPopularityByID indicates an expected call of IncrPopularityByID.
func (mr *MockEvaluatorTemplateRepoMockRecorder) IncrPopularityByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrPopularityByID", reflect.TypeOf((*MockEvaluatorTemplateRepo)(nil).IncrPopularityByID), ctx, id)
}

// ListEvaluatorTemplate mocks base method.
func (m *MockEvaluatorTemplateRepo) ListEvaluatorTemplate(ctx context.Context, req *repo.ListEvaluatorTemplateRequest) (*repo.ListEvaluatorTemplateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvaluatorTemplate", ctx, req)
	ret0, _ := ret[0].(*repo.ListEvaluatorTemplateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvaluatorTemplate indicates an expected call of ListEvaluatorTemplate.
func (mr *MockEvaluatorTemplateRepoMockRecorder) ListEvaluatorTemplate(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvaluatorTemplate", reflect.TypeOf((*MockEvaluatorTemplateRepo)(nil).ListEvaluatorTemplate), ctx, req)
}

// UpdateEvaluatorTemplate mocks base method.
func (m *MockEvaluatorTemplateRepo) UpdateEvaluatorTemplate(ctx context.Context, template *entity.EvaluatorTemplate) (*entity.EvaluatorTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvaluatorTemplate", ctx, template)
	ret0, _ := ret[0].(*entity.EvaluatorTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvaluatorTemplate indicates an expected call of UpdateEvaluatorTemplate.
func (mr *MockEvaluatorTemplateRepoMockRecorder) UpdateEvaluatorTemplate(ctx, template any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluatorTemplate", reflect.TypeOf((*MockEvaluatorTemplateRepo)(nil).UpdateEvaluatorTemplate), ctx, template)
}

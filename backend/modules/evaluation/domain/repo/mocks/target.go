// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/repo (interfaces: IEvalTargetRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	repo "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/repo"
	gomock "go.uber.org/mock/gomock"
)

// MockIEvalTargetRepo is a mock of IEvalTargetRepo interface.
type MockIEvalTargetRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIEvalTargetRepoMockRecorder
}

// MockIEvalTargetRepoMockRecorder is the mock recorder for MockIEvalTargetRepo.
type MockIEvalTargetRepoMockRecorder struct {
	mock *MockIEvalTargetRepo
}

// NewMockIEvalTargetRepo creates a new mock instance.
func NewMockIEvalTargetRepo(ctrl *gomock.Controller) *MockIEvalTargetRepo {
	mock := &MockIEvalTargetRepo{ctrl: ctrl}
	mock.recorder = &MockIEvalTargetRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEvalTargetRepo) EXPECT() *MockIEvalTargetRepoMockRecorder {
	return m.recorder
}

// BatchGetEvalTargetBySource mocks base method.
func (m *MockIEvalTargetRepo) BatchGetEvalTargetBySource(arg0 context.Context, arg1 *repo.BatchGetEvalTargetBySourceParam) ([]*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvalTargetBySource", arg0, arg1)
	ret0, _ := ret[0].([]*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvalTargetBySource indicates an expected call of BatchGetEvalTargetBySource.
func (mr *MockIEvalTargetRepoMockRecorder) BatchGetEvalTargetBySource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvalTargetBySource", reflect.TypeOf((*MockIEvalTargetRepo)(nil).BatchGetEvalTargetBySource), arg0, arg1)
}

// BatchGetEvalTargetVersion mocks base method.
func (m *MockIEvalTargetRepo) BatchGetEvalTargetVersion(arg0 context.Context, arg1 int64, arg2 []int64) ([]*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvalTargetVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvalTargetVersion indicates an expected call of BatchGetEvalTargetVersion.
func (mr *MockIEvalTargetRepoMockRecorder) BatchGetEvalTargetVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvalTargetVersion", reflect.TypeOf((*MockIEvalTargetRepo)(nil).BatchGetEvalTargetVersion), arg0, arg1, arg2)
}

// CreateEvalTarget mocks base method.
func (m *MockIEvalTargetRepo) CreateEvalTarget(arg0 context.Context, arg1 *entity.EvalTarget) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvalTarget", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateEvalTarget indicates an expected call of CreateEvalTarget.
func (mr *MockIEvalTargetRepoMockRecorder) CreateEvalTarget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvalTarget", reflect.TypeOf((*MockIEvalTargetRepo)(nil).CreateEvalTarget), arg0, arg1)
}

// CreateEvalTargetRecord mocks base method.
func (m *MockIEvalTargetRepo) CreateEvalTargetRecord(arg0 context.Context, arg1 *entity.EvalTargetRecord) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvalTargetRecord", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvalTargetRecord indicates an expected call of CreateEvalTargetRecord.
func (mr *MockIEvalTargetRepoMockRecorder) CreateEvalTargetRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvalTargetRecord", reflect.TypeOf((*MockIEvalTargetRepo)(nil).CreateEvalTargetRecord), arg0, arg1)
}

// GetEvalTarget mocks base method.
func (m *MockIEvalTargetRepo) GetEvalTarget(arg0 context.Context, arg1 int64) (*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvalTarget", arg0, arg1)
	ret0, _ := ret[0].(*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvalTarget indicates an expected call of GetEvalTarget.
func (mr *MockIEvalTargetRepoMockRecorder) GetEvalTarget(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvalTarget", reflect.TypeOf((*MockIEvalTargetRepo)(nil).GetEvalTarget), arg0, arg1)
}

// GetEvalTargetRecordByIDAndSpaceID mocks base method.
func (m *MockIEvalTargetRepo) GetEvalTargetRecordByIDAndSpaceID(arg0 context.Context, arg1, arg2 int64) (*entity.EvalTargetRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvalTargetRecordByIDAndSpaceID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.EvalTargetRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvalTargetRecordByIDAndSpaceID indicates an expected call of GetEvalTargetRecordByIDAndSpaceID.
func (mr *MockIEvalTargetRepoMockRecorder) GetEvalTargetRecordByIDAndSpaceID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvalTargetRecordByIDAndSpaceID", reflect.TypeOf((*MockIEvalTargetRepo)(nil).GetEvalTargetRecordByIDAndSpaceID), arg0, arg1, arg2)
}

// GetEvalTargetVersion mocks base method.
func (m *MockIEvalTargetRepo) GetEvalTargetVersion(arg0 context.Context, arg1, arg2 int64) (*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvalTargetVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvalTargetVersion indicates an expected call of GetEvalTargetVersion.
func (mr *MockIEvalTargetRepoMockRecorder) GetEvalTargetVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvalTargetVersion", reflect.TypeOf((*MockIEvalTargetRepo)(nil).GetEvalTargetVersion), arg0, arg1, arg2)
}

// ListEvalTargetRecordByIDsAndSpaceID mocks base method.
func (m *MockIEvalTargetRepo) ListEvalTargetRecordByIDsAndSpaceID(arg0 context.Context, arg1 int64, arg2 []int64) ([]*entity.EvalTargetRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvalTargetRecordByIDsAndSpaceID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.EvalTargetRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvalTargetRecordByIDsAndSpaceID indicates an expected call of ListEvalTargetRecordByIDsAndSpaceID.
func (mr *MockIEvalTargetRepoMockRecorder) ListEvalTargetRecordByIDsAndSpaceID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvalTargetRecordByIDsAndSpaceID", reflect.TypeOf((*MockIEvalTargetRepo)(nil).ListEvalTargetRecordByIDsAndSpaceID), arg0, arg1, arg2)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/events (interfaces: ExptEventPublisher)
//
// Generated by this command:
//
//	mockgen -destination mocks/expt_event_publisher_mock.go -package mocks . ExptEventPublisher
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockExptEventPublisher is a mock of ExptEventPublisher interface.
type MockExptEventPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockExptEventPublisherMockRecorder
	isgomock struct{}
}

// MockExptEventPublisherMockRecorder is the mock recorder for MockExptEventPublisher.
type MockExptEventPublisherMockRecorder struct {
	mock *MockExptEventPublisher
}

// NewMockExptEventPublisher creates a new mock instance.
func NewMockExptEventPublisher(ctrl *gomock.Controller) *MockExptEventPublisher {
	mock := &MockExptEventPublisher{ctrl: ctrl}
	mock.recorder = &MockExptEventPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExptEventPublisher) EXPECT() *MockExptEventPublisherMockRecorder {
	return m.recorder
}

// BatchPublishExptRecordEvalEvent mocks base method.
func (m *MockExptEventPublisher) BatchPublishExptRecordEvalEvent(ctx context.Context, events []*entity.ExptItemEvalEvent, duration *time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPublishExptRecordEvalEvent", ctx, events, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchPublishExptRecordEvalEvent indicates an expected call of BatchPublishExptRecordEvalEvent.
func (mr *MockExptEventPublisherMockRecorder) BatchPublishExptRecordEvalEvent(ctx, events, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPublishExptRecordEvalEvent", reflect.TypeOf((*MockExptEventPublisher)(nil).BatchPublishExptRecordEvalEvent), ctx, events, duration)
}

// PublishExptAggrCalculateEvent mocks base method.
func (m *MockExptEventPublisher) PublishExptAggrCalculateEvent(ctx context.Context, events []*entity.AggrCalculateEvent, duration *time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishExptAggrCalculateEvent", ctx, events, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishExptAggrCalculateEvent indicates an expected call of PublishExptAggrCalculateEvent.
func (mr *MockExptEventPublisherMockRecorder) PublishExptAggrCalculateEvent(ctx, events, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishExptAggrCalculateEvent", reflect.TypeOf((*MockExptEventPublisher)(nil).PublishExptAggrCalculateEvent), ctx, events, duration)
}

// PublishExptExportCSVEvent mocks base method.
func (m *MockExptEventPublisher) PublishExptExportCSVEvent(ctx context.Context, events *entity.ExportCSVEvent, duration *time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishExptExportCSVEvent", ctx, events, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishExptExportCSVEvent indicates an expected call of PublishExptExportCSVEvent.
func (mr *MockExptEventPublisherMockRecorder) PublishExptExportCSVEvent(ctx, events, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishExptExportCSVEvent", reflect.TypeOf((*MockExptEventPublisher)(nil).PublishExptExportCSVEvent), ctx, events, duration)
}

// PublishExptOnlineEvalResult mocks base method.
func (m *MockExptEventPublisher) PublishExptOnlineEvalResult(ctx context.Context, events *entity.OnlineExptEvalResultEvent, duration *time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishExptOnlineEvalResult", ctx, events, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishExptOnlineEvalResult indicates an expected call of PublishExptOnlineEvalResult.
func (mr *MockExptEventPublisherMockRecorder) PublishExptOnlineEvalResult(ctx, events, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishExptOnlineEvalResult", reflect.TypeOf((*MockExptEventPublisher)(nil).PublishExptOnlineEvalResult), ctx, events, duration)
}

// PublishExptRecordEvalEvent mocks base method.
func (m *MockExptEventPublisher) PublishExptRecordEvalEvent(ctx context.Context, event *entity.ExptItemEvalEvent, duration *time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishExptRecordEvalEvent", ctx, event, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishExptRecordEvalEvent indicates an expected call of PublishExptRecordEvalEvent.
func (mr *MockExptEventPublisherMockRecorder) PublishExptRecordEvalEvent(ctx, event, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishExptRecordEvalEvent", reflect.TypeOf((*MockExptEventPublisher)(nil).PublishExptRecordEvalEvent), ctx, event, duration)
}

// PublishExptScheduleEvent mocks base method.
func (m *MockExptEventPublisher) PublishExptScheduleEvent(ctx context.Context, event *entity.ExptScheduleEvent, duration *time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishExptScheduleEvent", ctx, event, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishExptScheduleEvent indicates an expected call of PublishExptScheduleEvent.
func (mr *MockExptEventPublisherMockRecorder) PublishExptScheduleEvent(ctx, event, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishExptScheduleEvent", reflect.TypeOf((*MockExptEventPublisher)(nil).PublishExptScheduleEvent), ctx, event, duration)
}

// PublishExptTurnResultFilterEvent mocks base method.
func (m *MockExptEventPublisher) PublishExptTurnResultFilterEvent(ctx context.Context, event *entity.ExptTurnResultFilterEvent, duration *time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishExptTurnResultFilterEvent", ctx, event, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishExptTurnResultFilterEvent indicates an expected call of PublishExptTurnResultFilterEvent.
func (mr *MockExptEventPublisherMockRecorder) PublishExptTurnResultFilterEvent(ctx, event, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishExptTurnResultFilterEvent", reflect.TypeOf((*MockExptEventPublisher)(nil).PublishExptTurnResultFilterEvent), ctx, event, duration)
}

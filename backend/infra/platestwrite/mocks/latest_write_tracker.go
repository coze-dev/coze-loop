// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/infra/platestwrite (interfaces: ILatestWriteTracker)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/latest_write_tracker.go --package mocks . ILatestWriteTracker
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	platestwrite "github.com/coze-dev/coze-loop/backend/infra/platestwrite"
	gomock "go.uber.org/mock/gomock"
)

// MockILatestWriteTracker is a mock of ILatestWriteTracker interface.
type MockILatestWriteTracker struct {
	ctrl     *gomock.Controller
	recorder *MockILatestWriteTrackerMockRecorder
	isgomock struct{}
}

// MockILatestWriteTrackerMockRecorder is the mock recorder for MockILatestWriteTracker.
type MockILatestWriteTrackerMockRecorder struct {
	mock *MockILatestWriteTracker
}

// NewMockILatestWriteTracker creates a new mock instance.
func NewMockILatestWriteTracker(ctrl *gomock.Controller) *MockILatestWriteTracker {
	mock := &MockILatestWriteTracker{ctrl: ctrl}
	mock.recorder = &MockILatestWriteTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILatestWriteTracker) EXPECT() *MockILatestWriteTrackerMockRecorder {
	return m.recorder
}

// CheckWriteFlagByID mocks base method.
func (m *MockILatestWriteTracker) CheckWriteFlagByID(ctx context.Context, resourceType platestwrite.ResourceType, id int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckWriteFlagByID", ctx, resourceType, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckWriteFlagByID indicates an expected call of CheckWriteFlagByID.
func (mr *MockILatestWriteTrackerMockRecorder) CheckWriteFlagByID(ctx, resourceType, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckWriteFlagByID", reflect.TypeOf((*MockILatestWriteTracker)(nil).CheckWriteFlagByID), ctx, resourceType, id)
}

// CheckWriteFlagBySearchParam mocks base method.
func (m *MockILatestWriteTracker) CheckWriteFlagBySearchParam(ctx context.Context, resourceType platestwrite.ResourceType, searchParam string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckWriteFlagBySearchParam", ctx, resourceType, searchParam)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckWriteFlagBySearchParam indicates an expected call of CheckWriteFlagBySearchParam.
func (mr *MockILatestWriteTrackerMockRecorder) CheckWriteFlagBySearchParam(ctx, resourceType, searchParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckWriteFlagBySearchParam", reflect.TypeOf((*MockILatestWriteTracker)(nil).CheckWriteFlagBySearchParam), ctx, resourceType, searchParam)
}

// SetWriteFlag mocks base method.
func (m *MockILatestWriteTracker) SetWriteFlag(ctx context.Context, resourceType platestwrite.ResourceType, resourceID int64, opts ...platestwrite.SetWriteFlagOpt) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, resourceType, resourceID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SetWriteFlag", varargs...)
}

// SetWriteFlag indicates an expected call of SetWriteFlag.
func (mr *MockILatestWriteTrackerMockRecorder) SetWriteFlag(ctx, resourceType, resourceID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, resourceType, resourceID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteFlag", reflect.TypeOf((*MockILatestWriteTracker)(nil).SetWriteFlag), varargs...)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/infra/external/benefit (interfaces: IBenefitService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	benefit "github.com/coze-dev/coze-loop/backend/infra/external/benefit"
	gomock "github.com/golang/mock/gomock"
)

// MockIBenefitService is a mock of IBenefitService interface.
type MockIBenefitService struct {
	ctrl     *gomock.Controller
	recorder *MockIBenefitServiceMockRecorder
}

// MockIBenefitServiceMockRecorder is the mock recorder for MockIBenefitService.
type MockIBenefitServiceMockRecorder struct {
	mock *MockIBenefitService
}

// NewMockIBenefitService creates a new mock instance.
func NewMockIBenefitService(ctrl *gomock.Controller) *MockIBenefitService {
	mock := &MockIBenefitService{ctrl: ctrl}
	mock.recorder = &MockIBenefitServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBenefitService) EXPECT() *MockIBenefitServiceMockRecorder {
	return m.recorder
}

// BatchCheckEnableTypeBenefit mocks base method.
func (m *MockIBenefitService) BatchCheckEnableTypeBenefit(arg0 context.Context, arg1 *benefit.BatchCheckEnableTypeBenefitParams) (*benefit.BatchCheckEnableTypeBenefitResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCheckEnableTypeBenefit", arg0, arg1)
	ret0, _ := ret[0].(*benefit.BatchCheckEnableTypeBenefitResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCheckEnableTypeBenefit indicates an expected call of BatchCheckEnableTypeBenefit.
func (mr *MockIBenefitServiceMockRecorder) BatchCheckEnableTypeBenefit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCheckEnableTypeBenefit", reflect.TypeOf((*MockIBenefitService)(nil).BatchCheckEnableTypeBenefit), arg0, arg1)
}

// CheckAndDeductEvalBenefit mocks base method.
func (m *MockIBenefitService) CheckAndDeductEvalBenefit(arg0 context.Context, arg1 *benefit.CheckAndDeductEvalBenefitParams) (*benefit.CheckAndDeductEvalBenefitResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndDeductEvalBenefit", arg0, arg1)
	ret0, _ := ret[0].(*benefit.CheckAndDeductEvalBenefitResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAndDeductEvalBenefit indicates an expected call of CheckAndDeductEvalBenefit.
func (mr *MockIBenefitServiceMockRecorder) CheckAndDeductEvalBenefit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndDeductEvalBenefit", reflect.TypeOf((*MockIBenefitService)(nil).CheckAndDeductEvalBenefit), arg0, arg1)
}

// CheckAndDeductOptimizationBenefit mocks base method.
func (m *MockIBenefitService) CheckAndDeductOptimizationBenefit(arg0 context.Context, arg1 *benefit.CheckAndDeductOptimizationBenefitParams) (*benefit.CheckAndDeductOptimizationBenefitResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndDeductOptimizationBenefit", arg0, arg1)
	ret0, _ := ret[0].(*benefit.CheckAndDeductOptimizationBenefitResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAndDeductOptimizationBenefit indicates an expected call of CheckAndDeductOptimizationBenefit.
func (mr *MockIBenefitServiceMockRecorder) CheckAndDeductOptimizationBenefit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndDeductOptimizationBenefit", reflect.TypeOf((*MockIBenefitService)(nil).CheckAndDeductOptimizationBenefit), arg0, arg1)
}

// CheckEvaluatorBenefit mocks base method.
func (m *MockIBenefitService) CheckEvaluatorBenefit(arg0 context.Context, arg1 *benefit.CheckEvaluatorBenefitParams) (*benefit.CheckEvaluatorBenefitResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEvaluatorBenefit", arg0, arg1)
	ret0, _ := ret[0].(*benefit.CheckEvaluatorBenefitResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckEvaluatorBenefit indicates an expected call of CheckEvaluatorBenefit.
func (mr *MockIBenefitServiceMockRecorder) CheckEvaluatorBenefit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEvaluatorBenefit", reflect.TypeOf((*MockIBenefitService)(nil).CheckEvaluatorBenefit), arg0, arg1)
}

// CheckPromptBenefit mocks base method.
func (m *MockIBenefitService) CheckPromptBenefit(arg0 context.Context, arg1 *benefit.CheckPromptBenefitParams) (*benefit.CheckPromptBenefitResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPromptBenefit", arg0, arg1)
	ret0, _ := ret[0].(*benefit.CheckPromptBenefitResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPromptBenefit indicates an expected call of CheckPromptBenefit.
func (mr *MockIBenefitServiceMockRecorder) CheckPromptBenefit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPromptBenefit", reflect.TypeOf((*MockIBenefitService)(nil).CheckPromptBenefit), arg0, arg1)
}

// CheckTraceBenefit mocks base method.
func (m *MockIBenefitService) CheckTraceBenefit(arg0 context.Context, arg1 *benefit.CheckTraceBenefitParams) (*benefit.CheckTraceBenefitResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTraceBenefit", arg0, arg1)
	ret0, _ := ret[0].(*benefit.CheckTraceBenefitResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTraceBenefit indicates an expected call of CheckTraceBenefit.
func (mr *MockIBenefitServiceMockRecorder) CheckTraceBenefit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTraceBenefit", reflect.TypeOf((*MockIBenefitService)(nil).CheckTraceBenefit), arg0, arg1)
}

// DeductOptimizationBenefit mocks base method.
func (m *MockIBenefitService) DeductOptimizationBenefit(arg0 context.Context, arg1 *benefit.DeductOptimizationBenefitParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeductOptimizationBenefit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeductOptimizationBenefit indicates an expected call of DeductOptimizationBenefit.
func (mr *MockIBenefitServiceMockRecorder) DeductOptimizationBenefit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeductOptimizationBenefit", reflect.TypeOf((*MockIBenefitService)(nil).DeductOptimizationBenefit), arg0, arg1)
}

// DeductTraceBenefit mocks base method.
func (m *MockIBenefitService) DeductTraceBenefit(arg0 context.Context, arg1 *benefit.DeductTraceBenefitParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeductTraceBenefit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeductTraceBenefit indicates an expected call of DeductTraceBenefit.
func (mr *MockIBenefitServiceMockRecorder) DeductTraceBenefit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeductTraceBenefit", reflect.TypeOf((*MockIBenefitService)(nil).DeductTraceBenefit), arg0, arg1)
}

// ReplenishExtraTraceBenefit mocks base method.
func (m *MockIBenefitService) ReplenishExtraTraceBenefit(arg0 context.Context, arg1 *benefit.ReplenishExtraTraceBenefitParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplenishExtraTraceBenefit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplenishExtraTraceBenefit indicates an expected call of ReplenishExtraTraceBenefit.
func (mr *MockIBenefitServiceMockRecorder) ReplenishExtraTraceBenefit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplenishExtraTraceBenefit", reflect.TypeOf((*MockIBenefitService)(nil).ReplenishExtraTraceBenefit), arg0, arg1)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/infra/middleware/session (interfaces: ISessionService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/session_service.go -package=mock_session . ISessionService
//

// Package mock_session is a generated GoMock package.
package mock_session

import (
	context "context"
	reflect "reflect"

	session "github.com/coze-dev/coze-loop/backend/infra/middleware/session"
	gomock "go.uber.org/mock/gomock"
)

// MockISessionService is a mock of ISessionService interface.
type MockISessionService struct {
	ctrl     *gomock.Controller
	recorder *MockISessionServiceMockRecorder
	isgomock struct{}
}

// MockISessionServiceMockRecorder is the mock recorder for MockISessionService.
type MockISessionServiceMockRecorder struct {
	mock *MockISessionService
}

// NewMockISessionService creates a new mock instance.
func NewMockISessionService(ctrl *gomock.Controller) *MockISessionService {
	mock := &MockISessionService{ctrl: ctrl}
	mock.recorder = &MockISessionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISessionService) EXPECT() *MockISessionServiceMockRecorder {
	return m.recorder
}

// GenerateSessionKey mocks base method.
func (m *MockISessionService) GenerateSessionKey(ctx context.Context, arg1 *session.Session) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSessionKey", ctx, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSessionKey indicates an expected call of GenerateSessionKey.
func (mr *MockISessionServiceMockRecorder) GenerateSessionKey(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSessionKey", reflect.TypeOf((*MockISessionService)(nil).GenerateSessionKey), ctx, arg1)
}

// ValidateSession mocks base method.
func (m *MockISessionService) ValidateSession(ctx context.Context, sessionID string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSession", ctx, sessionID)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateSession indicates an expected call of ValidateSession.
func (mr *MockISessionServiceMockRecorder) ValidateSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSession", reflect.TypeOf((*MockISessionService)(nil).ValidateSession), ctx, sessionID)
}

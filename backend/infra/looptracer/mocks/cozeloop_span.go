// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/cozeloop-go (interfaces: Span)
//
// Generated by this command:
//
//	mockgen -destination mocks/cozeloop_span.go -package mocks github.com/coze-dev/cozeloop-go Span
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/coze-dev/cozeloop-go/entity"
	tracespec "github.com/coze-dev/cozeloop-go/spec/tracespec"
	gomock "go.uber.org/mock/gomock"
)

// MockSpan is a mock of Span interface.
type MockSpan struct {
	ctrl     *gomock.Controller
	recorder *MockSpanMockRecorder
	isgomock struct{}
}

// MockSpanMockRecorder is the mock recorder for MockSpan.
type MockSpanMockRecorder struct {
	mock *MockSpan
}

// NewMockSpan creates a new mock instance.
func NewMockSpan(ctrl *gomock.Controller) *MockSpan {
	mock := &MockSpan{ctrl: ctrl}
	mock.recorder = &MockSpanMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpan) EXPECT() *MockSpanMockRecorder {
	return m.recorder
}

// Finish mocks base method.
func (m *MockSpan) Finish(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finish", ctx)
}

// Finish indicates an expected call of Finish.
func (mr *MockSpanMockRecorder) Finish(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockSpan)(nil).Finish), ctx)
}

// GetBaggage mocks base method.
func (m *MockSpan) GetBaggage() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaggage")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetBaggage indicates an expected call of GetBaggage.
func (mr *MockSpanMockRecorder) GetBaggage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaggage", reflect.TypeOf((*MockSpan)(nil).GetBaggage))
}

// GetSpanID mocks base method.
func (m *MockSpan) GetSpanID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpanID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSpanID indicates an expected call of GetSpanID.
func (mr *MockSpanMockRecorder) GetSpanID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpanID", reflect.TypeOf((*MockSpan)(nil).GetSpanID))
}

// GetStartTime mocks base method.
func (m *MockSpan) GetStartTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetStartTime indicates an expected call of GetStartTime.
func (mr *MockSpanMockRecorder) GetStartTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartTime", reflect.TypeOf((*MockSpan)(nil).GetStartTime))
}

// GetTraceID mocks base method.
func (m *MockSpan) GetTraceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTraceID indicates an expected call of GetTraceID.
func (mr *MockSpanMockRecorder) GetTraceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceID", reflect.TypeOf((*MockSpan)(nil).GetTraceID))
}

// SetBaggage mocks base method.
func (m *MockSpan) SetBaggage(ctx context.Context, baggageItems map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBaggage", ctx, baggageItems)
}

// SetBaggage indicates an expected call of SetBaggage.
func (mr *MockSpanMockRecorder) SetBaggage(ctx, baggageItems any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBaggage", reflect.TypeOf((*MockSpan)(nil).SetBaggage), ctx, baggageItems)
}

// SetDeploymentEnv mocks base method.
func (m *MockSpan) SetDeploymentEnv(ctx context.Context, deploymentEnv string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeploymentEnv", ctx, deploymentEnv)
}

// SetDeploymentEnv indicates an expected call of SetDeploymentEnv.
func (mr *MockSpanMockRecorder) SetDeploymentEnv(ctx, deploymentEnv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeploymentEnv", reflect.TypeOf((*MockSpan)(nil).SetDeploymentEnv), ctx, deploymentEnv)
}

// SetError mocks base method.
func (m *MockSpan) SetError(ctx context.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetError", ctx, err)
}

// SetError indicates an expected call of SetError.
func (mr *MockSpanMockRecorder) SetError(ctx, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetError", reflect.TypeOf((*MockSpan)(nil).SetError), ctx, err)
}

// SetFinishTime mocks base method.
func (m *MockSpan) SetFinishTime(finishTime time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFinishTime", finishTime)
}

// SetFinishTime indicates an expected call of SetFinishTime.
func (mr *MockSpanMockRecorder) SetFinishTime(finishTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinishTime", reflect.TypeOf((*MockSpan)(nil).SetFinishTime), finishTime)
}

// SetInput mocks base method.
func (m *MockSpan) SetInput(ctx context.Context, input any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetInput", ctx, input)
}

// SetInput indicates an expected call of SetInput.
func (mr *MockSpanMockRecorder) SetInput(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInput", reflect.TypeOf((*MockSpan)(nil).SetInput), ctx, input)
}

// SetInputTokens mocks base method.
func (m *MockSpan) SetInputTokens(ctx context.Context, inputTokens int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetInputTokens", ctx, inputTokens)
}

// SetInputTokens indicates an expected call of SetInputTokens.
func (mr *MockSpanMockRecorder) SetInputTokens(ctx, inputTokens any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInputTokens", reflect.TypeOf((*MockSpan)(nil).SetInputTokens), ctx, inputTokens)
}

// SetLogID mocks base method.
func (m *MockSpan) SetLogID(ctx context.Context, logID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogID", ctx, logID)
}

// SetLogID indicates an expected call of SetLogID.
func (mr *MockSpanMockRecorder) SetLogID(ctx, logID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogID", reflect.TypeOf((*MockSpan)(nil).SetLogID), ctx, logID)
}

// SetMessageID mocks base method.
func (m *MockSpan) SetMessageID(ctx context.Context, messageID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMessageID", ctx, messageID)
}

// SetMessageID indicates an expected call of SetMessageID.
func (mr *MockSpanMockRecorder) SetMessageID(ctx, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMessageID", reflect.TypeOf((*MockSpan)(nil).SetMessageID), ctx, messageID)
}

// SetMessageIDBaggage mocks base method.
func (m *MockSpan) SetMessageIDBaggage(ctx context.Context, messageID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMessageIDBaggage", ctx, messageID)
}

// SetMessageIDBaggage indicates an expected call of SetMessageIDBaggage.
func (mr *MockSpanMockRecorder) SetMessageIDBaggage(ctx, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMessageIDBaggage", reflect.TypeOf((*MockSpan)(nil).SetMessageIDBaggage), ctx, messageID)
}

// SetModelCallOptions mocks base method.
func (m *MockSpan) SetModelCallOptions(ctx context.Context, callOptions any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetModelCallOptions", ctx, callOptions)
}

// SetModelCallOptions indicates an expected call of SetModelCallOptions.
func (mr *MockSpanMockRecorder) SetModelCallOptions(ctx, callOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelCallOptions", reflect.TypeOf((*MockSpan)(nil).SetModelCallOptions), ctx, callOptions)
}

// SetModelName mocks base method.
func (m *MockSpan) SetModelName(ctx context.Context, modelName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetModelName", ctx, modelName)
}

// SetModelName indicates an expected call of SetModelName.
func (mr *MockSpanMockRecorder) SetModelName(ctx, modelName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelName", reflect.TypeOf((*MockSpan)(nil).SetModelName), ctx, modelName)
}

// SetModelProvider mocks base method.
func (m *MockSpan) SetModelProvider(ctx context.Context, modelProvider string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetModelProvider", ctx, modelProvider)
}

// SetModelProvider indicates an expected call of SetModelProvider.
func (mr *MockSpanMockRecorder) SetModelProvider(ctx, modelProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelProvider", reflect.TypeOf((*MockSpan)(nil).SetModelProvider), ctx, modelProvider)
}

// SetOutput mocks base method.
func (m *MockSpan) SetOutput(ctx context.Context, output any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOutput", ctx, output)
}

// SetOutput indicates an expected call of SetOutput.
func (mr *MockSpanMockRecorder) SetOutput(ctx, output any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOutput", reflect.TypeOf((*MockSpan)(nil).SetOutput), ctx, output)
}

// SetOutputTokens mocks base method.
func (m *MockSpan) SetOutputTokens(ctx context.Context, outputTokens int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOutputTokens", ctx, outputTokens)
}

// SetOutputTokens indicates an expected call of SetOutputTokens.
func (mr *MockSpanMockRecorder) SetOutputTokens(ctx, outputTokens any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOutputTokens", reflect.TypeOf((*MockSpan)(nil).SetOutputTokens), ctx, outputTokens)
}

// SetPrompt mocks base method.
func (m *MockSpan) SetPrompt(ctx context.Context, prompt entity.Prompt) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPrompt", ctx, prompt)
}

// SetPrompt indicates an expected call of SetPrompt.
func (mr *MockSpanMockRecorder) SetPrompt(ctx, prompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPrompt", reflect.TypeOf((*MockSpan)(nil).SetPrompt), ctx, prompt)
}

// SetRuntime mocks base method.
func (m *MockSpan) SetRuntime(ctx context.Context, runtime tracespec.Runtime) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRuntime", ctx, runtime)
}

// SetRuntime indicates an expected call of SetRuntime.
func (mr *MockSpanMockRecorder) SetRuntime(ctx, runtime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRuntime", reflect.TypeOf((*MockSpan)(nil).SetRuntime), ctx, runtime)
}

// SetServiceName mocks base method.
func (m *MockSpan) SetServiceName(ctx context.Context, serviceName string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetServiceName", ctx, serviceName)
}

// SetServiceName indicates an expected call of SetServiceName.
func (mr *MockSpanMockRecorder) SetServiceName(ctx, serviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceName", reflect.TypeOf((*MockSpan)(nil).SetServiceName), ctx, serviceName)
}

// SetStartTimeFirstResp mocks base method.
func (m *MockSpan) SetStartTimeFirstResp(ctx context.Context, startTimeFirstResp int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStartTimeFirstResp", ctx, startTimeFirstResp)
}

// SetStartTimeFirstResp indicates an expected call of SetStartTimeFirstResp.
func (mr *MockSpanMockRecorder) SetStartTimeFirstResp(ctx, startTimeFirstResp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStartTimeFirstResp", reflect.TypeOf((*MockSpan)(nil).SetStartTimeFirstResp), ctx, startTimeFirstResp)
}

// SetStatusCode mocks base method.
func (m *MockSpan) SetStatusCode(ctx context.Context, code int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatusCode", ctx, code)
}

// SetStatusCode indicates an expected call of SetStatusCode.
func (mr *MockSpanMockRecorder) SetStatusCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusCode", reflect.TypeOf((*MockSpan)(nil).SetStatusCode), ctx, code)
}

// SetSystemTags mocks base method.
func (m *MockSpan) SetSystemTags(ctx context.Context, systemTags map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSystemTags", ctx, systemTags)
}

// SetSystemTags indicates an expected call of SetSystemTags.
func (mr *MockSpanMockRecorder) SetSystemTags(ctx, systemTags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSystemTags", reflect.TypeOf((*MockSpan)(nil).SetSystemTags), ctx, systemTags)
}

// SetTags mocks base method.
func (m *MockSpan) SetTags(ctx context.Context, tagKVs map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTags", ctx, tagKVs)
}

// SetTags indicates an expected call of SetTags.
func (mr *MockSpanMockRecorder) SetTags(ctx, tagKVs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTags", reflect.TypeOf((*MockSpan)(nil).SetTags), ctx, tagKVs)
}

// SetThreadID mocks base method.
func (m *MockSpan) SetThreadID(ctx context.Context, threadID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetThreadID", ctx, threadID)
}

// SetThreadID indicates an expected call of SetThreadID.
func (mr *MockSpanMockRecorder) SetThreadID(ctx, threadID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetThreadID", reflect.TypeOf((*MockSpan)(nil).SetThreadID), ctx, threadID)
}

// SetThreadIDBaggage mocks base method.
func (m *MockSpan) SetThreadIDBaggage(ctx context.Context, threadID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetThreadIDBaggage", ctx, threadID)
}

// SetThreadIDBaggage indicates an expected call of SetThreadIDBaggage.
func (mr *MockSpanMockRecorder) SetThreadIDBaggage(ctx, threadID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetThreadIDBaggage", reflect.TypeOf((*MockSpan)(nil).SetThreadIDBaggage), ctx, threadID)
}

// SetUserID mocks base method.
func (m *MockSpan) SetUserID(ctx context.Context, userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserID", ctx, userID)
}

// SetUserID indicates an expected call of SetUserID.
func (mr *MockSpanMockRecorder) SetUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserID", reflect.TypeOf((*MockSpan)(nil).SetUserID), ctx, userID)
}

// SetUserIDBaggage mocks base method.
func (m *MockSpan) SetUserIDBaggage(ctx context.Context, userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUserIDBaggage", ctx, userID)
}

// SetUserIDBaggage indicates an expected call of SetUserIDBaggage.
func (mr *MockSpanMockRecorder) SetUserIDBaggage(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserIDBaggage", reflect.TypeOf((*MockSpan)(nil).SetUserIDBaggage), ctx, userID)
}

// ToHeader mocks base method.
func (m *MockSpan) ToHeader() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToHeader")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToHeader indicates an expected call of ToHeader.
func (mr *MockSpanMockRecorder) ToHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToHeader", reflect.TypeOf((*MockSpan)(nil).ToHeader))
}

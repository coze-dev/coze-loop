// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/cozeloop-go (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination mocks/cozeloop_client.go -package mocks github.com/coze-dev/cozeloop-go Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	cozeloop "github.com/coze-dev/cozeloop-go"
	entity "github.com/coze-dev/cozeloop-go/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx)
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close), ctx)
}

// Flush mocks base method.
func (m *MockClient) Flush(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush", ctx)
}

// Flush indicates an expected call of Flush.
func (mr *MockClientMockRecorder) Flush(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockClient)(nil).Flush), ctx)
}

// GetPrompt mocks base method.
func (m *MockClient) GetPrompt(ctx context.Context, param cozeloop.GetPromptParam, options ...cozeloop.GetPromptOption) (*entity.Prompt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, param}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPrompt", varargs...)
	ret0, _ := ret[0].(*entity.Prompt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrompt indicates an expected call of GetPrompt.
func (mr *MockClientMockRecorder) GetPrompt(ctx, param any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, param}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrompt", reflect.TypeOf((*MockClient)(nil).GetPrompt), varargs...)
}

// GetSpanFromContext mocks base method.
func (m *MockClient) GetSpanFromContext(ctx context.Context) cozeloop.Span {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpanFromContext", ctx)
	ret0, _ := ret[0].(cozeloop.Span)
	return ret0
}

// GetSpanFromContext indicates an expected call of GetSpanFromContext.
func (mr *MockClientMockRecorder) GetSpanFromContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpanFromContext", reflect.TypeOf((*MockClient)(nil).GetSpanFromContext), ctx)
}

// GetSpanFromHeader mocks base method.
func (m *MockClient) GetSpanFromHeader(ctx context.Context, header map[string]string) cozeloop.SpanContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpanFromHeader", ctx, header)
	ret0, _ := ret[0].(cozeloop.SpanContext)
	return ret0
}

// GetSpanFromHeader indicates an expected call of GetSpanFromHeader.
func (mr *MockClientMockRecorder) GetSpanFromHeader(ctx, header any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpanFromHeader", reflect.TypeOf((*MockClient)(nil).GetSpanFromHeader), ctx, header)
}

// GetWorkspaceID mocks base method.
func (m *MockClient) GetWorkspaceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWorkspaceID indicates an expected call of GetWorkspaceID.
func (mr *MockClientMockRecorder) GetWorkspaceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceID", reflect.TypeOf((*MockClient)(nil).GetWorkspaceID))
}

// PromptFormat mocks base method.
func (m *MockClient) PromptFormat(ctx context.Context, prompt *entity.Prompt, variables map[string]any, options ...cozeloop.PromptFormatOption) ([]*entity.Message, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, prompt, variables}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PromptFormat", varargs...)
	ret0, _ := ret[0].([]*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromptFormat indicates an expected call of PromptFormat.
func (mr *MockClientMockRecorder) PromptFormat(ctx, prompt, variables any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, prompt, variables}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptFormat", reflect.TypeOf((*MockClient)(nil).PromptFormat), varargs...)
}

// StartSpan mocks base method.
func (m *MockClient) StartSpan(ctx context.Context, name, spanType string, opts ...cozeloop.StartSpanOption) (context.Context, cozeloop.Span) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, spanType}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartSpan", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(cozeloop.Span)
	return ret0, ret1
}

// StartSpan indicates an expected call of StartSpan.
func (mr *MockClientMockRecorder) StartSpan(ctx, name, spanType any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, spanType}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpan", reflect.TypeOf((*MockClient)(nil).StartSpan), varargs...)
}

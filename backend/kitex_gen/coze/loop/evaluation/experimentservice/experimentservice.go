// Code generated by Kitex v0.13.1. DO NOT EDIT.

package experimentservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	evaluation "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation"
	expt "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/expt"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CheckExperimentName": kitex.NewMethodInfo(
		checkExperimentNameHandler,
		newExperimentServiceCheckExperimentNameArgs,
		newExperimentServiceCheckExperimentNameResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateExperiment": kitex.NewMethodInfo(
		createExperimentHandler,
		newExperimentServiceCreateExperimentArgs,
		newExperimentServiceCreateExperimentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SubmitExperiment": kitex.NewMethodInfo(
		submitExperimentHandler,
		newExperimentServiceSubmitExperimentArgs,
		newExperimentServiceSubmitExperimentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchGetExperiments": kitex.NewMethodInfo(
		batchGetExperimentsHandler,
		newExperimentServiceBatchGetExperimentsArgs,
		newExperimentServiceBatchGetExperimentsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListExperiments": kitex.NewMethodInfo(
		listExperimentsHandler,
		newExperimentServiceListExperimentsArgs,
		newExperimentServiceListExperimentsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateExperiment": kitex.NewMethodInfo(
		updateExperimentHandler,
		newExperimentServiceUpdateExperimentArgs,
		newExperimentServiceUpdateExperimentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteExperiment": kitex.NewMethodInfo(
		deleteExperimentHandler,
		newExperimentServiceDeleteExperimentArgs,
		newExperimentServiceDeleteExperimentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchDeleteExperiments": kitex.NewMethodInfo(
		batchDeleteExperimentsHandler,
		newExperimentServiceBatchDeleteExperimentsArgs,
		newExperimentServiceBatchDeleteExperimentsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CloneExperiment": kitex.NewMethodInfo(
		cloneExperimentHandler,
		newExperimentServiceCloneExperimentArgs,
		newExperimentServiceCloneExperimentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RunExperiment": kitex.NewMethodInfo(
		runExperimentHandler,
		newExperimentServiceRunExperimentArgs,
		newExperimentServiceRunExperimentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RetryExperiment": kitex.NewMethodInfo(
		retryExperimentHandler,
		newExperimentServiceRetryExperimentArgs,
		newExperimentServiceRetryExperimentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"KillExperiment": kitex.NewMethodInfo(
		killExperimentHandler,
		newExperimentServiceKillExperimentArgs,
		newExperimentServiceKillExperimentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchGetExperimentResult": kitex.NewMethodInfo(
		batchGetExperimentResult_Handler,
		newExperimentServiceBatchGetExperimentResultArgs,
		newExperimentServiceBatchGetExperimentResultResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchGetExperimentAggrResult": kitex.NewMethodInfo(
		batchGetExperimentAggrResult_Handler,
		newExperimentServiceBatchGetExperimentAggrResultArgs,
		newExperimentServiceBatchGetExperimentAggrResultResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"InvokeExperiment": kitex.NewMethodInfo(
		invokeExperimentHandler,
		newExperimentServiceInvokeExperimentArgs,
		newExperimentServiceInvokeExperimentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"FinishExperiment": kitex.NewMethodInfo(
		finishExperimentHandler,
		newExperimentServiceFinishExperimentArgs,
		newExperimentServiceFinishExperimentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListExperimentStats": kitex.NewMethodInfo(
		listExperimentStatsHandler,
		newExperimentServiceListExperimentStatsArgs,
		newExperimentServiceListExperimentStatsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpsertExptTurnResultFilter": kitex.NewMethodInfo(
		upsertExptTurnResultFilterHandler,
		newExperimentServiceUpsertExptTurnResultFilterArgs,
		newExperimentServiceUpsertExptTurnResultFilterResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AssociateAnnotationTag": kitex.NewMethodInfo(
		associateAnnotationTagHandler,
		newExperimentServiceAssociateAnnotationTagArgs,
		newExperimentServiceAssociateAnnotationTagResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteAnnotationTag": kitex.NewMethodInfo(
		deleteAnnotationTagHandler,
		newExperimentServiceDeleteAnnotationTagArgs,
		newExperimentServiceDeleteAnnotationTagResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateAnnotateRecord": kitex.NewMethodInfo(
		createAnnotateRecordHandler,
		newExperimentServiceCreateAnnotateRecordArgs,
		newExperimentServiceCreateAnnotateRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateAnnotateRecord": kitex.NewMethodInfo(
		updateAnnotateRecordHandler,
		newExperimentServiceUpdateAnnotateRecordArgs,
		newExperimentServiceUpdateAnnotateRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ExportExptResult": kitex.NewMethodInfo(
		exportExptResult_Handler,
		newExperimentServiceExportExptResultArgs,
		newExperimentServiceExportExptResultResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListExptResultExportRecord": kitex.NewMethodInfo(
		listExptResultExportRecordHandler,
		newExperimentServiceListExptResultExportRecordArgs,
		newExperimentServiceListExptResultExportRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetExptResultExportRecord": kitex.NewMethodInfo(
		getExptResultExportRecordHandler,
		newExperimentServiceGetExptResultExportRecordArgs,
		newExperimentServiceGetExptResultExportRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	experimentServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return experimentServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "ExperimentService"
	handlerType := (*evaluation.ExperimentService)(nil)
	extra := map[string]interface{}{
		"PackageName": "evaluation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func checkExperimentNameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceCheckExperimentNameArgs)
	realResult := result.(*expt.ExperimentServiceCheckExperimentNameResult)
	success, err := handler.(expt.ExperimentService).CheckExperimentName(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceCheckExperimentNameArgs() interface{} {
	return expt.NewExperimentServiceCheckExperimentNameArgs()
}

func newExperimentServiceCheckExperimentNameResult() interface{} {
	return expt.NewExperimentServiceCheckExperimentNameResult()
}

func createExperimentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceCreateExperimentArgs)
	realResult := result.(*expt.ExperimentServiceCreateExperimentResult)
	success, err := handler.(expt.ExperimentService).CreateExperiment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceCreateExperimentArgs() interface{} {
	return expt.NewExperimentServiceCreateExperimentArgs()
}

func newExperimentServiceCreateExperimentResult() interface{} {
	return expt.NewExperimentServiceCreateExperimentResult()
}

func submitExperimentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceSubmitExperimentArgs)
	realResult := result.(*expt.ExperimentServiceSubmitExperimentResult)
	success, err := handler.(expt.ExperimentService).SubmitExperiment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceSubmitExperimentArgs() interface{} {
	return expt.NewExperimentServiceSubmitExperimentArgs()
}

func newExperimentServiceSubmitExperimentResult() interface{} {
	return expt.NewExperimentServiceSubmitExperimentResult()
}

func batchGetExperimentsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceBatchGetExperimentsArgs)
	realResult := result.(*expt.ExperimentServiceBatchGetExperimentsResult)
	success, err := handler.(expt.ExperimentService).BatchGetExperiments(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceBatchGetExperimentsArgs() interface{} {
	return expt.NewExperimentServiceBatchGetExperimentsArgs()
}

func newExperimentServiceBatchGetExperimentsResult() interface{} {
	return expt.NewExperimentServiceBatchGetExperimentsResult()
}

func listExperimentsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceListExperimentsArgs)
	realResult := result.(*expt.ExperimentServiceListExperimentsResult)
	success, err := handler.(expt.ExperimentService).ListExperiments(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceListExperimentsArgs() interface{} {
	return expt.NewExperimentServiceListExperimentsArgs()
}

func newExperimentServiceListExperimentsResult() interface{} {
	return expt.NewExperimentServiceListExperimentsResult()
}

func updateExperimentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceUpdateExperimentArgs)
	realResult := result.(*expt.ExperimentServiceUpdateExperimentResult)
	success, err := handler.(expt.ExperimentService).UpdateExperiment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceUpdateExperimentArgs() interface{} {
	return expt.NewExperimentServiceUpdateExperimentArgs()
}

func newExperimentServiceUpdateExperimentResult() interface{} {
	return expt.NewExperimentServiceUpdateExperimentResult()
}

func deleteExperimentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceDeleteExperimentArgs)
	realResult := result.(*expt.ExperimentServiceDeleteExperimentResult)
	success, err := handler.(expt.ExperimentService).DeleteExperiment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceDeleteExperimentArgs() interface{} {
	return expt.NewExperimentServiceDeleteExperimentArgs()
}

func newExperimentServiceDeleteExperimentResult() interface{} {
	return expt.NewExperimentServiceDeleteExperimentResult()
}

func batchDeleteExperimentsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceBatchDeleteExperimentsArgs)
	realResult := result.(*expt.ExperimentServiceBatchDeleteExperimentsResult)
	success, err := handler.(expt.ExperimentService).BatchDeleteExperiments(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceBatchDeleteExperimentsArgs() interface{} {
	return expt.NewExperimentServiceBatchDeleteExperimentsArgs()
}

func newExperimentServiceBatchDeleteExperimentsResult() interface{} {
	return expt.NewExperimentServiceBatchDeleteExperimentsResult()
}

func cloneExperimentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceCloneExperimentArgs)
	realResult := result.(*expt.ExperimentServiceCloneExperimentResult)
	success, err := handler.(expt.ExperimentService).CloneExperiment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceCloneExperimentArgs() interface{} {
	return expt.NewExperimentServiceCloneExperimentArgs()
}

func newExperimentServiceCloneExperimentResult() interface{} {
	return expt.NewExperimentServiceCloneExperimentResult()
}

func runExperimentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceRunExperimentArgs)
	realResult := result.(*expt.ExperimentServiceRunExperimentResult)
	success, err := handler.(expt.ExperimentService).RunExperiment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceRunExperimentArgs() interface{} {
	return expt.NewExperimentServiceRunExperimentArgs()
}

func newExperimentServiceRunExperimentResult() interface{} {
	return expt.NewExperimentServiceRunExperimentResult()
}

func retryExperimentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceRetryExperimentArgs)
	realResult := result.(*expt.ExperimentServiceRetryExperimentResult)
	success, err := handler.(expt.ExperimentService).RetryExperiment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceRetryExperimentArgs() interface{} {
	return expt.NewExperimentServiceRetryExperimentArgs()
}

func newExperimentServiceRetryExperimentResult() interface{} {
	return expt.NewExperimentServiceRetryExperimentResult()
}

func killExperimentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceKillExperimentArgs)
	realResult := result.(*expt.ExperimentServiceKillExperimentResult)
	success, err := handler.(expt.ExperimentService).KillExperiment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceKillExperimentArgs() interface{} {
	return expt.NewExperimentServiceKillExperimentArgs()
}

func newExperimentServiceKillExperimentResult() interface{} {
	return expt.NewExperimentServiceKillExperimentResult()
}

func batchGetExperimentResult_Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceBatchGetExperimentResultArgs)
	realResult := result.(*expt.ExperimentServiceBatchGetExperimentResultResult)
	success, err := handler.(expt.ExperimentService).BatchGetExperimentResult_(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceBatchGetExperimentResultArgs() interface{} {
	return expt.NewExperimentServiceBatchGetExperimentResultArgs()
}

func newExperimentServiceBatchGetExperimentResultResult() interface{} {
	return expt.NewExperimentServiceBatchGetExperimentResultResult()
}

func batchGetExperimentAggrResult_Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceBatchGetExperimentAggrResultArgs)
	realResult := result.(*expt.ExperimentServiceBatchGetExperimentAggrResultResult)
	success, err := handler.(expt.ExperimentService).BatchGetExperimentAggrResult_(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceBatchGetExperimentAggrResultArgs() interface{} {
	return expt.NewExperimentServiceBatchGetExperimentAggrResultArgs()
}

func newExperimentServiceBatchGetExperimentAggrResultResult() interface{} {
	return expt.NewExperimentServiceBatchGetExperimentAggrResultResult()
}

func invokeExperimentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceInvokeExperimentArgs)
	realResult := result.(*expt.ExperimentServiceInvokeExperimentResult)
	success, err := handler.(expt.ExperimentService).InvokeExperiment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceInvokeExperimentArgs() interface{} {
	return expt.NewExperimentServiceInvokeExperimentArgs()
}

func newExperimentServiceInvokeExperimentResult() interface{} {
	return expt.NewExperimentServiceInvokeExperimentResult()
}

func finishExperimentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceFinishExperimentArgs)
	realResult := result.(*expt.ExperimentServiceFinishExperimentResult)
	success, err := handler.(expt.ExperimentService).FinishExperiment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceFinishExperimentArgs() interface{} {
	return expt.NewExperimentServiceFinishExperimentArgs()
}

func newExperimentServiceFinishExperimentResult() interface{} {
	return expt.NewExperimentServiceFinishExperimentResult()
}

func listExperimentStatsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceListExperimentStatsArgs)
	realResult := result.(*expt.ExperimentServiceListExperimentStatsResult)
	success, err := handler.(expt.ExperimentService).ListExperimentStats(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceListExperimentStatsArgs() interface{} {
	return expt.NewExperimentServiceListExperimentStatsArgs()
}

func newExperimentServiceListExperimentStatsResult() interface{} {
	return expt.NewExperimentServiceListExperimentStatsResult()
}

func upsertExptTurnResultFilterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceUpsertExptTurnResultFilterArgs)
	realResult := result.(*expt.ExperimentServiceUpsertExptTurnResultFilterResult)
	success, err := handler.(expt.ExperimentService).UpsertExptTurnResultFilter(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceUpsertExptTurnResultFilterArgs() interface{} {
	return expt.NewExperimentServiceUpsertExptTurnResultFilterArgs()
}

func newExperimentServiceUpsertExptTurnResultFilterResult() interface{} {
	return expt.NewExperimentServiceUpsertExptTurnResultFilterResult()
}

func associateAnnotationTagHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceAssociateAnnotationTagArgs)
	realResult := result.(*expt.ExperimentServiceAssociateAnnotationTagResult)
	success, err := handler.(expt.ExperimentService).AssociateAnnotationTag(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceAssociateAnnotationTagArgs() interface{} {
	return expt.NewExperimentServiceAssociateAnnotationTagArgs()
}

func newExperimentServiceAssociateAnnotationTagResult() interface{} {
	return expt.NewExperimentServiceAssociateAnnotationTagResult()
}

func deleteAnnotationTagHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceDeleteAnnotationTagArgs)
	realResult := result.(*expt.ExperimentServiceDeleteAnnotationTagResult)
	success, err := handler.(expt.ExperimentService).DeleteAnnotationTag(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceDeleteAnnotationTagArgs() interface{} {
	return expt.NewExperimentServiceDeleteAnnotationTagArgs()
}

func newExperimentServiceDeleteAnnotationTagResult() interface{} {
	return expt.NewExperimentServiceDeleteAnnotationTagResult()
}

func createAnnotateRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceCreateAnnotateRecordArgs)
	realResult := result.(*expt.ExperimentServiceCreateAnnotateRecordResult)
	success, err := handler.(expt.ExperimentService).CreateAnnotateRecord(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceCreateAnnotateRecordArgs() interface{} {
	return expt.NewExperimentServiceCreateAnnotateRecordArgs()
}

func newExperimentServiceCreateAnnotateRecordResult() interface{} {
	return expt.NewExperimentServiceCreateAnnotateRecordResult()
}

func updateAnnotateRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceUpdateAnnotateRecordArgs)
	realResult := result.(*expt.ExperimentServiceUpdateAnnotateRecordResult)
	success, err := handler.(expt.ExperimentService).UpdateAnnotateRecord(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceUpdateAnnotateRecordArgs() interface{} {
	return expt.NewExperimentServiceUpdateAnnotateRecordArgs()
}

func newExperimentServiceUpdateAnnotateRecordResult() interface{} {
	return expt.NewExperimentServiceUpdateAnnotateRecordResult()
}

func exportExptResult_Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceExportExptResultArgs)
	realResult := result.(*expt.ExperimentServiceExportExptResultResult)
	success, err := handler.(expt.ExperimentService).ExportExptResult_(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceExportExptResultArgs() interface{} {
	return expt.NewExperimentServiceExportExptResultArgs()
}

func newExperimentServiceExportExptResultResult() interface{} {
	return expt.NewExperimentServiceExportExptResultResult()
}

func listExptResultExportRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceListExptResultExportRecordArgs)
	realResult := result.(*expt.ExperimentServiceListExptResultExportRecordResult)
	success, err := handler.(expt.ExperimentService).ListExptResultExportRecord(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceListExptResultExportRecordArgs() interface{} {
	return expt.NewExperimentServiceListExptResultExportRecordArgs()
}

func newExperimentServiceListExptResultExportRecordResult() interface{} {
	return expt.NewExperimentServiceListExptResultExportRecordResult()
}

func getExptResultExportRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*expt.ExperimentServiceGetExptResultExportRecordArgs)
	realResult := result.(*expt.ExperimentServiceGetExptResultExportRecordResult)
	success, err := handler.(expt.ExperimentService).GetExptResultExportRecord(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newExperimentServiceGetExptResultExportRecordArgs() interface{} {
	return expt.NewExperimentServiceGetExptResultExportRecordArgs()
}

func newExperimentServiceGetExptResultExportRecordResult() interface{} {
	return expt.NewExperimentServiceGetExptResultExportRecordResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) CheckExperimentName(ctx context.Context, req *expt.CheckExperimentNameRequest) (r *expt.CheckExperimentNameResponse, err error) {
	var _args expt.ExperimentServiceCheckExperimentNameArgs
	_args.Req = req
	var _result expt.ExperimentServiceCheckExperimentNameResult
	if err = p.c.Call(ctx, "CheckExperimentName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateExperiment(ctx context.Context, req *expt.CreateExperimentRequest) (r *expt.CreateExperimentResponse, err error) {
	var _args expt.ExperimentServiceCreateExperimentArgs
	_args.Req = req
	var _result expt.ExperimentServiceCreateExperimentResult
	if err = p.c.Call(ctx, "CreateExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SubmitExperiment(ctx context.Context, req *expt.SubmitExperimentRequest) (r *expt.SubmitExperimentResponse, err error) {
	var _args expt.ExperimentServiceSubmitExperimentArgs
	_args.Req = req
	var _result expt.ExperimentServiceSubmitExperimentResult
	if err = p.c.Call(ctx, "SubmitExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetExperiments(ctx context.Context, req *expt.BatchGetExperimentsRequest) (r *expt.BatchGetExperimentsResponse, err error) {
	var _args expt.ExperimentServiceBatchGetExperimentsArgs
	_args.Req = req
	var _result expt.ExperimentServiceBatchGetExperimentsResult
	if err = p.c.Call(ctx, "BatchGetExperiments", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListExperiments(ctx context.Context, req *expt.ListExperimentsRequest) (r *expt.ListExperimentsResponse, err error) {
	var _args expt.ExperimentServiceListExperimentsArgs
	_args.Req = req
	var _result expt.ExperimentServiceListExperimentsResult
	if err = p.c.Call(ctx, "ListExperiments", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateExperiment(ctx context.Context, req *expt.UpdateExperimentRequest) (r *expt.UpdateExperimentResponse, err error) {
	var _args expt.ExperimentServiceUpdateExperimentArgs
	_args.Req = req
	var _result expt.ExperimentServiceUpdateExperimentResult
	if err = p.c.Call(ctx, "UpdateExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteExperiment(ctx context.Context, req *expt.DeleteExperimentRequest) (r *expt.DeleteExperimentResponse, err error) {
	var _args expt.ExperimentServiceDeleteExperimentArgs
	_args.Req = req
	var _result expt.ExperimentServiceDeleteExperimentResult
	if err = p.c.Call(ctx, "DeleteExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchDeleteExperiments(ctx context.Context, req *expt.BatchDeleteExperimentsRequest) (r *expt.BatchDeleteExperimentsResponse, err error) {
	var _args expt.ExperimentServiceBatchDeleteExperimentsArgs
	_args.Req = req
	var _result expt.ExperimentServiceBatchDeleteExperimentsResult
	if err = p.c.Call(ctx, "BatchDeleteExperiments", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CloneExperiment(ctx context.Context, req *expt.CloneExperimentRequest) (r *expt.CloneExperimentResponse, err error) {
	var _args expt.ExperimentServiceCloneExperimentArgs
	_args.Req = req
	var _result expt.ExperimentServiceCloneExperimentResult
	if err = p.c.Call(ctx, "CloneExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RunExperiment(ctx context.Context, req *expt.RunExperimentRequest) (r *expt.RunExperimentResponse, err error) {
	var _args expt.ExperimentServiceRunExperimentArgs
	_args.Req = req
	var _result expt.ExperimentServiceRunExperimentResult
	if err = p.c.Call(ctx, "RunExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RetryExperiment(ctx context.Context, req *expt.RetryExperimentRequest) (r *expt.RetryExperimentResponse, err error) {
	var _args expt.ExperimentServiceRetryExperimentArgs
	_args.Req = req
	var _result expt.ExperimentServiceRetryExperimentResult
	if err = p.c.Call(ctx, "RetryExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) KillExperiment(ctx context.Context, req *expt.KillExperimentRequest) (r *expt.KillExperimentResponse, err error) {
	var _args expt.ExperimentServiceKillExperimentArgs
	_args.Req = req
	var _result expt.ExperimentServiceKillExperimentResult
	if err = p.c.Call(ctx, "KillExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetExperimentResult_(ctx context.Context, req *expt.BatchGetExperimentResultRequest) (r *expt.BatchGetExperimentResultResponse, err error) {
	var _args expt.ExperimentServiceBatchGetExperimentResultArgs
	_args.Req = req
	var _result expt.ExperimentServiceBatchGetExperimentResultResult
	if err = p.c.Call(ctx, "BatchGetExperimentResult", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetExperimentAggrResult_(ctx context.Context, req *expt.BatchGetExperimentAggrResultRequest) (r *expt.BatchGetExperimentAggrResultResponse, err error) {
	var _args expt.ExperimentServiceBatchGetExperimentAggrResultArgs
	_args.Req = req
	var _result expt.ExperimentServiceBatchGetExperimentAggrResultResult
	if err = p.c.Call(ctx, "BatchGetExperimentAggrResult", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InvokeExperiment(ctx context.Context, req *expt.InvokeExperimentRequest) (r *expt.InvokeExperimentResponse, err error) {
	var _args expt.ExperimentServiceInvokeExperimentArgs
	_args.Req = req
	var _result expt.ExperimentServiceInvokeExperimentResult
	if err = p.c.Call(ctx, "InvokeExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FinishExperiment(ctx context.Context, req *expt.FinishExperimentRequest) (r *expt.FinishExperimentResponse, err error) {
	var _args expt.ExperimentServiceFinishExperimentArgs
	_args.Req = req
	var _result expt.ExperimentServiceFinishExperimentResult
	if err = p.c.Call(ctx, "FinishExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListExperimentStats(ctx context.Context, req *expt.ListExperimentStatsRequest) (r *expt.ListExperimentStatsResponse, err error) {
	var _args expt.ExperimentServiceListExperimentStatsArgs
	_args.Req = req
	var _result expt.ExperimentServiceListExperimentStatsResult
	if err = p.c.Call(ctx, "ListExperimentStats", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpsertExptTurnResultFilter(ctx context.Context, req *expt.UpsertExptTurnResultFilterRequest) (r *expt.UpsertExptTurnResultFilterResponse, err error) {
	var _args expt.ExperimentServiceUpsertExptTurnResultFilterArgs
	_args.Req = req
	var _result expt.ExperimentServiceUpsertExptTurnResultFilterResult
	if err = p.c.Call(ctx, "UpsertExptTurnResultFilter", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AssociateAnnotationTag(ctx context.Context, req *expt.AssociateAnnotationTagReq) (r *expt.AssociateAnnotationTagResp, err error) {
	var _args expt.ExperimentServiceAssociateAnnotationTagArgs
	_args.Req = req
	var _result expt.ExperimentServiceAssociateAnnotationTagResult
	if err = p.c.Call(ctx, "AssociateAnnotationTag", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteAnnotationTag(ctx context.Context, req *expt.DeleteAnnotationTagReq) (r *expt.DeleteAnnotationTagResp, err error) {
	var _args expt.ExperimentServiceDeleteAnnotationTagArgs
	_args.Req = req
	var _result expt.ExperimentServiceDeleteAnnotationTagResult
	if err = p.c.Call(ctx, "DeleteAnnotationTag", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateAnnotateRecord(ctx context.Context, req *expt.CreateAnnotateRecordReq) (r *expt.CreateAnnotateRecordResp, err error) {
	var _args expt.ExperimentServiceCreateAnnotateRecordArgs
	_args.Req = req
	var _result expt.ExperimentServiceCreateAnnotateRecordResult
	if err = p.c.Call(ctx, "CreateAnnotateRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateAnnotateRecord(ctx context.Context, req *expt.UpdateAnnotateRecordReq) (r *expt.UpdateAnnotateRecordResp, err error) {
	var _args expt.ExperimentServiceUpdateAnnotateRecordArgs
	_args.Req = req
	var _result expt.ExperimentServiceUpdateAnnotateRecordResult
	if err = p.c.Call(ctx, "UpdateAnnotateRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ExportExptResult_(ctx context.Context, req *expt.ExportExptResultRequest) (r *expt.ExportExptResultResponse, err error) {
	var _args expt.ExperimentServiceExportExptResultArgs
	_args.Req = req
	var _result expt.ExperimentServiceExportExptResultResult
	if err = p.c.Call(ctx, "ExportExptResult", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListExptResultExportRecord(ctx context.Context, req *expt.ListExptResultExportRecordRequest) (r *expt.ListExptResultExportRecordResponse, err error) {
	var _args expt.ExperimentServiceListExptResultExportRecordArgs
	_args.Req = req
	var _result expt.ExperimentServiceListExptResultExportRecordResult
	if err = p.c.Call(ctx, "ListExptResultExportRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetExptResultExportRecord(ctx context.Context, req *expt.GetExptResultExportRecordRequest) (r *expt.GetExptResultExportRecordResponse, err error) {
	var _args expt.ExperimentServiceGetExptResultExportRecordArgs
	_args.Req = req
	var _result expt.ExperimentServiceGetExptResultExportRecordResult
	if err = p.c.Call(ctx, "GetExptResultExportRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

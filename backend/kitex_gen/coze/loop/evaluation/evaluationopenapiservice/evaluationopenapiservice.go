// Code generated by Kitex v0.13.1. DO NOT EDIT.

package evaluationopenapiservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	evaluation "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation"
	openapi "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/openapi"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateEvaluationSet": kitex.NewMethodInfo(
		createEvaluationSetHandler,
		newEvaluationOpenAPIServiceCreateEvaluationSetArgs,
		newEvaluationOpenAPIServiceCreateEvaluationSetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetEvaluationSet": kitex.NewMethodInfo(
		getEvaluationSetHandler,
		newEvaluationOpenAPIServiceGetEvaluationSetArgs,
		newEvaluationOpenAPIServiceGetEvaluationSetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListEvaluationSets": kitex.NewMethodInfo(
		listEvaluationSetsHandler,
		newEvaluationOpenAPIServiceListEvaluationSetsArgs,
		newEvaluationOpenAPIServiceListEvaluationSetsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateEvaluationSetVersion": kitex.NewMethodInfo(
		createEvaluationSetVersionHandler,
		newEvaluationOpenAPIServiceCreateEvaluationSetVersionArgs,
		newEvaluationOpenAPIServiceCreateEvaluationSetVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchCreateEvaluationSetItems": kitex.NewMethodInfo(
		batchCreateEvaluationSetItemsHandler,
		newEvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs,
		newEvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchUpdateEvaluationSetItems": kitex.NewMethodInfo(
		batchUpdateEvaluationSetItemsHandler,
		newEvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs,
		newEvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchDeleteEvaluationSetItems": kitex.NewMethodInfo(
		batchDeleteEvaluationSetItemsHandler,
		newEvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs,
		newEvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ClearEvaluationSetDraftItems": kitex.NewMethodInfo(
		clearEvaluationSetDraftItemsHandler,
		newEvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs,
		newEvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListEvaluationSetVersionItems": kitex.NewMethodInfo(
		listEvaluationSetVersionItemsHandler,
		newEvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs,
		newEvaluationOpenAPIServiceListEvaluationSetVersionItemsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateEvaluator": kitex.NewMethodInfo(
		createEvaluatorHandler,
		newEvaluationOpenAPIServiceCreateEvaluatorArgs,
		newEvaluationOpenAPIServiceCreateEvaluatorResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SubmitEvaluatorVersion": kitex.NewMethodInfo(
		submitEvaluatorVersionHandler,
		newEvaluationOpenAPIServiceSubmitEvaluatorVersionArgs,
		newEvaluationOpenAPIServiceSubmitEvaluatorVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetEvaluatorVersion": kitex.NewMethodInfo(
		getEvaluatorVersionHandler,
		newEvaluationOpenAPIServiceGetEvaluatorVersionArgs,
		newEvaluationOpenAPIServiceGetEvaluatorVersionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RunEvaluator": kitex.NewMethodInfo(
		runEvaluatorHandler,
		newEvaluationOpenAPIServiceRunEvaluatorArgs,
		newEvaluationOpenAPIServiceRunEvaluatorResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetEvaluatorRecord": kitex.NewMethodInfo(
		getEvaluatorRecordHandler,
		newEvaluationOpenAPIServiceGetEvaluatorRecordArgs,
		newEvaluationOpenAPIServiceGetEvaluatorRecordResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateExperiment": kitex.NewMethodInfo(
		createExperimentHandler,
		newEvaluationOpenAPIServiceCreateExperimentArgs,
		newEvaluationOpenAPIServiceCreateExperimentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetExperimentResult": kitex.NewMethodInfo(
		getExperimentResult_Handler,
		newEvaluationOpenAPIServiceGetExperimentResultArgs,
		newEvaluationOpenAPIServiceGetExperimentResultResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	evaluationOpenAPIServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return evaluationOpenAPIServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "EvaluationOpenAPIService"
	handlerType := (*evaluation.EvaluationOpenAPIService)(nil)
	extra := map[string]interface{}{
		"PackageName": "evaluation",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func createEvaluationSetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*openapi.EvaluationOpenAPIServiceCreateEvaluationSetArgs)
	realResult := result.(*openapi.EvaluationOpenAPIServiceCreateEvaluationSetResult)
	success, err := handler.(openapi.EvaluationOpenAPIService).CreateEvaluationSet(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationOpenAPIServiceCreateEvaluationSetArgs() interface{} {
	return openapi.NewEvaluationOpenAPIServiceCreateEvaluationSetArgs()
}

func newEvaluationOpenAPIServiceCreateEvaluationSetResult() interface{} {
	return openapi.NewEvaluationOpenAPIServiceCreateEvaluationSetResult()
}

func getEvaluationSetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*openapi.EvaluationOpenAPIServiceGetEvaluationSetArgs)
	realResult := result.(*openapi.EvaluationOpenAPIServiceGetEvaluationSetResult)
	success, err := handler.(openapi.EvaluationOpenAPIService).GetEvaluationSet(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationOpenAPIServiceGetEvaluationSetArgs() interface{} {
	return openapi.NewEvaluationOpenAPIServiceGetEvaluationSetArgs()
}

func newEvaluationOpenAPIServiceGetEvaluationSetResult() interface{} {
	return openapi.NewEvaluationOpenAPIServiceGetEvaluationSetResult()
}

func listEvaluationSetsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*openapi.EvaluationOpenAPIServiceListEvaluationSetsArgs)
	realResult := result.(*openapi.EvaluationOpenAPIServiceListEvaluationSetsResult)
	success, err := handler.(openapi.EvaluationOpenAPIService).ListEvaluationSets(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationOpenAPIServiceListEvaluationSetsArgs() interface{} {
	return openapi.NewEvaluationOpenAPIServiceListEvaluationSetsArgs()
}

func newEvaluationOpenAPIServiceListEvaluationSetsResult() interface{} {
	return openapi.NewEvaluationOpenAPIServiceListEvaluationSetsResult()
}

func createEvaluationSetVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*openapi.EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs)
	realResult := result.(*openapi.EvaluationOpenAPIServiceCreateEvaluationSetVersionResult)
	success, err := handler.(openapi.EvaluationOpenAPIService).CreateEvaluationSetVersion(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationOpenAPIServiceCreateEvaluationSetVersionArgs() interface{} {
	return openapi.NewEvaluationOpenAPIServiceCreateEvaluationSetVersionArgs()
}

func newEvaluationOpenAPIServiceCreateEvaluationSetVersionResult() interface{} {
	return openapi.NewEvaluationOpenAPIServiceCreateEvaluationSetVersionResult()
}

func batchCreateEvaluationSetItemsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*openapi.EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs)
	realResult := result.(*openapi.EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult)
	success, err := handler.(openapi.EvaluationOpenAPIService).BatchCreateEvaluationSetItems(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs() interface{} {
	return openapi.NewEvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs()
}

func newEvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult() interface{} {
	return openapi.NewEvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult()
}

func batchUpdateEvaluationSetItemsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*openapi.EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs)
	realResult := result.(*openapi.EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult)
	success, err := handler.(openapi.EvaluationOpenAPIService).BatchUpdateEvaluationSetItems(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs() interface{} {
	return openapi.NewEvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs()
}

func newEvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult() interface{} {
	return openapi.NewEvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult()
}

func batchDeleteEvaluationSetItemsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*openapi.EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs)
	realResult := result.(*openapi.EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult)
	success, err := handler.(openapi.EvaluationOpenAPIService).BatchDeleteEvaluationSetItems(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs() interface{} {
	return openapi.NewEvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs()
}

func newEvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult() interface{} {
	return openapi.NewEvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult()
}

func clearEvaluationSetDraftItemsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*openapi.EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs)
	realResult := result.(*openapi.EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult)
	success, err := handler.(openapi.EvaluationOpenAPIService).ClearEvaluationSetDraftItems(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs() interface{} {
	return openapi.NewEvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs()
}

func newEvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult() interface{} {
	return openapi.NewEvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult()
}

func listEvaluationSetVersionItemsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*openapi.EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs)
	realResult := result.(*openapi.EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult)
	success, err := handler.(openapi.EvaluationOpenAPIService).ListEvaluationSetVersionItems(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs() interface{} {
	return openapi.NewEvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs()
}

func newEvaluationOpenAPIServiceListEvaluationSetVersionItemsResult() interface{} {
	return openapi.NewEvaluationOpenAPIServiceListEvaluationSetVersionItemsResult()
}

func createEvaluatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*openapi.EvaluationOpenAPIServiceCreateEvaluatorArgs)
	realResult := result.(*openapi.EvaluationOpenAPIServiceCreateEvaluatorResult)
	success, err := handler.(openapi.EvaluationOpenAPIService).CreateEvaluator(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationOpenAPIServiceCreateEvaluatorArgs() interface{} {
	return openapi.NewEvaluationOpenAPIServiceCreateEvaluatorArgs()
}

func newEvaluationOpenAPIServiceCreateEvaluatorResult() interface{} {
	return openapi.NewEvaluationOpenAPIServiceCreateEvaluatorResult()
}

func submitEvaluatorVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*openapi.EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs)
	realResult := result.(*openapi.EvaluationOpenAPIServiceSubmitEvaluatorVersionResult)
	success, err := handler.(openapi.EvaluationOpenAPIService).SubmitEvaluatorVersion(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationOpenAPIServiceSubmitEvaluatorVersionArgs() interface{} {
	return openapi.NewEvaluationOpenAPIServiceSubmitEvaluatorVersionArgs()
}

func newEvaluationOpenAPIServiceSubmitEvaluatorVersionResult() interface{} {
	return openapi.NewEvaluationOpenAPIServiceSubmitEvaluatorVersionResult()
}

func getEvaluatorVersionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*openapi.EvaluationOpenAPIServiceGetEvaluatorVersionArgs)
	realResult := result.(*openapi.EvaluationOpenAPIServiceGetEvaluatorVersionResult)
	success, err := handler.(openapi.EvaluationOpenAPIService).GetEvaluatorVersion(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationOpenAPIServiceGetEvaluatorVersionArgs() interface{} {
	return openapi.NewEvaluationOpenAPIServiceGetEvaluatorVersionArgs()
}

func newEvaluationOpenAPIServiceGetEvaluatorVersionResult() interface{} {
	return openapi.NewEvaluationOpenAPIServiceGetEvaluatorVersionResult()
}

func runEvaluatorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*openapi.EvaluationOpenAPIServiceRunEvaluatorArgs)
	realResult := result.(*openapi.EvaluationOpenAPIServiceRunEvaluatorResult)
	success, err := handler.(openapi.EvaluationOpenAPIService).RunEvaluator(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationOpenAPIServiceRunEvaluatorArgs() interface{} {
	return openapi.NewEvaluationOpenAPIServiceRunEvaluatorArgs()
}

func newEvaluationOpenAPIServiceRunEvaluatorResult() interface{} {
	return openapi.NewEvaluationOpenAPIServiceRunEvaluatorResult()
}

func getEvaluatorRecordHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*openapi.EvaluationOpenAPIServiceGetEvaluatorRecordArgs)
	realResult := result.(*openapi.EvaluationOpenAPIServiceGetEvaluatorRecordResult)
	success, err := handler.(openapi.EvaluationOpenAPIService).GetEvaluatorRecord(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationOpenAPIServiceGetEvaluatorRecordArgs() interface{} {
	return openapi.NewEvaluationOpenAPIServiceGetEvaluatorRecordArgs()
}

func newEvaluationOpenAPIServiceGetEvaluatorRecordResult() interface{} {
	return openapi.NewEvaluationOpenAPIServiceGetEvaluatorRecordResult()
}

func createExperimentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*openapi.EvaluationOpenAPIServiceCreateExperimentArgs)
	realResult := result.(*openapi.EvaluationOpenAPIServiceCreateExperimentResult)
	success, err := handler.(openapi.EvaluationOpenAPIService).CreateExperiment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationOpenAPIServiceCreateExperimentArgs() interface{} {
	return openapi.NewEvaluationOpenAPIServiceCreateExperimentArgs()
}

func newEvaluationOpenAPIServiceCreateExperimentResult() interface{} {
	return openapi.NewEvaluationOpenAPIServiceCreateExperimentResult()
}

func getExperimentResult_Handler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*openapi.EvaluationOpenAPIServiceGetExperimentResultArgs)
	realResult := result.(*openapi.EvaluationOpenAPIServiceGetExperimentResultResult)
	success, err := handler.(openapi.EvaluationOpenAPIService).GetExperimentResult_(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationOpenAPIServiceGetExperimentResultArgs() interface{} {
	return openapi.NewEvaluationOpenAPIServiceGetExperimentResultArgs()
}

func newEvaluationOpenAPIServiceGetExperimentResultResult() interface{} {
	return openapi.NewEvaluationOpenAPIServiceGetExperimentResultResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) CreateEvaluationSet(ctx context.Context, req *openapi.CreateEvaluationSetOpenAPIRequest) (r *openapi.CreateEvaluationSetOpenAPIResponse, err error) {
	var _args openapi.EvaluationOpenAPIServiceCreateEvaluationSetArgs
	_args.Req = req
	var _result openapi.EvaluationOpenAPIServiceCreateEvaluationSetResult
	if err = p.c.Call(ctx, "CreateEvaluationSet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetEvaluationSet(ctx context.Context, req *openapi.GetEvaluationSetOpenAPIRequest) (r *openapi.GetEvaluationSetOpenAPIResponse, err error) {
	var _args openapi.EvaluationOpenAPIServiceGetEvaluationSetArgs
	_args.Req = req
	var _result openapi.EvaluationOpenAPIServiceGetEvaluationSetResult
	if err = p.c.Call(ctx, "GetEvaluationSet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListEvaluationSets(ctx context.Context, req *openapi.ListEvaluationSetsOpenAPIRequest) (r *openapi.ListEvaluationSetsOpenAPIResponse, err error) {
	var _args openapi.EvaluationOpenAPIServiceListEvaluationSetsArgs
	_args.Req = req
	var _result openapi.EvaluationOpenAPIServiceListEvaluationSetsResult
	if err = p.c.Call(ctx, "ListEvaluationSets", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateEvaluationSetVersion(ctx context.Context, req *openapi.CreateEvaluationSetVersionOpenAPIRequest) (r *openapi.CreateEvaluationSetVersionOpenAPIResponse, err error) {
	var _args openapi.EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs
	_args.Req = req
	var _result openapi.EvaluationOpenAPIServiceCreateEvaluationSetVersionResult
	if err = p.c.Call(ctx, "CreateEvaluationSetVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchCreateEvaluationSetItems(ctx context.Context, req *openapi.BatchCreateEvaluationSetItemsOpenAPIRequest) (r *openapi.BatchCreateEvaluationSetItemsOpenAPIResponse, err error) {
	var _args openapi.EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs
	_args.Req = req
	var _result openapi.EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult
	if err = p.c.Call(ctx, "BatchCreateEvaluationSetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchUpdateEvaluationSetItems(ctx context.Context, req *openapi.BatchUpdateEvaluationSetItemsOpenAPIRequest) (r *openapi.BatchUpdateEvaluationSetItemsOpenAPIResponse, err error) {
	var _args openapi.EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs
	_args.Req = req
	var _result openapi.EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult
	if err = p.c.Call(ctx, "BatchUpdateEvaluationSetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchDeleteEvaluationSetItems(ctx context.Context, req *openapi.BatchDeleteEvaluationSetItemsOpenAPIRequest) (r *openapi.BatchDeleteEvaluationSetItemsOpenAPIResponse, err error) {
	var _args openapi.EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs
	_args.Req = req
	var _result openapi.EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult
	if err = p.c.Call(ctx, "BatchDeleteEvaluationSetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ClearEvaluationSetDraftItems(ctx context.Context, req *openapi.ClearEvaluationSetDraftItemsOpenAPIRequest) (r *openapi.ClearEvaluationSetDraftItemsOpenAPIResponse, err error) {
	var _args openapi.EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs
	_args.Req = req
	var _result openapi.EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult
	if err = p.c.Call(ctx, "ClearEvaluationSetDraftItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListEvaluationSetVersionItems(ctx context.Context, req *openapi.ListEvaluationSetVersionItemsOpenAPIRequest) (r *openapi.ListEvaluationSetVersionItemsOpenAPIResponse, err error) {
	var _args openapi.EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs
	_args.Req = req
	var _result openapi.EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult
	if err = p.c.Call(ctx, "ListEvaluationSetVersionItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateEvaluator(ctx context.Context, req *openapi.CreateEvaluatorOpenAPIRequest) (r *openapi.CreateEvaluatorOpenAPIResponse, err error) {
	var _args openapi.EvaluationOpenAPIServiceCreateEvaluatorArgs
	_args.Req = req
	var _result openapi.EvaluationOpenAPIServiceCreateEvaluatorResult
	if err = p.c.Call(ctx, "CreateEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SubmitEvaluatorVersion(ctx context.Context, req *openapi.SubmitEvaluatorVersionOpenAPIRequest) (r *openapi.SubmitEvaluatorVersionOpenAPIResponse, err error) {
	var _args openapi.EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs
	_args.Req = req
	var _result openapi.EvaluationOpenAPIServiceSubmitEvaluatorVersionResult
	if err = p.c.Call(ctx, "SubmitEvaluatorVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetEvaluatorVersion(ctx context.Context, req *openapi.GetEvaluatorVersionOpenAPIRequest) (r *openapi.GetEvaluatorVersionOpenAPIResponse, err error) {
	var _args openapi.EvaluationOpenAPIServiceGetEvaluatorVersionArgs
	_args.Req = req
	var _result openapi.EvaluationOpenAPIServiceGetEvaluatorVersionResult
	if err = p.c.Call(ctx, "GetEvaluatorVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RunEvaluator(ctx context.Context, req *openapi.RunEvaluatorOpenAPIRequest) (r *openapi.RunEvaluatorOpenAPIResponse, err error) {
	var _args openapi.EvaluationOpenAPIServiceRunEvaluatorArgs
	_args.Req = req
	var _result openapi.EvaluationOpenAPIServiceRunEvaluatorResult
	if err = p.c.Call(ctx, "RunEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetEvaluatorRecord(ctx context.Context, req *openapi.GetEvaluatorRecordOpenAPIRequest) (r *openapi.GetEvaluatorRecordOpenAPIResponse, err error) {
	var _args openapi.EvaluationOpenAPIServiceGetEvaluatorRecordArgs
	_args.Req = req
	var _result openapi.EvaluationOpenAPIServiceGetEvaluatorRecordResult
	if err = p.c.Call(ctx, "GetEvaluatorRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateExperiment(ctx context.Context, req *openapi.CreateExperimentOpenAPIRequest) (r *openapi.CreateExperimentOpenAPIResponse, err error) {
	var _args openapi.EvaluationOpenAPIServiceCreateExperimentArgs
	_args.Req = req
	var _result openapi.EvaluationOpenAPIServiceCreateExperimentResult
	if err = p.c.Call(ctx, "CreateExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetExperimentResult_(ctx context.Context, req *openapi.GetExperimentResultOpenAPIRequest) (r *openapi.GetExperimentResultOpenAPIResponse, err error) {
	var _args openapi.EvaluationOpenAPIServiceGetExperimentResultArgs
	_args.Req = req
	var _result openapi.EvaluationOpenAPIServiceGetExperimentResultResult
	if err = p.c.Call(ctx, "GetExperimentResult", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

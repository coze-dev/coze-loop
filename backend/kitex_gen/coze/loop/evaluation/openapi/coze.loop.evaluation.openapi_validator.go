// Code generated by Validator v0.2.6. DO NOT EDIT.

package openapi

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *CreateEvaluationSetOApiRequest) IsValid() error {
	if p.Name != nil {
		if len(*p.Name) < int(1) {
			return fmt.Errorf("field Name min_len rule failed, current value: %d", len(*p.Name))
		}
		if len(*p.Name) > int(255) {
			return fmt.Errorf("field Name max_len rule failed, current value: %d", len(*p.Name))
		}
	}
	if p.Description != nil {
		if len(*p.Description) > int(2048) {
			return fmt.Errorf("field Description max_len rule failed, current value: %d", len(*p.Description))
		}
	}
	if p.EvaluationSetSchema != nil {
		if err := p.EvaluationSetSchema.IsValid(); err != nil {
			return fmt.Errorf("field EvaluationSetSchema not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateEvaluationSetOApiResponse) IsValid() error {
	if p.Data != nil {
		if err := p.Data.IsValid(); err != nil {
			return fmt.Errorf("field Data not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateEvaluationSetOpenAPIData) IsValid() error {
	return nil
}
func (p *GetEvaluationSetOApiRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetEvaluationSetOApiResponse) IsValid() error {
	if p.Data != nil {
		if err := p.Data.IsValid(); err != nil {
			return fmt.Errorf("field Data not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetEvaluationSetOpenAPIData) IsValid() error {
	if p.EvaluationSet != nil {
		if err := p.EvaluationSet.IsValid(); err != nil {
			return fmt.Errorf("field EvaluationSet not valid, %w", err)
		}
	}
	return nil
}
func (p *ListEvaluationSetsOApiRequest) IsValid() error {
	if p.PageSize != nil {
		if *p.PageSize <= int32(0) {
			return fmt.Errorf("field PageSize gt rule failed, current value: %v", *p.PageSize)
		}
		if *p.PageSize > int32(200) {
			return fmt.Errorf("field PageSize le rule failed, current value: %v", *p.PageSize)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListEvaluationSetsOApiResponse) IsValid() error {
	if p.Data != nil {
		if err := p.Data.IsValid(); err != nil {
			return fmt.Errorf("field Data not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListEvaluationSetsOpenAPIData) IsValid() error {
	return nil
}
func (p *CreateEvaluationSetVersionOApiRequest) IsValid() error {
	if p.Version != nil {
		if len(*p.Version) < int(1) {
			return fmt.Errorf("field Version min_len rule failed, current value: %d", len(*p.Version))
		}
		if len(*p.Version) > int(50) {
			return fmt.Errorf("field Version max_len rule failed, current value: %d", len(*p.Version))
		}
	}
	if p.Description != nil {
		if len(*p.Description) > int(400) {
			return fmt.Errorf("field Description max_len rule failed, current value: %d", len(*p.Description))
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateEvaluationSetVersionOApiResponse) IsValid() error {
	if p.Data != nil {
		if err := p.Data.IsValid(); err != nil {
			return fmt.Errorf("field Data not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateEvaluationSetVersionOpenAPIData) IsValid() error {
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) IsValid() error {
	if len(p.Items) < int(1) {
		return fmt.Errorf("field Items MinLen rule failed, current value: %v", p.Items)
	}
	if len(p.Items) > int(100) {
		return fmt.Errorf("field Items MaxLen rule failed, current value: %v", p.Items)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) IsValid() error {
	if p.Data != nil {
		if err := p.Data.IsValid(); err != nil {
			return fmt.Errorf("field Data not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchCreateEvaluationSetItemsOpenAPIData) IsValid() error {
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) IsValid() error {
	if len(p.Items) < int(1) {
		return fmt.Errorf("field Items MinLen rule failed, current value: %v", p.Items)
	}
	if len(p.Items) > int(100) {
		return fmt.Errorf("field Items MaxLen rule failed, current value: %v", p.Items)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) IsValid() error {
	if p.Data != nil {
		if err := p.Data.IsValid(); err != nil {
			return fmt.Errorf("field Data not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIData) IsValid() error {
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiRequest) IsValid() error {
	if p.PageSize != nil {
		if *p.PageSize <= int32(0) {
			return fmt.Errorf("field PageSize gt rule failed, current value: %v", *p.PageSize)
		}
		if *p.PageSize > int32(200) {
			return fmt.Errorf("field PageSize le rule failed, current value: %v", *p.PageSize)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiResponse) IsValid() error {
	if p.Data != nil {
		if err := p.Data.IsValid(); err != nil {
			return fmt.Errorf("field Data not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) IsValid() error {
	return nil
}
func (p *CreateEvaluatorOApiRequest) IsValid() error {
	if p.Evaluator != nil {
		if err := p.Evaluator.IsValid(); err != nil {
			return fmt.Errorf("field Evaluator not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateEvaluatorOApiResponse) IsValid() error {
	if p.Data != nil {
		if err := p.Data.IsValid(); err != nil {
			return fmt.Errorf("field Data not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateEvaluatorOpenAPIData) IsValid() error {
	return nil
}
func (p *SubmitEvaluatorVersionOApiRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *SubmitEvaluatorVersionOApiResponse) IsValid() error {
	if p.Data != nil {
		if err := p.Data.IsValid(); err != nil {
			return fmt.Errorf("field Data not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *SubmitEvaluatorVersionOpenAPIData) IsValid() error {
	if p.Evaluator != nil {
		if err := p.Evaluator.IsValid(); err != nil {
			return fmt.Errorf("field Evaluator not valid, %w", err)
		}
	}
	return nil
}
func (p *GetEvaluatorVersionOApiRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetEvaluatorVersionOApiResponse) IsValid() error {
	if p.Data != nil {
		if err := p.Data.IsValid(); err != nil {
			return fmt.Errorf("field Data not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetEvaluatorVersionOpenAPIData) IsValid() error {
	if p.Evaluator != nil {
		if err := p.Evaluator.IsValid(); err != nil {
			return fmt.Errorf("field Evaluator not valid, %w", err)
		}
	}
	return nil
}
func (p *RunEvaluatorOApiRequest) IsValid() error {
	if p.InputData != nil {
		if err := p.InputData.IsValid(); err != nil {
			return fmt.Errorf("field InputData not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *RunEvaluatorOApiResponse) IsValid() error {
	if p.Data != nil {
		if err := p.Data.IsValid(); err != nil {
			return fmt.Errorf("field Data not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *RunEvaluatorOpenAPIData) IsValid() error {
	if p.Record != nil {
		if err := p.Record.IsValid(); err != nil {
			return fmt.Errorf("field Record not valid, %w", err)
		}
	}
	return nil
}
func (p *GetEvaluatorRecordOApiRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetEvaluatorRecordOApiResponse) IsValid() error {
	if p.Data != nil {
		if err := p.Data.IsValid(); err != nil {
			return fmt.Errorf("field Data not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetEvaluatorRecordOpenAPIData) IsValid() error {
	if p.Record != nil {
		if err := p.Record.IsValid(); err != nil {
			return fmt.Errorf("field Record not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateExperimentOApiRequest) IsValid() error {
	if p.TargetFieldMapping != nil {
		if err := p.TargetFieldMapping.IsValid(); err != nil {
			return fmt.Errorf("field TargetFieldMapping not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateExperimentOApiResponse) IsValid() error {
	if p.Data != nil {
		if err := p.Data.IsValid(); err != nil {
			return fmt.Errorf("field Data not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateExperimentOpenAPIData) IsValid() error {
	if p.Experiment != nil {
		if err := p.Experiment.IsValid(); err != nil {
			return fmt.Errorf("field Experiment not valid, %w", err)
		}
	}
	return nil
}
func (p *GetExperimentResultOApiRequest) IsValid() error {
	if p.PageSize != nil {
		if *p.PageSize <= int32(0) {
			return fmt.Errorf("field PageSize gt rule failed, current value: %v", *p.PageSize)
		}
		if *p.PageSize > int32(200) {
			return fmt.Errorf("field PageSize le rule failed, current value: %v", *p.PageSize)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetExperimentResultOApiResponse) IsValid() error {
	if p.Data != nil {
		if err := p.Data.IsValid(); err != nil {
			return fmt.Errorf("field Data not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetExperimentResultOpenAPIData) IsValid() error {
	return nil
}

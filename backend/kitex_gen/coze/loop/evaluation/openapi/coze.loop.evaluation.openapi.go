// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package openapi

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/spi"
	"strings"
)

type ReportEvalTargetInvokeResultRequest struct {
	WorkspaceID *int64                      `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	InvokeID    *int64                      `thrift:"invoke_id,2,optional" frugal:"2,optional,i64" json:"invoke_id" form:"invoke_id" query:"invoke_id"`
	Status      *spi.InvokeEvalTargetStatus `thrift:"status,3,optional" frugal:"3,optional,InvokeEvalTargetStatus" form:"status" json:"status,omitempty" query:"status"`
	Callee      *string                     `thrift:"callee,4,optional" frugal:"4,optional,string" form:"callee" json:"callee,omitempty" query:"callee"`
	// set output if status=SUCCESS
	Output *spi.InvokeEvalTargetOutput `thrift:"output,10,optional" frugal:"10,optional,spi.InvokeEvalTargetOutput" form:"output" json:"output,omitempty" query:"output"`
	// set output if status=SUCCESS
	Usage *spi.InvokeEvalTargetUsage `thrift:"usage,11,optional" frugal:"11,optional,spi.InvokeEvalTargetUsage" form:"usage" json:"usage,omitempty" query:"usage"`
	// set error_message if status=FAILED
	ErrorMessage *string    `thrift:"error_message,20,optional" frugal:"20,optional,string" form:"error_message" json:"error_message,omitempty" query:"error_message"`
	Base         *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewReportEvalTargetInvokeResultRequest() *ReportEvalTargetInvokeResultRequest {
	return &ReportEvalTargetInvokeResultRequest{}
}

func (p *ReportEvalTargetInvokeResultRequest) InitDefault() {
}

var ReportEvalTargetInvokeResultRequest_WorkspaceID_DEFAULT int64

func (p *ReportEvalTargetInvokeResultRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return ReportEvalTargetInvokeResultRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var ReportEvalTargetInvokeResultRequest_InvokeID_DEFAULT int64

func (p *ReportEvalTargetInvokeResultRequest) GetInvokeID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetInvokeID() {
		return ReportEvalTargetInvokeResultRequest_InvokeID_DEFAULT
	}
	return *p.InvokeID
}

var ReportEvalTargetInvokeResultRequest_Status_DEFAULT spi.InvokeEvalTargetStatus

func (p *ReportEvalTargetInvokeResultRequest) GetStatus() (v spi.InvokeEvalTargetStatus) {
	if p == nil {
		return
	}
	if !p.IsSetStatus() {
		return ReportEvalTargetInvokeResultRequest_Status_DEFAULT
	}
	return *p.Status
}

var ReportEvalTargetInvokeResultRequest_Callee_DEFAULT string

func (p *ReportEvalTargetInvokeResultRequest) GetCallee() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCallee() {
		return ReportEvalTargetInvokeResultRequest_Callee_DEFAULT
	}
	return *p.Callee
}

var ReportEvalTargetInvokeResultRequest_Output_DEFAULT *spi.InvokeEvalTargetOutput

func (p *ReportEvalTargetInvokeResultRequest) GetOutput() (v *spi.InvokeEvalTargetOutput) {
	if p == nil {
		return
	}
	if !p.IsSetOutput() {
		return ReportEvalTargetInvokeResultRequest_Output_DEFAULT
	}
	return p.Output
}

var ReportEvalTargetInvokeResultRequest_Usage_DEFAULT *spi.InvokeEvalTargetUsage

func (p *ReportEvalTargetInvokeResultRequest) GetUsage() (v *spi.InvokeEvalTargetUsage) {
	if p == nil {
		return
	}
	if !p.IsSetUsage() {
		return ReportEvalTargetInvokeResultRequest_Usage_DEFAULT
	}
	return p.Usage
}

var ReportEvalTargetInvokeResultRequest_ErrorMessage_DEFAULT string

func (p *ReportEvalTargetInvokeResultRequest) GetErrorMessage() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetErrorMessage() {
		return ReportEvalTargetInvokeResultRequest_ErrorMessage_DEFAULT
	}
	return *p.ErrorMessage
}

var ReportEvalTargetInvokeResultRequest_Base_DEFAULT *base.Base

func (p *ReportEvalTargetInvokeResultRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ReportEvalTargetInvokeResultRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ReportEvalTargetInvokeResultRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *ReportEvalTargetInvokeResultRequest) SetInvokeID(val *int64) {
	p.InvokeID = val
}
func (p *ReportEvalTargetInvokeResultRequest) SetStatus(val *spi.InvokeEvalTargetStatus) {
	p.Status = val
}
func (p *ReportEvalTargetInvokeResultRequest) SetCallee(val *string) {
	p.Callee = val
}
func (p *ReportEvalTargetInvokeResultRequest) SetOutput(val *spi.InvokeEvalTargetOutput) {
	p.Output = val
}
func (p *ReportEvalTargetInvokeResultRequest) SetUsage(val *spi.InvokeEvalTargetUsage) {
	p.Usage = val
}
func (p *ReportEvalTargetInvokeResultRequest) SetErrorMessage(val *string) {
	p.ErrorMessage = val
}
func (p *ReportEvalTargetInvokeResultRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ReportEvalTargetInvokeResultRequest = map[int16]string{
	1:   "workspace_id",
	2:   "invoke_id",
	3:   "status",
	4:   "callee",
	10:  "output",
	11:  "usage",
	20:  "error_message",
	255: "Base",
}

func (p *ReportEvalTargetInvokeResultRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *ReportEvalTargetInvokeResultRequest) IsSetInvokeID() bool {
	return p.InvokeID != nil
}

func (p *ReportEvalTargetInvokeResultRequest) IsSetStatus() bool {
	return p.Status != nil
}

func (p *ReportEvalTargetInvokeResultRequest) IsSetCallee() bool {
	return p.Callee != nil
}

func (p *ReportEvalTargetInvokeResultRequest) IsSetOutput() bool {
	return p.Output != nil
}

func (p *ReportEvalTargetInvokeResultRequest) IsSetUsage() bool {
	return p.Usage != nil
}

func (p *ReportEvalTargetInvokeResultRequest) IsSetErrorMessage() bool {
	return p.ErrorMessage != nil
}

func (p *ReportEvalTargetInvokeResultRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ReportEvalTargetInvokeResultRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ReportEvalTargetInvokeResultRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ReportEvalTargetInvokeResultRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ReportEvalTargetInvokeResultRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InvokeID = _field
	return nil
}
func (p *ReportEvalTargetInvokeResultRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *spi.InvokeEvalTargetStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := spi.InvokeEvalTargetStatus(v)
		_field = &tmp
	}
	p.Status = _field
	return nil
}
func (p *ReportEvalTargetInvokeResultRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Callee = _field
	return nil
}
func (p *ReportEvalTargetInvokeResultRequest) ReadField10(iprot thrift.TProtocol) error {
	_field := spi.NewInvokeEvalTargetOutput()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Output = _field
	return nil
}
func (p *ReportEvalTargetInvokeResultRequest) ReadField11(iprot thrift.TProtocol) error {
	_field := spi.NewInvokeEvalTargetUsage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Usage = _field
	return nil
}
func (p *ReportEvalTargetInvokeResultRequest) ReadField20(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ErrorMessage = _field
	return nil
}
func (p *ReportEvalTargetInvokeResultRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ReportEvalTargetInvokeResultRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReportEvalTargetInvokeResultRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ReportEvalTargetInvokeResultRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ReportEvalTargetInvokeResultRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvokeID() {
		if err = oprot.WriteFieldBegin("invoke_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.InvokeID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ReportEvalTargetInvokeResultRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ReportEvalTargetInvokeResultRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCallee() {
		if err = oprot.WriteFieldBegin("callee", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Callee); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ReportEvalTargetInvokeResultRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutput() {
		if err = oprot.WriteFieldBegin("output", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Output.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *ReportEvalTargetInvokeResultRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsage() {
		if err = oprot.WriteFieldBegin("usage", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Usage.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *ReportEvalTargetInvokeResultRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMessage() {
		if err = oprot.WriteFieldBegin("error_message", thrift.STRING, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ErrorMessage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *ReportEvalTargetInvokeResultRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ReportEvalTargetInvokeResultRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportEvalTargetInvokeResultRequest(%+v)", *p)

}

func (p *ReportEvalTargetInvokeResultRequest) DeepEqual(ano *ReportEvalTargetInvokeResultRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.InvokeID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Status) {
		return false
	}
	if !p.Field4DeepEqual(ano.Callee) {
		return false
	}
	if !p.Field10DeepEqual(ano.Output) {
		return false
	}
	if !p.Field11DeepEqual(ano.Usage) {
		return false
	}
	if !p.Field20DeepEqual(ano.ErrorMessage) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ReportEvalTargetInvokeResultRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *ReportEvalTargetInvokeResultRequest) Field2DeepEqual(src *int64) bool {

	if p.InvokeID == src {
		return true
	} else if p.InvokeID == nil || src == nil {
		return false
	}
	if *p.InvokeID != *src {
		return false
	}
	return true
}
func (p *ReportEvalTargetInvokeResultRequest) Field3DeepEqual(src *spi.InvokeEvalTargetStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}
func (p *ReportEvalTargetInvokeResultRequest) Field4DeepEqual(src *string) bool {

	if p.Callee == src {
		return true
	} else if p.Callee == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Callee, *src) != 0 {
		return false
	}
	return true
}
func (p *ReportEvalTargetInvokeResultRequest) Field10DeepEqual(src *spi.InvokeEvalTargetOutput) bool {

	if !p.Output.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ReportEvalTargetInvokeResultRequest) Field11DeepEqual(src *spi.InvokeEvalTargetUsage) bool {

	if !p.Usage.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ReportEvalTargetInvokeResultRequest) Field20DeepEqual(src *string) bool {

	if p.ErrorMessage == src {
		return true
	} else if p.ErrorMessage == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ErrorMessage, *src) != 0 {
		return false
	}
	return true
}
func (p *ReportEvalTargetInvokeResultRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ReportEvalTargetInvokeResultResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewReportEvalTargetInvokeResultResponse() *ReportEvalTargetInvokeResultResponse {
	return &ReportEvalTargetInvokeResultResponse{}
}

func (p *ReportEvalTargetInvokeResultResponse) InitDefault() {
}

var ReportEvalTargetInvokeResultResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ReportEvalTargetInvokeResultResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ReportEvalTargetInvokeResultResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ReportEvalTargetInvokeResultResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ReportEvalTargetInvokeResultResponse = map[int16]string{
	255: "BaseResp",
}

func (p *ReportEvalTargetInvokeResultResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ReportEvalTargetInvokeResultResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ReportEvalTargetInvokeResultResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ReportEvalTargetInvokeResultResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ReportEvalTargetInvokeResultResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReportEvalTargetInvokeResultResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ReportEvalTargetInvokeResultResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ReportEvalTargetInvokeResultResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportEvalTargetInvokeResultResponse(%+v)", *p)

}

func (p *ReportEvalTargetInvokeResultResponse) DeepEqual(ano *ReportEvalTargetInvokeResultResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ReportEvalTargetInvokeResultResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIService interface {
	ReportEvalTargetInvokeResult_(ctx context.Context, req *ReportEvalTargetInvokeResultRequest) (r *ReportEvalTargetInvokeResultResponse, err error)
}

type EvaluationOpenAPIServiceClient struct {
	c thrift.TClient
}

func NewEvaluationOpenAPIServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EvaluationOpenAPIServiceClient {
	return &EvaluationOpenAPIServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewEvaluationOpenAPIServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EvaluationOpenAPIServiceClient {
	return &EvaluationOpenAPIServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewEvaluationOpenAPIServiceClient(c thrift.TClient) *EvaluationOpenAPIServiceClient {
	return &EvaluationOpenAPIServiceClient{
		c: c,
	}
}

func (p *EvaluationOpenAPIServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *EvaluationOpenAPIServiceClient) ReportEvalTargetInvokeResult_(ctx context.Context, req *ReportEvalTargetInvokeResultRequest) (r *ReportEvalTargetInvokeResultResponse, err error) {
	var _args EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult
	if err = p.Client_().Call(ctx, "ReportEvalTargetInvokeResult", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type EvaluationOpenAPIServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      EvaluationOpenAPIService
}

func (p *EvaluationOpenAPIServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *EvaluationOpenAPIServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *EvaluationOpenAPIServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewEvaluationOpenAPIServiceProcessor(handler EvaluationOpenAPIService) *EvaluationOpenAPIServiceProcessor {
	self := &EvaluationOpenAPIServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("ReportEvalTargetInvokeResult", &evaluationOpenAPIServiceProcessorReportEvalTargetInvokeResult_{handler: handler})
	return self
}
func (p *EvaluationOpenAPIServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type evaluationOpenAPIServiceProcessorReportEvalTargetInvokeResult_ struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorReportEvalTargetInvokeResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ReportEvalTargetInvokeResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult{}
	var retval *ReportEvalTargetInvokeResultResponse
	if retval, err2 = p.handler.ReportEvalTargetInvokeResult_(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ReportEvalTargetInvokeResult: "+err2.Error())
		oprot.WriteMessageBegin("ReportEvalTargetInvokeResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ReportEvalTargetInvokeResult", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs struct {
	Req *ReportEvalTargetInvokeResultRequest `thrift:"req,1" frugal:"1,default,ReportEvalTargetInvokeResultRequest"`
}

func NewEvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs() *EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs {
	return &EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs{}
}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs) InitDefault() {
}

var EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs_Req_DEFAULT *ReportEvalTargetInvokeResultRequest

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs) GetReq() (v *ReportEvalTargetInvokeResultRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs) SetReq(val *ReportEvalTargetInvokeResultRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewReportEvalTargetInvokeResultRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReportEvalTargetInvokeResult_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs) DeepEqual(ano *EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs) Field1DeepEqual(src *ReportEvalTargetInvokeResultRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult struct {
	Success *ReportEvalTargetInvokeResultResponse `thrift:"success,0,optional" frugal:"0,optional,ReportEvalTargetInvokeResultResponse"`
}

func NewEvaluationOpenAPIServiceReportEvalTargetInvokeResultResult() *EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult {
	return &EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult{}
}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult) InitDefault() {
}

var EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult_Success_DEFAULT *ReportEvalTargetInvokeResultResponse

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult) GetSuccess() (v *ReportEvalTargetInvokeResultResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult) SetSuccess(x interface{}) {
	p.Success = x.(*ReportEvalTargetInvokeResultResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewReportEvalTargetInvokeResultResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReportEvalTargetInvokeResult_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult) DeepEqual(ano *EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult) Field0DeepEqual(src *ReportEvalTargetInvokeResultResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package openapi

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain_openapi/common"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain_openapi/eval_set"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain_openapi/evaluator"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain_openapi/experiment"
	"strings"
)

// ===============================
// 评测集相关接口 (9个接口)
// ===============================
// 1.1 创建评测集
type CreateEvaluationSetOpenAPIRequest struct {
	WorkspaceID         int64                         `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	Name                string                        `thrift:"name,2,required" frugal:"2,required,string" form:"name,required" json:"name,required" query:"name,required"`
	Description         *string                       `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty" query:"description"`
	EvaluationSetSchema *eval_set.EvaluationSetSchema `thrift:"evaluation_set_schema,4,optional" frugal:"4,optional,eval_set.EvaluationSetSchema" form:"evaluation_set_schema" json:"evaluation_set_schema,omitempty" query:"evaluation_set_schema"`
	Base                *base.Base                    `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateEvaluationSetOpenAPIRequest() *CreateEvaluationSetOpenAPIRequest {
	return &CreateEvaluationSetOpenAPIRequest{}
}

func (p *CreateEvaluationSetOpenAPIRequest) InitDefault() {
}

func (p *CreateEvaluationSetOpenAPIRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *CreateEvaluationSetOpenAPIRequest) GetName() (v string) {
	if p != nil {
		return p.Name
	}
	return
}

var CreateEvaluationSetOpenAPIRequest_Description_DEFAULT string

func (p *CreateEvaluationSetOpenAPIRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return CreateEvaluationSetOpenAPIRequest_Description_DEFAULT
	}
	return *p.Description
}

var CreateEvaluationSetOpenAPIRequest_EvaluationSetSchema_DEFAULT *eval_set.EvaluationSetSchema

func (p *CreateEvaluationSetOpenAPIRequest) GetEvaluationSetSchema() (v *eval_set.EvaluationSetSchema) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetSchema() {
		return CreateEvaluationSetOpenAPIRequest_EvaluationSetSchema_DEFAULT
	}
	return p.EvaluationSetSchema
}

var CreateEvaluationSetOpenAPIRequest_Base_DEFAULT *base.Base

func (p *CreateEvaluationSetOpenAPIRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateEvaluationSetOpenAPIRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateEvaluationSetOpenAPIRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *CreateEvaluationSetOpenAPIRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateEvaluationSetOpenAPIRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *CreateEvaluationSetOpenAPIRequest) SetEvaluationSetSchema(val *eval_set.EvaluationSetSchema) {
	p.EvaluationSetSchema = val
}
func (p *CreateEvaluationSetOpenAPIRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateEvaluationSetOpenAPIRequest = map[int16]string{
	1:   "workspace_id",
	2:   "name",
	3:   "description",
	4:   "evaluation_set_schema",
	255: "Base",
}

func (p *CreateEvaluationSetOpenAPIRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CreateEvaluationSetOpenAPIRequest) IsSetEvaluationSetSchema() bool {
	return p.EvaluationSetSchema != nil
}

func (p *CreateEvaluationSetOpenAPIRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateEvaluationSetOpenAPIRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetOpenAPIRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEvaluationSetOpenAPIRequest[fieldId]))
}

func (p *CreateEvaluationSetOpenAPIRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateEvaluationSetOpenAPIRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CreateEvaluationSetOpenAPIRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *CreateEvaluationSetOpenAPIRequest) ReadField4(iprot thrift.TProtocol) error {
	_field := eval_set.NewEvaluationSetSchema()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluationSetSchema = _field
	return nil
}
func (p *CreateEvaluationSetOpenAPIRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateEvaluationSetOpenAPIRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetOpenAPIRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetOpenAPIRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluationSetOpenAPIRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluationSetOpenAPIRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateEvaluationSetOpenAPIRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetSchema() {
		if err = oprot.WriteFieldBegin("evaluation_set_schema", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluationSetSchema.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CreateEvaluationSetOpenAPIRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluationSetOpenAPIRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetOpenAPIRequest(%+v)", *p)

}

func (p *CreateEvaluationSetOpenAPIRequest) DeepEqual(ano *CreateEvaluationSetOpenAPIRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluationSetSchema) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetOpenAPIRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOpenAPIRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOpenAPIRequest) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOpenAPIRequest) Field4DeepEqual(src *eval_set.EvaluationSetSchema) bool {

	if !p.EvaluationSetSchema.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOpenAPIRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluationSetOpenAPIResponse struct {
	Code     *int32                          `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                         `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *CreateEvaluationSetOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,CreateEvaluationSetOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                  `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateEvaluationSetOpenAPIResponse() *CreateEvaluationSetOpenAPIResponse {
	return &CreateEvaluationSetOpenAPIResponse{}
}

func (p *CreateEvaluationSetOpenAPIResponse) InitDefault() {
}

var CreateEvaluationSetOpenAPIResponse_Code_DEFAULT int32

func (p *CreateEvaluationSetOpenAPIResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return CreateEvaluationSetOpenAPIResponse_Code_DEFAULT
	}
	return *p.Code
}

var CreateEvaluationSetOpenAPIResponse_Msg_DEFAULT string

func (p *CreateEvaluationSetOpenAPIResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return CreateEvaluationSetOpenAPIResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var CreateEvaluationSetOpenAPIResponse_Data_DEFAULT *CreateEvaluationSetOpenAPIData

func (p *CreateEvaluationSetOpenAPIResponse) GetData() (v *CreateEvaluationSetOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return CreateEvaluationSetOpenAPIResponse_Data_DEFAULT
	}
	return p.Data
}

var CreateEvaluationSetOpenAPIResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateEvaluationSetOpenAPIResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateEvaluationSetOpenAPIResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateEvaluationSetOpenAPIResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *CreateEvaluationSetOpenAPIResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *CreateEvaluationSetOpenAPIResponse) SetData(val *CreateEvaluationSetOpenAPIData) {
	p.Data = val
}
func (p *CreateEvaluationSetOpenAPIResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateEvaluationSetOpenAPIResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *CreateEvaluationSetOpenAPIResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *CreateEvaluationSetOpenAPIResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *CreateEvaluationSetOpenAPIResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *CreateEvaluationSetOpenAPIResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateEvaluationSetOpenAPIResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetOpenAPIResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetOpenAPIResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *CreateEvaluationSetOpenAPIResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *CreateEvaluationSetOpenAPIResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *CreateEvaluationSetOpenAPIResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateEvaluationSetOpenAPIResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetOpenAPIResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetOpenAPIResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluationSetOpenAPIResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluationSetOpenAPIResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateEvaluationSetOpenAPIResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluationSetOpenAPIResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetOpenAPIResponse(%+v)", *p)

}

func (p *CreateEvaluationSetOpenAPIResponse) DeepEqual(ano *CreateEvaluationSetOpenAPIResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetOpenAPIResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOpenAPIResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOpenAPIResponse) Field3DeepEqual(src *CreateEvaluationSetOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOpenAPIResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluationSetOpenAPIData struct {
	EvaluationSetID *int64 `thrift:"evaluation_set_id,1,optional" frugal:"1,optional,i64" form:"evaluation_set_id" json:"evaluation_set_id,string,omitempty" query:"evaluation_set_id"`
}

func NewCreateEvaluationSetOpenAPIData() *CreateEvaluationSetOpenAPIData {
	return &CreateEvaluationSetOpenAPIData{}
}

func (p *CreateEvaluationSetOpenAPIData) InitDefault() {
}

var CreateEvaluationSetOpenAPIData_EvaluationSetID_DEFAULT int64

func (p *CreateEvaluationSetOpenAPIData) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return CreateEvaluationSetOpenAPIData_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}
func (p *CreateEvaluationSetOpenAPIData) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}

var fieldIDToName_CreateEvaluationSetOpenAPIData = map[int16]string{
	1: "evaluation_set_id",
}

func (p *CreateEvaluationSetOpenAPIData) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *CreateEvaluationSetOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetOpenAPIData) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}

func (p *CreateEvaluationSetOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEvaluationSetOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetOpenAPIData(%+v)", *p)

}

func (p *CreateEvaluationSetOpenAPIData) DeepEqual(ano *CreateEvaluationSetOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluationSetID) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetOpenAPIData) Field1DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}

// 1.2 获取评测集详情
type GetEvaluationSetOpenAPIRequest struct {
	WorkspaceID     int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64      `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id,required" path:"evaluation_set_id,required"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetEvaluationSetOpenAPIRequest() *GetEvaluationSetOpenAPIRequest {
	return &GetEvaluationSetOpenAPIRequest{}
}

func (p *GetEvaluationSetOpenAPIRequest) InitDefault() {
}

func (p *GetEvaluationSetOpenAPIRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *GetEvaluationSetOpenAPIRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var GetEvaluationSetOpenAPIRequest_Base_DEFAULT *base.Base

func (p *GetEvaluationSetOpenAPIRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetEvaluationSetOpenAPIRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetEvaluationSetOpenAPIRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *GetEvaluationSetOpenAPIRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *GetEvaluationSetOpenAPIRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetEvaluationSetOpenAPIRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	255: "Base",
}

func (p *GetEvaluationSetOpenAPIRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetEvaluationSetOpenAPIRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluationSetOpenAPIRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetEvaluationSetOpenAPIRequest[fieldId]))
}

func (p *GetEvaluationSetOpenAPIRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetEvaluationSetOpenAPIRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *GetEvaluationSetOpenAPIRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetEvaluationSetOpenAPIRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetOpenAPIRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluationSetOpenAPIRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluationSetOpenAPIRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluationSetOpenAPIRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluationSetOpenAPIRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluationSetOpenAPIRequest(%+v)", *p)

}

func (p *GetEvaluationSetOpenAPIRequest) DeepEqual(ano *GetEvaluationSetOpenAPIRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetEvaluationSetOpenAPIRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *GetEvaluationSetOpenAPIRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *GetEvaluationSetOpenAPIRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluationSetOpenAPIResponse struct {
	Code     *int32                       `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                      `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *GetEvaluationSetOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,GetEvaluationSetOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp               `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetEvaluationSetOpenAPIResponse() *GetEvaluationSetOpenAPIResponse {
	return &GetEvaluationSetOpenAPIResponse{}
}

func (p *GetEvaluationSetOpenAPIResponse) InitDefault() {
}

var GetEvaluationSetOpenAPIResponse_Code_DEFAULT int32

func (p *GetEvaluationSetOpenAPIResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return GetEvaluationSetOpenAPIResponse_Code_DEFAULT
	}
	return *p.Code
}

var GetEvaluationSetOpenAPIResponse_Msg_DEFAULT string

func (p *GetEvaluationSetOpenAPIResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return GetEvaluationSetOpenAPIResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var GetEvaluationSetOpenAPIResponse_Data_DEFAULT *GetEvaluationSetOpenAPIData

func (p *GetEvaluationSetOpenAPIResponse) GetData() (v *GetEvaluationSetOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return GetEvaluationSetOpenAPIResponse_Data_DEFAULT
	}
	return p.Data
}

var GetEvaluationSetOpenAPIResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetEvaluationSetOpenAPIResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetEvaluationSetOpenAPIResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetEvaluationSetOpenAPIResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *GetEvaluationSetOpenAPIResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *GetEvaluationSetOpenAPIResponse) SetData(val *GetEvaluationSetOpenAPIData) {
	p.Data = val
}
func (p *GetEvaluationSetOpenAPIResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetEvaluationSetOpenAPIResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *GetEvaluationSetOpenAPIResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *GetEvaluationSetOpenAPIResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *GetEvaluationSetOpenAPIResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetEvaluationSetOpenAPIResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetEvaluationSetOpenAPIResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluationSetOpenAPIResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluationSetOpenAPIResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *GetEvaluationSetOpenAPIResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *GetEvaluationSetOpenAPIResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewGetEvaluationSetOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *GetEvaluationSetOpenAPIResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetEvaluationSetOpenAPIResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetOpenAPIResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluationSetOpenAPIResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluationSetOpenAPIResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluationSetOpenAPIResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetEvaluationSetOpenAPIResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluationSetOpenAPIResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluationSetOpenAPIResponse(%+v)", *p)

}

func (p *GetEvaluationSetOpenAPIResponse) DeepEqual(ano *GetEvaluationSetOpenAPIResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetEvaluationSetOpenAPIResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *GetEvaluationSetOpenAPIResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *GetEvaluationSetOpenAPIResponse) Field3DeepEqual(src *GetEvaluationSetOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetEvaluationSetOpenAPIResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluationSetOpenAPIData struct {
	EvaluationSet *eval_set.EvaluationSet `thrift:"evaluation_set,1,optional" frugal:"1,optional,eval_set.EvaluationSet" form:"evaluation_set" json:"evaluation_set,omitempty" query:"evaluation_set"`
}

func NewGetEvaluationSetOpenAPIData() *GetEvaluationSetOpenAPIData {
	return &GetEvaluationSetOpenAPIData{}
}

func (p *GetEvaluationSetOpenAPIData) InitDefault() {
}

var GetEvaluationSetOpenAPIData_EvaluationSet_DEFAULT *eval_set.EvaluationSet

func (p *GetEvaluationSetOpenAPIData) GetEvaluationSet() (v *eval_set.EvaluationSet) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSet() {
		return GetEvaluationSetOpenAPIData_EvaluationSet_DEFAULT
	}
	return p.EvaluationSet
}
func (p *GetEvaluationSetOpenAPIData) SetEvaluationSet(val *eval_set.EvaluationSet) {
	p.EvaluationSet = val
}

var fieldIDToName_GetEvaluationSetOpenAPIData = map[int16]string{
	1: "evaluation_set",
}

func (p *GetEvaluationSetOpenAPIData) IsSetEvaluationSet() bool {
	return p.EvaluationSet != nil
}

func (p *GetEvaluationSetOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluationSetOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluationSetOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_field := eval_set.NewEvaluationSet()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluationSet = _field
	return nil
}

func (p *GetEvaluationSetOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluationSetOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSet() {
		if err = oprot.WriteFieldBegin("evaluation_set", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluationSet.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetEvaluationSetOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluationSetOpenAPIData(%+v)", *p)

}

func (p *GetEvaluationSetOpenAPIData) DeepEqual(ano *GetEvaluationSetOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluationSet) {
		return false
	}
	return true
}

func (p *GetEvaluationSetOpenAPIData) Field1DeepEqual(src *eval_set.EvaluationSet) bool {

	if !p.EvaluationSet.DeepEqual(src) {
		return false
	}
	return true
}

// 1.3 查询评测集列表
type ListEvaluationSetsOpenAPIRequest struct {
	WorkspaceID      int64             `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	Name             *string           `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Creators         []string          `thrift:"creators,3,optional" frugal:"3,optional,list<string>" form:"creators" json:"creators,omitempty" query:"creators"`
	EvaluationSetIds []int64           `thrift:"evaluation_set_ids,4,optional" frugal:"4,optional,list<i64>" json:"evaluation_set_ids" form:"evaluation_set_ids" query:"evaluation_set_ids"`
	PageToken        *string           `thrift:"page_token,100,optional" frugal:"100,optional,string" form:"page_token" json:"page_token,omitempty" query:"page_token"`
	PageSize         *int32            `thrift:"page_size,101,optional" frugal:"101,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	OrderBys         []*common.OrderBy `thrift:"order_bys,103,optional" frugal:"103,optional,list<common.OrderBy>" form:"order_bys" json:"order_bys,omitempty" query:"order_bys"`
	Base             *base.Base        `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListEvaluationSetsOpenAPIRequest() *ListEvaluationSetsOpenAPIRequest {
	return &ListEvaluationSetsOpenAPIRequest{}
}

func (p *ListEvaluationSetsOpenAPIRequest) InitDefault() {
}

func (p *ListEvaluationSetsOpenAPIRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var ListEvaluationSetsOpenAPIRequest_Name_DEFAULT string

func (p *ListEvaluationSetsOpenAPIRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return ListEvaluationSetsOpenAPIRequest_Name_DEFAULT
	}
	return *p.Name
}

var ListEvaluationSetsOpenAPIRequest_Creators_DEFAULT []string

func (p *ListEvaluationSetsOpenAPIRequest) GetCreators() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetCreators() {
		return ListEvaluationSetsOpenAPIRequest_Creators_DEFAULT
	}
	return p.Creators
}

var ListEvaluationSetsOpenAPIRequest_EvaluationSetIds_DEFAULT []int64

func (p *ListEvaluationSetsOpenAPIRequest) GetEvaluationSetIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetIds() {
		return ListEvaluationSetsOpenAPIRequest_EvaluationSetIds_DEFAULT
	}
	return p.EvaluationSetIds
}

var ListEvaluationSetsOpenAPIRequest_PageToken_DEFAULT string

func (p *ListEvaluationSetsOpenAPIRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListEvaluationSetsOpenAPIRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListEvaluationSetsOpenAPIRequest_PageSize_DEFAULT int32

func (p *ListEvaluationSetsOpenAPIRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListEvaluationSetsOpenAPIRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListEvaluationSetsOpenAPIRequest_OrderBys_DEFAULT []*common.OrderBy

func (p *ListEvaluationSetsOpenAPIRequest) GetOrderBys() (v []*common.OrderBy) {
	if p == nil {
		return
	}
	if !p.IsSetOrderBys() {
		return ListEvaluationSetsOpenAPIRequest_OrderBys_DEFAULT
	}
	return p.OrderBys
}

var ListEvaluationSetsOpenAPIRequest_Base_DEFAULT *base.Base

func (p *ListEvaluationSetsOpenAPIRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListEvaluationSetsOpenAPIRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListEvaluationSetsOpenAPIRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ListEvaluationSetsOpenAPIRequest) SetName(val *string) {
	p.Name = val
}
func (p *ListEvaluationSetsOpenAPIRequest) SetCreators(val []string) {
	p.Creators = val
}
func (p *ListEvaluationSetsOpenAPIRequest) SetEvaluationSetIds(val []int64) {
	p.EvaluationSetIds = val
}
func (p *ListEvaluationSetsOpenAPIRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListEvaluationSetsOpenAPIRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListEvaluationSetsOpenAPIRequest) SetOrderBys(val []*common.OrderBy) {
	p.OrderBys = val
}
func (p *ListEvaluationSetsOpenAPIRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListEvaluationSetsOpenAPIRequest = map[int16]string{
	1:   "workspace_id",
	2:   "name",
	3:   "creators",
	4:   "evaluation_set_ids",
	100: "page_token",
	101: "page_size",
	103: "order_bys",
	255: "Base",
}

func (p *ListEvaluationSetsOpenAPIRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *ListEvaluationSetsOpenAPIRequest) IsSetCreators() bool {
	return p.Creators != nil
}

func (p *ListEvaluationSetsOpenAPIRequest) IsSetEvaluationSetIds() bool {
	return p.EvaluationSetIds != nil
}

func (p *ListEvaluationSetsOpenAPIRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListEvaluationSetsOpenAPIRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListEvaluationSetsOpenAPIRequest) IsSetOrderBys() bool {
	return p.OrderBys != nil
}

func (p *ListEvaluationSetsOpenAPIRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListEvaluationSetsOpenAPIRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetsOpenAPIRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListEvaluationSetsOpenAPIRequest[fieldId]))
}

func (p *ListEvaluationSetsOpenAPIRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Creators = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluationSetIds = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIRequest) ReadField103(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*common.OrderBy, 0, size)
	values := make([]common.OrderBy, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OrderBys = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListEvaluationSetsOpenAPIRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetsOpenAPIRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetsOpenAPIRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreators() {
		if err = oprot.WriteFieldBegin("creators", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Creators)); err != nil {
			return err
		}
		for _, v := range p.Creators {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetIds() {
		if err = oprot.WriteFieldBegin("evaluation_set_ids", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.EvaluationSetIds)); err != nil {
			return err
		}
		for _, v := range p.EvaluationSetIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIRequest) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBys() {
		if err = oprot.WriteFieldBegin("order_bys", thrift.LIST, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderBys)); err != nil {
			return err
		}
		for _, v := range p.OrderBys {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetsOpenAPIRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetsOpenAPIRequest(%+v)", *p)

}

func (p *ListEvaluationSetsOpenAPIRequest) DeepEqual(ano *ListEvaluationSetsOpenAPIRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Creators) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluationSetIds) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field103DeepEqual(ano.OrderBys) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListEvaluationSetsOpenAPIRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIRequest) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIRequest) Field3DeepEqual(src []string) bool {

	if len(p.Creators) != len(src) {
		return false
	}
	for i, v := range p.Creators {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIRequest) Field4DeepEqual(src []int64) bool {

	if len(p.EvaluationSetIds) != len(src) {
		return false
	}
	for i, v := range p.EvaluationSetIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIRequest) Field100DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIRequest) Field103DeepEqual(src []*common.OrderBy) bool {

	if len(p.OrderBys) != len(src) {
		return false
	}
	for i, v := range p.OrderBys {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetsOpenAPIResponse struct {
	Code     *int32                         `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                        `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *ListEvaluationSetsOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,ListEvaluationSetsOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                 `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListEvaluationSetsOpenAPIResponse() *ListEvaluationSetsOpenAPIResponse {
	return &ListEvaluationSetsOpenAPIResponse{}
}

func (p *ListEvaluationSetsOpenAPIResponse) InitDefault() {
}

var ListEvaluationSetsOpenAPIResponse_Code_DEFAULT int32

func (p *ListEvaluationSetsOpenAPIResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return ListEvaluationSetsOpenAPIResponse_Code_DEFAULT
	}
	return *p.Code
}

var ListEvaluationSetsOpenAPIResponse_Msg_DEFAULT string

func (p *ListEvaluationSetsOpenAPIResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return ListEvaluationSetsOpenAPIResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var ListEvaluationSetsOpenAPIResponse_Data_DEFAULT *ListEvaluationSetsOpenAPIData

func (p *ListEvaluationSetsOpenAPIResponse) GetData() (v *ListEvaluationSetsOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return ListEvaluationSetsOpenAPIResponse_Data_DEFAULT
	}
	return p.Data
}

var ListEvaluationSetsOpenAPIResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListEvaluationSetsOpenAPIResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListEvaluationSetsOpenAPIResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListEvaluationSetsOpenAPIResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *ListEvaluationSetsOpenAPIResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *ListEvaluationSetsOpenAPIResponse) SetData(val *ListEvaluationSetsOpenAPIData) {
	p.Data = val
}
func (p *ListEvaluationSetsOpenAPIResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListEvaluationSetsOpenAPIResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *ListEvaluationSetsOpenAPIResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *ListEvaluationSetsOpenAPIResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *ListEvaluationSetsOpenAPIResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *ListEvaluationSetsOpenAPIResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListEvaluationSetsOpenAPIResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetsOpenAPIResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetsOpenAPIResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetsOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListEvaluationSetsOpenAPIResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetsOpenAPIResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetsOpenAPIResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetsOpenAPIResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetsOpenAPIResponse(%+v)", *p)

}

func (p *ListEvaluationSetsOpenAPIResponse) DeepEqual(ano *ListEvaluationSetsOpenAPIResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListEvaluationSetsOpenAPIResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIResponse) Field3DeepEqual(src *ListEvaluationSetsOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetsOpenAPIData struct {
	Items         []*eval_set.EvaluationSet `thrift:"items,1,optional" frugal:"1,optional,list<eval_set.EvaluationSet>" form:"items" json:"items,omitempty" query:"items"`
	HasMore       *bool                     `thrift:"has_more,100,optional" frugal:"100,optional,bool" form:"has_more" json:"has_more,omitempty" query:"has_more"`
	NextPageToken *string                   `thrift:"next_page_token,101,optional" frugal:"101,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	Total         *int64                    `thrift:"total,102,optional" frugal:"102,optional,i64" form:"total" json:"total,omitempty" query:"total"`
}

func NewListEvaluationSetsOpenAPIData() *ListEvaluationSetsOpenAPIData {
	return &ListEvaluationSetsOpenAPIData{}
}

func (p *ListEvaluationSetsOpenAPIData) InitDefault() {
}

var ListEvaluationSetsOpenAPIData_Items_DEFAULT []*eval_set.EvaluationSet

func (p *ListEvaluationSetsOpenAPIData) GetItems() (v []*eval_set.EvaluationSet) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return ListEvaluationSetsOpenAPIData_Items_DEFAULT
	}
	return p.Items
}

var ListEvaluationSetsOpenAPIData_HasMore_DEFAULT bool

func (p *ListEvaluationSetsOpenAPIData) GetHasMore() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetHasMore() {
		return ListEvaluationSetsOpenAPIData_HasMore_DEFAULT
	}
	return *p.HasMore
}

var ListEvaluationSetsOpenAPIData_NextPageToken_DEFAULT string

func (p *ListEvaluationSetsOpenAPIData) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListEvaluationSetsOpenAPIData_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListEvaluationSetsOpenAPIData_Total_DEFAULT int64

func (p *ListEvaluationSetsOpenAPIData) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListEvaluationSetsOpenAPIData_Total_DEFAULT
	}
	return *p.Total
}
func (p *ListEvaluationSetsOpenAPIData) SetItems(val []*eval_set.EvaluationSet) {
	p.Items = val
}
func (p *ListEvaluationSetsOpenAPIData) SetHasMore(val *bool) {
	p.HasMore = val
}
func (p *ListEvaluationSetsOpenAPIData) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListEvaluationSetsOpenAPIData) SetTotal(val *int64) {
	p.Total = val
}

var fieldIDToName_ListEvaluationSetsOpenAPIData = map[int16]string{
	1:   "items",
	100: "has_more",
	101: "next_page_token",
	102: "total",
}

func (p *ListEvaluationSetsOpenAPIData) IsSetItems() bool {
	return p.Items != nil
}

func (p *ListEvaluationSetsOpenAPIData) IsSetHasMore() bool {
	return p.HasMore != nil
}

func (p *ListEvaluationSetsOpenAPIData) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListEvaluationSetsOpenAPIData) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListEvaluationSetsOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetsOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetsOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSet, 0, size)
	values := make([]eval_set.EvaluationSet, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIData) ReadField100(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HasMore = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIData) ReadField101(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIData) ReadField102(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}

func (p *ListEvaluationSetsOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetsOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetsOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIData) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasMore() {
		if err = oprot.WriteFieldBegin("has_more", thrift.BOOL, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.HasMore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIData) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIData) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}

func (p *ListEvaluationSetsOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetsOpenAPIData(%+v)", *p)

}

func (p *ListEvaluationSetsOpenAPIData) DeepEqual(ano *ListEvaluationSetsOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field100DeepEqual(ano.HasMore) {
		return false
	}
	if !p.Field101DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field102DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *ListEvaluationSetsOpenAPIData) Field1DeepEqual(src []*eval_set.EvaluationSet) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIData) Field100DeepEqual(src *bool) bool {

	if p.HasMore == src {
		return true
	} else if p.HasMore == nil || src == nil {
		return false
	}
	if *p.HasMore != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIData) Field101DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIData) Field102DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}

// 1.4 创建评测集版本
type CreateEvaluationSetVersionOpenAPIRequest struct {
	WorkspaceID     int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64      `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id,required" path:"evaluation_set_id,required"`
	Version         *string    `thrift:"version,3,optional" frugal:"3,optional,string" form:"version" json:"version,omitempty" query:"version"`
	Description     *string    `thrift:"description,4,optional" frugal:"4,optional,string" form:"description" json:"description,omitempty" query:"description"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateEvaluationSetVersionOpenAPIRequest() *CreateEvaluationSetVersionOpenAPIRequest {
	return &CreateEvaluationSetVersionOpenAPIRequest{}
}

func (p *CreateEvaluationSetVersionOpenAPIRequest) InitDefault() {
}

func (p *CreateEvaluationSetVersionOpenAPIRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *CreateEvaluationSetVersionOpenAPIRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var CreateEvaluationSetVersionOpenAPIRequest_Version_DEFAULT string

func (p *CreateEvaluationSetVersionOpenAPIRequest) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return CreateEvaluationSetVersionOpenAPIRequest_Version_DEFAULT
	}
	return *p.Version
}

var CreateEvaluationSetVersionOpenAPIRequest_Description_DEFAULT string

func (p *CreateEvaluationSetVersionOpenAPIRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return CreateEvaluationSetVersionOpenAPIRequest_Description_DEFAULT
	}
	return *p.Description
}

var CreateEvaluationSetVersionOpenAPIRequest_Base_DEFAULT *base.Base

func (p *CreateEvaluationSetVersionOpenAPIRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateEvaluationSetVersionOpenAPIRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateEvaluationSetVersionOpenAPIRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *CreateEvaluationSetVersionOpenAPIRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *CreateEvaluationSetVersionOpenAPIRequest) SetVersion(val *string) {
	p.Version = val
}
func (p *CreateEvaluationSetVersionOpenAPIRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *CreateEvaluationSetVersionOpenAPIRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateEvaluationSetVersionOpenAPIRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "version",
	4:   "description",
	255: "Base",
}

func (p *CreateEvaluationSetVersionOpenAPIRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *CreateEvaluationSetVersionOpenAPIRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CreateEvaluationSetVersionOpenAPIRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateEvaluationSetVersionOpenAPIRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetVersionOpenAPIRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEvaluationSetVersionOpenAPIRequest[fieldId]))
}

func (p *CreateEvaluationSetVersionOpenAPIRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateEvaluationSetVersionOpenAPIRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *CreateEvaluationSetVersionOpenAPIRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *CreateEvaluationSetVersionOpenAPIRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *CreateEvaluationSetVersionOpenAPIRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateEvaluationSetVersionOpenAPIRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersionOpenAPIRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOpenAPIRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOpenAPIRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOpenAPIRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOpenAPIRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOpenAPIRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOpenAPIRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetVersionOpenAPIRequest(%+v)", *p)

}

func (p *CreateEvaluationSetVersionOpenAPIRequest) DeepEqual(ano *CreateEvaluationSetVersionOpenAPIRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetVersionOpenAPIRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOpenAPIRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOpenAPIRequest) Field3DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOpenAPIRequest) Field4DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOpenAPIRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluationSetVersionOpenAPIResponse struct {
	Code     *int32                                 `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                                `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *CreateEvaluationSetVersionOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,CreateEvaluationSetVersionOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                         `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateEvaluationSetVersionOpenAPIResponse() *CreateEvaluationSetVersionOpenAPIResponse {
	return &CreateEvaluationSetVersionOpenAPIResponse{}
}

func (p *CreateEvaluationSetVersionOpenAPIResponse) InitDefault() {
}

var CreateEvaluationSetVersionOpenAPIResponse_Code_DEFAULT int32

func (p *CreateEvaluationSetVersionOpenAPIResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return CreateEvaluationSetVersionOpenAPIResponse_Code_DEFAULT
	}
	return *p.Code
}

var CreateEvaluationSetVersionOpenAPIResponse_Msg_DEFAULT string

func (p *CreateEvaluationSetVersionOpenAPIResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return CreateEvaluationSetVersionOpenAPIResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var CreateEvaluationSetVersionOpenAPIResponse_Data_DEFAULT *CreateEvaluationSetVersionOpenAPIData

func (p *CreateEvaluationSetVersionOpenAPIResponse) GetData() (v *CreateEvaluationSetVersionOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return CreateEvaluationSetVersionOpenAPIResponse_Data_DEFAULT
	}
	return p.Data
}

var CreateEvaluationSetVersionOpenAPIResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateEvaluationSetVersionOpenAPIResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateEvaluationSetVersionOpenAPIResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateEvaluationSetVersionOpenAPIResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *CreateEvaluationSetVersionOpenAPIResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *CreateEvaluationSetVersionOpenAPIResponse) SetData(val *CreateEvaluationSetVersionOpenAPIData) {
	p.Data = val
}
func (p *CreateEvaluationSetVersionOpenAPIResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateEvaluationSetVersionOpenAPIResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *CreateEvaluationSetVersionOpenAPIResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *CreateEvaluationSetVersionOpenAPIResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *CreateEvaluationSetVersionOpenAPIResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *CreateEvaluationSetVersionOpenAPIResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateEvaluationSetVersionOpenAPIResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetVersionOpenAPIResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOpenAPIResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *CreateEvaluationSetVersionOpenAPIResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *CreateEvaluationSetVersionOpenAPIResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetVersionOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *CreateEvaluationSetVersionOpenAPIResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateEvaluationSetVersionOpenAPIResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersionOpenAPIResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOpenAPIResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOpenAPIResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOpenAPIResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOpenAPIResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOpenAPIResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetVersionOpenAPIResponse(%+v)", *p)

}

func (p *CreateEvaluationSetVersionOpenAPIResponse) DeepEqual(ano *CreateEvaluationSetVersionOpenAPIResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetVersionOpenAPIResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOpenAPIResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOpenAPIResponse) Field3DeepEqual(src *CreateEvaluationSetVersionOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOpenAPIResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluationSetVersionOpenAPIData struct {
	VersionID *string `thrift:"version_id,1,optional" frugal:"1,optional,string" form:"version_id" json:"version_id,string,omitempty" query:"version_id"`
}

func NewCreateEvaluationSetVersionOpenAPIData() *CreateEvaluationSetVersionOpenAPIData {
	return &CreateEvaluationSetVersionOpenAPIData{}
}

func (p *CreateEvaluationSetVersionOpenAPIData) InitDefault() {
}

var CreateEvaluationSetVersionOpenAPIData_VersionID_DEFAULT string

func (p *CreateEvaluationSetVersionOpenAPIData) GetVersionID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersionID() {
		return CreateEvaluationSetVersionOpenAPIData_VersionID_DEFAULT
	}
	return *p.VersionID
}
func (p *CreateEvaluationSetVersionOpenAPIData) SetVersionID(val *string) {
	p.VersionID = val
}

var fieldIDToName_CreateEvaluationSetVersionOpenAPIData = map[int16]string{
	1: "version_id",
}

func (p *CreateEvaluationSetVersionOpenAPIData) IsSetVersionID() bool {
	return p.VersionID != nil
}

func (p *CreateEvaluationSetVersionOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetVersionOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOpenAPIData) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionID = _field
	return nil
}

func (p *CreateEvaluationSetVersionOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersionOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionID() {
		if err = oprot.WriteFieldBegin("version_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.VersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetVersionOpenAPIData(%+v)", *p)

}

func (p *CreateEvaluationSetVersionOpenAPIData) DeepEqual(ano *CreateEvaluationSetVersionOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VersionID) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetVersionOpenAPIData) Field1DeepEqual(src *string) bool {

	if p.VersionID == src {
		return true
	} else if p.VersionID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.VersionID, *src) != 0 {
		return false
	}
	return true
}

// 1.5 批量添加评测集数据
type BatchCreateEvaluationSetItemsOpenAPIRequest struct {
	WorkspaceID      int64                         `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID  int64                         `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id,required" path:"evaluation_set_id,required"`
	Items            []*eval_set.EvaluationSetItem `thrift:"items,3,optional" frugal:"3,optional,list<eval_set.EvaluationSetItem>" form:"items" json:"items,omitempty" query:"items"`
	SkipInvalidItems *bool                         `thrift:"skip_invalid_items,4,optional" frugal:"4,optional,bool" form:"skip_invalid_items" json:"skip_invalid_items,omitempty" query:"skip_invalid_items"`
	AllowPartialAdd  *bool                         `thrift:"allow_partial_add,5,optional" frugal:"5,optional,bool" form:"allow_partial_add" json:"allow_partial_add,omitempty" query:"allow_partial_add"`
	Base             *base.Base                    `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchCreateEvaluationSetItemsOpenAPIRequest() *BatchCreateEvaluationSetItemsOpenAPIRequest {
	return &BatchCreateEvaluationSetItemsOpenAPIRequest{}
}

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) InitDefault() {
}

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var BatchCreateEvaluationSetItemsOpenAPIRequest_Items_DEFAULT []*eval_set.EvaluationSetItem

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) GetItems() (v []*eval_set.EvaluationSetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return BatchCreateEvaluationSetItemsOpenAPIRequest_Items_DEFAULT
	}
	return p.Items
}

var BatchCreateEvaluationSetItemsOpenAPIRequest_SkipInvalidItems_DEFAULT bool

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) GetSkipInvalidItems() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetSkipInvalidItems() {
		return BatchCreateEvaluationSetItemsOpenAPIRequest_SkipInvalidItems_DEFAULT
	}
	return *p.SkipInvalidItems
}

var BatchCreateEvaluationSetItemsOpenAPIRequest_AllowPartialAdd_DEFAULT bool

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) GetAllowPartialAdd() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetAllowPartialAdd() {
		return BatchCreateEvaluationSetItemsOpenAPIRequest_AllowPartialAdd_DEFAULT
	}
	return *p.AllowPartialAdd
}

var BatchCreateEvaluationSetItemsOpenAPIRequest_Base_DEFAULT *base.Base

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchCreateEvaluationSetItemsOpenAPIRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) SetItems(val []*eval_set.EvaluationSetItem) {
	p.Items = val
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) SetSkipInvalidItems(val *bool) {
	p.SkipInvalidItems = val
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) SetAllowPartialAdd(val *bool) {
	p.AllowPartialAdd = val
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchCreateEvaluationSetItemsOpenAPIRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "items",
	4:   "skip_invalid_items",
	5:   "allow_partial_add",
	255: "Base",
}

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) IsSetItems() bool {
	return p.Items != nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) IsSetSkipInvalidItems() bool {
	return p.SkipInvalidItems != nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) IsSetAllowPartialAdd() bool {
	return p.AllowPartialAdd != nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchCreateEvaluationSetItemsOpenAPIRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchCreateEvaluationSetItemsOpenAPIRequest[fieldId]))
}

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSetItem, 0, size)
	values := make([]eval_set.EvaluationSetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SkipInvalidItems = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AllowPartialAdd = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItemsOpenAPIRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipInvalidItems() {
		if err = oprot.WriteFieldBegin("skip_invalid_items", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SkipInvalidItems); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllowPartialAdd() {
		if err = oprot.WriteFieldBegin("allow_partial_add", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.AllowPartialAdd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchCreateEvaluationSetItemsOpenAPIRequest(%+v)", *p)

}

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) DeepEqual(ano *BatchCreateEvaluationSetItemsOpenAPIRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Items) {
		return false
	}
	if !p.Field4DeepEqual(ano.SkipInvalidItems) {
		return false
	}
	if !p.Field5DeepEqual(ano.AllowPartialAdd) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) Field3DeepEqual(src []*eval_set.EvaluationSetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) Field4DeepEqual(src *bool) bool {

	if p.SkipInvalidItems == src {
		return true
	} else if p.SkipInvalidItems == nil || src == nil {
		return false
	}
	if *p.SkipInvalidItems != *src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) Field5DeepEqual(src *bool) bool {

	if p.AllowPartialAdd == src {
		return true
	} else if p.AllowPartialAdd == nil || src == nil {
		return false
	}
	if *p.AllowPartialAdd != *src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOpenAPIRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchCreateEvaluationSetItemsOpenAPIResponse struct {
	Code     *int32                                    `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                                   `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *BatchCreateEvaluationSetItemsOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,BatchCreateEvaluationSetItemsOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchCreateEvaluationSetItemsOpenAPIResponse() *BatchCreateEvaluationSetItemsOpenAPIResponse {
	return &BatchCreateEvaluationSetItemsOpenAPIResponse{}
}

func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) InitDefault() {
}

var BatchCreateEvaluationSetItemsOpenAPIResponse_Code_DEFAULT int32

func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return BatchCreateEvaluationSetItemsOpenAPIResponse_Code_DEFAULT
	}
	return *p.Code
}

var BatchCreateEvaluationSetItemsOpenAPIResponse_Msg_DEFAULT string

func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return BatchCreateEvaluationSetItemsOpenAPIResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var BatchCreateEvaluationSetItemsOpenAPIResponse_Data_DEFAULT *BatchCreateEvaluationSetItemsOpenAPIData

func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) GetData() (v *BatchCreateEvaluationSetItemsOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return BatchCreateEvaluationSetItemsOpenAPIResponse_Data_DEFAULT
	}
	return p.Data
}

var BatchCreateEvaluationSetItemsOpenAPIResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchCreateEvaluationSetItemsOpenAPIResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) SetData(val *BatchCreateEvaluationSetItemsOpenAPIData) {
	p.Data = val
}
func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchCreateEvaluationSetItemsOpenAPIResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchCreateEvaluationSetItemsOpenAPIResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewBatchCreateEvaluationSetItemsOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItemsOpenAPIResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchCreateEvaluationSetItemsOpenAPIResponse(%+v)", *p)

}

func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) DeepEqual(ano *BatchCreateEvaluationSetItemsOpenAPIResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) Field3DeepEqual(src *BatchCreateEvaluationSetItemsOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOpenAPIResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchCreateEvaluationSetItemsOpenAPIData struct {
	AddedItems map[int64]string           `thrift:"added_items,1,optional" frugal:"1,optional,map<i64:string>" form:"added_items" json:"added_items,omitempty" query:"added_items"`
	Errors     []*eval_set.ItemErrorGroup `thrift:"errors,2,optional" frugal:"2,optional,list<eval_set.ItemErrorGroup>" form:"errors" json:"errors,omitempty" query:"errors"`
}

func NewBatchCreateEvaluationSetItemsOpenAPIData() *BatchCreateEvaluationSetItemsOpenAPIData {
	return &BatchCreateEvaluationSetItemsOpenAPIData{}
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) InitDefault() {
}

var BatchCreateEvaluationSetItemsOpenAPIData_AddedItems_DEFAULT map[int64]string

func (p *BatchCreateEvaluationSetItemsOpenAPIData) GetAddedItems() (v map[int64]string) {
	if p == nil {
		return
	}
	if !p.IsSetAddedItems() {
		return BatchCreateEvaluationSetItemsOpenAPIData_AddedItems_DEFAULT
	}
	return p.AddedItems
}

var BatchCreateEvaluationSetItemsOpenAPIData_Errors_DEFAULT []*eval_set.ItemErrorGroup

func (p *BatchCreateEvaluationSetItemsOpenAPIData) GetErrors() (v []*eval_set.ItemErrorGroup) {
	if p == nil {
		return
	}
	if !p.IsSetErrors() {
		return BatchCreateEvaluationSetItemsOpenAPIData_Errors_DEFAULT
	}
	return p.Errors
}
func (p *BatchCreateEvaluationSetItemsOpenAPIData) SetAddedItems(val map[int64]string) {
	p.AddedItems = val
}
func (p *BatchCreateEvaluationSetItemsOpenAPIData) SetErrors(val []*eval_set.ItemErrorGroup) {
	p.Errors = val
}

var fieldIDToName_BatchCreateEvaluationSetItemsOpenAPIData = map[int16]string{
	1: "added_items",
	2: "errors",
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) IsSetAddedItems() bool {
	return p.AddedItems != nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) IsSetErrors() bool {
	return p.Errors != nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchCreateEvaluationSetItemsOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]string, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.AddedItems = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOpenAPIData) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.ItemErrorGroup, 0, size)
	values := make([]eval_set.ItemErrorGroup, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Errors = _field
	return nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItemsOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddedItems() {
		if err = oprot.WriteFieldBegin("added_items", thrift.MAP, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.STRING, len(p.AddedItems)); err != nil {
			return err
		}
		for k, v := range p.AddedItems {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOpenAPIData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrors() {
		if err = oprot.WriteFieldBegin("errors", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Errors)); err != nil {
			return err
		}
		for _, v := range p.Errors {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchCreateEvaluationSetItemsOpenAPIData(%+v)", *p)

}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) DeepEqual(ano *BatchCreateEvaluationSetItemsOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AddedItems) {
		return false
	}
	if !p.Field2DeepEqual(ano.Errors) {
		return false
	}
	return true
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) Field1DeepEqual(src map[int64]string) bool {

	if len(p.AddedItems) != len(src) {
		return false
	}
	for k, v := range p.AddedItems {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOpenAPIData) Field2DeepEqual(src []*eval_set.ItemErrorGroup) bool {

	if len(p.Errors) != len(src) {
		return false
	}
	for i, v := range p.Errors {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// 1.6 批量更新评测集数据
type BatchUpdateEvaluationSetItemsOpenAPIRequest struct {
	WorkspaceID      int64                         `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID  int64                         `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id,required" path:"evaluation_set_id,required"`
	Items            []*eval_set.EvaluationSetItem `thrift:"items,3,optional" frugal:"3,optional,list<eval_set.EvaluationSetItem>" form:"items" json:"items,omitempty" query:"items"`
	SkipInvalidItems *bool                         `thrift:"skip_invalid_items,4,optional" frugal:"4,optional,bool" form:"skip_invalid_items" json:"skip_invalid_items,omitempty" query:"skip_invalid_items"`
	Base             *base.Base                    `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchUpdateEvaluationSetItemsOpenAPIRequest() *BatchUpdateEvaluationSetItemsOpenAPIRequest {
	return &BatchUpdateEvaluationSetItemsOpenAPIRequest{}
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) InitDefault() {
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var BatchUpdateEvaluationSetItemsOpenAPIRequest_Items_DEFAULT []*eval_set.EvaluationSetItem

func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) GetItems() (v []*eval_set.EvaluationSetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return BatchUpdateEvaluationSetItemsOpenAPIRequest_Items_DEFAULT
	}
	return p.Items
}

var BatchUpdateEvaluationSetItemsOpenAPIRequest_SkipInvalidItems_DEFAULT bool

func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) GetSkipInvalidItems() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetSkipInvalidItems() {
		return BatchUpdateEvaluationSetItemsOpenAPIRequest_SkipInvalidItems_DEFAULT
	}
	return *p.SkipInvalidItems
}

var BatchUpdateEvaluationSetItemsOpenAPIRequest_Base_DEFAULT *base.Base

func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchUpdateEvaluationSetItemsOpenAPIRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) SetItems(val []*eval_set.EvaluationSetItem) {
	p.Items = val
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) SetSkipInvalidItems(val *bool) {
	p.SkipInvalidItems = val
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchUpdateEvaluationSetItemsOpenAPIRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "items",
	4:   "skip_invalid_items",
	255: "Base",
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) IsSetItems() bool {
	return p.Items != nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) IsSetSkipInvalidItems() bool {
	return p.SkipInvalidItems != nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchUpdateEvaluationSetItemsOpenAPIRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchUpdateEvaluationSetItemsOpenAPIRequest[fieldId]))
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSetItem, 0, size)
	values := make([]eval_set.EvaluationSetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SkipInvalidItems = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateEvaluationSetItemsOpenAPIRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipInvalidItems() {
		if err = oprot.WriteFieldBegin("skip_invalid_items", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SkipInvalidItems); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchUpdateEvaluationSetItemsOpenAPIRequest(%+v)", *p)

}

func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) DeepEqual(ano *BatchUpdateEvaluationSetItemsOpenAPIRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Items) {
		return false
	}
	if !p.Field4DeepEqual(ano.SkipInvalidItems) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) Field3DeepEqual(src []*eval_set.EvaluationSetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) Field4DeepEqual(src *bool) bool {

	if p.SkipInvalidItems == src {
		return true
	} else if p.SkipInvalidItems == nil || src == nil {
		return false
	}
	if *p.SkipInvalidItems != *src {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchUpdateEvaluationSetItemsOpenAPIResponse struct {
	Code     *int32                                    `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                                   `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *BatchUpdateEvaluationSetItemsOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,BatchUpdateEvaluationSetItemsOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchUpdateEvaluationSetItemsOpenAPIResponse() *BatchUpdateEvaluationSetItemsOpenAPIResponse {
	return &BatchUpdateEvaluationSetItemsOpenAPIResponse{}
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) InitDefault() {
}

var BatchUpdateEvaluationSetItemsOpenAPIResponse_Code_DEFAULT int32

func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return BatchUpdateEvaluationSetItemsOpenAPIResponse_Code_DEFAULT
	}
	return *p.Code
}

var BatchUpdateEvaluationSetItemsOpenAPIResponse_Msg_DEFAULT string

func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return BatchUpdateEvaluationSetItemsOpenAPIResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var BatchUpdateEvaluationSetItemsOpenAPIResponse_Data_DEFAULT *BatchUpdateEvaluationSetItemsOpenAPIData

func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) GetData() (v *BatchUpdateEvaluationSetItemsOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return BatchUpdateEvaluationSetItemsOpenAPIResponse_Data_DEFAULT
	}
	return p.Data
}

var BatchUpdateEvaluationSetItemsOpenAPIResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchUpdateEvaluationSetItemsOpenAPIResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) SetData(val *BatchUpdateEvaluationSetItemsOpenAPIData) {
	p.Data = val
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchUpdateEvaluationSetItemsOpenAPIResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchUpdateEvaluationSetItemsOpenAPIResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewBatchUpdateEvaluationSetItemsOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateEvaluationSetItemsOpenAPIResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchUpdateEvaluationSetItemsOpenAPIResponse(%+v)", *p)

}

func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) DeepEqual(ano *BatchUpdateEvaluationSetItemsOpenAPIResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) Field3DeepEqual(src *BatchUpdateEvaluationSetItemsOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchUpdateEvaluationSetItemsOpenAPIData struct {
	UpdatedItems map[int64]string           `thrift:"updated_items,1,optional" frugal:"1,optional,map<i64:string>" form:"updated_items" json:"updated_items,omitempty" query:"updated_items"`
	Errors       []*eval_set.ItemErrorGroup `thrift:"errors,2,optional" frugal:"2,optional,list<eval_set.ItemErrorGroup>" form:"errors" json:"errors,omitempty" query:"errors"`
}

func NewBatchUpdateEvaluationSetItemsOpenAPIData() *BatchUpdateEvaluationSetItemsOpenAPIData {
	return &BatchUpdateEvaluationSetItemsOpenAPIData{}
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) InitDefault() {
}

var BatchUpdateEvaluationSetItemsOpenAPIData_UpdatedItems_DEFAULT map[int64]string

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) GetUpdatedItems() (v map[int64]string) {
	if p == nil {
		return
	}
	if !p.IsSetUpdatedItems() {
		return BatchUpdateEvaluationSetItemsOpenAPIData_UpdatedItems_DEFAULT
	}
	return p.UpdatedItems
}

var BatchUpdateEvaluationSetItemsOpenAPIData_Errors_DEFAULT []*eval_set.ItemErrorGroup

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) GetErrors() (v []*eval_set.ItemErrorGroup) {
	if p == nil {
		return
	}
	if !p.IsSetErrors() {
		return BatchUpdateEvaluationSetItemsOpenAPIData_Errors_DEFAULT
	}
	return p.Errors
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIData) SetUpdatedItems(val map[int64]string) {
	p.UpdatedItems = val
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIData) SetErrors(val []*eval_set.ItemErrorGroup) {
	p.Errors = val
}

var fieldIDToName_BatchUpdateEvaluationSetItemsOpenAPIData = map[int16]string{
	1: "updated_items",
	2: "errors",
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) IsSetUpdatedItems() bool {
	return p.UpdatedItems != nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) IsSetErrors() bool {
	return p.Errors != nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchUpdateEvaluationSetItemsOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]string, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.UpdatedItems = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIData) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.ItemErrorGroup, 0, size)
	values := make([]eval_set.ItemErrorGroup, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Errors = _field
	return nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateEvaluationSetItemsOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedItems() {
		if err = oprot.WriteFieldBegin("updated_items", thrift.MAP, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.STRING, len(p.UpdatedItems)); err != nil {
			return err
		}
		for k, v := range p.UpdatedItems {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrors() {
		if err = oprot.WriteFieldBegin("errors", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Errors)); err != nil {
			return err
		}
		for _, v := range p.Errors {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchUpdateEvaluationSetItemsOpenAPIData(%+v)", *p)

}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) DeepEqual(ano *BatchUpdateEvaluationSetItemsOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UpdatedItems) {
		return false
	}
	if !p.Field2DeepEqual(ano.Errors) {
		return false
	}
	return true
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) Field1DeepEqual(src map[int64]string) bool {

	if len(p.UpdatedItems) != len(src) {
		return false
	}
	for k, v := range p.UpdatedItems {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIData) Field2DeepEqual(src []*eval_set.ItemErrorGroup) bool {

	if len(p.Errors) != len(src) {
		return false
	}
	for i, v := range p.Errors {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// 1.7 批量删除评测集数据
type BatchDeleteEvaluationSetItemsOpenAPIRequest struct {
	WorkspaceID     int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64      `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id,required" path:"evaluation_set_id,required"`
	ItemIds         []string   `thrift:"item_ids,3,optional" frugal:"3,optional,list<string>" form:"item_ids" json:"item_ids,omitempty" query:"item_ids"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchDeleteEvaluationSetItemsOpenAPIRequest() *BatchDeleteEvaluationSetItemsOpenAPIRequest {
	return &BatchDeleteEvaluationSetItemsOpenAPIRequest{}
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) InitDefault() {
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var BatchDeleteEvaluationSetItemsOpenAPIRequest_ItemIds_DEFAULT []string

func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) GetItemIds() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetItemIds() {
		return BatchDeleteEvaluationSetItemsOpenAPIRequest_ItemIds_DEFAULT
	}
	return p.ItemIds
}

var BatchDeleteEvaluationSetItemsOpenAPIRequest_Base_DEFAULT *base.Base

func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchDeleteEvaluationSetItemsOpenAPIRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) SetItemIds(val []string) {
	p.ItemIds = val
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchDeleteEvaluationSetItemsOpenAPIRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "item_ids",
	255: "Base",
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) IsSetItemIds() bool {
	return p.ItemIds != nil
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchDeleteEvaluationSetItemsOpenAPIRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchDeleteEvaluationSetItemsOpenAPIRequest[fieldId]))
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ItemIds = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteEvaluationSetItemsOpenAPIRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemIds() {
		if err = oprot.WriteFieldBegin("item_ids", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ItemIds)); err != nil {
			return err
		}
		for _, v := range p.ItemIds {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchDeleteEvaluationSetItemsOpenAPIRequest(%+v)", *p)

}

func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) DeepEqual(ano *BatchDeleteEvaluationSetItemsOpenAPIRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemIds) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) Field3DeepEqual(src []string) bool {

	if len(p.ItemIds) != len(src) {
		return false
	}
	for i, v := range p.ItemIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchDeleteEvaluationSetItemsOpenAPIResponse struct {
	Code     *int32                                    `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                                   `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *BatchDeleteEvaluationSetItemsOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,BatchDeleteEvaluationSetItemsOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchDeleteEvaluationSetItemsOpenAPIResponse() *BatchDeleteEvaluationSetItemsOpenAPIResponse {
	return &BatchDeleteEvaluationSetItemsOpenAPIResponse{}
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) InitDefault() {
}

var BatchDeleteEvaluationSetItemsOpenAPIResponse_Code_DEFAULT int32

func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return BatchDeleteEvaluationSetItemsOpenAPIResponse_Code_DEFAULT
	}
	return *p.Code
}

var BatchDeleteEvaluationSetItemsOpenAPIResponse_Msg_DEFAULT string

func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return BatchDeleteEvaluationSetItemsOpenAPIResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var BatchDeleteEvaluationSetItemsOpenAPIResponse_Data_DEFAULT *BatchDeleteEvaluationSetItemsOpenAPIData

func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) GetData() (v *BatchDeleteEvaluationSetItemsOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return BatchDeleteEvaluationSetItemsOpenAPIResponse_Data_DEFAULT
	}
	return p.Data
}

var BatchDeleteEvaluationSetItemsOpenAPIResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchDeleteEvaluationSetItemsOpenAPIResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) SetData(val *BatchDeleteEvaluationSetItemsOpenAPIData) {
	p.Data = val
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchDeleteEvaluationSetItemsOpenAPIResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchDeleteEvaluationSetItemsOpenAPIResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewBatchDeleteEvaluationSetItemsOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteEvaluationSetItemsOpenAPIResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchDeleteEvaluationSetItemsOpenAPIResponse(%+v)", *p)

}

func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) DeepEqual(ano *BatchDeleteEvaluationSetItemsOpenAPIResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) Field3DeepEqual(src *BatchDeleteEvaluationSetItemsOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchDeleteEvaluationSetItemsOpenAPIData struct {
	DeletedCount *int32 `thrift:"deleted_count,1,optional" frugal:"1,optional,i32" form:"deleted_count" json:"deleted_count,omitempty" query:"deleted_count"`
}

func NewBatchDeleteEvaluationSetItemsOpenAPIData() *BatchDeleteEvaluationSetItemsOpenAPIData {
	return &BatchDeleteEvaluationSetItemsOpenAPIData{}
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIData) InitDefault() {
}

var BatchDeleteEvaluationSetItemsOpenAPIData_DeletedCount_DEFAULT int32

func (p *BatchDeleteEvaluationSetItemsOpenAPIData) GetDeletedCount() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetDeletedCount() {
		return BatchDeleteEvaluationSetItemsOpenAPIData_DeletedCount_DEFAULT
	}
	return *p.DeletedCount
}
func (p *BatchDeleteEvaluationSetItemsOpenAPIData) SetDeletedCount(val *int32) {
	p.DeletedCount = val
}

var fieldIDToName_BatchDeleteEvaluationSetItemsOpenAPIData = map[int16]string{
	1: "deleted_count",
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIData) IsSetDeletedCount() bool {
	return p.DeletedCount != nil
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchDeleteEvaluationSetItemsOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIData) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DeletedCount = _field
	return nil
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteEvaluationSetItemsOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeletedCount() {
		if err = oprot.WriteFieldBegin("deleted_count", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.DeletedCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchDeleteEvaluationSetItemsOpenAPIData(%+v)", *p)

}

func (p *BatchDeleteEvaluationSetItemsOpenAPIData) DeepEqual(ano *BatchDeleteEvaluationSetItemsOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DeletedCount) {
		return false
	}
	return true
}

func (p *BatchDeleteEvaluationSetItemsOpenAPIData) Field1DeepEqual(src *int32) bool {

	if p.DeletedCount == src {
		return true
	} else if p.DeletedCount == nil || src == nil {
		return false
	}
	if *p.DeletedCount != *src {
		return false
	}
	return true
}

// 1.8 清空评测集草稿数据
type ClearEvaluationSetDraftItemsOpenAPIRequest struct {
	WorkspaceID     int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64      `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id,required" path:"evaluation_set_id,required"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewClearEvaluationSetDraftItemsOpenAPIRequest() *ClearEvaluationSetDraftItemsOpenAPIRequest {
	return &ClearEvaluationSetDraftItemsOpenAPIRequest{}
}

func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) InitDefault() {
}

func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var ClearEvaluationSetDraftItemsOpenAPIRequest_Base_DEFAULT *base.Base

func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ClearEvaluationSetDraftItemsOpenAPIRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ClearEvaluationSetDraftItemsOpenAPIRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	255: "Base",
}

func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClearEvaluationSetDraftItemsOpenAPIRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ClearEvaluationSetDraftItemsOpenAPIRequest[fieldId]))
}

func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearEvaluationSetDraftItemsOpenAPIRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClearEvaluationSetDraftItemsOpenAPIRequest(%+v)", *p)

}

func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) DeepEqual(ano *ClearEvaluationSetDraftItemsOpenAPIRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *ClearEvaluationSetDraftItemsOpenAPIRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ClearEvaluationSetDraftItemsOpenAPIResponse struct {
	Code     *int32                                   `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                                  `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *ClearEvaluationSetDraftItemsOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,ClearEvaluationSetDraftItemsOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                           `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewClearEvaluationSetDraftItemsOpenAPIResponse() *ClearEvaluationSetDraftItemsOpenAPIResponse {
	return &ClearEvaluationSetDraftItemsOpenAPIResponse{}
}

func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) InitDefault() {
}

var ClearEvaluationSetDraftItemsOpenAPIResponse_Code_DEFAULT int32

func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return ClearEvaluationSetDraftItemsOpenAPIResponse_Code_DEFAULT
	}
	return *p.Code
}

var ClearEvaluationSetDraftItemsOpenAPIResponse_Msg_DEFAULT string

func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return ClearEvaluationSetDraftItemsOpenAPIResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var ClearEvaluationSetDraftItemsOpenAPIResponse_Data_DEFAULT *ClearEvaluationSetDraftItemsOpenAPIData

func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) GetData() (v *ClearEvaluationSetDraftItemsOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return ClearEvaluationSetDraftItemsOpenAPIResponse_Data_DEFAULT
	}
	return p.Data
}

var ClearEvaluationSetDraftItemsOpenAPIResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ClearEvaluationSetDraftItemsOpenAPIResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) SetData(val *ClearEvaluationSetDraftItemsOpenAPIData) {
	p.Data = val
}
func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ClearEvaluationSetDraftItemsOpenAPIResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClearEvaluationSetDraftItemsOpenAPIResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewClearEvaluationSetDraftItemsOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearEvaluationSetDraftItemsOpenAPIResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClearEvaluationSetDraftItemsOpenAPIResponse(%+v)", *p)

}

func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) DeepEqual(ano *ClearEvaluationSetDraftItemsOpenAPIResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) Field3DeepEqual(src *ClearEvaluationSetDraftItemsOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ClearEvaluationSetDraftItemsOpenAPIResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ClearEvaluationSetDraftItemsOpenAPIData struct {
	ClearedCount *int32 `thrift:"cleared_count,1,optional" frugal:"1,optional,i32" form:"cleared_count" json:"cleared_count,omitempty" query:"cleared_count"`
}

func NewClearEvaluationSetDraftItemsOpenAPIData() *ClearEvaluationSetDraftItemsOpenAPIData {
	return &ClearEvaluationSetDraftItemsOpenAPIData{}
}

func (p *ClearEvaluationSetDraftItemsOpenAPIData) InitDefault() {
}

var ClearEvaluationSetDraftItemsOpenAPIData_ClearedCount_DEFAULT int32

func (p *ClearEvaluationSetDraftItemsOpenAPIData) GetClearedCount() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetClearedCount() {
		return ClearEvaluationSetDraftItemsOpenAPIData_ClearedCount_DEFAULT
	}
	return *p.ClearedCount
}
func (p *ClearEvaluationSetDraftItemsOpenAPIData) SetClearedCount(val *int32) {
	p.ClearedCount = val
}

var fieldIDToName_ClearEvaluationSetDraftItemsOpenAPIData = map[int16]string{
	1: "cleared_count",
}

func (p *ClearEvaluationSetDraftItemsOpenAPIData) IsSetClearedCount() bool {
	return p.ClearedCount != nil
}

func (p *ClearEvaluationSetDraftItemsOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClearEvaluationSetDraftItemsOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClearEvaluationSetDraftItemsOpenAPIData) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ClearedCount = _field
	return nil
}

func (p *ClearEvaluationSetDraftItemsOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearEvaluationSetDraftItemsOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClearEvaluationSetDraftItemsOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetClearedCount() {
		if err = oprot.WriteFieldBegin("cleared_count", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ClearedCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClearEvaluationSetDraftItemsOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClearEvaluationSetDraftItemsOpenAPIData(%+v)", *p)

}

func (p *ClearEvaluationSetDraftItemsOpenAPIData) DeepEqual(ano *ClearEvaluationSetDraftItemsOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClearedCount) {
		return false
	}
	return true
}

func (p *ClearEvaluationSetDraftItemsOpenAPIData) Field1DeepEqual(src *int32) bool {

	if p.ClearedCount == src {
		return true
	} else if p.ClearedCount == nil || src == nil {
		return false
	}
	if *p.ClearedCount != *src {
		return false
	}
	return true
}

// 1.9 查询评测集特定版本数据
type ListEvaluationSetVersionItemsOpenAPIRequest struct {
	WorkspaceID     int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64      `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" json:"evaluation_set_id,required" path:"evaluation_set_id,required"`
	VersionID       string     `thrift:"version_id,3,required" frugal:"3,required,string" json:"version_id,required" path:"version_id,required"`
	PageToken       *string    `thrift:"page_token,4,optional" frugal:"4,optional,string" form:"page_token" json:"page_token,omitempty" query:"page_token"`
	PageSize        *int32     `thrift:"page_size,5,optional" frugal:"5,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListEvaluationSetVersionItemsOpenAPIRequest() *ListEvaluationSetVersionItemsOpenAPIRequest {
	return &ListEvaluationSetVersionItemsOpenAPIRequest{}
}

func (p *ListEvaluationSetVersionItemsOpenAPIRequest) InitDefault() {
}

func (p *ListEvaluationSetVersionItemsOpenAPIRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *ListEvaluationSetVersionItemsOpenAPIRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

func (p *ListEvaluationSetVersionItemsOpenAPIRequest) GetVersionID() (v string) {
	if p != nil {
		return p.VersionID
	}
	return
}

var ListEvaluationSetVersionItemsOpenAPIRequest_PageToken_DEFAULT string

func (p *ListEvaluationSetVersionItemsOpenAPIRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListEvaluationSetVersionItemsOpenAPIRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListEvaluationSetVersionItemsOpenAPIRequest_PageSize_DEFAULT int32

func (p *ListEvaluationSetVersionItemsOpenAPIRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListEvaluationSetVersionItemsOpenAPIRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListEvaluationSetVersionItemsOpenAPIRequest_Base_DEFAULT *base.Base

func (p *ListEvaluationSetVersionItemsOpenAPIRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListEvaluationSetVersionItemsOpenAPIRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) SetVersionID(val string) {
	p.VersionID = val
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListEvaluationSetVersionItemsOpenAPIRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "version_id",
	4:   "page_token",
	5:   "page_size",
	255: "Base",
}

func (p *ListEvaluationSetVersionItemsOpenAPIRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false
	var issetVersionID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersionID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetVersionItemsOpenAPIRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListEvaluationSetVersionItemsOpenAPIRequest[fieldId]))
}

func (p *ListEvaluationSetVersionItemsOpenAPIRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.VersionID = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionItemsOpenAPIRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOpenAPIRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version_id", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VersionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOpenAPIRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetVersionItemsOpenAPIRequest(%+v)", *p)

}

func (p *ListEvaluationSetVersionItemsOpenAPIRequest) DeepEqual(ano *ListEvaluationSetVersionItemsOpenAPIRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.VersionID) {
		return false
	}
	if !p.Field4DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field5DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListEvaluationSetVersionItemsOpenAPIRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.VersionID, src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) Field4DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) Field5DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOpenAPIRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetVersionItemsOpenAPIResponse struct {
	Code     *int32                                    `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                                   `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *ListEvaluationSetVersionItemsOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,ListEvaluationSetVersionItemsOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListEvaluationSetVersionItemsOpenAPIResponse() *ListEvaluationSetVersionItemsOpenAPIResponse {
	return &ListEvaluationSetVersionItemsOpenAPIResponse{}
}

func (p *ListEvaluationSetVersionItemsOpenAPIResponse) InitDefault() {
}

var ListEvaluationSetVersionItemsOpenAPIResponse_Code_DEFAULT int32

func (p *ListEvaluationSetVersionItemsOpenAPIResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return ListEvaluationSetVersionItemsOpenAPIResponse_Code_DEFAULT
	}
	return *p.Code
}

var ListEvaluationSetVersionItemsOpenAPIResponse_Msg_DEFAULT string

func (p *ListEvaluationSetVersionItemsOpenAPIResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return ListEvaluationSetVersionItemsOpenAPIResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var ListEvaluationSetVersionItemsOpenAPIResponse_Data_DEFAULT *ListEvaluationSetVersionItemsOpenAPIData

func (p *ListEvaluationSetVersionItemsOpenAPIResponse) GetData() (v *ListEvaluationSetVersionItemsOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return ListEvaluationSetVersionItemsOpenAPIResponse_Data_DEFAULT
	}
	return p.Data
}

var ListEvaluationSetVersionItemsOpenAPIResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListEvaluationSetVersionItemsOpenAPIResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListEvaluationSetVersionItemsOpenAPIResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListEvaluationSetVersionItemsOpenAPIResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *ListEvaluationSetVersionItemsOpenAPIResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *ListEvaluationSetVersionItemsOpenAPIResponse) SetData(val *ListEvaluationSetVersionItemsOpenAPIData) {
	p.Data = val
}
func (p *ListEvaluationSetVersionItemsOpenAPIResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListEvaluationSetVersionItemsOpenAPIResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *ListEvaluationSetVersionItemsOpenAPIResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetVersionItemsOpenAPIResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOpenAPIResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetVersionItemsOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionItemsOpenAPIResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOpenAPIResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOpenAPIResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOpenAPIResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOpenAPIResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOpenAPIResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetVersionItemsOpenAPIResponse(%+v)", *p)

}

func (p *ListEvaluationSetVersionItemsOpenAPIResponse) DeepEqual(ano *ListEvaluationSetVersionItemsOpenAPIResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListEvaluationSetVersionItemsOpenAPIResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOpenAPIResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOpenAPIResponse) Field3DeepEqual(src *ListEvaluationSetVersionItemsOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOpenAPIResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetVersionItemsOpenAPIData struct {
	Items         []*eval_set.EvaluationSetItem `thrift:"items,1,optional" frugal:"1,optional,list<eval_set.EvaluationSetItem>" form:"items" json:"items,omitempty" query:"items"`
	HasMore       *bool                         `thrift:"has_more,2,optional" frugal:"2,optional,bool" form:"has_more" json:"has_more,omitempty" query:"has_more"`
	NextPageToken *string                       `thrift:"next_page_token,3,optional" frugal:"3,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	Total         *int64                        `thrift:"total,4,optional" frugal:"4,optional,i64" form:"total" json:"total,omitempty" query:"total"`
}

func NewListEvaluationSetVersionItemsOpenAPIData() *ListEvaluationSetVersionItemsOpenAPIData {
	return &ListEvaluationSetVersionItemsOpenAPIData{}
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) InitDefault() {
}

var ListEvaluationSetVersionItemsOpenAPIData_Items_DEFAULT []*eval_set.EvaluationSetItem

func (p *ListEvaluationSetVersionItemsOpenAPIData) GetItems() (v []*eval_set.EvaluationSetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return ListEvaluationSetVersionItemsOpenAPIData_Items_DEFAULT
	}
	return p.Items
}

var ListEvaluationSetVersionItemsOpenAPIData_HasMore_DEFAULT bool

func (p *ListEvaluationSetVersionItemsOpenAPIData) GetHasMore() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetHasMore() {
		return ListEvaluationSetVersionItemsOpenAPIData_HasMore_DEFAULT
	}
	return *p.HasMore
}

var ListEvaluationSetVersionItemsOpenAPIData_NextPageToken_DEFAULT string

func (p *ListEvaluationSetVersionItemsOpenAPIData) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListEvaluationSetVersionItemsOpenAPIData_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListEvaluationSetVersionItemsOpenAPIData_Total_DEFAULT int64

func (p *ListEvaluationSetVersionItemsOpenAPIData) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListEvaluationSetVersionItemsOpenAPIData_Total_DEFAULT
	}
	return *p.Total
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) SetItems(val []*eval_set.EvaluationSetItem) {
	p.Items = val
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) SetHasMore(val *bool) {
	p.HasMore = val
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) SetTotal(val *int64) {
	p.Total = val
}

var fieldIDToName_ListEvaluationSetVersionItemsOpenAPIData = map[int16]string{
	1: "items",
	2: "has_more",
	3: "next_page_token",
	4: "total",
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) IsSetItems() bool {
	return p.Items != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) IsSetHasMore() bool {
	return p.HasMore != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetVersionItemsOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSetItem, 0, size)
	values := make([]eval_set.EvaluationSetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HasMore = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionItemsOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasMore() {
		if err = oprot.WriteFieldBegin("has_more", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.HasMore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetVersionItemsOpenAPIData(%+v)", *p)

}

func (p *ListEvaluationSetVersionItemsOpenAPIData) DeepEqual(ano *ListEvaluationSetVersionItemsOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field2DeepEqual(ano.HasMore) {
		return false
	}
	if !p.Field3DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field4DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) Field1DeepEqual(src []*eval_set.EvaluationSetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) Field2DeepEqual(src *bool) bool {

	if p.HasMore == src {
		return true
	} else if p.HasMore == nil || src == nil {
		return false
	}
	if *p.HasMore != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) Field3DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) Field4DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}

// ===============================
// 评估器相关接口 (5个接口)
// ===============================
// 2.1 创建评估器
type CreateEvaluatorOpenAPIRequest struct {
	WorkspaceID int64                `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	Evaluator   *evaluator.Evaluator `thrift:"evaluator,2,required" frugal:"2,required,evaluator.Evaluator" form:"evaluator,required" json:"evaluator,required" query:"evaluator,required"`
	Base        *base.Base           `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateEvaluatorOpenAPIRequest() *CreateEvaluatorOpenAPIRequest {
	return &CreateEvaluatorOpenAPIRequest{}
}

func (p *CreateEvaluatorOpenAPIRequest) InitDefault() {
}

func (p *CreateEvaluatorOpenAPIRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var CreateEvaluatorOpenAPIRequest_Evaluator_DEFAULT *evaluator.Evaluator

func (p *CreateEvaluatorOpenAPIRequest) GetEvaluator() (v *evaluator.Evaluator) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluator() {
		return CreateEvaluatorOpenAPIRequest_Evaluator_DEFAULT
	}
	return p.Evaluator
}

var CreateEvaluatorOpenAPIRequest_Base_DEFAULT *base.Base

func (p *CreateEvaluatorOpenAPIRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateEvaluatorOpenAPIRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateEvaluatorOpenAPIRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *CreateEvaluatorOpenAPIRequest) SetEvaluator(val *evaluator.Evaluator) {
	p.Evaluator = val
}
func (p *CreateEvaluatorOpenAPIRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateEvaluatorOpenAPIRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator",
	255: "Base",
}

func (p *CreateEvaluatorOpenAPIRequest) IsSetEvaluator() bool {
	return p.Evaluator != nil
}

func (p *CreateEvaluatorOpenAPIRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateEvaluatorOpenAPIRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluator bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluator = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluator {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluatorOpenAPIRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEvaluatorOpenAPIRequest[fieldId]))
}

func (p *CreateEvaluatorOpenAPIRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateEvaluatorOpenAPIRequest) ReadField2(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluator()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Evaluator = _field
	return nil
}
func (p *CreateEvaluatorOpenAPIRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateEvaluatorOpenAPIRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluatorOpenAPIRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluatorOpenAPIRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluatorOpenAPIRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Evaluator.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluatorOpenAPIRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluatorOpenAPIRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluatorOpenAPIRequest(%+v)", *p)

}

func (p *CreateEvaluatorOpenAPIRequest) DeepEqual(ano *CreateEvaluatorOpenAPIRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Evaluator) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateEvaluatorOpenAPIRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *CreateEvaluatorOpenAPIRequest) Field2DeepEqual(src *evaluator.Evaluator) bool {

	if !p.Evaluator.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluatorOpenAPIRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluatorOpenAPIResponse struct {
	Code     *int32                      `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                     `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *CreateEvaluatorOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,CreateEvaluatorOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp              `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateEvaluatorOpenAPIResponse() *CreateEvaluatorOpenAPIResponse {
	return &CreateEvaluatorOpenAPIResponse{}
}

func (p *CreateEvaluatorOpenAPIResponse) InitDefault() {
}

var CreateEvaluatorOpenAPIResponse_Code_DEFAULT int32

func (p *CreateEvaluatorOpenAPIResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return CreateEvaluatorOpenAPIResponse_Code_DEFAULT
	}
	return *p.Code
}

var CreateEvaluatorOpenAPIResponse_Msg_DEFAULT string

func (p *CreateEvaluatorOpenAPIResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return CreateEvaluatorOpenAPIResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var CreateEvaluatorOpenAPIResponse_Data_DEFAULT *CreateEvaluatorOpenAPIData

func (p *CreateEvaluatorOpenAPIResponse) GetData() (v *CreateEvaluatorOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return CreateEvaluatorOpenAPIResponse_Data_DEFAULT
	}
	return p.Data
}

var CreateEvaluatorOpenAPIResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateEvaluatorOpenAPIResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateEvaluatorOpenAPIResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateEvaluatorOpenAPIResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *CreateEvaluatorOpenAPIResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *CreateEvaluatorOpenAPIResponse) SetData(val *CreateEvaluatorOpenAPIData) {
	p.Data = val
}
func (p *CreateEvaluatorOpenAPIResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateEvaluatorOpenAPIResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *CreateEvaluatorOpenAPIResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *CreateEvaluatorOpenAPIResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *CreateEvaluatorOpenAPIResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *CreateEvaluatorOpenAPIResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateEvaluatorOpenAPIResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluatorOpenAPIResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluatorOpenAPIResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *CreateEvaluatorOpenAPIResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *CreateEvaluatorOpenAPIResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluatorOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *CreateEvaluatorOpenAPIResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateEvaluatorOpenAPIResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluatorOpenAPIResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluatorOpenAPIResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluatorOpenAPIResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluatorOpenAPIResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateEvaluatorOpenAPIResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluatorOpenAPIResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluatorOpenAPIResponse(%+v)", *p)

}

func (p *CreateEvaluatorOpenAPIResponse) DeepEqual(ano *CreateEvaluatorOpenAPIResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateEvaluatorOpenAPIResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *CreateEvaluatorOpenAPIResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluatorOpenAPIResponse) Field3DeepEqual(src *CreateEvaluatorOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluatorOpenAPIResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluatorOpenAPIData struct {
	EvaluatorID *string `thrift:"evaluator_id,1,optional" frugal:"1,optional,string" form:"evaluator_id" json:"evaluator_id,string,omitempty" query:"evaluator_id"`
}

func NewCreateEvaluatorOpenAPIData() *CreateEvaluatorOpenAPIData {
	return &CreateEvaluatorOpenAPIData{}
}

func (p *CreateEvaluatorOpenAPIData) InitDefault() {
}

var CreateEvaluatorOpenAPIData_EvaluatorID_DEFAULT string

func (p *CreateEvaluatorOpenAPIData) GetEvaluatorID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorID() {
		return CreateEvaluatorOpenAPIData_EvaluatorID_DEFAULT
	}
	return *p.EvaluatorID
}
func (p *CreateEvaluatorOpenAPIData) SetEvaluatorID(val *string) {
	p.EvaluatorID = val
}

var fieldIDToName_CreateEvaluatorOpenAPIData = map[int16]string{
	1: "evaluator_id",
}

func (p *CreateEvaluatorOpenAPIData) IsSetEvaluatorID() bool {
	return p.EvaluatorID != nil
}

func (p *CreateEvaluatorOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluatorOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluatorOpenAPIData) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorID = _field
	return nil
}

func (p *CreateEvaluatorOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluatorOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluatorOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorID() {
		if err = oprot.WriteFieldBegin("evaluator_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvaluatorID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEvaluatorOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluatorOpenAPIData(%+v)", *p)

}

func (p *CreateEvaluatorOpenAPIData) DeepEqual(ano *CreateEvaluatorOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorID) {
		return false
	}
	return true
}

func (p *CreateEvaluatorOpenAPIData) Field1DeepEqual(src *string) bool {

	if p.EvaluatorID == src {
		return true
	} else if p.EvaluatorID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvaluatorID, *src) != 0 {
		return false
	}
	return true
}

// 2.2 提交评估器版本
type SubmitEvaluatorVersionOpenAPIRequest struct {
	WorkspaceID int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluatorID string     `thrift:"evaluator_id,2,required" frugal:"2,required,string" json:"evaluator_id,required" path:"evaluator_id,required"`
	Version     string     `thrift:"version,3,required" frugal:"3,required,string" form:"version,required" json:"version,required" query:"version,required"`
	Description *string    `thrift:"description,4,optional" frugal:"4,optional,string" form:"description" json:"description,omitempty" query:"description"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewSubmitEvaluatorVersionOpenAPIRequest() *SubmitEvaluatorVersionOpenAPIRequest {
	return &SubmitEvaluatorVersionOpenAPIRequest{}
}

func (p *SubmitEvaluatorVersionOpenAPIRequest) InitDefault() {
}

func (p *SubmitEvaluatorVersionOpenAPIRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *SubmitEvaluatorVersionOpenAPIRequest) GetEvaluatorID() (v string) {
	if p != nil {
		return p.EvaluatorID
	}
	return
}

func (p *SubmitEvaluatorVersionOpenAPIRequest) GetVersion() (v string) {
	if p != nil {
		return p.Version
	}
	return
}

var SubmitEvaluatorVersionOpenAPIRequest_Description_DEFAULT string

func (p *SubmitEvaluatorVersionOpenAPIRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return SubmitEvaluatorVersionOpenAPIRequest_Description_DEFAULT
	}
	return *p.Description
}

var SubmitEvaluatorVersionOpenAPIRequest_Base_DEFAULT *base.Base

func (p *SubmitEvaluatorVersionOpenAPIRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return SubmitEvaluatorVersionOpenAPIRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *SubmitEvaluatorVersionOpenAPIRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *SubmitEvaluatorVersionOpenAPIRequest) SetEvaluatorID(val string) {
	p.EvaluatorID = val
}
func (p *SubmitEvaluatorVersionOpenAPIRequest) SetVersion(val string) {
	p.Version = val
}
func (p *SubmitEvaluatorVersionOpenAPIRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *SubmitEvaluatorVersionOpenAPIRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_SubmitEvaluatorVersionOpenAPIRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_id",
	3:   "version",
	4:   "description",
	255: "Base",
}

func (p *SubmitEvaluatorVersionOpenAPIRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *SubmitEvaluatorVersionOpenAPIRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *SubmitEvaluatorVersionOpenAPIRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluatorID bool = false
	var issetVersion bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubmitEvaluatorVersionOpenAPIRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SubmitEvaluatorVersionOpenAPIRequest[fieldId]))
}

func (p *SubmitEvaluatorVersionOpenAPIRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *SubmitEvaluatorVersionOpenAPIRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *SubmitEvaluatorVersionOpenAPIRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *SubmitEvaluatorVersionOpenAPIRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *SubmitEvaluatorVersionOpenAPIRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *SubmitEvaluatorVersionOpenAPIRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitEvaluatorVersionOpenAPIRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubmitEvaluatorVersionOpenAPIRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionOpenAPIRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EvaluatorID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionOpenAPIRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionOpenAPIRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionOpenAPIRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SubmitEvaluatorVersionOpenAPIRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitEvaluatorVersionOpenAPIRequest(%+v)", *p)

}

func (p *SubmitEvaluatorVersionOpenAPIRequest) DeepEqual(ano *SubmitEvaluatorVersionOpenAPIRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *SubmitEvaluatorVersionOpenAPIRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionOpenAPIRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.EvaluatorID, src) != 0 {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionOpenAPIRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Version, src) != 0 {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionOpenAPIRequest) Field4DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionOpenAPIRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type SubmitEvaluatorVersionOpenAPIResponse struct {
	Code     *int32                             `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                            `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *SubmitEvaluatorVersionOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,SubmitEvaluatorVersionOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                     `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewSubmitEvaluatorVersionOpenAPIResponse() *SubmitEvaluatorVersionOpenAPIResponse {
	return &SubmitEvaluatorVersionOpenAPIResponse{}
}

func (p *SubmitEvaluatorVersionOpenAPIResponse) InitDefault() {
}

var SubmitEvaluatorVersionOpenAPIResponse_Code_DEFAULT int32

func (p *SubmitEvaluatorVersionOpenAPIResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return SubmitEvaluatorVersionOpenAPIResponse_Code_DEFAULT
	}
	return *p.Code
}

var SubmitEvaluatorVersionOpenAPIResponse_Msg_DEFAULT string

func (p *SubmitEvaluatorVersionOpenAPIResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return SubmitEvaluatorVersionOpenAPIResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var SubmitEvaluatorVersionOpenAPIResponse_Data_DEFAULT *SubmitEvaluatorVersionOpenAPIData

func (p *SubmitEvaluatorVersionOpenAPIResponse) GetData() (v *SubmitEvaluatorVersionOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return SubmitEvaluatorVersionOpenAPIResponse_Data_DEFAULT
	}
	return p.Data
}

var SubmitEvaluatorVersionOpenAPIResponse_BaseResp_DEFAULT *base.BaseResp

func (p *SubmitEvaluatorVersionOpenAPIResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return SubmitEvaluatorVersionOpenAPIResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *SubmitEvaluatorVersionOpenAPIResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *SubmitEvaluatorVersionOpenAPIResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *SubmitEvaluatorVersionOpenAPIResponse) SetData(val *SubmitEvaluatorVersionOpenAPIData) {
	p.Data = val
}
func (p *SubmitEvaluatorVersionOpenAPIResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_SubmitEvaluatorVersionOpenAPIResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *SubmitEvaluatorVersionOpenAPIResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *SubmitEvaluatorVersionOpenAPIResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *SubmitEvaluatorVersionOpenAPIResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *SubmitEvaluatorVersionOpenAPIResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *SubmitEvaluatorVersionOpenAPIResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubmitEvaluatorVersionOpenAPIResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubmitEvaluatorVersionOpenAPIResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *SubmitEvaluatorVersionOpenAPIResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *SubmitEvaluatorVersionOpenAPIResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewSubmitEvaluatorVersionOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *SubmitEvaluatorVersionOpenAPIResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *SubmitEvaluatorVersionOpenAPIResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitEvaluatorVersionOpenAPIResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubmitEvaluatorVersionOpenAPIResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionOpenAPIResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionOpenAPIResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionOpenAPIResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SubmitEvaluatorVersionOpenAPIResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitEvaluatorVersionOpenAPIResponse(%+v)", *p)

}

func (p *SubmitEvaluatorVersionOpenAPIResponse) DeepEqual(ano *SubmitEvaluatorVersionOpenAPIResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *SubmitEvaluatorVersionOpenAPIResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionOpenAPIResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionOpenAPIResponse) Field3DeepEqual(src *SubmitEvaluatorVersionOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionOpenAPIResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type SubmitEvaluatorVersionOpenAPIData struct {
	Evaluator *evaluator.Evaluator `thrift:"evaluator,1,optional" frugal:"1,optional,evaluator.Evaluator" form:"evaluator" json:"evaluator,omitempty" query:"evaluator"`
}

func NewSubmitEvaluatorVersionOpenAPIData() *SubmitEvaluatorVersionOpenAPIData {
	return &SubmitEvaluatorVersionOpenAPIData{}
}

func (p *SubmitEvaluatorVersionOpenAPIData) InitDefault() {
}

var SubmitEvaluatorVersionOpenAPIData_Evaluator_DEFAULT *evaluator.Evaluator

func (p *SubmitEvaluatorVersionOpenAPIData) GetEvaluator() (v *evaluator.Evaluator) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluator() {
		return SubmitEvaluatorVersionOpenAPIData_Evaluator_DEFAULT
	}
	return p.Evaluator
}
func (p *SubmitEvaluatorVersionOpenAPIData) SetEvaluator(val *evaluator.Evaluator) {
	p.Evaluator = val
}

var fieldIDToName_SubmitEvaluatorVersionOpenAPIData = map[int16]string{
	1: "evaluator",
}

func (p *SubmitEvaluatorVersionOpenAPIData) IsSetEvaluator() bool {
	return p.Evaluator != nil
}

func (p *SubmitEvaluatorVersionOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubmitEvaluatorVersionOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubmitEvaluatorVersionOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluator()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Evaluator = _field
	return nil
}

func (p *SubmitEvaluatorVersionOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitEvaluatorVersionOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubmitEvaluatorVersionOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluator() {
		if err = oprot.WriteFieldBegin("evaluator", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Evaluator.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubmitEvaluatorVersionOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitEvaluatorVersionOpenAPIData(%+v)", *p)

}

func (p *SubmitEvaluatorVersionOpenAPIData) DeepEqual(ano *SubmitEvaluatorVersionOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Evaluator) {
		return false
	}
	return true
}

func (p *SubmitEvaluatorVersionOpenAPIData) Field1DeepEqual(src *evaluator.Evaluator) bool {

	if !p.Evaluator.DeepEqual(src) {
		return false
	}
	return true
}

// 2.3 获取评估器版本详情
type GetEvaluatorVersionOpenAPIRequest struct {
	WorkspaceID        int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluatorVersionID string     `thrift:"evaluator_version_id,2,required" frugal:"2,required,string" json:"evaluator_version_id,required" path:"evaluator_version_id,required"`
	IncludeDeleted     *bool      `thrift:"include_deleted,3,optional" frugal:"3,optional,bool" form:"include_deleted" json:"include_deleted,omitempty" query:"include_deleted"`
	Base               *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetEvaluatorVersionOpenAPIRequest() *GetEvaluatorVersionOpenAPIRequest {
	return &GetEvaluatorVersionOpenAPIRequest{}
}

func (p *GetEvaluatorVersionOpenAPIRequest) InitDefault() {
}

func (p *GetEvaluatorVersionOpenAPIRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *GetEvaluatorVersionOpenAPIRequest) GetEvaluatorVersionID() (v string) {
	if p != nil {
		return p.EvaluatorVersionID
	}
	return
}

var GetEvaluatorVersionOpenAPIRequest_IncludeDeleted_DEFAULT bool

func (p *GetEvaluatorVersionOpenAPIRequest) GetIncludeDeleted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIncludeDeleted() {
		return GetEvaluatorVersionOpenAPIRequest_IncludeDeleted_DEFAULT
	}
	return *p.IncludeDeleted
}

var GetEvaluatorVersionOpenAPIRequest_Base_DEFAULT *base.Base

func (p *GetEvaluatorVersionOpenAPIRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetEvaluatorVersionOpenAPIRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetEvaluatorVersionOpenAPIRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *GetEvaluatorVersionOpenAPIRequest) SetEvaluatorVersionID(val string) {
	p.EvaluatorVersionID = val
}
func (p *GetEvaluatorVersionOpenAPIRequest) SetIncludeDeleted(val *bool) {
	p.IncludeDeleted = val
}
func (p *GetEvaluatorVersionOpenAPIRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetEvaluatorVersionOpenAPIRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_version_id",
	3:   "include_deleted",
	255: "Base",
}

func (p *GetEvaluatorVersionOpenAPIRequest) IsSetIncludeDeleted() bool {
	return p.IncludeDeleted != nil
}

func (p *GetEvaluatorVersionOpenAPIRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetEvaluatorVersionOpenAPIRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluatorVersionID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorVersionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorVersionID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorVersionOpenAPIRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetEvaluatorVersionOpenAPIRequest[fieldId]))
}

func (p *GetEvaluatorVersionOpenAPIRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetEvaluatorVersionOpenAPIRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorVersionID = _field
	return nil
}
func (p *GetEvaluatorVersionOpenAPIRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IncludeDeleted = _field
	return nil
}
func (p *GetEvaluatorVersionOpenAPIRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetEvaluatorVersionOpenAPIRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorVersionOpenAPIRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorVersionOpenAPIRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluatorVersionOpenAPIRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_version_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EvaluatorVersionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluatorVersionOpenAPIRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeDeleted() {
		if err = oprot.WriteFieldBegin("include_deleted", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IncludeDeleted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetEvaluatorVersionOpenAPIRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluatorVersionOpenAPIRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorVersionOpenAPIRequest(%+v)", *p)

}

func (p *GetEvaluatorVersionOpenAPIRequest) DeepEqual(ano *GetEvaluatorVersionOpenAPIRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorVersionID) {
		return false
	}
	if !p.Field3DeepEqual(ano.IncludeDeleted) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetEvaluatorVersionOpenAPIRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *GetEvaluatorVersionOpenAPIRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.EvaluatorVersionID, src) != 0 {
		return false
	}
	return true
}
func (p *GetEvaluatorVersionOpenAPIRequest) Field3DeepEqual(src *bool) bool {

	if p.IncludeDeleted == src {
		return true
	} else if p.IncludeDeleted == nil || src == nil {
		return false
	}
	if *p.IncludeDeleted != *src {
		return false
	}
	return true
}
func (p *GetEvaluatorVersionOpenAPIRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluatorVersionOpenAPIResponse struct {
	Code     *int32                          `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                         `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *GetEvaluatorVersionOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,GetEvaluatorVersionOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                  `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetEvaluatorVersionOpenAPIResponse() *GetEvaluatorVersionOpenAPIResponse {
	return &GetEvaluatorVersionOpenAPIResponse{}
}

func (p *GetEvaluatorVersionOpenAPIResponse) InitDefault() {
}

var GetEvaluatorVersionOpenAPIResponse_Code_DEFAULT int32

func (p *GetEvaluatorVersionOpenAPIResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return GetEvaluatorVersionOpenAPIResponse_Code_DEFAULT
	}
	return *p.Code
}

var GetEvaluatorVersionOpenAPIResponse_Msg_DEFAULT string

func (p *GetEvaluatorVersionOpenAPIResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return GetEvaluatorVersionOpenAPIResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var GetEvaluatorVersionOpenAPIResponse_Data_DEFAULT *GetEvaluatorVersionOpenAPIData

func (p *GetEvaluatorVersionOpenAPIResponse) GetData() (v *GetEvaluatorVersionOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return GetEvaluatorVersionOpenAPIResponse_Data_DEFAULT
	}
	return p.Data
}

var GetEvaluatorVersionOpenAPIResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetEvaluatorVersionOpenAPIResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetEvaluatorVersionOpenAPIResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetEvaluatorVersionOpenAPIResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *GetEvaluatorVersionOpenAPIResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *GetEvaluatorVersionOpenAPIResponse) SetData(val *GetEvaluatorVersionOpenAPIData) {
	p.Data = val
}
func (p *GetEvaluatorVersionOpenAPIResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetEvaluatorVersionOpenAPIResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *GetEvaluatorVersionOpenAPIResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *GetEvaluatorVersionOpenAPIResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *GetEvaluatorVersionOpenAPIResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetEvaluatorVersionOpenAPIResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetEvaluatorVersionOpenAPIResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorVersionOpenAPIResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluatorVersionOpenAPIResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *GetEvaluatorVersionOpenAPIResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *GetEvaluatorVersionOpenAPIResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorVersionOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *GetEvaluatorVersionOpenAPIResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetEvaluatorVersionOpenAPIResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorVersionOpenAPIResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorVersionOpenAPIResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluatorVersionOpenAPIResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluatorVersionOpenAPIResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetEvaluatorVersionOpenAPIResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluatorVersionOpenAPIResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorVersionOpenAPIResponse(%+v)", *p)

}

func (p *GetEvaluatorVersionOpenAPIResponse) DeepEqual(ano *GetEvaluatorVersionOpenAPIResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetEvaluatorVersionOpenAPIResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *GetEvaluatorVersionOpenAPIResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *GetEvaluatorVersionOpenAPIResponse) Field3DeepEqual(src *GetEvaluatorVersionOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetEvaluatorVersionOpenAPIResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluatorVersionOpenAPIData struct {
	Evaluator *evaluator.Evaluator `thrift:"evaluator,1,optional" frugal:"1,optional,evaluator.Evaluator" form:"evaluator" json:"evaluator,omitempty" query:"evaluator"`
}

func NewGetEvaluatorVersionOpenAPIData() *GetEvaluatorVersionOpenAPIData {
	return &GetEvaluatorVersionOpenAPIData{}
}

func (p *GetEvaluatorVersionOpenAPIData) InitDefault() {
}

var GetEvaluatorVersionOpenAPIData_Evaluator_DEFAULT *evaluator.Evaluator

func (p *GetEvaluatorVersionOpenAPIData) GetEvaluator() (v *evaluator.Evaluator) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluator() {
		return GetEvaluatorVersionOpenAPIData_Evaluator_DEFAULT
	}
	return p.Evaluator
}
func (p *GetEvaluatorVersionOpenAPIData) SetEvaluator(val *evaluator.Evaluator) {
	p.Evaluator = val
}

var fieldIDToName_GetEvaluatorVersionOpenAPIData = map[int16]string{
	1: "evaluator",
}

func (p *GetEvaluatorVersionOpenAPIData) IsSetEvaluator() bool {
	return p.Evaluator != nil
}

func (p *GetEvaluatorVersionOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorVersionOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluatorVersionOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluator()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Evaluator = _field
	return nil
}

func (p *GetEvaluatorVersionOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorVersionOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorVersionOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluator() {
		if err = oprot.WriteFieldBegin("evaluator", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Evaluator.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetEvaluatorVersionOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorVersionOpenAPIData(%+v)", *p)

}

func (p *GetEvaluatorVersionOpenAPIData) DeepEqual(ano *GetEvaluatorVersionOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Evaluator) {
		return false
	}
	return true
}

func (p *GetEvaluatorVersionOpenAPIData) Field1DeepEqual(src *evaluator.Evaluator) bool {

	if !p.Evaluator.DeepEqual(src) {
		return false
	}
	return true
}

// 2.4 执行评估器
type RunEvaluatorOpenAPIRequest struct {
	WorkspaceID        int64                         `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluatorVersionID string                        `thrift:"evaluator_version_id,2,required" frugal:"2,required,string" json:"evaluator_version_id,required" path:"evaluator_version_id,required"`
	InputData          *evaluator.EvaluatorInputData `thrift:"input_data,3,required" frugal:"3,required,evaluator.EvaluatorInputData" form:"input_data,required" json:"input_data,required" query:"input_data,required"`
	Ext                map[string]string             `thrift:"ext,4,optional" frugal:"4,optional,map<string:string>" form:"ext" json:"ext,omitempty" query:"ext"`
	Base               *base.Base                    `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewRunEvaluatorOpenAPIRequest() *RunEvaluatorOpenAPIRequest {
	return &RunEvaluatorOpenAPIRequest{}
}

func (p *RunEvaluatorOpenAPIRequest) InitDefault() {
}

func (p *RunEvaluatorOpenAPIRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *RunEvaluatorOpenAPIRequest) GetEvaluatorVersionID() (v string) {
	if p != nil {
		return p.EvaluatorVersionID
	}
	return
}

var RunEvaluatorOpenAPIRequest_InputData_DEFAULT *evaluator.EvaluatorInputData

func (p *RunEvaluatorOpenAPIRequest) GetInputData() (v *evaluator.EvaluatorInputData) {
	if p == nil {
		return
	}
	if !p.IsSetInputData() {
		return RunEvaluatorOpenAPIRequest_InputData_DEFAULT
	}
	return p.InputData
}

var RunEvaluatorOpenAPIRequest_Ext_DEFAULT map[string]string

func (p *RunEvaluatorOpenAPIRequest) GetExt() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetExt() {
		return RunEvaluatorOpenAPIRequest_Ext_DEFAULT
	}
	return p.Ext
}

var RunEvaluatorOpenAPIRequest_Base_DEFAULT *base.Base

func (p *RunEvaluatorOpenAPIRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return RunEvaluatorOpenAPIRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *RunEvaluatorOpenAPIRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *RunEvaluatorOpenAPIRequest) SetEvaluatorVersionID(val string) {
	p.EvaluatorVersionID = val
}
func (p *RunEvaluatorOpenAPIRequest) SetInputData(val *evaluator.EvaluatorInputData) {
	p.InputData = val
}
func (p *RunEvaluatorOpenAPIRequest) SetExt(val map[string]string) {
	p.Ext = val
}
func (p *RunEvaluatorOpenAPIRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_RunEvaluatorOpenAPIRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_version_id",
	3:   "input_data",
	4:   "ext",
	255: "Base",
}

func (p *RunEvaluatorOpenAPIRequest) IsSetInputData() bool {
	return p.InputData != nil
}

func (p *RunEvaluatorOpenAPIRequest) IsSetExt() bool {
	return p.Ext != nil
}

func (p *RunEvaluatorOpenAPIRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *RunEvaluatorOpenAPIRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluatorVersionID bool = false
	var issetInputData bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorVersionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetInputData = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorVersionID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetInputData {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RunEvaluatorOpenAPIRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RunEvaluatorOpenAPIRequest[fieldId]))
}

func (p *RunEvaluatorOpenAPIRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *RunEvaluatorOpenAPIRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorVersionID = _field
	return nil
}
func (p *RunEvaluatorOpenAPIRequest) ReadField3(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorInputData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.InputData = _field
	return nil
}
func (p *RunEvaluatorOpenAPIRequest) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Ext = _field
	return nil
}
func (p *RunEvaluatorOpenAPIRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *RunEvaluatorOpenAPIRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunEvaluatorOpenAPIRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RunEvaluatorOpenAPIRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RunEvaluatorOpenAPIRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_version_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EvaluatorVersionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *RunEvaluatorOpenAPIRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("input_data", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.InputData.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *RunEvaluatorOpenAPIRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExt() {
		if err = oprot.WriteFieldBegin("ext", thrift.MAP, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Ext)); err != nil {
			return err
		}
		for k, v := range p.Ext {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *RunEvaluatorOpenAPIRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RunEvaluatorOpenAPIRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RunEvaluatorOpenAPIRequest(%+v)", *p)

}

func (p *RunEvaluatorOpenAPIRequest) DeepEqual(ano *RunEvaluatorOpenAPIRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorVersionID) {
		return false
	}
	if !p.Field3DeepEqual(ano.InputData) {
		return false
	}
	if !p.Field4DeepEqual(ano.Ext) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *RunEvaluatorOpenAPIRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *RunEvaluatorOpenAPIRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.EvaluatorVersionID, src) != 0 {
		return false
	}
	return true
}
func (p *RunEvaluatorOpenAPIRequest) Field3DeepEqual(src *evaluator.EvaluatorInputData) bool {

	if !p.InputData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RunEvaluatorOpenAPIRequest) Field4DeepEqual(src map[string]string) bool {

	if len(p.Ext) != len(src) {
		return false
	}
	for k, v := range p.Ext {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *RunEvaluatorOpenAPIRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type RunEvaluatorOpenAPIResponse struct {
	Code     *int32                   `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                  `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *RunEvaluatorOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,RunEvaluatorOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp           `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewRunEvaluatorOpenAPIResponse() *RunEvaluatorOpenAPIResponse {
	return &RunEvaluatorOpenAPIResponse{}
}

func (p *RunEvaluatorOpenAPIResponse) InitDefault() {
}

var RunEvaluatorOpenAPIResponse_Code_DEFAULT int32

func (p *RunEvaluatorOpenAPIResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return RunEvaluatorOpenAPIResponse_Code_DEFAULT
	}
	return *p.Code
}

var RunEvaluatorOpenAPIResponse_Msg_DEFAULT string

func (p *RunEvaluatorOpenAPIResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return RunEvaluatorOpenAPIResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var RunEvaluatorOpenAPIResponse_Data_DEFAULT *RunEvaluatorOpenAPIData

func (p *RunEvaluatorOpenAPIResponse) GetData() (v *RunEvaluatorOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return RunEvaluatorOpenAPIResponse_Data_DEFAULT
	}
	return p.Data
}

var RunEvaluatorOpenAPIResponse_BaseResp_DEFAULT *base.BaseResp

func (p *RunEvaluatorOpenAPIResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return RunEvaluatorOpenAPIResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *RunEvaluatorOpenAPIResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *RunEvaluatorOpenAPIResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *RunEvaluatorOpenAPIResponse) SetData(val *RunEvaluatorOpenAPIData) {
	p.Data = val
}
func (p *RunEvaluatorOpenAPIResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_RunEvaluatorOpenAPIResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *RunEvaluatorOpenAPIResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *RunEvaluatorOpenAPIResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *RunEvaluatorOpenAPIResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *RunEvaluatorOpenAPIResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *RunEvaluatorOpenAPIResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RunEvaluatorOpenAPIResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RunEvaluatorOpenAPIResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *RunEvaluatorOpenAPIResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *RunEvaluatorOpenAPIResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewRunEvaluatorOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *RunEvaluatorOpenAPIResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *RunEvaluatorOpenAPIResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunEvaluatorOpenAPIResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RunEvaluatorOpenAPIResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RunEvaluatorOpenAPIResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *RunEvaluatorOpenAPIResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *RunEvaluatorOpenAPIResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RunEvaluatorOpenAPIResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RunEvaluatorOpenAPIResponse(%+v)", *p)

}

func (p *RunEvaluatorOpenAPIResponse) DeepEqual(ano *RunEvaluatorOpenAPIResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *RunEvaluatorOpenAPIResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *RunEvaluatorOpenAPIResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *RunEvaluatorOpenAPIResponse) Field3DeepEqual(src *RunEvaluatorOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RunEvaluatorOpenAPIResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type RunEvaluatorOpenAPIData struct {
	Record *evaluator.EvaluatorRecord `thrift:"record,1,required" frugal:"1,required,evaluator.EvaluatorRecord" form:"record,required" json:"record,required" query:"record,required"`
}

func NewRunEvaluatorOpenAPIData() *RunEvaluatorOpenAPIData {
	return &RunEvaluatorOpenAPIData{}
}

func (p *RunEvaluatorOpenAPIData) InitDefault() {
}

var RunEvaluatorOpenAPIData_Record_DEFAULT *evaluator.EvaluatorRecord

func (p *RunEvaluatorOpenAPIData) GetRecord() (v *evaluator.EvaluatorRecord) {
	if p == nil {
		return
	}
	if !p.IsSetRecord() {
		return RunEvaluatorOpenAPIData_Record_DEFAULT
	}
	return p.Record
}
func (p *RunEvaluatorOpenAPIData) SetRecord(val *evaluator.EvaluatorRecord) {
	p.Record = val
}

var fieldIDToName_RunEvaluatorOpenAPIData = map[int16]string{
	1: "record",
}

func (p *RunEvaluatorOpenAPIData) IsSetRecord() bool {
	return p.Record != nil
}

func (p *RunEvaluatorOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRecord bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRecord = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRecord {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RunEvaluatorOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RunEvaluatorOpenAPIData[fieldId]))
}

func (p *RunEvaluatorOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorRecord()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Record = _field
	return nil
}

func (p *RunEvaluatorOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunEvaluatorOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RunEvaluatorOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("record", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Record.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RunEvaluatorOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RunEvaluatorOpenAPIData(%+v)", *p)

}

func (p *RunEvaluatorOpenAPIData) DeepEqual(ano *RunEvaluatorOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Record) {
		return false
	}
	return true
}

func (p *RunEvaluatorOpenAPIData) Field1DeepEqual(src *evaluator.EvaluatorRecord) bool {

	if !p.Record.DeepEqual(src) {
		return false
	}
	return true
}

// 2.5 获取评估器执行结果
type GetEvaluatorRecordOpenAPIRequest struct {
	WorkspaceID       int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvaluatorRecordID string     `thrift:"evaluator_record_id,2,required" frugal:"2,required,string" json:"evaluator_record_id,required" path:"evaluator_record_id,required"`
	IncludeDeleted    *bool      `thrift:"include_deleted,3,optional" frugal:"3,optional,bool" form:"include_deleted" json:"include_deleted,omitempty" query:"include_deleted"`
	Base              *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetEvaluatorRecordOpenAPIRequest() *GetEvaluatorRecordOpenAPIRequest {
	return &GetEvaluatorRecordOpenAPIRequest{}
}

func (p *GetEvaluatorRecordOpenAPIRequest) InitDefault() {
}

func (p *GetEvaluatorRecordOpenAPIRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *GetEvaluatorRecordOpenAPIRequest) GetEvaluatorRecordID() (v string) {
	if p != nil {
		return p.EvaluatorRecordID
	}
	return
}

var GetEvaluatorRecordOpenAPIRequest_IncludeDeleted_DEFAULT bool

func (p *GetEvaluatorRecordOpenAPIRequest) GetIncludeDeleted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIncludeDeleted() {
		return GetEvaluatorRecordOpenAPIRequest_IncludeDeleted_DEFAULT
	}
	return *p.IncludeDeleted
}

var GetEvaluatorRecordOpenAPIRequest_Base_DEFAULT *base.Base

func (p *GetEvaluatorRecordOpenAPIRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetEvaluatorRecordOpenAPIRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetEvaluatorRecordOpenAPIRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *GetEvaluatorRecordOpenAPIRequest) SetEvaluatorRecordID(val string) {
	p.EvaluatorRecordID = val
}
func (p *GetEvaluatorRecordOpenAPIRequest) SetIncludeDeleted(val *bool) {
	p.IncludeDeleted = val
}
func (p *GetEvaluatorRecordOpenAPIRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetEvaluatorRecordOpenAPIRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_record_id",
	3:   "include_deleted",
	255: "Base",
}

func (p *GetEvaluatorRecordOpenAPIRequest) IsSetIncludeDeleted() bool {
	return p.IncludeDeleted != nil
}

func (p *GetEvaluatorRecordOpenAPIRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetEvaluatorRecordOpenAPIRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluatorRecordID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorRecordID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorRecordID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorRecordOpenAPIRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetEvaluatorRecordOpenAPIRequest[fieldId]))
}

func (p *GetEvaluatorRecordOpenAPIRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetEvaluatorRecordOpenAPIRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorRecordID = _field
	return nil
}
func (p *GetEvaluatorRecordOpenAPIRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IncludeDeleted = _field
	return nil
}
func (p *GetEvaluatorRecordOpenAPIRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetEvaluatorRecordOpenAPIRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorRecordOpenAPIRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorRecordOpenAPIRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluatorRecordOpenAPIRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_record_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EvaluatorRecordID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluatorRecordOpenAPIRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeDeleted() {
		if err = oprot.WriteFieldBegin("include_deleted", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IncludeDeleted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetEvaluatorRecordOpenAPIRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluatorRecordOpenAPIRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorRecordOpenAPIRequest(%+v)", *p)

}

func (p *GetEvaluatorRecordOpenAPIRequest) DeepEqual(ano *GetEvaluatorRecordOpenAPIRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorRecordID) {
		return false
	}
	if !p.Field3DeepEqual(ano.IncludeDeleted) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetEvaluatorRecordOpenAPIRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *GetEvaluatorRecordOpenAPIRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.EvaluatorRecordID, src) != 0 {
		return false
	}
	return true
}
func (p *GetEvaluatorRecordOpenAPIRequest) Field3DeepEqual(src *bool) bool {

	if p.IncludeDeleted == src {
		return true
	} else if p.IncludeDeleted == nil || src == nil {
		return false
	}
	if *p.IncludeDeleted != *src {
		return false
	}
	return true
}
func (p *GetEvaluatorRecordOpenAPIRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluatorRecordOpenAPIResponse struct {
	Code     *int32                         `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                        `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *GetEvaluatorRecordOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,GetEvaluatorRecordOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                 `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetEvaluatorRecordOpenAPIResponse() *GetEvaluatorRecordOpenAPIResponse {
	return &GetEvaluatorRecordOpenAPIResponse{}
}

func (p *GetEvaluatorRecordOpenAPIResponse) InitDefault() {
}

var GetEvaluatorRecordOpenAPIResponse_Code_DEFAULT int32

func (p *GetEvaluatorRecordOpenAPIResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return GetEvaluatorRecordOpenAPIResponse_Code_DEFAULT
	}
	return *p.Code
}

var GetEvaluatorRecordOpenAPIResponse_Msg_DEFAULT string

func (p *GetEvaluatorRecordOpenAPIResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return GetEvaluatorRecordOpenAPIResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var GetEvaluatorRecordOpenAPIResponse_Data_DEFAULT *GetEvaluatorRecordOpenAPIData

func (p *GetEvaluatorRecordOpenAPIResponse) GetData() (v *GetEvaluatorRecordOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return GetEvaluatorRecordOpenAPIResponse_Data_DEFAULT
	}
	return p.Data
}

var GetEvaluatorRecordOpenAPIResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetEvaluatorRecordOpenAPIResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetEvaluatorRecordOpenAPIResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetEvaluatorRecordOpenAPIResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *GetEvaluatorRecordOpenAPIResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *GetEvaluatorRecordOpenAPIResponse) SetData(val *GetEvaluatorRecordOpenAPIData) {
	p.Data = val
}
func (p *GetEvaluatorRecordOpenAPIResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetEvaluatorRecordOpenAPIResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *GetEvaluatorRecordOpenAPIResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *GetEvaluatorRecordOpenAPIResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *GetEvaluatorRecordOpenAPIResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetEvaluatorRecordOpenAPIResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetEvaluatorRecordOpenAPIResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorRecordOpenAPIResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluatorRecordOpenAPIResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *GetEvaluatorRecordOpenAPIResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *GetEvaluatorRecordOpenAPIResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorRecordOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *GetEvaluatorRecordOpenAPIResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetEvaluatorRecordOpenAPIResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorRecordOpenAPIResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorRecordOpenAPIResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluatorRecordOpenAPIResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluatorRecordOpenAPIResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetEvaluatorRecordOpenAPIResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluatorRecordOpenAPIResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorRecordOpenAPIResponse(%+v)", *p)

}

func (p *GetEvaluatorRecordOpenAPIResponse) DeepEqual(ano *GetEvaluatorRecordOpenAPIResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetEvaluatorRecordOpenAPIResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *GetEvaluatorRecordOpenAPIResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *GetEvaluatorRecordOpenAPIResponse) Field3DeepEqual(src *GetEvaluatorRecordOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetEvaluatorRecordOpenAPIResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluatorRecordOpenAPIData struct {
	Record *evaluator.EvaluatorRecord `thrift:"record,1,required" frugal:"1,required,evaluator.EvaluatorRecord" form:"record,required" json:"record,required" query:"record,required"`
}

func NewGetEvaluatorRecordOpenAPIData() *GetEvaluatorRecordOpenAPIData {
	return &GetEvaluatorRecordOpenAPIData{}
}

func (p *GetEvaluatorRecordOpenAPIData) InitDefault() {
}

var GetEvaluatorRecordOpenAPIData_Record_DEFAULT *evaluator.EvaluatorRecord

func (p *GetEvaluatorRecordOpenAPIData) GetRecord() (v *evaluator.EvaluatorRecord) {
	if p == nil {
		return
	}
	if !p.IsSetRecord() {
		return GetEvaluatorRecordOpenAPIData_Record_DEFAULT
	}
	return p.Record
}
func (p *GetEvaluatorRecordOpenAPIData) SetRecord(val *evaluator.EvaluatorRecord) {
	p.Record = val
}

var fieldIDToName_GetEvaluatorRecordOpenAPIData = map[int16]string{
	1: "record",
}

func (p *GetEvaluatorRecordOpenAPIData) IsSetRecord() bool {
	return p.Record != nil
}

func (p *GetEvaluatorRecordOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRecord bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRecord = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRecord {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorRecordOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetEvaluatorRecordOpenAPIData[fieldId]))
}

func (p *GetEvaluatorRecordOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorRecord()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Record = _field
	return nil
}

func (p *GetEvaluatorRecordOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorRecordOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorRecordOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("record", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Record.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetEvaluatorRecordOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorRecordOpenAPIData(%+v)", *p)

}

func (p *GetEvaluatorRecordOpenAPIData) DeepEqual(ano *GetEvaluatorRecordOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Record) {
		return false
	}
	return true
}

func (p *GetEvaluatorRecordOpenAPIData) Field1DeepEqual(src *evaluator.EvaluatorRecord) bool {

	if !p.Record.DeepEqual(src) {
		return false
	}
	return true
}

// ===============================
// 评测实验相关接口 (2个接口)
// ===============================
// 3.1 创建评测实验
type CreateExperimentOpenAPIRequest struct {
	WorkspaceID           int64                               `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvalSetVersionID      *string                             `thrift:"eval_set_version_id,2,optional" frugal:"2,optional,string" form:"eval_set_version_id" json:"eval_set_version_id,omitempty" query:"eval_set_version_id"`
	TargetVersionID       *string                             `thrift:"target_version_id,3,optional" frugal:"3,optional,string" form:"target_version_id" json:"target_version_id,omitempty" query:"target_version_id"`
	EvaluatorVersionIds   []string                            `thrift:"evaluator_version_ids,4,optional" frugal:"4,optional,list<string>" form:"evaluator_version_ids" json:"evaluator_version_ids,omitempty" query:"evaluator_version_ids"`
	Name                  *string                             `thrift:"name,5,optional" frugal:"5,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Description           *string                             `thrift:"description,6,optional" frugal:"6,optional,string" form:"description" json:"description,omitempty" query:"description"`
	TargetFieldMapping    *experiment.TargetFieldMapping      `thrift:"target_field_mapping,7,optional" frugal:"7,optional,experiment.TargetFieldMapping" form:"target_field_mapping" json:"target_field_mapping,omitempty" query:"target_field_mapping"`
	EvaluatorFieldMapping []*experiment.EvaluatorFieldMapping `thrift:"evaluator_field_mapping,8,optional" frugal:"8,optional,list<experiment.EvaluatorFieldMapping>" form:"evaluator_field_mapping" json:"evaluator_field_mapping,omitempty" query:"evaluator_field_mapping"`
	ItemConcurNum         *int32                              `thrift:"item_concur_num,9,optional" frugal:"9,optional,i32" form:"item_concur_num" json:"item_concur_num,omitempty" query:"item_concur_num"`
	EvaluatorsConcurNum   *int32                              `thrift:"evaluators_concur_num,10,optional" frugal:"10,optional,i32" form:"evaluators_concur_num" json:"evaluators_concur_num,omitempty" query:"evaluators_concur_num"`
	Base                  *base.Base                          `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateExperimentOpenAPIRequest() *CreateExperimentOpenAPIRequest {
	return &CreateExperimentOpenAPIRequest{}
}

func (p *CreateExperimentOpenAPIRequest) InitDefault() {
}

func (p *CreateExperimentOpenAPIRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var CreateExperimentOpenAPIRequest_EvalSetVersionID_DEFAULT string

func (p *CreateExperimentOpenAPIRequest) GetEvalSetVersionID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEvalSetVersionID() {
		return CreateExperimentOpenAPIRequest_EvalSetVersionID_DEFAULT
	}
	return *p.EvalSetVersionID
}

var CreateExperimentOpenAPIRequest_TargetVersionID_DEFAULT string

func (p *CreateExperimentOpenAPIRequest) GetTargetVersionID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTargetVersionID() {
		return CreateExperimentOpenAPIRequest_TargetVersionID_DEFAULT
	}
	return *p.TargetVersionID
}

var CreateExperimentOpenAPIRequest_EvaluatorVersionIds_DEFAULT []string

func (p *CreateExperimentOpenAPIRequest) GetEvaluatorVersionIds() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorVersionIds() {
		return CreateExperimentOpenAPIRequest_EvaluatorVersionIds_DEFAULT
	}
	return p.EvaluatorVersionIds
}

var CreateExperimentOpenAPIRequest_Name_DEFAULT string

func (p *CreateExperimentOpenAPIRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return CreateExperimentOpenAPIRequest_Name_DEFAULT
	}
	return *p.Name
}

var CreateExperimentOpenAPIRequest_Description_DEFAULT string

func (p *CreateExperimentOpenAPIRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return CreateExperimentOpenAPIRequest_Description_DEFAULT
	}
	return *p.Description
}

var CreateExperimentOpenAPIRequest_TargetFieldMapping_DEFAULT *experiment.TargetFieldMapping

func (p *CreateExperimentOpenAPIRequest) GetTargetFieldMapping() (v *experiment.TargetFieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetTargetFieldMapping() {
		return CreateExperimentOpenAPIRequest_TargetFieldMapping_DEFAULT
	}
	return p.TargetFieldMapping
}

var CreateExperimentOpenAPIRequest_EvaluatorFieldMapping_DEFAULT []*experiment.EvaluatorFieldMapping

func (p *CreateExperimentOpenAPIRequest) GetEvaluatorFieldMapping() (v []*experiment.EvaluatorFieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorFieldMapping() {
		return CreateExperimentOpenAPIRequest_EvaluatorFieldMapping_DEFAULT
	}
	return p.EvaluatorFieldMapping
}

var CreateExperimentOpenAPIRequest_ItemConcurNum_DEFAULT int32

func (p *CreateExperimentOpenAPIRequest) GetItemConcurNum() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetItemConcurNum() {
		return CreateExperimentOpenAPIRequest_ItemConcurNum_DEFAULT
	}
	return *p.ItemConcurNum
}

var CreateExperimentOpenAPIRequest_EvaluatorsConcurNum_DEFAULT int32

func (p *CreateExperimentOpenAPIRequest) GetEvaluatorsConcurNum() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorsConcurNum() {
		return CreateExperimentOpenAPIRequest_EvaluatorsConcurNum_DEFAULT
	}
	return *p.EvaluatorsConcurNum
}

var CreateExperimentOpenAPIRequest_Base_DEFAULT *base.Base

func (p *CreateExperimentOpenAPIRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateExperimentOpenAPIRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateExperimentOpenAPIRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *CreateExperimentOpenAPIRequest) SetEvalSetVersionID(val *string) {
	p.EvalSetVersionID = val
}
func (p *CreateExperimentOpenAPIRequest) SetTargetVersionID(val *string) {
	p.TargetVersionID = val
}
func (p *CreateExperimentOpenAPIRequest) SetEvaluatorVersionIds(val []string) {
	p.EvaluatorVersionIds = val
}
func (p *CreateExperimentOpenAPIRequest) SetName(val *string) {
	p.Name = val
}
func (p *CreateExperimentOpenAPIRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *CreateExperimentOpenAPIRequest) SetTargetFieldMapping(val *experiment.TargetFieldMapping) {
	p.TargetFieldMapping = val
}
func (p *CreateExperimentOpenAPIRequest) SetEvaluatorFieldMapping(val []*experiment.EvaluatorFieldMapping) {
	p.EvaluatorFieldMapping = val
}
func (p *CreateExperimentOpenAPIRequest) SetItemConcurNum(val *int32) {
	p.ItemConcurNum = val
}
func (p *CreateExperimentOpenAPIRequest) SetEvaluatorsConcurNum(val *int32) {
	p.EvaluatorsConcurNum = val
}
func (p *CreateExperimentOpenAPIRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateExperimentOpenAPIRequest = map[int16]string{
	1:   "workspace_id",
	2:   "eval_set_version_id",
	3:   "target_version_id",
	4:   "evaluator_version_ids",
	5:   "name",
	6:   "description",
	7:   "target_field_mapping",
	8:   "evaluator_field_mapping",
	9:   "item_concur_num",
	10:  "evaluators_concur_num",
	255: "Base",
}

func (p *CreateExperimentOpenAPIRequest) IsSetEvalSetVersionID() bool {
	return p.EvalSetVersionID != nil
}

func (p *CreateExperimentOpenAPIRequest) IsSetTargetVersionID() bool {
	return p.TargetVersionID != nil
}

func (p *CreateExperimentOpenAPIRequest) IsSetEvaluatorVersionIds() bool {
	return p.EvaluatorVersionIds != nil
}

func (p *CreateExperimentOpenAPIRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *CreateExperimentOpenAPIRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CreateExperimentOpenAPIRequest) IsSetTargetFieldMapping() bool {
	return p.TargetFieldMapping != nil
}

func (p *CreateExperimentOpenAPIRequest) IsSetEvaluatorFieldMapping() bool {
	return p.EvaluatorFieldMapping != nil
}

func (p *CreateExperimentOpenAPIRequest) IsSetItemConcurNum() bool {
	return p.ItemConcurNum != nil
}

func (p *CreateExperimentOpenAPIRequest) IsSetEvaluatorsConcurNum() bool {
	return p.EvaluatorsConcurNum != nil
}

func (p *CreateExperimentOpenAPIRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateExperimentOpenAPIRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateExperimentOpenAPIRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateExperimentOpenAPIRequest[fieldId]))
}

func (p *CreateExperimentOpenAPIRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateExperimentOpenAPIRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvalSetVersionID = _field
	return nil
}
func (p *CreateExperimentOpenAPIRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TargetVersionID = _field
	return nil
}
func (p *CreateExperimentOpenAPIRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorVersionIds = _field
	return nil
}
func (p *CreateExperimentOpenAPIRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *CreateExperimentOpenAPIRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *CreateExperimentOpenAPIRequest) ReadField7(iprot thrift.TProtocol) error {
	_field := experiment.NewTargetFieldMapping()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TargetFieldMapping = _field
	return nil
}
func (p *CreateExperimentOpenAPIRequest) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*experiment.EvaluatorFieldMapping, 0, size)
	values := make([]experiment.EvaluatorFieldMapping, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorFieldMapping = _field
	return nil
}
func (p *CreateExperimentOpenAPIRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemConcurNum = _field
	return nil
}
func (p *CreateExperimentOpenAPIRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorsConcurNum = _field
	return nil
}
func (p *CreateExperimentOpenAPIRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateExperimentOpenAPIRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateExperimentOpenAPIRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateExperimentOpenAPIRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateExperimentOpenAPIRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalSetVersionID() {
		if err = oprot.WriteFieldBegin("eval_set_version_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvalSetVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateExperimentOpenAPIRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetVersionID() {
		if err = oprot.WriteFieldBegin("target_version_id", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TargetVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateExperimentOpenAPIRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorVersionIds() {
		if err = oprot.WriteFieldBegin("evaluator_version_ids", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.EvaluatorVersionIds)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorVersionIds {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CreateExperimentOpenAPIRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *CreateExperimentOpenAPIRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *CreateExperimentOpenAPIRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetFieldMapping() {
		if err = oprot.WriteFieldBegin("target_field_mapping", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TargetFieldMapping.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *CreateExperimentOpenAPIRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorFieldMapping() {
		if err = oprot.WriteFieldBegin("evaluator_field_mapping", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvaluatorFieldMapping)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorFieldMapping {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *CreateExperimentOpenAPIRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemConcurNum() {
		if err = oprot.WriteFieldBegin("item_concur_num", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ItemConcurNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *CreateExperimentOpenAPIRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorsConcurNum() {
		if err = oprot.WriteFieldBegin("evaluators_concur_num", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.EvaluatorsConcurNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *CreateExperimentOpenAPIRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateExperimentOpenAPIRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateExperimentOpenAPIRequest(%+v)", *p)

}

func (p *CreateExperimentOpenAPIRequest) DeepEqual(ano *CreateExperimentOpenAPIRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvalSetVersionID) {
		return false
	}
	if !p.Field3DeepEqual(ano.TargetVersionID) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluatorVersionIds) {
		return false
	}
	if !p.Field5DeepEqual(ano.Name) {
		return false
	}
	if !p.Field6DeepEqual(ano.Description) {
		return false
	}
	if !p.Field7DeepEqual(ano.TargetFieldMapping) {
		return false
	}
	if !p.Field8DeepEqual(ano.EvaluatorFieldMapping) {
		return false
	}
	if !p.Field9DeepEqual(ano.ItemConcurNum) {
		return false
	}
	if !p.Field10DeepEqual(ano.EvaluatorsConcurNum) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateExperimentOpenAPIRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *CreateExperimentOpenAPIRequest) Field2DeepEqual(src *string) bool {

	if p.EvalSetVersionID == src {
		return true
	} else if p.EvalSetVersionID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvalSetVersionID, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateExperimentOpenAPIRequest) Field3DeepEqual(src *string) bool {

	if p.TargetVersionID == src {
		return true
	} else if p.TargetVersionID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TargetVersionID, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateExperimentOpenAPIRequest) Field4DeepEqual(src []string) bool {

	if len(p.EvaluatorVersionIds) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorVersionIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *CreateExperimentOpenAPIRequest) Field5DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateExperimentOpenAPIRequest) Field6DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateExperimentOpenAPIRequest) Field7DeepEqual(src *experiment.TargetFieldMapping) bool {

	if !p.TargetFieldMapping.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateExperimentOpenAPIRequest) Field8DeepEqual(src []*experiment.EvaluatorFieldMapping) bool {

	if len(p.EvaluatorFieldMapping) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorFieldMapping {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateExperimentOpenAPIRequest) Field9DeepEqual(src *int32) bool {

	if p.ItemConcurNum == src {
		return true
	} else if p.ItemConcurNum == nil || src == nil {
		return false
	}
	if *p.ItemConcurNum != *src {
		return false
	}
	return true
}
func (p *CreateExperimentOpenAPIRequest) Field10DeepEqual(src *int32) bool {

	if p.EvaluatorsConcurNum == src {
		return true
	} else if p.EvaluatorsConcurNum == nil || src == nil {
		return false
	}
	if *p.EvaluatorsConcurNum != *src {
		return false
	}
	return true
}
func (p *CreateExperimentOpenAPIRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateExperimentOpenAPIResponse struct {
	Code     *int32                       `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                      `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *CreateExperimentOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,CreateExperimentOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp               `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateExperimentOpenAPIResponse() *CreateExperimentOpenAPIResponse {
	return &CreateExperimentOpenAPIResponse{}
}

func (p *CreateExperimentOpenAPIResponse) InitDefault() {
}

var CreateExperimentOpenAPIResponse_Code_DEFAULT int32

func (p *CreateExperimentOpenAPIResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return CreateExperimentOpenAPIResponse_Code_DEFAULT
	}
	return *p.Code
}

var CreateExperimentOpenAPIResponse_Msg_DEFAULT string

func (p *CreateExperimentOpenAPIResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return CreateExperimentOpenAPIResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var CreateExperimentOpenAPIResponse_Data_DEFAULT *CreateExperimentOpenAPIData

func (p *CreateExperimentOpenAPIResponse) GetData() (v *CreateExperimentOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return CreateExperimentOpenAPIResponse_Data_DEFAULT
	}
	return p.Data
}

var CreateExperimentOpenAPIResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateExperimentOpenAPIResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateExperimentOpenAPIResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateExperimentOpenAPIResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *CreateExperimentOpenAPIResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *CreateExperimentOpenAPIResponse) SetData(val *CreateExperimentOpenAPIData) {
	p.Data = val
}
func (p *CreateExperimentOpenAPIResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateExperimentOpenAPIResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *CreateExperimentOpenAPIResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *CreateExperimentOpenAPIResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *CreateExperimentOpenAPIResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *CreateExperimentOpenAPIResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateExperimentOpenAPIResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateExperimentOpenAPIResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateExperimentOpenAPIResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *CreateExperimentOpenAPIResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *CreateExperimentOpenAPIResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewCreateExperimentOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *CreateExperimentOpenAPIResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateExperimentOpenAPIResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateExperimentOpenAPIResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateExperimentOpenAPIResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateExperimentOpenAPIResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateExperimentOpenAPIResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateExperimentOpenAPIResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateExperimentOpenAPIResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateExperimentOpenAPIResponse(%+v)", *p)

}

func (p *CreateExperimentOpenAPIResponse) DeepEqual(ano *CreateExperimentOpenAPIResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateExperimentOpenAPIResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *CreateExperimentOpenAPIResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateExperimentOpenAPIResponse) Field3DeepEqual(src *CreateExperimentOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateExperimentOpenAPIResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CreateExperimentOpenAPIData struct {
	Experiment *experiment.Experiment `thrift:"experiment,1,optional" frugal:"1,optional,experiment.Experiment" form:"experiment" json:"experiment,omitempty" query:"experiment"`
}

func NewCreateExperimentOpenAPIData() *CreateExperimentOpenAPIData {
	return &CreateExperimentOpenAPIData{}
}

func (p *CreateExperimentOpenAPIData) InitDefault() {
}

var CreateExperimentOpenAPIData_Experiment_DEFAULT *experiment.Experiment

func (p *CreateExperimentOpenAPIData) GetExperiment() (v *experiment.Experiment) {
	if p == nil {
		return
	}
	if !p.IsSetExperiment() {
		return CreateExperimentOpenAPIData_Experiment_DEFAULT
	}
	return p.Experiment
}
func (p *CreateExperimentOpenAPIData) SetExperiment(val *experiment.Experiment) {
	p.Experiment = val
}

var fieldIDToName_CreateExperimentOpenAPIData = map[int16]string{
	1: "experiment",
}

func (p *CreateExperimentOpenAPIData) IsSetExperiment() bool {
	return p.Experiment != nil
}

func (p *CreateExperimentOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateExperimentOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateExperimentOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_field := experiment.NewExperiment()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Experiment = _field
	return nil
}

func (p *CreateExperimentOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateExperimentOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateExperimentOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperiment() {
		if err = oprot.WriteFieldBegin("experiment", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Experiment.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateExperimentOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateExperimentOpenAPIData(%+v)", *p)

}

func (p *CreateExperimentOpenAPIData) DeepEqual(ano *CreateExperimentOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Experiment) {
		return false
	}
	return true
}

func (p *CreateExperimentOpenAPIData) Field1DeepEqual(src *experiment.Experiment) bool {

	if !p.Experiment.DeepEqual(src) {
		return false
	}
	return true
}

// 3.2 获取评测实验结果
type GetExperimentResultOpenAPIRequest struct {
	WorkspaceID  int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	ExperimentID string     `thrift:"experiment_id,2,required" frugal:"2,required,string" json:"experiment_id,required" path:"experiment_id,required"`
	PageToken    *string    `thrift:"page_token,3,optional" frugal:"3,optional,string" form:"page_token" json:"page_token,omitempty" query:"page_token"`
	PageSize     *int32     `thrift:"page_size,4,optional" frugal:"4,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	Base         *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetExperimentResultOpenAPIRequest() *GetExperimentResultOpenAPIRequest {
	return &GetExperimentResultOpenAPIRequest{}
}

func (p *GetExperimentResultOpenAPIRequest) InitDefault() {
}

func (p *GetExperimentResultOpenAPIRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *GetExperimentResultOpenAPIRequest) GetExperimentID() (v string) {
	if p != nil {
		return p.ExperimentID
	}
	return
}

var GetExperimentResultOpenAPIRequest_PageToken_DEFAULT string

func (p *GetExperimentResultOpenAPIRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return GetExperimentResultOpenAPIRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var GetExperimentResultOpenAPIRequest_PageSize_DEFAULT int32

func (p *GetExperimentResultOpenAPIRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return GetExperimentResultOpenAPIRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var GetExperimentResultOpenAPIRequest_Base_DEFAULT *base.Base

func (p *GetExperimentResultOpenAPIRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetExperimentResultOpenAPIRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetExperimentResultOpenAPIRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *GetExperimentResultOpenAPIRequest) SetExperimentID(val string) {
	p.ExperimentID = val
}
func (p *GetExperimentResultOpenAPIRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *GetExperimentResultOpenAPIRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *GetExperimentResultOpenAPIRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetExperimentResultOpenAPIRequest = map[int16]string{
	1:   "workspace_id",
	2:   "experiment_id",
	3:   "page_token",
	4:   "page_size",
	255: "Base",
}

func (p *GetExperimentResultOpenAPIRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *GetExperimentResultOpenAPIRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *GetExperimentResultOpenAPIRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetExperimentResultOpenAPIRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetExperimentID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetExperimentID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetExperimentID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetExperimentResultOpenAPIRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetExperimentResultOpenAPIRequest[fieldId]))
}

func (p *GetExperimentResultOpenAPIRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetExperimentResultOpenAPIRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExperimentID = _field
	return nil
}
func (p *GetExperimentResultOpenAPIRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *GetExperimentResultOpenAPIRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *GetExperimentResultOpenAPIRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetExperimentResultOpenAPIRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentResultOpenAPIRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetExperimentResultOpenAPIRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetExperimentResultOpenAPIRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("experiment_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ExperimentID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetExperimentResultOpenAPIRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetExperimentResultOpenAPIRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *GetExperimentResultOpenAPIRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetExperimentResultOpenAPIRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetExperimentResultOpenAPIRequest(%+v)", *p)

}

func (p *GetExperimentResultOpenAPIRequest) DeepEqual(ano *GetExperimentResultOpenAPIRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExperimentID) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field4DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetExperimentResultOpenAPIRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *GetExperimentResultOpenAPIRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ExperimentID, src) != 0 {
		return false
	}
	return true
}
func (p *GetExperimentResultOpenAPIRequest) Field3DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *GetExperimentResultOpenAPIRequest) Field4DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *GetExperimentResultOpenAPIRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetExperimentResultOpenAPIResponse struct {
	Code     *int32                          `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                         `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *GetExperimentResultOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,GetExperimentResultOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                  `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetExperimentResultOpenAPIResponse() *GetExperimentResultOpenAPIResponse {
	return &GetExperimentResultOpenAPIResponse{}
}

func (p *GetExperimentResultOpenAPIResponse) InitDefault() {
}

var GetExperimentResultOpenAPIResponse_Code_DEFAULT int32

func (p *GetExperimentResultOpenAPIResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return GetExperimentResultOpenAPIResponse_Code_DEFAULT
	}
	return *p.Code
}

var GetExperimentResultOpenAPIResponse_Msg_DEFAULT string

func (p *GetExperimentResultOpenAPIResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return GetExperimentResultOpenAPIResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var GetExperimentResultOpenAPIResponse_Data_DEFAULT *GetExperimentResultOpenAPIData

func (p *GetExperimentResultOpenAPIResponse) GetData() (v *GetExperimentResultOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return GetExperimentResultOpenAPIResponse_Data_DEFAULT
	}
	return p.Data
}

var GetExperimentResultOpenAPIResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetExperimentResultOpenAPIResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetExperimentResultOpenAPIResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetExperimentResultOpenAPIResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *GetExperimentResultOpenAPIResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *GetExperimentResultOpenAPIResponse) SetData(val *GetExperimentResultOpenAPIData) {
	p.Data = val
}
func (p *GetExperimentResultOpenAPIResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetExperimentResultOpenAPIResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *GetExperimentResultOpenAPIResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *GetExperimentResultOpenAPIResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *GetExperimentResultOpenAPIResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetExperimentResultOpenAPIResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetExperimentResultOpenAPIResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetExperimentResultOpenAPIResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetExperimentResultOpenAPIResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *GetExperimentResultOpenAPIResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *GetExperimentResultOpenAPIResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewGetExperimentResultOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *GetExperimentResultOpenAPIResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetExperimentResultOpenAPIResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentResultOpenAPIResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetExperimentResultOpenAPIResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetExperimentResultOpenAPIResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetExperimentResultOpenAPIResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetExperimentResultOpenAPIResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetExperimentResultOpenAPIResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetExperimentResultOpenAPIResponse(%+v)", *p)

}

func (p *GetExperimentResultOpenAPIResponse) DeepEqual(ano *GetExperimentResultOpenAPIResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetExperimentResultOpenAPIResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *GetExperimentResultOpenAPIResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *GetExperimentResultOpenAPIResponse) Field3DeepEqual(src *GetExperimentResultOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetExperimentResultOpenAPIResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetExperimentResultOpenAPIData struct {
	ColumnEvalSetFields []*experiment.ColumnEvalSetField `thrift:"column_eval_set_fields,1,required" frugal:"1,required,list<experiment.ColumnEvalSetField>" form:"column_eval_set_fields,required" json:"column_eval_set_fields,required" query:"column_eval_set_fields,required"`
	ColumnEvaluators    []*experiment.ColumnEvaluator    `thrift:"column_evaluators,2,optional" frugal:"2,optional,list<experiment.ColumnEvaluator>" form:"column_evaluators" json:"column_evaluators,omitempty" query:"column_evaluators"`
	ItemResults         []*experiment.ItemResult_        `thrift:"item_results,3,optional" frugal:"3,optional,list<experiment.ItemResult_>" form:"item_results" json:"item_results,omitempty" query:"item_results"`
	HasMore             *bool                            `thrift:"has_more,4,optional" frugal:"4,optional,bool" form:"has_more" json:"has_more,omitempty" query:"has_more"`
	NextPageToken       *string                          `thrift:"next_page_token,5,optional" frugal:"5,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	Total               *int64                           `thrift:"total,6,optional" frugal:"6,optional,i64" form:"total" json:"total,omitempty" query:"total"`
}

func NewGetExperimentResultOpenAPIData() *GetExperimentResultOpenAPIData {
	return &GetExperimentResultOpenAPIData{}
}

func (p *GetExperimentResultOpenAPIData) InitDefault() {
}

func (p *GetExperimentResultOpenAPIData) GetColumnEvalSetFields() (v []*experiment.ColumnEvalSetField) {
	if p != nil {
		return p.ColumnEvalSetFields
	}
	return
}

var GetExperimentResultOpenAPIData_ColumnEvaluators_DEFAULT []*experiment.ColumnEvaluator

func (p *GetExperimentResultOpenAPIData) GetColumnEvaluators() (v []*experiment.ColumnEvaluator) {
	if p == nil {
		return
	}
	if !p.IsSetColumnEvaluators() {
		return GetExperimentResultOpenAPIData_ColumnEvaluators_DEFAULT
	}
	return p.ColumnEvaluators
}

var GetExperimentResultOpenAPIData_ItemResults_DEFAULT []*experiment.ItemResult_

func (p *GetExperimentResultOpenAPIData) GetItemResults() (v []*experiment.ItemResult_) {
	if p == nil {
		return
	}
	if !p.IsSetItemResults() {
		return GetExperimentResultOpenAPIData_ItemResults_DEFAULT
	}
	return p.ItemResults
}

var GetExperimentResultOpenAPIData_HasMore_DEFAULT bool

func (p *GetExperimentResultOpenAPIData) GetHasMore() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetHasMore() {
		return GetExperimentResultOpenAPIData_HasMore_DEFAULT
	}
	return *p.HasMore
}

var GetExperimentResultOpenAPIData_NextPageToken_DEFAULT string

func (p *GetExperimentResultOpenAPIData) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return GetExperimentResultOpenAPIData_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var GetExperimentResultOpenAPIData_Total_DEFAULT int64

func (p *GetExperimentResultOpenAPIData) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return GetExperimentResultOpenAPIData_Total_DEFAULT
	}
	return *p.Total
}
func (p *GetExperimentResultOpenAPIData) SetColumnEvalSetFields(val []*experiment.ColumnEvalSetField) {
	p.ColumnEvalSetFields = val
}
func (p *GetExperimentResultOpenAPIData) SetColumnEvaluators(val []*experiment.ColumnEvaluator) {
	p.ColumnEvaluators = val
}
func (p *GetExperimentResultOpenAPIData) SetItemResults(val []*experiment.ItemResult_) {
	p.ItemResults = val
}
func (p *GetExperimentResultOpenAPIData) SetHasMore(val *bool) {
	p.HasMore = val
}
func (p *GetExperimentResultOpenAPIData) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *GetExperimentResultOpenAPIData) SetTotal(val *int64) {
	p.Total = val
}

var fieldIDToName_GetExperimentResultOpenAPIData = map[int16]string{
	1: "column_eval_set_fields",
	2: "column_evaluators",
	3: "item_results",
	4: "has_more",
	5: "next_page_token",
	6: "total",
}

func (p *GetExperimentResultOpenAPIData) IsSetColumnEvaluators() bool {
	return p.ColumnEvaluators != nil
}

func (p *GetExperimentResultOpenAPIData) IsSetItemResults() bool {
	return p.ItemResults != nil
}

func (p *GetExperimentResultOpenAPIData) IsSetHasMore() bool {
	return p.HasMore != nil
}

func (p *GetExperimentResultOpenAPIData) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *GetExperimentResultOpenAPIData) IsSetTotal() bool {
	return p.Total != nil
}

func (p *GetExperimentResultOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetColumnEvalSetFields bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumnEvalSetFields = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetColumnEvalSetFields {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetExperimentResultOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetExperimentResultOpenAPIData[fieldId]))
}

func (p *GetExperimentResultOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*experiment.ColumnEvalSetField, 0, size)
	values := make([]experiment.ColumnEvalSetField, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnEvalSetFields = _field
	return nil
}
func (p *GetExperimentResultOpenAPIData) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*experiment.ColumnEvaluator, 0, size)
	values := make([]experiment.ColumnEvaluator, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnEvaluators = _field
	return nil
}
func (p *GetExperimentResultOpenAPIData) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*experiment.ItemResult_, 0, size)
	values := make([]experiment.ItemResult_, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ItemResults = _field
	return nil
}
func (p *GetExperimentResultOpenAPIData) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HasMore = _field
	return nil
}
func (p *GetExperimentResultOpenAPIData) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *GetExperimentResultOpenAPIData) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}

func (p *GetExperimentResultOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentResultOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetExperimentResultOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("column_eval_set_fields", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnEvalSetFields)); err != nil {
		return err
	}
	for _, v := range p.ColumnEvalSetFields {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetExperimentResultOpenAPIData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnEvaluators() {
		if err = oprot.WriteFieldBegin("column_evaluators", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnEvaluators)); err != nil {
			return err
		}
		for _, v := range p.ColumnEvaluators {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetExperimentResultOpenAPIData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemResults() {
		if err = oprot.WriteFieldBegin("item_results", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ItemResults)); err != nil {
			return err
		}
		for _, v := range p.ItemResults {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetExperimentResultOpenAPIData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasMore() {
		if err = oprot.WriteFieldBegin("has_more", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.HasMore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *GetExperimentResultOpenAPIData) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *GetExperimentResultOpenAPIData) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetExperimentResultOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetExperimentResultOpenAPIData(%+v)", *p)

}

func (p *GetExperimentResultOpenAPIData) DeepEqual(ano *GetExperimentResultOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnEvalSetFields) {
		return false
	}
	if !p.Field2DeepEqual(ano.ColumnEvaluators) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemResults) {
		return false
	}
	if !p.Field4DeepEqual(ano.HasMore) {
		return false
	}
	if !p.Field5DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field6DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *GetExperimentResultOpenAPIData) Field1DeepEqual(src []*experiment.ColumnEvalSetField) bool {

	if len(p.ColumnEvalSetFields) != len(src) {
		return false
	}
	for i, v := range p.ColumnEvalSetFields {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetExperimentResultOpenAPIData) Field2DeepEqual(src []*experiment.ColumnEvaluator) bool {

	if len(p.ColumnEvaluators) != len(src) {
		return false
	}
	for i, v := range p.ColumnEvaluators {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetExperimentResultOpenAPIData) Field3DeepEqual(src []*experiment.ItemResult_) bool {

	if len(p.ItemResults) != len(src) {
		return false
	}
	for i, v := range p.ItemResults {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetExperimentResultOpenAPIData) Field4DeepEqual(src *bool) bool {

	if p.HasMore == src {
		return true
	} else if p.HasMore == nil || src == nil {
		return false
	}
	if *p.HasMore != *src {
		return false
	}
	return true
}
func (p *GetExperimentResultOpenAPIData) Field5DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *GetExperimentResultOpenAPIData) Field6DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}

// ===============================
// 服务定义 (16个接口总计)
// ===============================
type EvaluationOpenAPIService interface {
	// 评测集接口 (9个)
	// 1.1 创建评测集
	CreateEvaluationSet(ctx context.Context, req *CreateEvaluationSetOpenAPIRequest) (r *CreateEvaluationSetOpenAPIResponse, err error)
	// 1.2 获取评测集详情
	GetEvaluationSet(ctx context.Context, req *GetEvaluationSetOpenAPIRequest) (r *GetEvaluationSetOpenAPIResponse, err error)
	// 1.3 查询评测集列表
	ListEvaluationSets(ctx context.Context, req *ListEvaluationSetsOpenAPIRequest) (r *ListEvaluationSetsOpenAPIResponse, err error)
	// 1.4 创建评测集版本
	CreateEvaluationSetVersion(ctx context.Context, req *CreateEvaluationSetVersionOpenAPIRequest) (r *CreateEvaluationSetVersionOpenAPIResponse, err error)
	// 1.5 批量添加评测集数据
	BatchCreateEvaluationSetItems(ctx context.Context, req *BatchCreateEvaluationSetItemsOpenAPIRequest) (r *BatchCreateEvaluationSetItemsOpenAPIResponse, err error)
	// 1.6 批量更新评测集数据
	BatchUpdateEvaluationSetItems(ctx context.Context, req *BatchUpdateEvaluationSetItemsOpenAPIRequest) (r *BatchUpdateEvaluationSetItemsOpenAPIResponse, err error)
	// 1.7 批量删除评测集数据
	BatchDeleteEvaluationSetItems(ctx context.Context, req *BatchDeleteEvaluationSetItemsOpenAPIRequest) (r *BatchDeleteEvaluationSetItemsOpenAPIResponse, err error)
	// 1.8 清空评测集草稿数据
	ClearEvaluationSetDraftItems(ctx context.Context, req *ClearEvaluationSetDraftItemsOpenAPIRequest) (r *ClearEvaluationSetDraftItemsOpenAPIResponse, err error)
	// 1.9 查询评测集特定版本数据
	ListEvaluationSetVersionItems(ctx context.Context, req *ListEvaluationSetVersionItemsOpenAPIRequest) (r *ListEvaluationSetVersionItemsOpenAPIResponse, err error)
	// 评估器接口 (5个)
	// 2.1 创建评估器
	CreateEvaluator(ctx context.Context, req *CreateEvaluatorOpenAPIRequest) (r *CreateEvaluatorOpenAPIResponse, err error)
	// 2.2 提交评估器版本
	SubmitEvaluatorVersion(ctx context.Context, req *SubmitEvaluatorVersionOpenAPIRequest) (r *SubmitEvaluatorVersionOpenAPIResponse, err error)
	// 2.3 获取评估器版本详情
	GetEvaluatorVersion(ctx context.Context, req *GetEvaluatorVersionOpenAPIRequest) (r *GetEvaluatorVersionOpenAPIResponse, err error)
	// 2.4 执行评估器
	RunEvaluator(ctx context.Context, req *RunEvaluatorOpenAPIRequest) (r *RunEvaluatorOpenAPIResponse, err error)
	// 2.5 获取评估器执行结果
	GetEvaluatorRecord(ctx context.Context, req *GetEvaluatorRecordOpenAPIRequest) (r *GetEvaluatorRecordOpenAPIResponse, err error)
	// 评测实验接口 (2个)
	// 3.1 创建评测实验
	CreateExperiment(ctx context.Context, req *CreateExperimentOpenAPIRequest) (r *CreateExperimentOpenAPIResponse, err error)
	// 3.2 获取评测实验结果
	GetExperimentResult_(ctx context.Context, req *GetExperimentResultOpenAPIRequest) (r *GetExperimentResultOpenAPIResponse, err error)
}

type EvaluationOpenAPIServiceClient struct {
	c thrift.TClient
}

func NewEvaluationOpenAPIServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EvaluationOpenAPIServiceClient {
	return &EvaluationOpenAPIServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewEvaluationOpenAPIServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EvaluationOpenAPIServiceClient {
	return &EvaluationOpenAPIServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewEvaluationOpenAPIServiceClient(c thrift.TClient) *EvaluationOpenAPIServiceClient {
	return &EvaluationOpenAPIServiceClient{
		c: c,
	}
}

func (p *EvaluationOpenAPIServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *EvaluationOpenAPIServiceClient) CreateEvaluationSet(ctx context.Context, req *CreateEvaluationSetOpenAPIRequest) (r *CreateEvaluationSetOpenAPIResponse, err error) {
	var _args EvaluationOpenAPIServiceCreateEvaluationSetArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceCreateEvaluationSetResult
	if err = p.Client_().Call(ctx, "CreateEvaluationSet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) GetEvaluationSet(ctx context.Context, req *GetEvaluationSetOpenAPIRequest) (r *GetEvaluationSetOpenAPIResponse, err error) {
	var _args EvaluationOpenAPIServiceGetEvaluationSetArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceGetEvaluationSetResult
	if err = p.Client_().Call(ctx, "GetEvaluationSet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) ListEvaluationSets(ctx context.Context, req *ListEvaluationSetsOpenAPIRequest) (r *ListEvaluationSetsOpenAPIResponse, err error) {
	var _args EvaluationOpenAPIServiceListEvaluationSetsArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceListEvaluationSetsResult
	if err = p.Client_().Call(ctx, "ListEvaluationSets", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) CreateEvaluationSetVersion(ctx context.Context, req *CreateEvaluationSetVersionOpenAPIRequest) (r *CreateEvaluationSetVersionOpenAPIResponse, err error) {
	var _args EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceCreateEvaluationSetVersionResult
	if err = p.Client_().Call(ctx, "CreateEvaluationSetVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) BatchCreateEvaluationSetItems(ctx context.Context, req *BatchCreateEvaluationSetItemsOpenAPIRequest) (r *BatchCreateEvaluationSetItemsOpenAPIResponse, err error) {
	var _args EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult
	if err = p.Client_().Call(ctx, "BatchCreateEvaluationSetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) BatchUpdateEvaluationSetItems(ctx context.Context, req *BatchUpdateEvaluationSetItemsOpenAPIRequest) (r *BatchUpdateEvaluationSetItemsOpenAPIResponse, err error) {
	var _args EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult
	if err = p.Client_().Call(ctx, "BatchUpdateEvaluationSetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) BatchDeleteEvaluationSetItems(ctx context.Context, req *BatchDeleteEvaluationSetItemsOpenAPIRequest) (r *BatchDeleteEvaluationSetItemsOpenAPIResponse, err error) {
	var _args EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult
	if err = p.Client_().Call(ctx, "BatchDeleteEvaluationSetItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) ClearEvaluationSetDraftItems(ctx context.Context, req *ClearEvaluationSetDraftItemsOpenAPIRequest) (r *ClearEvaluationSetDraftItemsOpenAPIResponse, err error) {
	var _args EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult
	if err = p.Client_().Call(ctx, "ClearEvaluationSetDraftItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) ListEvaluationSetVersionItems(ctx context.Context, req *ListEvaluationSetVersionItemsOpenAPIRequest) (r *ListEvaluationSetVersionItemsOpenAPIResponse, err error) {
	var _args EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult
	if err = p.Client_().Call(ctx, "ListEvaluationSetVersionItems", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) CreateEvaluator(ctx context.Context, req *CreateEvaluatorOpenAPIRequest) (r *CreateEvaluatorOpenAPIResponse, err error) {
	var _args EvaluationOpenAPIServiceCreateEvaluatorArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceCreateEvaluatorResult
	if err = p.Client_().Call(ctx, "CreateEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) SubmitEvaluatorVersion(ctx context.Context, req *SubmitEvaluatorVersionOpenAPIRequest) (r *SubmitEvaluatorVersionOpenAPIResponse, err error) {
	var _args EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceSubmitEvaluatorVersionResult
	if err = p.Client_().Call(ctx, "SubmitEvaluatorVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) GetEvaluatorVersion(ctx context.Context, req *GetEvaluatorVersionOpenAPIRequest) (r *GetEvaluatorVersionOpenAPIResponse, err error) {
	var _args EvaluationOpenAPIServiceGetEvaluatorVersionArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceGetEvaluatorVersionResult
	if err = p.Client_().Call(ctx, "GetEvaluatorVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) RunEvaluator(ctx context.Context, req *RunEvaluatorOpenAPIRequest) (r *RunEvaluatorOpenAPIResponse, err error) {
	var _args EvaluationOpenAPIServiceRunEvaluatorArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceRunEvaluatorResult
	if err = p.Client_().Call(ctx, "RunEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) GetEvaluatorRecord(ctx context.Context, req *GetEvaluatorRecordOpenAPIRequest) (r *GetEvaluatorRecordOpenAPIResponse, err error) {
	var _args EvaluationOpenAPIServiceGetEvaluatorRecordArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceGetEvaluatorRecordResult
	if err = p.Client_().Call(ctx, "GetEvaluatorRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) CreateExperiment(ctx context.Context, req *CreateExperimentOpenAPIRequest) (r *CreateExperimentOpenAPIResponse, err error) {
	var _args EvaluationOpenAPIServiceCreateExperimentArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceCreateExperimentResult
	if err = p.Client_().Call(ctx, "CreateExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) GetExperimentResult_(ctx context.Context, req *GetExperimentResultOpenAPIRequest) (r *GetExperimentResultOpenAPIResponse, err error) {
	var _args EvaluationOpenAPIServiceGetExperimentResultArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceGetExperimentResultResult
	if err = p.Client_().Call(ctx, "GetExperimentResult", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type EvaluationOpenAPIServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      EvaluationOpenAPIService
}

func (p *EvaluationOpenAPIServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *EvaluationOpenAPIServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *EvaluationOpenAPIServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewEvaluationOpenAPIServiceProcessor(handler EvaluationOpenAPIService) *EvaluationOpenAPIServiceProcessor {
	self := &EvaluationOpenAPIServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateEvaluationSet", &evaluationOpenAPIServiceProcessorCreateEvaluationSet{handler: handler})
	self.AddToProcessorMap("GetEvaluationSet", &evaluationOpenAPIServiceProcessorGetEvaluationSet{handler: handler})
	self.AddToProcessorMap("ListEvaluationSets", &evaluationOpenAPIServiceProcessorListEvaluationSets{handler: handler})
	self.AddToProcessorMap("CreateEvaluationSetVersion", &evaluationOpenAPIServiceProcessorCreateEvaluationSetVersion{handler: handler})
	self.AddToProcessorMap("BatchCreateEvaluationSetItems", &evaluationOpenAPIServiceProcessorBatchCreateEvaluationSetItems{handler: handler})
	self.AddToProcessorMap("BatchUpdateEvaluationSetItems", &evaluationOpenAPIServiceProcessorBatchUpdateEvaluationSetItems{handler: handler})
	self.AddToProcessorMap("BatchDeleteEvaluationSetItems", &evaluationOpenAPIServiceProcessorBatchDeleteEvaluationSetItems{handler: handler})
	self.AddToProcessorMap("ClearEvaluationSetDraftItems", &evaluationOpenAPIServiceProcessorClearEvaluationSetDraftItems{handler: handler})
	self.AddToProcessorMap("ListEvaluationSetVersionItems", &evaluationOpenAPIServiceProcessorListEvaluationSetVersionItems{handler: handler})
	self.AddToProcessorMap("CreateEvaluator", &evaluationOpenAPIServiceProcessorCreateEvaluator{handler: handler})
	self.AddToProcessorMap("SubmitEvaluatorVersion", &evaluationOpenAPIServiceProcessorSubmitEvaluatorVersion{handler: handler})
	self.AddToProcessorMap("GetEvaluatorVersion", &evaluationOpenAPIServiceProcessorGetEvaluatorVersion{handler: handler})
	self.AddToProcessorMap("RunEvaluator", &evaluationOpenAPIServiceProcessorRunEvaluator{handler: handler})
	self.AddToProcessorMap("GetEvaluatorRecord", &evaluationOpenAPIServiceProcessorGetEvaluatorRecord{handler: handler})
	self.AddToProcessorMap("CreateExperiment", &evaluationOpenAPIServiceProcessorCreateExperiment{handler: handler})
	self.AddToProcessorMap("GetExperimentResult", &evaluationOpenAPIServiceProcessorGetExperimentResult_{handler: handler})
	return self
}
func (p *EvaluationOpenAPIServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type evaluationOpenAPIServiceProcessorCreateEvaluationSet struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorCreateEvaluationSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceCreateEvaluationSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEvaluationSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceCreateEvaluationSetResult{}
	var retval *CreateEvaluationSetOpenAPIResponse
	if retval, err2 = p.handler.CreateEvaluationSet(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEvaluationSet: "+err2.Error())
		oprot.WriteMessageBegin("CreateEvaluationSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEvaluationSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorGetEvaluationSet struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorGetEvaluationSet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceGetEvaluationSetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEvaluationSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceGetEvaluationSetResult{}
	var retval *GetEvaluationSetOpenAPIResponse
	if retval, err2 = p.handler.GetEvaluationSet(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEvaluationSet: "+err2.Error())
		oprot.WriteMessageBegin("GetEvaluationSet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEvaluationSet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorListEvaluationSets struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorListEvaluationSets) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceListEvaluationSetsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListEvaluationSets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceListEvaluationSetsResult{}
	var retval *ListEvaluationSetsOpenAPIResponse
	if retval, err2 = p.handler.ListEvaluationSets(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEvaluationSets: "+err2.Error())
		oprot.WriteMessageBegin("ListEvaluationSets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListEvaluationSets", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorCreateEvaluationSetVersion struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorCreateEvaluationSetVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEvaluationSetVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceCreateEvaluationSetVersionResult{}
	var retval *CreateEvaluationSetVersionOpenAPIResponse
	if retval, err2 = p.handler.CreateEvaluationSetVersion(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEvaluationSetVersion: "+err2.Error())
		oprot.WriteMessageBegin("CreateEvaluationSetVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEvaluationSetVersion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorBatchCreateEvaluationSetItems struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorBatchCreateEvaluationSetItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchCreateEvaluationSetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult{}
	var retval *BatchCreateEvaluationSetItemsOpenAPIResponse
	if retval, err2 = p.handler.BatchCreateEvaluationSetItems(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchCreateEvaluationSetItems: "+err2.Error())
		oprot.WriteMessageBegin("BatchCreateEvaluationSetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchCreateEvaluationSetItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorBatchUpdateEvaluationSetItems struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorBatchUpdateEvaluationSetItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchUpdateEvaluationSetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult{}
	var retval *BatchUpdateEvaluationSetItemsOpenAPIResponse
	if retval, err2 = p.handler.BatchUpdateEvaluationSetItems(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchUpdateEvaluationSetItems: "+err2.Error())
		oprot.WriteMessageBegin("BatchUpdateEvaluationSetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchUpdateEvaluationSetItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorBatchDeleteEvaluationSetItems struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorBatchDeleteEvaluationSetItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchDeleteEvaluationSetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult{}
	var retval *BatchDeleteEvaluationSetItemsOpenAPIResponse
	if retval, err2 = p.handler.BatchDeleteEvaluationSetItems(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchDeleteEvaluationSetItems: "+err2.Error())
		oprot.WriteMessageBegin("BatchDeleteEvaluationSetItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchDeleteEvaluationSetItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorClearEvaluationSetDraftItems struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorClearEvaluationSetDraftItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ClearEvaluationSetDraftItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult{}
	var retval *ClearEvaluationSetDraftItemsOpenAPIResponse
	if retval, err2 = p.handler.ClearEvaluationSetDraftItems(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ClearEvaluationSetDraftItems: "+err2.Error())
		oprot.WriteMessageBegin("ClearEvaluationSetDraftItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ClearEvaluationSetDraftItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorListEvaluationSetVersionItems struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorListEvaluationSetVersionItems) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListEvaluationSetVersionItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult{}
	var retval *ListEvaluationSetVersionItemsOpenAPIResponse
	if retval, err2 = p.handler.ListEvaluationSetVersionItems(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEvaluationSetVersionItems: "+err2.Error())
		oprot.WriteMessageBegin("ListEvaluationSetVersionItems", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListEvaluationSetVersionItems", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorCreateEvaluator struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorCreateEvaluator) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceCreateEvaluatorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceCreateEvaluatorResult{}
	var retval *CreateEvaluatorOpenAPIResponse
	if retval, err2 = p.handler.CreateEvaluator(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEvaluator: "+err2.Error())
		oprot.WriteMessageBegin("CreateEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEvaluator", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorSubmitEvaluatorVersion struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorSubmitEvaluatorVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SubmitEvaluatorVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceSubmitEvaluatorVersionResult{}
	var retval *SubmitEvaluatorVersionOpenAPIResponse
	if retval, err2 = p.handler.SubmitEvaluatorVersion(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SubmitEvaluatorVersion: "+err2.Error())
		oprot.WriteMessageBegin("SubmitEvaluatorVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SubmitEvaluatorVersion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorGetEvaluatorVersion struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorGetEvaluatorVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceGetEvaluatorVersionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEvaluatorVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceGetEvaluatorVersionResult{}
	var retval *GetEvaluatorVersionOpenAPIResponse
	if retval, err2 = p.handler.GetEvaluatorVersion(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEvaluatorVersion: "+err2.Error())
		oprot.WriteMessageBegin("GetEvaluatorVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEvaluatorVersion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorRunEvaluator struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorRunEvaluator) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceRunEvaluatorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RunEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceRunEvaluatorResult{}
	var retval *RunEvaluatorOpenAPIResponse
	if retval, err2 = p.handler.RunEvaluator(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RunEvaluator: "+err2.Error())
		oprot.WriteMessageBegin("RunEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RunEvaluator", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorGetEvaluatorRecord struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorGetEvaluatorRecord) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceGetEvaluatorRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEvaluatorRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceGetEvaluatorRecordResult{}
	var retval *GetEvaluatorRecordOpenAPIResponse
	if retval, err2 = p.handler.GetEvaluatorRecord(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEvaluatorRecord: "+err2.Error())
		oprot.WriteMessageBegin("GetEvaluatorRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEvaluatorRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorCreateExperiment struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorCreateExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceCreateExperimentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceCreateExperimentResult{}
	var retval *CreateExperimentOpenAPIResponse
	if retval, err2 = p.handler.CreateExperiment(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateExperiment: "+err2.Error())
		oprot.WriteMessageBegin("CreateExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateExperiment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorGetExperimentResult_ struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorGetExperimentResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceGetExperimentResultArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetExperimentResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceGetExperimentResultResult{}
	var retval *GetExperimentResultOpenAPIResponse
	if retval, err2 = p.handler.GetExperimentResult_(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetExperimentResult: "+err2.Error())
		oprot.WriteMessageBegin("GetExperimentResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetExperimentResult", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type EvaluationOpenAPIServiceCreateEvaluationSetArgs struct {
	Req *CreateEvaluationSetOpenAPIRequest `thrift:"req,1" frugal:"1,default,CreateEvaluationSetOpenAPIRequest"`
}

func NewEvaluationOpenAPIServiceCreateEvaluationSetArgs() *EvaluationOpenAPIServiceCreateEvaluationSetArgs {
	return &EvaluationOpenAPIServiceCreateEvaluationSetArgs{}
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetArgs) InitDefault() {
}

var EvaluationOpenAPIServiceCreateEvaluationSetArgs_Req_DEFAULT *CreateEvaluationSetOpenAPIRequest

func (p *EvaluationOpenAPIServiceCreateEvaluationSetArgs) GetReq() (v *CreateEvaluationSetOpenAPIRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceCreateEvaluationSetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceCreateEvaluationSetArgs) SetReq(val *CreateEvaluationSetOpenAPIRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetOpenAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSet_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateEvaluationSetArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetArgs) DeepEqual(ano *EvaluationOpenAPIServiceCreateEvaluationSetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetArgs) Field1DeepEqual(src *CreateEvaluationSetOpenAPIRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceCreateEvaluationSetResult struct {
	Success *CreateEvaluationSetOpenAPIResponse `thrift:"success,0,optional" frugal:"0,optional,CreateEvaluationSetOpenAPIResponse"`
}

func NewEvaluationOpenAPIServiceCreateEvaluationSetResult() *EvaluationOpenAPIServiceCreateEvaluationSetResult {
	return &EvaluationOpenAPIServiceCreateEvaluationSetResult{}
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetResult) InitDefault() {
}

var EvaluationOpenAPIServiceCreateEvaluationSetResult_Success_DEFAULT *CreateEvaluationSetOpenAPIResponse

func (p *EvaluationOpenAPIServiceCreateEvaluationSetResult) GetSuccess() (v *CreateEvaluationSetOpenAPIResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceCreateEvaluationSetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceCreateEvaluationSetResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEvaluationSetOpenAPIResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetOpenAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSet_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateEvaluationSetResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetResult) DeepEqual(ano *EvaluationOpenAPIServiceCreateEvaluationSetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetResult) Field0DeepEqual(src *CreateEvaluationSetOpenAPIResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetEvaluationSetArgs struct {
	Req *GetEvaluationSetOpenAPIRequest `thrift:"req,1" frugal:"1,default,GetEvaluationSetOpenAPIRequest"`
}

func NewEvaluationOpenAPIServiceGetEvaluationSetArgs() *EvaluationOpenAPIServiceGetEvaluationSetArgs {
	return &EvaluationOpenAPIServiceGetEvaluationSetArgs{}
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetArgs) InitDefault() {
}

var EvaluationOpenAPIServiceGetEvaluationSetArgs_Req_DEFAULT *GetEvaluationSetOpenAPIRequest

func (p *EvaluationOpenAPIServiceGetEvaluationSetArgs) GetReq() (v *GetEvaluationSetOpenAPIRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceGetEvaluationSetArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceGetEvaluationSetArgs) SetReq(val *GetEvaluationSetOpenAPIRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceGetEvaluationSetArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetEvaluationSetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEvaluationSetOpenAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSet_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetEvaluationSetArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetEvaluationSetArgs) DeepEqual(ano *EvaluationOpenAPIServiceGetEvaluationSetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetArgs) Field1DeepEqual(src *GetEvaluationSetOpenAPIRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetEvaluationSetResult struct {
	Success *GetEvaluationSetOpenAPIResponse `thrift:"success,0,optional" frugal:"0,optional,GetEvaluationSetOpenAPIResponse"`
}

func NewEvaluationOpenAPIServiceGetEvaluationSetResult() *EvaluationOpenAPIServiceGetEvaluationSetResult {
	return &EvaluationOpenAPIServiceGetEvaluationSetResult{}
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetResult) InitDefault() {
}

var EvaluationOpenAPIServiceGetEvaluationSetResult_Success_DEFAULT *GetEvaluationSetOpenAPIResponse

func (p *EvaluationOpenAPIServiceGetEvaluationSetResult) GetSuccess() (v *GetEvaluationSetOpenAPIResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceGetEvaluationSetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceGetEvaluationSetResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetEvaluationSetOpenAPIResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceGetEvaluationSetResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetEvaluationSetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEvaluationSetOpenAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSet_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetEvaluationSetResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetEvaluationSetResult) DeepEqual(ano *EvaluationOpenAPIServiceGetEvaluationSetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetResult) Field0DeepEqual(src *GetEvaluationSetOpenAPIResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceListEvaluationSetsArgs struct {
	Req *ListEvaluationSetsOpenAPIRequest `thrift:"req,1" frugal:"1,default,ListEvaluationSetsOpenAPIRequest"`
}

func NewEvaluationOpenAPIServiceListEvaluationSetsArgs() *EvaluationOpenAPIServiceListEvaluationSetsArgs {
	return &EvaluationOpenAPIServiceListEvaluationSetsArgs{}
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsArgs) InitDefault() {
}

var EvaluationOpenAPIServiceListEvaluationSetsArgs_Req_DEFAULT *ListEvaluationSetsOpenAPIRequest

func (p *EvaluationOpenAPIServiceListEvaluationSetsArgs) GetReq() (v *ListEvaluationSetsOpenAPIRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceListEvaluationSetsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceListEvaluationSetsArgs) SetReq(val *ListEvaluationSetsOpenAPIRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetsArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetsOpenAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSets_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceListEvaluationSetsArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceListEvaluationSetsArgs) DeepEqual(ano *EvaluationOpenAPIServiceListEvaluationSetsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsArgs) Field1DeepEqual(src *ListEvaluationSetsOpenAPIRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceListEvaluationSetsResult struct {
	Success *ListEvaluationSetsOpenAPIResponse `thrift:"success,0,optional" frugal:"0,optional,ListEvaluationSetsOpenAPIResponse"`
}

func NewEvaluationOpenAPIServiceListEvaluationSetsResult() *EvaluationOpenAPIServiceListEvaluationSetsResult {
	return &EvaluationOpenAPIServiceListEvaluationSetsResult{}
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsResult) InitDefault() {
}

var EvaluationOpenAPIServiceListEvaluationSetsResult_Success_DEFAULT *ListEvaluationSetsOpenAPIResponse

func (p *EvaluationOpenAPIServiceListEvaluationSetsResult) GetSuccess() (v *ListEvaluationSetsOpenAPIResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceListEvaluationSetsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceListEvaluationSetsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListEvaluationSetsOpenAPIResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetsResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetsOpenAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSets_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceListEvaluationSetsResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceListEvaluationSetsResult) DeepEqual(ano *EvaluationOpenAPIServiceListEvaluationSetsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsResult) Field0DeepEqual(src *ListEvaluationSetsOpenAPIResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs struct {
	Req *CreateEvaluationSetVersionOpenAPIRequest `thrift:"req,1" frugal:"1,default,CreateEvaluationSetVersionOpenAPIRequest"`
}

func NewEvaluationOpenAPIServiceCreateEvaluationSetVersionArgs() *EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs {
	return &EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs{}
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs) InitDefault() {
}

var EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs_Req_DEFAULT *CreateEvaluationSetVersionOpenAPIRequest

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs) GetReq() (v *CreateEvaluationSetVersionOpenAPIRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs) SetReq(val *CreateEvaluationSetVersionOpenAPIRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetVersionOpenAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersion_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs) DeepEqual(ano *EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs) Field1DeepEqual(src *CreateEvaluationSetVersionOpenAPIRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceCreateEvaluationSetVersionResult struct {
	Success *CreateEvaluationSetVersionOpenAPIResponse `thrift:"success,0,optional" frugal:"0,optional,CreateEvaluationSetVersionOpenAPIResponse"`
}

func NewEvaluationOpenAPIServiceCreateEvaluationSetVersionResult() *EvaluationOpenAPIServiceCreateEvaluationSetVersionResult {
	return &EvaluationOpenAPIServiceCreateEvaluationSetVersionResult{}
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionResult) InitDefault() {
}

var EvaluationOpenAPIServiceCreateEvaluationSetVersionResult_Success_DEFAULT *CreateEvaluationSetVersionOpenAPIResponse

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionResult) GetSuccess() (v *CreateEvaluationSetVersionOpenAPIResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceCreateEvaluationSetVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEvaluationSetVersionOpenAPIResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetVersionResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetVersionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetVersionOpenAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersion_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateEvaluationSetVersionResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionResult) DeepEqual(ano *EvaluationOpenAPIServiceCreateEvaluationSetVersionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionResult) Field0DeepEqual(src *CreateEvaluationSetVersionOpenAPIResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs struct {
	Req *BatchCreateEvaluationSetItemsOpenAPIRequest `thrift:"req,1" frugal:"1,default,BatchCreateEvaluationSetItemsOpenAPIRequest"`
}

func NewEvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs() *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs {
	return &EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs{}
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs) InitDefault() {
}

var EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs_Req_DEFAULT *BatchCreateEvaluationSetItemsOpenAPIRequest

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs) GetReq() (v *BatchCreateEvaluationSetItemsOpenAPIRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs) SetReq(val *BatchCreateEvaluationSetItemsOpenAPIRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchCreateEvaluationSetItemsOpenAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItems_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs) DeepEqual(ano *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs) Field1DeepEqual(src *BatchCreateEvaluationSetItemsOpenAPIRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult struct {
	Success *BatchCreateEvaluationSetItemsOpenAPIResponse `thrift:"success,0,optional" frugal:"0,optional,BatchCreateEvaluationSetItemsOpenAPIResponse"`
}

func NewEvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult() *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult {
	return &EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult{}
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult) InitDefault() {
}

var EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult_Success_DEFAULT *BatchCreateEvaluationSetItemsOpenAPIResponse

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult) GetSuccess() (v *BatchCreateEvaluationSetItemsOpenAPIResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchCreateEvaluationSetItemsOpenAPIResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchCreateEvaluationSetItemsOpenAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItems_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult) DeepEqual(ano *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult) Field0DeepEqual(src *BatchCreateEvaluationSetItemsOpenAPIResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs struct {
	Req *BatchUpdateEvaluationSetItemsOpenAPIRequest `thrift:"req,1" frugal:"1,default,BatchUpdateEvaluationSetItemsOpenAPIRequest"`
}

func NewEvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs() *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs {
	return &EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs{}
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs) InitDefault() {
}

var EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs_Req_DEFAULT *BatchUpdateEvaluationSetItemsOpenAPIRequest

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs) GetReq() (v *BatchUpdateEvaluationSetItemsOpenAPIRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs) SetReq(val *BatchUpdateEvaluationSetItemsOpenAPIRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchUpdateEvaluationSetItemsOpenAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateEvaluationSetItems_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs) DeepEqual(ano *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs) Field1DeepEqual(src *BatchUpdateEvaluationSetItemsOpenAPIRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult struct {
	Success *BatchUpdateEvaluationSetItemsOpenAPIResponse `thrift:"success,0,optional" frugal:"0,optional,BatchUpdateEvaluationSetItemsOpenAPIResponse"`
}

func NewEvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult() *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult {
	return &EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult{}
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult) InitDefault() {
}

var EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult_Success_DEFAULT *BatchUpdateEvaluationSetItemsOpenAPIResponse

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult) GetSuccess() (v *BatchUpdateEvaluationSetItemsOpenAPIResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchUpdateEvaluationSetItemsOpenAPIResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchUpdateEvaluationSetItemsOpenAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateEvaluationSetItems_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult) DeepEqual(ano *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult) Field0DeepEqual(src *BatchUpdateEvaluationSetItemsOpenAPIResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs struct {
	Req *BatchDeleteEvaluationSetItemsOpenAPIRequest `thrift:"req,1" frugal:"1,default,BatchDeleteEvaluationSetItemsOpenAPIRequest"`
}

func NewEvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs() *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs {
	return &EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs{}
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs) InitDefault() {
}

var EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs_Req_DEFAULT *BatchDeleteEvaluationSetItemsOpenAPIRequest

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs) GetReq() (v *BatchDeleteEvaluationSetItemsOpenAPIRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs) SetReq(val *BatchDeleteEvaluationSetItemsOpenAPIRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchDeleteEvaluationSetItemsOpenAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteEvaluationSetItems_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs) DeepEqual(ano *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs) Field1DeepEqual(src *BatchDeleteEvaluationSetItemsOpenAPIRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult struct {
	Success *BatchDeleteEvaluationSetItemsOpenAPIResponse `thrift:"success,0,optional" frugal:"0,optional,BatchDeleteEvaluationSetItemsOpenAPIResponse"`
}

func NewEvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult() *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult {
	return &EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult{}
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult) InitDefault() {
}

var EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult_Success_DEFAULT *BatchDeleteEvaluationSetItemsOpenAPIResponse

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult) GetSuccess() (v *BatchDeleteEvaluationSetItemsOpenAPIResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchDeleteEvaluationSetItemsOpenAPIResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchDeleteEvaluationSetItemsOpenAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteEvaluationSetItems_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult) DeepEqual(ano *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult) Field0DeepEqual(src *BatchDeleteEvaluationSetItemsOpenAPIResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs struct {
	Req *ClearEvaluationSetDraftItemsOpenAPIRequest `thrift:"req,1" frugal:"1,default,ClearEvaluationSetDraftItemsOpenAPIRequest"`
}

func NewEvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs() *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs {
	return &EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs{}
}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs) InitDefault() {
}

var EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs_Req_DEFAULT *ClearEvaluationSetDraftItemsOpenAPIRequest

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs) GetReq() (v *ClearEvaluationSetDraftItemsOpenAPIRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs) SetReq(val *ClearEvaluationSetDraftItemsOpenAPIRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewClearEvaluationSetDraftItemsOpenAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearEvaluationSetDraftItems_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs) DeepEqual(ano *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs) Field1DeepEqual(src *ClearEvaluationSetDraftItemsOpenAPIRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult struct {
	Success *ClearEvaluationSetDraftItemsOpenAPIResponse `thrift:"success,0,optional" frugal:"0,optional,ClearEvaluationSetDraftItemsOpenAPIResponse"`
}

func NewEvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult() *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult {
	return &EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult{}
}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult) InitDefault() {
}

var EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult_Success_DEFAULT *ClearEvaluationSetDraftItemsOpenAPIResponse

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult) GetSuccess() (v *ClearEvaluationSetDraftItemsOpenAPIResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ClearEvaluationSetDraftItemsOpenAPIResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewClearEvaluationSetDraftItemsOpenAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClearEvaluationSetDraftItems_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult) DeepEqual(ano *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult) Field0DeepEqual(src *ClearEvaluationSetDraftItemsOpenAPIResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs struct {
	Req *ListEvaluationSetVersionItemsOpenAPIRequest `thrift:"req,1" frugal:"1,default,ListEvaluationSetVersionItemsOpenAPIRequest"`
}

func NewEvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs() *EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs {
	return &EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs{}
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs) InitDefault() {
}

var EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs_Req_DEFAULT *ListEvaluationSetVersionItemsOpenAPIRequest

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs) GetReq() (v *ListEvaluationSetVersionItemsOpenAPIRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs) SetReq(val *ListEvaluationSetVersionItemsOpenAPIRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetVersionItemsOpenAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionItems_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs) DeepEqual(ano *EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs) Field1DeepEqual(src *ListEvaluationSetVersionItemsOpenAPIRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult struct {
	Success *ListEvaluationSetVersionItemsOpenAPIResponse `thrift:"success,0,optional" frugal:"0,optional,ListEvaluationSetVersionItemsOpenAPIResponse"`
}

func NewEvaluationOpenAPIServiceListEvaluationSetVersionItemsResult() *EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult {
	return &EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult{}
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult) InitDefault() {
}

var EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult_Success_DEFAULT *ListEvaluationSetVersionItemsOpenAPIResponse

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult) GetSuccess() (v *ListEvaluationSetVersionItemsOpenAPIResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListEvaluationSetVersionItemsOpenAPIResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetVersionItemsOpenAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionItems_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult) DeepEqual(ano *EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult) Field0DeepEqual(src *ListEvaluationSetVersionItemsOpenAPIResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceCreateEvaluatorArgs struct {
	Req *CreateEvaluatorOpenAPIRequest `thrift:"req,1" frugal:"1,default,CreateEvaluatorOpenAPIRequest"`
}

func NewEvaluationOpenAPIServiceCreateEvaluatorArgs() *EvaluationOpenAPIServiceCreateEvaluatorArgs {
	return &EvaluationOpenAPIServiceCreateEvaluatorArgs{}
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorArgs) InitDefault() {
}

var EvaluationOpenAPIServiceCreateEvaluatorArgs_Req_DEFAULT *CreateEvaluatorOpenAPIRequest

func (p *EvaluationOpenAPIServiceCreateEvaluatorArgs) GetReq() (v *CreateEvaluatorOpenAPIRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceCreateEvaluatorArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceCreateEvaluatorArgs) SetReq(val *CreateEvaluatorOpenAPIRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceCreateEvaluatorArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateEvaluatorArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluatorOpenAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluator_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateEvaluatorArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateEvaluatorArgs) DeepEqual(ano *EvaluationOpenAPIServiceCreateEvaluatorArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorArgs) Field1DeepEqual(src *CreateEvaluatorOpenAPIRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceCreateEvaluatorResult struct {
	Success *CreateEvaluatorOpenAPIResponse `thrift:"success,0,optional" frugal:"0,optional,CreateEvaluatorOpenAPIResponse"`
}

func NewEvaluationOpenAPIServiceCreateEvaluatorResult() *EvaluationOpenAPIServiceCreateEvaluatorResult {
	return &EvaluationOpenAPIServiceCreateEvaluatorResult{}
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorResult) InitDefault() {
}

var EvaluationOpenAPIServiceCreateEvaluatorResult_Success_DEFAULT *CreateEvaluatorOpenAPIResponse

func (p *EvaluationOpenAPIServiceCreateEvaluatorResult) GetSuccess() (v *CreateEvaluatorOpenAPIResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceCreateEvaluatorResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceCreateEvaluatorResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEvaluatorOpenAPIResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceCreateEvaluatorResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateEvaluatorResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluatorOpenAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluator_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateEvaluatorResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateEvaluatorResult) DeepEqual(ano *EvaluationOpenAPIServiceCreateEvaluatorResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorResult) Field0DeepEqual(src *CreateEvaluatorOpenAPIResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs struct {
	Req *SubmitEvaluatorVersionOpenAPIRequest `thrift:"req,1" frugal:"1,default,SubmitEvaluatorVersionOpenAPIRequest"`
}

func NewEvaluationOpenAPIServiceSubmitEvaluatorVersionArgs() *EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs {
	return &EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs{}
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs) InitDefault() {
}

var EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs_Req_DEFAULT *SubmitEvaluatorVersionOpenAPIRequest

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs) GetReq() (v *SubmitEvaluatorVersionOpenAPIRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs) SetReq(val *SubmitEvaluatorVersionOpenAPIRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSubmitEvaluatorVersionOpenAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitEvaluatorVersion_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs) DeepEqual(ano *EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs) Field1DeepEqual(src *SubmitEvaluatorVersionOpenAPIRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceSubmitEvaluatorVersionResult struct {
	Success *SubmitEvaluatorVersionOpenAPIResponse `thrift:"success,0,optional" frugal:"0,optional,SubmitEvaluatorVersionOpenAPIResponse"`
}

func NewEvaluationOpenAPIServiceSubmitEvaluatorVersionResult() *EvaluationOpenAPIServiceSubmitEvaluatorVersionResult {
	return &EvaluationOpenAPIServiceSubmitEvaluatorVersionResult{}
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionResult) InitDefault() {
}

var EvaluationOpenAPIServiceSubmitEvaluatorVersionResult_Success_DEFAULT *SubmitEvaluatorVersionOpenAPIResponse

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionResult) GetSuccess() (v *SubmitEvaluatorVersionOpenAPIResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceSubmitEvaluatorVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*SubmitEvaluatorVersionOpenAPIResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceSubmitEvaluatorVersionResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceSubmitEvaluatorVersionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSubmitEvaluatorVersionOpenAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitEvaluatorVersion_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceSubmitEvaluatorVersionResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionResult) DeepEqual(ano *EvaluationOpenAPIServiceSubmitEvaluatorVersionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionResult) Field0DeepEqual(src *SubmitEvaluatorVersionOpenAPIResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetEvaluatorVersionArgs struct {
	Req *GetEvaluatorVersionOpenAPIRequest `thrift:"req,1" frugal:"1,default,GetEvaluatorVersionOpenAPIRequest"`
}

func NewEvaluationOpenAPIServiceGetEvaluatorVersionArgs() *EvaluationOpenAPIServiceGetEvaluatorVersionArgs {
	return &EvaluationOpenAPIServiceGetEvaluatorVersionArgs{}
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionArgs) InitDefault() {
}

var EvaluationOpenAPIServiceGetEvaluatorVersionArgs_Req_DEFAULT *GetEvaluatorVersionOpenAPIRequest

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionArgs) GetReq() (v *GetEvaluatorVersionOpenAPIRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceGetEvaluatorVersionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceGetEvaluatorVersionArgs) SetReq(val *GetEvaluatorVersionOpenAPIRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceGetEvaluatorVersionArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetEvaluatorVersionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorVersionOpenAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorVersion_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetEvaluatorVersionArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionArgs) DeepEqual(ano *EvaluationOpenAPIServiceGetEvaluatorVersionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionArgs) Field1DeepEqual(src *GetEvaluatorVersionOpenAPIRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetEvaluatorVersionResult struct {
	Success *GetEvaluatorVersionOpenAPIResponse `thrift:"success,0,optional" frugal:"0,optional,GetEvaluatorVersionOpenAPIResponse"`
}

func NewEvaluationOpenAPIServiceGetEvaluatorVersionResult() *EvaluationOpenAPIServiceGetEvaluatorVersionResult {
	return &EvaluationOpenAPIServiceGetEvaluatorVersionResult{}
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionResult) InitDefault() {
}

var EvaluationOpenAPIServiceGetEvaluatorVersionResult_Success_DEFAULT *GetEvaluatorVersionOpenAPIResponse

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionResult) GetSuccess() (v *GetEvaluatorVersionOpenAPIResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceGetEvaluatorVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceGetEvaluatorVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetEvaluatorVersionOpenAPIResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceGetEvaluatorVersionResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetEvaluatorVersionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorVersionOpenAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorVersion_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetEvaluatorVersionResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionResult) DeepEqual(ano *EvaluationOpenAPIServiceGetEvaluatorVersionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionResult) Field0DeepEqual(src *GetEvaluatorVersionOpenAPIResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceRunEvaluatorArgs struct {
	Req *RunEvaluatorOpenAPIRequest `thrift:"req,1" frugal:"1,default,RunEvaluatorOpenAPIRequest"`
}

func NewEvaluationOpenAPIServiceRunEvaluatorArgs() *EvaluationOpenAPIServiceRunEvaluatorArgs {
	return &EvaluationOpenAPIServiceRunEvaluatorArgs{}
}

func (p *EvaluationOpenAPIServiceRunEvaluatorArgs) InitDefault() {
}

var EvaluationOpenAPIServiceRunEvaluatorArgs_Req_DEFAULT *RunEvaluatorOpenAPIRequest

func (p *EvaluationOpenAPIServiceRunEvaluatorArgs) GetReq() (v *RunEvaluatorOpenAPIRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceRunEvaluatorArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceRunEvaluatorArgs) SetReq(val *RunEvaluatorOpenAPIRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceRunEvaluatorArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceRunEvaluatorArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceRunEvaluatorArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceRunEvaluatorArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceRunEvaluatorArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRunEvaluatorOpenAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceRunEvaluatorArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunEvaluator_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceRunEvaluatorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceRunEvaluatorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceRunEvaluatorArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceRunEvaluatorArgs) DeepEqual(ano *EvaluationOpenAPIServiceRunEvaluatorArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceRunEvaluatorArgs) Field1DeepEqual(src *RunEvaluatorOpenAPIRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceRunEvaluatorResult struct {
	Success *RunEvaluatorOpenAPIResponse `thrift:"success,0,optional" frugal:"0,optional,RunEvaluatorOpenAPIResponse"`
}

func NewEvaluationOpenAPIServiceRunEvaluatorResult() *EvaluationOpenAPIServiceRunEvaluatorResult {
	return &EvaluationOpenAPIServiceRunEvaluatorResult{}
}

func (p *EvaluationOpenAPIServiceRunEvaluatorResult) InitDefault() {
}

var EvaluationOpenAPIServiceRunEvaluatorResult_Success_DEFAULT *RunEvaluatorOpenAPIResponse

func (p *EvaluationOpenAPIServiceRunEvaluatorResult) GetSuccess() (v *RunEvaluatorOpenAPIResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceRunEvaluatorResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceRunEvaluatorResult) SetSuccess(x interface{}) {
	p.Success = x.(*RunEvaluatorOpenAPIResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceRunEvaluatorResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceRunEvaluatorResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceRunEvaluatorResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceRunEvaluatorResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceRunEvaluatorResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRunEvaluatorOpenAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceRunEvaluatorResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunEvaluator_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceRunEvaluatorResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceRunEvaluatorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceRunEvaluatorResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceRunEvaluatorResult) DeepEqual(ano *EvaluationOpenAPIServiceRunEvaluatorResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceRunEvaluatorResult) Field0DeepEqual(src *RunEvaluatorOpenAPIResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetEvaluatorRecordArgs struct {
	Req *GetEvaluatorRecordOpenAPIRequest `thrift:"req,1" frugal:"1,default,GetEvaluatorRecordOpenAPIRequest"`
}

func NewEvaluationOpenAPIServiceGetEvaluatorRecordArgs() *EvaluationOpenAPIServiceGetEvaluatorRecordArgs {
	return &EvaluationOpenAPIServiceGetEvaluatorRecordArgs{}
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordArgs) InitDefault() {
}

var EvaluationOpenAPIServiceGetEvaluatorRecordArgs_Req_DEFAULT *GetEvaluatorRecordOpenAPIRequest

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordArgs) GetReq() (v *GetEvaluatorRecordOpenAPIRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceGetEvaluatorRecordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceGetEvaluatorRecordArgs) SetReq(val *GetEvaluatorRecordOpenAPIRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceGetEvaluatorRecordArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetEvaluatorRecordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorRecordOpenAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorRecord_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetEvaluatorRecordArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordArgs) DeepEqual(ano *EvaluationOpenAPIServiceGetEvaluatorRecordArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordArgs) Field1DeepEqual(src *GetEvaluatorRecordOpenAPIRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetEvaluatorRecordResult struct {
	Success *GetEvaluatorRecordOpenAPIResponse `thrift:"success,0,optional" frugal:"0,optional,GetEvaluatorRecordOpenAPIResponse"`
}

func NewEvaluationOpenAPIServiceGetEvaluatorRecordResult() *EvaluationOpenAPIServiceGetEvaluatorRecordResult {
	return &EvaluationOpenAPIServiceGetEvaluatorRecordResult{}
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordResult) InitDefault() {
}

var EvaluationOpenAPIServiceGetEvaluatorRecordResult_Success_DEFAULT *GetEvaluatorRecordOpenAPIResponse

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordResult) GetSuccess() (v *GetEvaluatorRecordOpenAPIResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceGetEvaluatorRecordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceGetEvaluatorRecordResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetEvaluatorRecordOpenAPIResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceGetEvaluatorRecordResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetEvaluatorRecordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorRecordOpenAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorRecord_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetEvaluatorRecordResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordResult) DeepEqual(ano *EvaluationOpenAPIServiceGetEvaluatorRecordResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordResult) Field0DeepEqual(src *GetEvaluatorRecordOpenAPIResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceCreateExperimentArgs struct {
	Req *CreateExperimentOpenAPIRequest `thrift:"req,1" frugal:"1,default,CreateExperimentOpenAPIRequest"`
}

func NewEvaluationOpenAPIServiceCreateExperimentArgs() *EvaluationOpenAPIServiceCreateExperimentArgs {
	return &EvaluationOpenAPIServiceCreateExperimentArgs{}
}

func (p *EvaluationOpenAPIServiceCreateExperimentArgs) InitDefault() {
}

var EvaluationOpenAPIServiceCreateExperimentArgs_Req_DEFAULT *CreateExperimentOpenAPIRequest

func (p *EvaluationOpenAPIServiceCreateExperimentArgs) GetReq() (v *CreateExperimentOpenAPIRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceCreateExperimentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceCreateExperimentArgs) SetReq(val *CreateExperimentOpenAPIRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceCreateExperimentArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceCreateExperimentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceCreateExperimentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateExperimentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateExperimentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateExperimentOpenAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateExperimentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateExperiment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateExperimentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateExperimentArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateExperimentArgs) DeepEqual(ano *EvaluationOpenAPIServiceCreateExperimentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateExperimentArgs) Field1DeepEqual(src *CreateExperimentOpenAPIRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceCreateExperimentResult struct {
	Success *CreateExperimentOpenAPIResponse `thrift:"success,0,optional" frugal:"0,optional,CreateExperimentOpenAPIResponse"`
}

func NewEvaluationOpenAPIServiceCreateExperimentResult() *EvaluationOpenAPIServiceCreateExperimentResult {
	return &EvaluationOpenAPIServiceCreateExperimentResult{}
}

func (p *EvaluationOpenAPIServiceCreateExperimentResult) InitDefault() {
}

var EvaluationOpenAPIServiceCreateExperimentResult_Success_DEFAULT *CreateExperimentOpenAPIResponse

func (p *EvaluationOpenAPIServiceCreateExperimentResult) GetSuccess() (v *CreateExperimentOpenAPIResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceCreateExperimentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceCreateExperimentResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateExperimentOpenAPIResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceCreateExperimentResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceCreateExperimentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceCreateExperimentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateExperimentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateExperimentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateExperimentOpenAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateExperimentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateExperiment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateExperimentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateExperimentResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateExperimentResult) DeepEqual(ano *EvaluationOpenAPIServiceCreateExperimentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateExperimentResult) Field0DeepEqual(src *CreateExperimentOpenAPIResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetExperimentResultArgs struct {
	Req *GetExperimentResultOpenAPIRequest `thrift:"req,1" frugal:"1,default,GetExperimentResultOpenAPIRequest"`
}

func NewEvaluationOpenAPIServiceGetExperimentResultArgs() *EvaluationOpenAPIServiceGetExperimentResultArgs {
	return &EvaluationOpenAPIServiceGetExperimentResultArgs{}
}

func (p *EvaluationOpenAPIServiceGetExperimentResultArgs) InitDefault() {
}

var EvaluationOpenAPIServiceGetExperimentResultArgs_Req_DEFAULT *GetExperimentResultOpenAPIRequest

func (p *EvaluationOpenAPIServiceGetExperimentResultArgs) GetReq() (v *GetExperimentResultOpenAPIRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceGetExperimentResultArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceGetExperimentResultArgs) SetReq(val *GetExperimentResultOpenAPIRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceGetExperimentResultArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceGetExperimentResultArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceGetExperimentResultArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetExperimentResultArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentResultArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetExperimentResultOpenAPIRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetExperimentResultArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentResult_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentResultArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetExperimentResultArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetExperimentResultArgs) DeepEqual(ano *EvaluationOpenAPIServiceGetExperimentResultArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetExperimentResultArgs) Field1DeepEqual(src *GetExperimentResultOpenAPIRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetExperimentResultResult struct {
	Success *GetExperimentResultOpenAPIResponse `thrift:"success,0,optional" frugal:"0,optional,GetExperimentResultOpenAPIResponse"`
}

func NewEvaluationOpenAPIServiceGetExperimentResultResult() *EvaluationOpenAPIServiceGetExperimentResultResult {
	return &EvaluationOpenAPIServiceGetExperimentResultResult{}
}

func (p *EvaluationOpenAPIServiceGetExperimentResultResult) InitDefault() {
}

var EvaluationOpenAPIServiceGetExperimentResultResult_Success_DEFAULT *GetExperimentResultOpenAPIResponse

func (p *EvaluationOpenAPIServiceGetExperimentResultResult) GetSuccess() (v *GetExperimentResultOpenAPIResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceGetExperimentResultResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceGetExperimentResultResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetExperimentResultOpenAPIResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceGetExperimentResultResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceGetExperimentResultResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceGetExperimentResultResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetExperimentResultResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentResultResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetExperimentResultOpenAPIResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetExperimentResultResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentResult_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentResultResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentResultResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetExperimentResultResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetExperimentResultResult) DeepEqual(ano *EvaluationOpenAPIServiceGetExperimentResultResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetExperimentResultResult) Field0DeepEqual(src *GetExperimentResultOpenAPIResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

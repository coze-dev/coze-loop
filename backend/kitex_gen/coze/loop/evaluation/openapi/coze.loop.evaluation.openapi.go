// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package openapi

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain_openapi/common"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain_openapi/eval_set"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain_openapi/eval_target"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain_openapi/experiment"
	"strings"
)

// ===============================
// 评测集相关接口 (9个接口)
// ===============================
// 1.1 创建评测集
type CreateEvaluationSetOApiRequest struct {
	WorkspaceID         *int64                        `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" `
	Name                *string                       `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty"`
	Description         *string                       `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty"`
	EvaluationSetSchema *eval_set.EvaluationSetSchema `thrift:"evaluation_set_schema,4,optional" frugal:"4,optional,eval_set.EvaluationSetSchema" form:"evaluation_set_schema" json:"evaluation_set_schema,omitempty"`
	Base                *base.Base                    `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateEvaluationSetOApiRequest() *CreateEvaluationSetOApiRequest {
	return &CreateEvaluationSetOApiRequest{}
}

func (p *CreateEvaluationSetOApiRequest) InitDefault() {
}

var CreateEvaluationSetOApiRequest_WorkspaceID_DEFAULT int64

func (p *CreateEvaluationSetOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return CreateEvaluationSetOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var CreateEvaluationSetOApiRequest_Name_DEFAULT string

func (p *CreateEvaluationSetOApiRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return CreateEvaluationSetOApiRequest_Name_DEFAULT
	}
	return *p.Name
}

var CreateEvaluationSetOApiRequest_Description_DEFAULT string

func (p *CreateEvaluationSetOApiRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return CreateEvaluationSetOApiRequest_Description_DEFAULT
	}
	return *p.Description
}

var CreateEvaluationSetOApiRequest_EvaluationSetSchema_DEFAULT *eval_set.EvaluationSetSchema

func (p *CreateEvaluationSetOApiRequest) GetEvaluationSetSchema() (v *eval_set.EvaluationSetSchema) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetSchema() {
		return CreateEvaluationSetOApiRequest_EvaluationSetSchema_DEFAULT
	}
	return p.EvaluationSetSchema
}

var CreateEvaluationSetOApiRequest_Base_DEFAULT *base.Base

func (p *CreateEvaluationSetOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateEvaluationSetOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateEvaluationSetOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *CreateEvaluationSetOApiRequest) SetName(val *string) {
	p.Name = val
}
func (p *CreateEvaluationSetOApiRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *CreateEvaluationSetOApiRequest) SetEvaluationSetSchema(val *eval_set.EvaluationSetSchema) {
	p.EvaluationSetSchema = val
}
func (p *CreateEvaluationSetOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateEvaluationSetOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "name",
	3:   "description",
	4:   "evaluation_set_schema",
	255: "Base",
}

func (p *CreateEvaluationSetOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *CreateEvaluationSetOApiRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *CreateEvaluationSetOApiRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CreateEvaluationSetOApiRequest) IsSetEvaluationSetSchema() bool {
	return p.EvaluationSetSchema != nil
}

func (p *CreateEvaluationSetOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateEvaluationSetOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateEvaluationSetOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *CreateEvaluationSetOApiRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *CreateEvaluationSetOApiRequest) ReadField4(iprot thrift.TProtocol) error {
	_field := eval_set.NewEvaluationSetSchema()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluationSetSchema = _field
	return nil
}
func (p *CreateEvaluationSetOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateEvaluationSetOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluationSetOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluationSetOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateEvaluationSetOApiRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetSchema() {
		if err = oprot.WriteFieldBegin("evaluation_set_schema", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluationSetSchema.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CreateEvaluationSetOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluationSetOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetOApiRequest(%+v)", *p)

}

func (p *CreateEvaluationSetOApiRequest) DeepEqual(ano *CreateEvaluationSetOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluationSetSchema) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOApiRequest) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOApiRequest) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOApiRequest) Field4DeepEqual(src *eval_set.EvaluationSetSchema) bool {

	if !p.EvaluationSetSchema.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluationSetOApiResponse struct {
	Code     *int32                          `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                         `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *CreateEvaluationSetOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,CreateEvaluationSetOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                  `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateEvaluationSetOApiResponse() *CreateEvaluationSetOApiResponse {
	return &CreateEvaluationSetOApiResponse{}
}

func (p *CreateEvaluationSetOApiResponse) InitDefault() {
}

var CreateEvaluationSetOApiResponse_Code_DEFAULT int32

func (p *CreateEvaluationSetOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return CreateEvaluationSetOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var CreateEvaluationSetOApiResponse_Msg_DEFAULT string

func (p *CreateEvaluationSetOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return CreateEvaluationSetOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var CreateEvaluationSetOApiResponse_Data_DEFAULT *CreateEvaluationSetOpenAPIData

func (p *CreateEvaluationSetOApiResponse) GetData() (v *CreateEvaluationSetOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return CreateEvaluationSetOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var CreateEvaluationSetOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateEvaluationSetOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateEvaluationSetOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateEvaluationSetOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *CreateEvaluationSetOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *CreateEvaluationSetOApiResponse) SetData(val *CreateEvaluationSetOpenAPIData) {
	p.Data = val
}
func (p *CreateEvaluationSetOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateEvaluationSetOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *CreateEvaluationSetOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *CreateEvaluationSetOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *CreateEvaluationSetOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *CreateEvaluationSetOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateEvaluationSetOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *CreateEvaluationSetOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *CreateEvaluationSetOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *CreateEvaluationSetOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateEvaluationSetOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluationSetOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluationSetOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateEvaluationSetOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluationSetOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetOApiResponse(%+v)", *p)

}

func (p *CreateEvaluationSetOApiResponse) DeepEqual(ano *CreateEvaluationSetOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOApiResponse) Field3DeepEqual(src *CreateEvaluationSetOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluationSetOpenAPIData struct {
	EvaluationSetID *int64 `thrift:"evaluation_set_id,1,optional" frugal:"1,optional,i64" json:"evaluation_set_id" form:"evaluation_set_id" query:"evaluation_set_id"`
}

func NewCreateEvaluationSetOpenAPIData() *CreateEvaluationSetOpenAPIData {
	return &CreateEvaluationSetOpenAPIData{}
}

func (p *CreateEvaluationSetOpenAPIData) InitDefault() {
}

var CreateEvaluationSetOpenAPIData_EvaluationSetID_DEFAULT int64

func (p *CreateEvaluationSetOpenAPIData) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return CreateEvaluationSetOpenAPIData_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}
func (p *CreateEvaluationSetOpenAPIData) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}

var fieldIDToName_CreateEvaluationSetOpenAPIData = map[int16]string{
	1: "evaluation_set_id",
}

func (p *CreateEvaluationSetOpenAPIData) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *CreateEvaluationSetOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetOpenAPIData) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}

func (p *CreateEvaluationSetOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEvaluationSetOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetOpenAPIData(%+v)", *p)

}

func (p *CreateEvaluationSetOpenAPIData) DeepEqual(ano *CreateEvaluationSetOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluationSetID) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetOpenAPIData) Field1DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}

// 1.2 获取评测集详情
type GetEvaluationSetOApiRequest struct {
	WorkspaceID     *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" query:"workspace_id" `
	EvaluationSetID *int64     `thrift:"evaluation_set_id,2,optional" frugal:"2,optional,i64" json:"evaluation_set_id" path:"evaluation_set_id" `
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetEvaluationSetOApiRequest() *GetEvaluationSetOApiRequest {
	return &GetEvaluationSetOApiRequest{}
}

func (p *GetEvaluationSetOApiRequest) InitDefault() {
}

var GetEvaluationSetOApiRequest_WorkspaceID_DEFAULT int64

func (p *GetEvaluationSetOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return GetEvaluationSetOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var GetEvaluationSetOApiRequest_EvaluationSetID_DEFAULT int64

func (p *GetEvaluationSetOApiRequest) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return GetEvaluationSetOApiRequest_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var GetEvaluationSetOApiRequest_Base_DEFAULT *base.Base

func (p *GetEvaluationSetOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetEvaluationSetOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetEvaluationSetOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *GetEvaluationSetOApiRequest) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *GetEvaluationSetOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetEvaluationSetOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	255: "Base",
}

func (p *GetEvaluationSetOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *GetEvaluationSetOApiRequest) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *GetEvaluationSetOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetEvaluationSetOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluationSetOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluationSetOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetEvaluationSetOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *GetEvaluationSetOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetEvaluationSetOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluationSetOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluationSetOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluationSetOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluationSetOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluationSetOApiRequest(%+v)", *p)

}

func (p *GetEvaluationSetOApiRequest) DeepEqual(ano *GetEvaluationSetOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetEvaluationSetOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *GetEvaluationSetOApiRequest) Field2DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *GetEvaluationSetOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluationSetOApiResponse struct {
	Code     *int32                       `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                      `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *GetEvaluationSetOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,GetEvaluationSetOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp               `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetEvaluationSetOApiResponse() *GetEvaluationSetOApiResponse {
	return &GetEvaluationSetOApiResponse{}
}

func (p *GetEvaluationSetOApiResponse) InitDefault() {
}

var GetEvaluationSetOApiResponse_Code_DEFAULT int32

func (p *GetEvaluationSetOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return GetEvaluationSetOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var GetEvaluationSetOApiResponse_Msg_DEFAULT string

func (p *GetEvaluationSetOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return GetEvaluationSetOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var GetEvaluationSetOApiResponse_Data_DEFAULT *GetEvaluationSetOpenAPIData

func (p *GetEvaluationSetOApiResponse) GetData() (v *GetEvaluationSetOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return GetEvaluationSetOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var GetEvaluationSetOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetEvaluationSetOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetEvaluationSetOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetEvaluationSetOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *GetEvaluationSetOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *GetEvaluationSetOApiResponse) SetData(val *GetEvaluationSetOpenAPIData) {
	p.Data = val
}
func (p *GetEvaluationSetOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetEvaluationSetOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *GetEvaluationSetOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *GetEvaluationSetOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *GetEvaluationSetOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetEvaluationSetOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetEvaluationSetOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluationSetOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluationSetOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *GetEvaluationSetOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *GetEvaluationSetOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewGetEvaluationSetOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *GetEvaluationSetOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetEvaluationSetOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluationSetOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluationSetOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluationSetOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetEvaluationSetOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluationSetOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluationSetOApiResponse(%+v)", *p)

}

func (p *GetEvaluationSetOApiResponse) DeepEqual(ano *GetEvaluationSetOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetEvaluationSetOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *GetEvaluationSetOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *GetEvaluationSetOApiResponse) Field3DeepEqual(src *GetEvaluationSetOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetEvaluationSetOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluationSetOpenAPIData struct {
	EvaluationSet *eval_set.EvaluationSet `thrift:"evaluation_set,1,optional" frugal:"1,optional,eval_set.EvaluationSet" form:"evaluation_set" json:"evaluation_set,omitempty" query:"evaluation_set"`
}

func NewGetEvaluationSetOpenAPIData() *GetEvaluationSetOpenAPIData {
	return &GetEvaluationSetOpenAPIData{}
}

func (p *GetEvaluationSetOpenAPIData) InitDefault() {
}

var GetEvaluationSetOpenAPIData_EvaluationSet_DEFAULT *eval_set.EvaluationSet

func (p *GetEvaluationSetOpenAPIData) GetEvaluationSet() (v *eval_set.EvaluationSet) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSet() {
		return GetEvaluationSetOpenAPIData_EvaluationSet_DEFAULT
	}
	return p.EvaluationSet
}
func (p *GetEvaluationSetOpenAPIData) SetEvaluationSet(val *eval_set.EvaluationSet) {
	p.EvaluationSet = val
}

var fieldIDToName_GetEvaluationSetOpenAPIData = map[int16]string{
	1: "evaluation_set",
}

func (p *GetEvaluationSetOpenAPIData) IsSetEvaluationSet() bool {
	return p.EvaluationSet != nil
}

func (p *GetEvaluationSetOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluationSetOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluationSetOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_field := eval_set.NewEvaluationSet()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluationSet = _field
	return nil
}

func (p *GetEvaluationSetOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluationSetOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSet() {
		if err = oprot.WriteFieldBegin("evaluation_set", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluationSet.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetEvaluationSetOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluationSetOpenAPIData(%+v)", *p)

}

func (p *GetEvaluationSetOpenAPIData) DeepEqual(ano *GetEvaluationSetOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluationSet) {
		return false
	}
	return true
}

func (p *GetEvaluationSetOpenAPIData) Field1DeepEqual(src *eval_set.EvaluationSet) bool {

	if !p.EvaluationSet.DeepEqual(src) {
		return false
	}
	return true
}

// 1.3 查询评测集列表
type ListEvaluationSetsOApiRequest struct {
	WorkspaceID      *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" query:"workspace_id" `
	Name             *string    `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty" query:"name"`
	Creators         []string   `thrift:"creators,3,optional" frugal:"3,optional,list<string>" json:"creators,omitempty" query:"creators"`
	EvaluationSetIds []int64    `thrift:"evaluation_set_ids,4,optional" frugal:"4,optional,list<i64>" json:"evaluation_set_ids" query:"evaluation_set_ids" `
	PageToken        *string    `thrift:"page_token,100,optional" frugal:"100,optional,string" json:"page_token,omitempty" query:"page_token"`
	PageSize         *int32     `thrift:"page_size,101,optional" frugal:"101,optional,i32" json:"page_size,omitempty" query:"page_size"`
	Base             *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListEvaluationSetsOApiRequest() *ListEvaluationSetsOApiRequest {
	return &ListEvaluationSetsOApiRequest{}
}

func (p *ListEvaluationSetsOApiRequest) InitDefault() {
}

var ListEvaluationSetsOApiRequest_WorkspaceID_DEFAULT int64

func (p *ListEvaluationSetsOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return ListEvaluationSetsOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var ListEvaluationSetsOApiRequest_Name_DEFAULT string

func (p *ListEvaluationSetsOApiRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return ListEvaluationSetsOApiRequest_Name_DEFAULT
	}
	return *p.Name
}

var ListEvaluationSetsOApiRequest_Creators_DEFAULT []string

func (p *ListEvaluationSetsOApiRequest) GetCreators() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetCreators() {
		return ListEvaluationSetsOApiRequest_Creators_DEFAULT
	}
	return p.Creators
}

var ListEvaluationSetsOApiRequest_EvaluationSetIds_DEFAULT []int64

func (p *ListEvaluationSetsOApiRequest) GetEvaluationSetIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetIds() {
		return ListEvaluationSetsOApiRequest_EvaluationSetIds_DEFAULT
	}
	return p.EvaluationSetIds
}

var ListEvaluationSetsOApiRequest_PageToken_DEFAULT string

func (p *ListEvaluationSetsOApiRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListEvaluationSetsOApiRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListEvaluationSetsOApiRequest_PageSize_DEFAULT int32

func (p *ListEvaluationSetsOApiRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListEvaluationSetsOApiRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListEvaluationSetsOApiRequest_Base_DEFAULT *base.Base

func (p *ListEvaluationSetsOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListEvaluationSetsOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListEvaluationSetsOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *ListEvaluationSetsOApiRequest) SetName(val *string) {
	p.Name = val
}
func (p *ListEvaluationSetsOApiRequest) SetCreators(val []string) {
	p.Creators = val
}
func (p *ListEvaluationSetsOApiRequest) SetEvaluationSetIds(val []int64) {
	p.EvaluationSetIds = val
}
func (p *ListEvaluationSetsOApiRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListEvaluationSetsOApiRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListEvaluationSetsOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListEvaluationSetsOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "name",
	3:   "creators",
	4:   "evaluation_set_ids",
	100: "page_token",
	101: "page_size",
	255: "Base",
}

func (p *ListEvaluationSetsOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *ListEvaluationSetsOApiRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *ListEvaluationSetsOApiRequest) IsSetCreators() bool {
	return p.Creators != nil
}

func (p *ListEvaluationSetsOApiRequest) IsSetEvaluationSetIds() bool {
	return p.EvaluationSetIds != nil
}

func (p *ListEvaluationSetsOApiRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListEvaluationSetsOApiRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListEvaluationSetsOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListEvaluationSetsOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetsOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetsOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListEvaluationSetsOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *ListEvaluationSetsOApiRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Creators = _field
	return nil
}
func (p *ListEvaluationSetsOApiRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluationSetIds = _field
	return nil
}
func (p *ListEvaluationSetsOApiRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListEvaluationSetsOApiRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListEvaluationSetsOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListEvaluationSetsOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetsOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetsOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreators() {
		if err = oprot.WriteFieldBegin("creators", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Creators)); err != nil {
			return err
		}
		for _, v := range p.Creators {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetIds() {
		if err = oprot.WriteFieldBegin("evaluation_set_ids", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.EvaluationSetIds)); err != nil {
			return err
		}
		for _, v := range p.EvaluationSetIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetsOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetsOApiRequest(%+v)", *p)

}

func (p *ListEvaluationSetsOApiRequest) DeepEqual(ano *ListEvaluationSetsOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Creators) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluationSetIds) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListEvaluationSetsOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOApiRequest) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOApiRequest) Field3DeepEqual(src []string) bool {

	if len(p.Creators) != len(src) {
		return false
	}
	for i, v := range p.Creators {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetsOApiRequest) Field4DeepEqual(src []int64) bool {

	if len(p.EvaluationSetIds) != len(src) {
		return false
	}
	for i, v := range p.EvaluationSetIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetsOApiRequest) Field100DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOApiRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetsOApiResponse struct {
	Code     *int32                         `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                        `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *ListEvaluationSetsOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,ListEvaluationSetsOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                 `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListEvaluationSetsOApiResponse() *ListEvaluationSetsOApiResponse {
	return &ListEvaluationSetsOApiResponse{}
}

func (p *ListEvaluationSetsOApiResponse) InitDefault() {
}

var ListEvaluationSetsOApiResponse_Code_DEFAULT int32

func (p *ListEvaluationSetsOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return ListEvaluationSetsOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var ListEvaluationSetsOApiResponse_Msg_DEFAULT string

func (p *ListEvaluationSetsOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return ListEvaluationSetsOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var ListEvaluationSetsOApiResponse_Data_DEFAULT *ListEvaluationSetsOpenAPIData

func (p *ListEvaluationSetsOApiResponse) GetData() (v *ListEvaluationSetsOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return ListEvaluationSetsOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var ListEvaluationSetsOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListEvaluationSetsOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListEvaluationSetsOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListEvaluationSetsOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *ListEvaluationSetsOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *ListEvaluationSetsOApiResponse) SetData(val *ListEvaluationSetsOpenAPIData) {
	p.Data = val
}
func (p *ListEvaluationSetsOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListEvaluationSetsOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *ListEvaluationSetsOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *ListEvaluationSetsOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *ListEvaluationSetsOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *ListEvaluationSetsOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListEvaluationSetsOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetsOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetsOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *ListEvaluationSetsOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *ListEvaluationSetsOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetsOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *ListEvaluationSetsOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListEvaluationSetsOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetsOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetsOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetsOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetsOApiResponse(%+v)", *p)

}

func (p *ListEvaluationSetsOApiResponse) DeepEqual(ano *ListEvaluationSetsOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListEvaluationSetsOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOApiResponse) Field3DeepEqual(src *ListEvaluationSetsOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetsOpenAPIData struct {
	// 列表
	Sets          []*eval_set.EvaluationSet `thrift:"sets,1,optional" frugal:"1,optional,list<eval_set.EvaluationSet>" form:"sets" json:"sets,omitempty" query:"sets"`
	HasMore       *bool                     `thrift:"has_more,100,optional" frugal:"100,optional,bool" form:"has_more" json:"has_more,omitempty" query:"has_more"`
	NextPageToken *string                   `thrift:"next_page_token,101,optional" frugal:"101,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	Total         *int64                    `thrift:"total,102,optional" frugal:"102,optional,i64" form:"total" json:"total,omitempty" query:"total"`
}

func NewListEvaluationSetsOpenAPIData() *ListEvaluationSetsOpenAPIData {
	return &ListEvaluationSetsOpenAPIData{}
}

func (p *ListEvaluationSetsOpenAPIData) InitDefault() {
}

var ListEvaluationSetsOpenAPIData_Sets_DEFAULT []*eval_set.EvaluationSet

func (p *ListEvaluationSetsOpenAPIData) GetSets() (v []*eval_set.EvaluationSet) {
	if p == nil {
		return
	}
	if !p.IsSetSets() {
		return ListEvaluationSetsOpenAPIData_Sets_DEFAULT
	}
	return p.Sets
}

var ListEvaluationSetsOpenAPIData_HasMore_DEFAULT bool

func (p *ListEvaluationSetsOpenAPIData) GetHasMore() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetHasMore() {
		return ListEvaluationSetsOpenAPIData_HasMore_DEFAULT
	}
	return *p.HasMore
}

var ListEvaluationSetsOpenAPIData_NextPageToken_DEFAULT string

func (p *ListEvaluationSetsOpenAPIData) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListEvaluationSetsOpenAPIData_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListEvaluationSetsOpenAPIData_Total_DEFAULT int64

func (p *ListEvaluationSetsOpenAPIData) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListEvaluationSetsOpenAPIData_Total_DEFAULT
	}
	return *p.Total
}
func (p *ListEvaluationSetsOpenAPIData) SetSets(val []*eval_set.EvaluationSet) {
	p.Sets = val
}
func (p *ListEvaluationSetsOpenAPIData) SetHasMore(val *bool) {
	p.HasMore = val
}
func (p *ListEvaluationSetsOpenAPIData) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListEvaluationSetsOpenAPIData) SetTotal(val *int64) {
	p.Total = val
}

var fieldIDToName_ListEvaluationSetsOpenAPIData = map[int16]string{
	1:   "sets",
	100: "has_more",
	101: "next_page_token",
	102: "total",
}

func (p *ListEvaluationSetsOpenAPIData) IsSetSets() bool {
	return p.Sets != nil
}

func (p *ListEvaluationSetsOpenAPIData) IsSetHasMore() bool {
	return p.HasMore != nil
}

func (p *ListEvaluationSetsOpenAPIData) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListEvaluationSetsOpenAPIData) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListEvaluationSetsOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetsOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetsOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSet, 0, size)
	values := make([]eval_set.EvaluationSet, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Sets = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIData) ReadField100(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HasMore = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIData) ReadField101(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIData) ReadField102(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}

func (p *ListEvaluationSetsOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetsOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetsOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSets() {
		if err = oprot.WriteFieldBegin("sets", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Sets)); err != nil {
			return err
		}
		for _, v := range p.Sets {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIData) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasMore() {
		if err = oprot.WriteFieldBegin("has_more", thrift.BOOL, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.HasMore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIData) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIData) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}

func (p *ListEvaluationSetsOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetsOpenAPIData(%+v)", *p)

}

func (p *ListEvaluationSetsOpenAPIData) DeepEqual(ano *ListEvaluationSetsOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Sets) {
		return false
	}
	if !p.Field100DeepEqual(ano.HasMore) {
		return false
	}
	if !p.Field101DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field102DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *ListEvaluationSetsOpenAPIData) Field1DeepEqual(src []*eval_set.EvaluationSet) bool {

	if len(p.Sets) != len(src) {
		return false
	}
	for i, v := range p.Sets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIData) Field100DeepEqual(src *bool) bool {

	if p.HasMore == src {
		return true
	} else if p.HasMore == nil || src == nil {
		return false
	}
	if *p.HasMore != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIData) Field101DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIData) Field102DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}

// 1.4 创建评测集版本
type CreateEvaluationSetVersionOApiRequest struct {
	WorkspaceID     *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" `
	EvaluationSetID *int64     `thrift:"evaluation_set_id,2,optional" frugal:"2,optional,i64" json:"evaluation_set_id" path:"evaluation_set_id" `
	Version         *string    `thrift:"version,3,optional" frugal:"3,optional,string" form:"version" json:"version,omitempty"`
	Description     *string    `thrift:"description,4,optional" frugal:"4,optional,string" form:"description" json:"description,omitempty"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateEvaluationSetVersionOApiRequest() *CreateEvaluationSetVersionOApiRequest {
	return &CreateEvaluationSetVersionOApiRequest{}
}

func (p *CreateEvaluationSetVersionOApiRequest) InitDefault() {
}

var CreateEvaluationSetVersionOApiRequest_WorkspaceID_DEFAULT int64

func (p *CreateEvaluationSetVersionOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return CreateEvaluationSetVersionOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var CreateEvaluationSetVersionOApiRequest_EvaluationSetID_DEFAULT int64

func (p *CreateEvaluationSetVersionOApiRequest) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return CreateEvaluationSetVersionOApiRequest_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var CreateEvaluationSetVersionOApiRequest_Version_DEFAULT string

func (p *CreateEvaluationSetVersionOApiRequest) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return CreateEvaluationSetVersionOApiRequest_Version_DEFAULT
	}
	return *p.Version
}

var CreateEvaluationSetVersionOApiRequest_Description_DEFAULT string

func (p *CreateEvaluationSetVersionOApiRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return CreateEvaluationSetVersionOApiRequest_Description_DEFAULT
	}
	return *p.Description
}

var CreateEvaluationSetVersionOApiRequest_Base_DEFAULT *base.Base

func (p *CreateEvaluationSetVersionOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateEvaluationSetVersionOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateEvaluationSetVersionOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *CreateEvaluationSetVersionOApiRequest) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *CreateEvaluationSetVersionOApiRequest) SetVersion(val *string) {
	p.Version = val
}
func (p *CreateEvaluationSetVersionOApiRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *CreateEvaluationSetVersionOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateEvaluationSetVersionOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "version",
	4:   "description",
	255: "Base",
}

func (p *CreateEvaluationSetVersionOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *CreateEvaluationSetVersionOApiRequest) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *CreateEvaluationSetVersionOApiRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *CreateEvaluationSetVersionOApiRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CreateEvaluationSetVersionOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateEvaluationSetVersionOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetVersionOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateEvaluationSetVersionOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *CreateEvaluationSetVersionOApiRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *CreateEvaluationSetVersionOApiRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *CreateEvaluationSetVersionOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateEvaluationSetVersionOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersionOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOApiRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetVersionOApiRequest(%+v)", *p)

}

func (p *CreateEvaluationSetVersionOApiRequest) DeepEqual(ano *CreateEvaluationSetVersionOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetVersionOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOApiRequest) Field2DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOApiRequest) Field3DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOApiRequest) Field4DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluationSetVersionOApiResponse struct {
	Code     *int32                                 `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                                `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *CreateEvaluationSetVersionOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,CreateEvaluationSetVersionOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                         `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateEvaluationSetVersionOApiResponse() *CreateEvaluationSetVersionOApiResponse {
	return &CreateEvaluationSetVersionOApiResponse{}
}

func (p *CreateEvaluationSetVersionOApiResponse) InitDefault() {
}

var CreateEvaluationSetVersionOApiResponse_Code_DEFAULT int32

func (p *CreateEvaluationSetVersionOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return CreateEvaluationSetVersionOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var CreateEvaluationSetVersionOApiResponse_Msg_DEFAULT string

func (p *CreateEvaluationSetVersionOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return CreateEvaluationSetVersionOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var CreateEvaluationSetVersionOApiResponse_Data_DEFAULT *CreateEvaluationSetVersionOpenAPIData

func (p *CreateEvaluationSetVersionOApiResponse) GetData() (v *CreateEvaluationSetVersionOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return CreateEvaluationSetVersionOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var CreateEvaluationSetVersionOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateEvaluationSetVersionOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateEvaluationSetVersionOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateEvaluationSetVersionOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *CreateEvaluationSetVersionOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *CreateEvaluationSetVersionOApiResponse) SetData(val *CreateEvaluationSetVersionOpenAPIData) {
	p.Data = val
}
func (p *CreateEvaluationSetVersionOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateEvaluationSetVersionOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *CreateEvaluationSetVersionOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *CreateEvaluationSetVersionOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *CreateEvaluationSetVersionOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *CreateEvaluationSetVersionOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateEvaluationSetVersionOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetVersionOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *CreateEvaluationSetVersionOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *CreateEvaluationSetVersionOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetVersionOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *CreateEvaluationSetVersionOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateEvaluationSetVersionOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersionOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetVersionOApiResponse(%+v)", *p)

}

func (p *CreateEvaluationSetVersionOApiResponse) DeepEqual(ano *CreateEvaluationSetVersionOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetVersionOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOApiResponse) Field3DeepEqual(src *CreateEvaluationSetVersionOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluationSetVersionOpenAPIData struct {
	VersionID *int64 `thrift:"version_id,1,optional" frugal:"1,optional,i64" json:"version_id" form:"version_id" query:"version_id"`
}

func NewCreateEvaluationSetVersionOpenAPIData() *CreateEvaluationSetVersionOpenAPIData {
	return &CreateEvaluationSetVersionOpenAPIData{}
}

func (p *CreateEvaluationSetVersionOpenAPIData) InitDefault() {
}

var CreateEvaluationSetVersionOpenAPIData_VersionID_DEFAULT int64

func (p *CreateEvaluationSetVersionOpenAPIData) GetVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetVersionID() {
		return CreateEvaluationSetVersionOpenAPIData_VersionID_DEFAULT
	}
	return *p.VersionID
}
func (p *CreateEvaluationSetVersionOpenAPIData) SetVersionID(val *int64) {
	p.VersionID = val
}

var fieldIDToName_CreateEvaluationSetVersionOpenAPIData = map[int16]string{
	1: "version_id",
}

func (p *CreateEvaluationSetVersionOpenAPIData) IsSetVersionID() bool {
	return p.VersionID != nil
}

func (p *CreateEvaluationSetVersionOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetVersionOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOpenAPIData) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionID = _field
	return nil
}

func (p *CreateEvaluationSetVersionOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersionOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionID() {
		if err = oprot.WriteFieldBegin("version_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetVersionOpenAPIData(%+v)", *p)

}

func (p *CreateEvaluationSetVersionOpenAPIData) DeepEqual(ano *CreateEvaluationSetVersionOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VersionID) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetVersionOpenAPIData) Field1DeepEqual(src *int64) bool {

	if p.VersionID == src {
		return true
	} else if p.VersionID == nil || src == nil {
		return false
	}
	if *p.VersionID != *src {
		return false
	}
	return true
}

type ListEvaluationSetVersionsOApiRequest struct {
	WorkspaceID     *int64 `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" query:"workspace_id" `
	EvaluationSetID *int64 `thrift:"evaluation_set_id,2,optional" frugal:"2,optional,i64" json:"evaluation_set_id" path:"evaluation_set_id" `
	// 根据版本号模糊匹配
	VersionLike *string `thrift:"version_like,3,optional" frugal:"3,optional,string" json:"version_like,omitempty" query:"version_like"`
	// 分页大小 (0, 200]，默认为 20
	PageSize  *int32     `thrift:"page_size,100,optional" frugal:"100,optional,i32" json:"page_size,omitempty" query:"page_size"`
	PageToken *string    `thrift:"page_token,101,optional" frugal:"101,optional,string" json:"page_token,omitempty" query:"page_token"`
	Base      *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListEvaluationSetVersionsOApiRequest() *ListEvaluationSetVersionsOApiRequest {
	return &ListEvaluationSetVersionsOApiRequest{}
}

func (p *ListEvaluationSetVersionsOApiRequest) InitDefault() {
}

var ListEvaluationSetVersionsOApiRequest_WorkspaceID_DEFAULT int64

func (p *ListEvaluationSetVersionsOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return ListEvaluationSetVersionsOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var ListEvaluationSetVersionsOApiRequest_EvaluationSetID_DEFAULT int64

func (p *ListEvaluationSetVersionsOApiRequest) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return ListEvaluationSetVersionsOApiRequest_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var ListEvaluationSetVersionsOApiRequest_VersionLike_DEFAULT string

func (p *ListEvaluationSetVersionsOApiRequest) GetVersionLike() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersionLike() {
		return ListEvaluationSetVersionsOApiRequest_VersionLike_DEFAULT
	}
	return *p.VersionLike
}

var ListEvaluationSetVersionsOApiRequest_PageSize_DEFAULT int32

func (p *ListEvaluationSetVersionsOApiRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListEvaluationSetVersionsOApiRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListEvaluationSetVersionsOApiRequest_PageToken_DEFAULT string

func (p *ListEvaluationSetVersionsOApiRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListEvaluationSetVersionsOApiRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListEvaluationSetVersionsOApiRequest_Base_DEFAULT *base.Base

func (p *ListEvaluationSetVersionsOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListEvaluationSetVersionsOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListEvaluationSetVersionsOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *ListEvaluationSetVersionsOApiRequest) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *ListEvaluationSetVersionsOApiRequest) SetVersionLike(val *string) {
	p.VersionLike = val
}
func (p *ListEvaluationSetVersionsOApiRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListEvaluationSetVersionsOApiRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListEvaluationSetVersionsOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListEvaluationSetVersionsOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "version_like",
	100: "page_size",
	101: "page_token",
	255: "Base",
}

func (p *ListEvaluationSetVersionsOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *ListEvaluationSetVersionsOApiRequest) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *ListEvaluationSetVersionsOApiRequest) IsSetVersionLike() bool {
	return p.VersionLike != nil
}

func (p *ListEvaluationSetVersionsOApiRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListEvaluationSetVersionsOApiRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListEvaluationSetVersionsOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListEvaluationSetVersionsOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetVersionsOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionsOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListEvaluationSetVersionsOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *ListEvaluationSetVersionsOApiRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionLike = _field
	return nil
}
func (p *ListEvaluationSetVersionsOApiRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListEvaluationSetVersionsOApiRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListEvaluationSetVersionsOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListEvaluationSetVersionsOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionsOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionsOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionLike() {
		if err = oprot.WriteFieldBegin("version_like", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.VersionLike); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsOApiRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsOApiRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetVersionsOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetVersionsOApiRequest(%+v)", *p)

}

func (p *ListEvaluationSetVersionsOApiRequest) DeepEqual(ano *ListEvaluationSetVersionsOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.VersionLike) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListEvaluationSetVersionsOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionsOApiRequest) Field2DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionsOApiRequest) Field3DeepEqual(src *string) bool {

	if p.VersionLike == src {
		return true
	} else if p.VersionLike == nil || src == nil {
		return false
	}
	if strings.Compare(*p.VersionLike, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionsOApiRequest) Field100DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionsOApiRequest) Field101DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionsOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetVersionsOApiResponse struct {
	Code     *int32                                `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                               `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *ListEvaluationSetVersionsOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,ListEvaluationSetVersionsOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                        `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListEvaluationSetVersionsOApiResponse() *ListEvaluationSetVersionsOApiResponse {
	return &ListEvaluationSetVersionsOApiResponse{}
}

func (p *ListEvaluationSetVersionsOApiResponse) InitDefault() {
}

var ListEvaluationSetVersionsOApiResponse_Code_DEFAULT int32

func (p *ListEvaluationSetVersionsOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return ListEvaluationSetVersionsOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var ListEvaluationSetVersionsOApiResponse_Msg_DEFAULT string

func (p *ListEvaluationSetVersionsOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return ListEvaluationSetVersionsOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var ListEvaluationSetVersionsOApiResponse_Data_DEFAULT *ListEvaluationSetVersionsOpenAPIData

func (p *ListEvaluationSetVersionsOApiResponse) GetData() (v *ListEvaluationSetVersionsOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return ListEvaluationSetVersionsOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var ListEvaluationSetVersionsOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListEvaluationSetVersionsOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListEvaluationSetVersionsOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListEvaluationSetVersionsOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *ListEvaluationSetVersionsOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *ListEvaluationSetVersionsOApiResponse) SetData(val *ListEvaluationSetVersionsOpenAPIData) {
	p.Data = val
}
func (p *ListEvaluationSetVersionsOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListEvaluationSetVersionsOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *ListEvaluationSetVersionsOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *ListEvaluationSetVersionsOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *ListEvaluationSetVersionsOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *ListEvaluationSetVersionsOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListEvaluationSetVersionsOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetVersionsOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionsOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *ListEvaluationSetVersionsOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *ListEvaluationSetVersionsOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetVersionsOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *ListEvaluationSetVersionsOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListEvaluationSetVersionsOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionsOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionsOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetVersionsOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetVersionsOApiResponse(%+v)", *p)

}

func (p *ListEvaluationSetVersionsOApiResponse) DeepEqual(ano *ListEvaluationSetVersionsOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListEvaluationSetVersionsOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionsOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionsOApiResponse) Field3DeepEqual(src *ListEvaluationSetVersionsOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionsOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetVersionsOpenAPIData struct {
	Versions      []*eval_set.EvaluationSetVersion `thrift:"versions,1,optional" frugal:"1,optional,list<eval_set.EvaluationSetVersion>" form:"versions" json:"versions,omitempty" query:"versions"`
	Total         *int64                           `thrift:"total,100,optional" frugal:"100,optional,i64" json:"total" form:"total" query:"total"`
	NextPageToken *string                          `thrift:"next_page_token,101,optional" frugal:"101,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
}

func NewListEvaluationSetVersionsOpenAPIData() *ListEvaluationSetVersionsOpenAPIData {
	return &ListEvaluationSetVersionsOpenAPIData{}
}

func (p *ListEvaluationSetVersionsOpenAPIData) InitDefault() {
}

var ListEvaluationSetVersionsOpenAPIData_Versions_DEFAULT []*eval_set.EvaluationSetVersion

func (p *ListEvaluationSetVersionsOpenAPIData) GetVersions() (v []*eval_set.EvaluationSetVersion) {
	if p == nil {
		return
	}
	if !p.IsSetVersions() {
		return ListEvaluationSetVersionsOpenAPIData_Versions_DEFAULT
	}
	return p.Versions
}

var ListEvaluationSetVersionsOpenAPIData_Total_DEFAULT int64

func (p *ListEvaluationSetVersionsOpenAPIData) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListEvaluationSetVersionsOpenAPIData_Total_DEFAULT
	}
	return *p.Total
}

var ListEvaluationSetVersionsOpenAPIData_NextPageToken_DEFAULT string

func (p *ListEvaluationSetVersionsOpenAPIData) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListEvaluationSetVersionsOpenAPIData_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}
func (p *ListEvaluationSetVersionsOpenAPIData) SetVersions(val []*eval_set.EvaluationSetVersion) {
	p.Versions = val
}
func (p *ListEvaluationSetVersionsOpenAPIData) SetTotal(val *int64) {
	p.Total = val
}
func (p *ListEvaluationSetVersionsOpenAPIData) SetNextPageToken(val *string) {
	p.NextPageToken = val
}

var fieldIDToName_ListEvaluationSetVersionsOpenAPIData = map[int16]string{
	1:   "versions",
	100: "total",
	101: "next_page_token",
}

func (p *ListEvaluationSetVersionsOpenAPIData) IsSetVersions() bool {
	return p.Versions != nil
}

func (p *ListEvaluationSetVersionsOpenAPIData) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListEvaluationSetVersionsOpenAPIData) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListEvaluationSetVersionsOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetVersionsOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionsOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSetVersion, 0, size)
	values := make([]eval_set.EvaluationSetVersion, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Versions = _field
	return nil
}
func (p *ListEvaluationSetVersionsOpenAPIData) ReadField100(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *ListEvaluationSetVersionsOpenAPIData) ReadField101(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}

func (p *ListEvaluationSetVersionsOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionsOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionsOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersions() {
		if err = oprot.WriteFieldBegin("versions", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Versions)); err != nil {
			return err
		}
		for _, v := range p.Versions {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsOpenAPIData) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetVersionsOpenAPIData) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *ListEvaluationSetVersionsOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetVersionsOpenAPIData(%+v)", *p)

}

func (p *ListEvaluationSetVersionsOpenAPIData) DeepEqual(ano *ListEvaluationSetVersionsOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Versions) {
		return false
	}
	if !p.Field100DeepEqual(ano.Total) {
		return false
	}
	if !p.Field101DeepEqual(ano.NextPageToken) {
		return false
	}
	return true
}

func (p *ListEvaluationSetVersionsOpenAPIData) Field1DeepEqual(src []*eval_set.EvaluationSetVersion) bool {

	if len(p.Versions) != len(src) {
		return false
	}
	for i, v := range p.Versions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetVersionsOpenAPIData) Field100DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionsOpenAPIData) Field101DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}

// 1.5 批量添加评测集数据
type BatchCreateEvaluationSetItemsOApiRequest struct {
	WorkspaceID     *int64                        `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" `
	EvaluationSetID *int64                        `thrift:"evaluation_set_id,2,optional" frugal:"2,optional,i64" json:"evaluation_set_id" path:"evaluation_set_id" `
	Items           []*eval_set.EvaluationSetItem `thrift:"items,3,optional" frugal:"3,optional,list<eval_set.EvaluationSetItem>" form:"items" json:"items,omitempty"`
	// items 中存在非法数据时，默认所有数据写入失败；设置 skipInvalidItems=true 则会跳过无效数据，写入有效数据
	IsSkipInvalidItems *bool `thrift:"is_skip_invalid_items,4,optional" frugal:"4,optional,bool" form:"is_skip_invalid_items" json:"is_skip_invalid_items,omitempty"`
	// 批量写入 items 如果超出数据集容量限制，默认所有数据写入失败；设置 partialAdd=true 会写入不超出容量限制的前 N 条
	IsAllowPartialAdd *bool      `thrift:"is_allow_partial_add,5,optional" frugal:"5,optional,bool" form:"is_allow_partial_add" json:"is_allow_partial_add,omitempty"`
	Base              *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchCreateEvaluationSetItemsOApiRequest() *BatchCreateEvaluationSetItemsOApiRequest {
	return &BatchCreateEvaluationSetItemsOApiRequest{}
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) InitDefault() {
}

var BatchCreateEvaluationSetItemsOApiRequest_WorkspaceID_DEFAULT int64

func (p *BatchCreateEvaluationSetItemsOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return BatchCreateEvaluationSetItemsOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var BatchCreateEvaluationSetItemsOApiRequest_EvaluationSetID_DEFAULT int64

func (p *BatchCreateEvaluationSetItemsOApiRequest) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return BatchCreateEvaluationSetItemsOApiRequest_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var BatchCreateEvaluationSetItemsOApiRequest_Items_DEFAULT []*eval_set.EvaluationSetItem

func (p *BatchCreateEvaluationSetItemsOApiRequest) GetItems() (v []*eval_set.EvaluationSetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return BatchCreateEvaluationSetItemsOApiRequest_Items_DEFAULT
	}
	return p.Items
}

var BatchCreateEvaluationSetItemsOApiRequest_IsSkipInvalidItems_DEFAULT bool

func (p *BatchCreateEvaluationSetItemsOApiRequest) GetIsSkipInvalidItems() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsSkipInvalidItems() {
		return BatchCreateEvaluationSetItemsOApiRequest_IsSkipInvalidItems_DEFAULT
	}
	return *p.IsSkipInvalidItems
}

var BatchCreateEvaluationSetItemsOApiRequest_IsAllowPartialAdd_DEFAULT bool

func (p *BatchCreateEvaluationSetItemsOApiRequest) GetIsAllowPartialAdd() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsAllowPartialAdd() {
		return BatchCreateEvaluationSetItemsOApiRequest_IsAllowPartialAdd_DEFAULT
	}
	return *p.IsAllowPartialAdd
}

var BatchCreateEvaluationSetItemsOApiRequest_Base_DEFAULT *base.Base

func (p *BatchCreateEvaluationSetItemsOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchCreateEvaluationSetItemsOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) SetItems(val []*eval_set.EvaluationSetItem) {
	p.Items = val
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) SetIsSkipInvalidItems(val *bool) {
	p.IsSkipInvalidItems = val
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) SetIsAllowPartialAdd(val *bool) {
	p.IsAllowPartialAdd = val
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchCreateEvaluationSetItemsOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "items",
	4:   "is_skip_invalid_items",
	5:   "is_allow_partial_add",
	255: "Base",
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) IsSetItems() bool {
	return p.Items != nil
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) IsSetIsSkipInvalidItems() bool {
	return p.IsSkipInvalidItems != nil
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) IsSetIsAllowPartialAdd() bool {
	return p.IsAllowPartialAdd != nil
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchCreateEvaluationSetItemsOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSetItem, 0, size)
	values := make([]eval_set.EvaluationSetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsSkipInvalidItems = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsAllowPartialAdd = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItemsOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsSkipInvalidItems() {
		if err = oprot.WriteFieldBegin("is_skip_invalid_items", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsSkipInvalidItems); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsAllowPartialAdd() {
		if err = oprot.WriteFieldBegin("is_allow_partial_add", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsAllowPartialAdd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchCreateEvaluationSetItemsOApiRequest(%+v)", *p)

}

func (p *BatchCreateEvaluationSetItemsOApiRequest) DeepEqual(ano *BatchCreateEvaluationSetItemsOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Items) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsSkipInvalidItems) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsAllowPartialAdd) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) Field2DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) Field3DeepEqual(src []*eval_set.EvaluationSetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) Field4DeepEqual(src *bool) bool {

	if p.IsSkipInvalidItems == src {
		return true
	} else if p.IsSkipInvalidItems == nil || src == nil {
		return false
	}
	if *p.IsSkipInvalidItems != *src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) Field5DeepEqual(src *bool) bool {

	if p.IsAllowPartialAdd == src {
		return true
	} else if p.IsAllowPartialAdd == nil || src == nil {
		return false
	}
	if *p.IsAllowPartialAdd != *src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchCreateEvaluationSetItemsOApiResponse struct {
	Code     *int32                                    `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                                   `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *BatchCreateEvaluationSetItemsOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,BatchCreateEvaluationSetItemsOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchCreateEvaluationSetItemsOApiResponse() *BatchCreateEvaluationSetItemsOApiResponse {
	return &BatchCreateEvaluationSetItemsOApiResponse{}
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) InitDefault() {
}

var BatchCreateEvaluationSetItemsOApiResponse_Code_DEFAULT int32

func (p *BatchCreateEvaluationSetItemsOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return BatchCreateEvaluationSetItemsOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var BatchCreateEvaluationSetItemsOApiResponse_Msg_DEFAULT string

func (p *BatchCreateEvaluationSetItemsOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return BatchCreateEvaluationSetItemsOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var BatchCreateEvaluationSetItemsOApiResponse_Data_DEFAULT *BatchCreateEvaluationSetItemsOpenAPIData

func (p *BatchCreateEvaluationSetItemsOApiResponse) GetData() (v *BatchCreateEvaluationSetItemsOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return BatchCreateEvaluationSetItemsOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var BatchCreateEvaluationSetItemsOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchCreateEvaluationSetItemsOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchCreateEvaluationSetItemsOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) SetData(val *BatchCreateEvaluationSetItemsOpenAPIData) {
	p.Data = val
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchCreateEvaluationSetItemsOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchCreateEvaluationSetItemsOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewBatchCreateEvaluationSetItemsOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItemsOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchCreateEvaluationSetItemsOApiResponse(%+v)", *p)

}

func (p *BatchCreateEvaluationSetItemsOApiResponse) DeepEqual(ano *BatchCreateEvaluationSetItemsOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) Field3DeepEqual(src *BatchCreateEvaluationSetItemsOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchCreateEvaluationSetItemsOpenAPIData struct {
	ItemOutputs []*eval_set.DatasetItemOutput `thrift:"itemOutputs,1,optional" frugal:"1,optional,list<eval_set.DatasetItemOutput>" form:"itemOutputs" json:"itemOutputs,omitempty" query:"itemOutputs"`
	Errors      []*eval_set.ItemErrorGroup    `thrift:"errors,2,optional" frugal:"2,optional,list<eval_set.ItemErrorGroup>" form:"errors" json:"errors,omitempty" query:"errors"`
}

func NewBatchCreateEvaluationSetItemsOpenAPIData() *BatchCreateEvaluationSetItemsOpenAPIData {
	return &BatchCreateEvaluationSetItemsOpenAPIData{}
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) InitDefault() {
}

var BatchCreateEvaluationSetItemsOpenAPIData_ItemOutputs_DEFAULT []*eval_set.DatasetItemOutput

func (p *BatchCreateEvaluationSetItemsOpenAPIData) GetItemOutputs() (v []*eval_set.DatasetItemOutput) {
	if p == nil {
		return
	}
	if !p.IsSetItemOutputs() {
		return BatchCreateEvaluationSetItemsOpenAPIData_ItemOutputs_DEFAULT
	}
	return p.ItemOutputs
}

var BatchCreateEvaluationSetItemsOpenAPIData_Errors_DEFAULT []*eval_set.ItemErrorGroup

func (p *BatchCreateEvaluationSetItemsOpenAPIData) GetErrors() (v []*eval_set.ItemErrorGroup) {
	if p == nil {
		return
	}
	if !p.IsSetErrors() {
		return BatchCreateEvaluationSetItemsOpenAPIData_Errors_DEFAULT
	}
	return p.Errors
}
func (p *BatchCreateEvaluationSetItemsOpenAPIData) SetItemOutputs(val []*eval_set.DatasetItemOutput) {
	p.ItemOutputs = val
}
func (p *BatchCreateEvaluationSetItemsOpenAPIData) SetErrors(val []*eval_set.ItemErrorGroup) {
	p.Errors = val
}

var fieldIDToName_BatchCreateEvaluationSetItemsOpenAPIData = map[int16]string{
	1: "itemOutputs",
	2: "errors",
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) IsSetItemOutputs() bool {
	return p.ItemOutputs != nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) IsSetErrors() bool {
	return p.Errors != nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchCreateEvaluationSetItemsOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.DatasetItemOutput, 0, size)
	values := make([]eval_set.DatasetItemOutput, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ItemOutputs = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOpenAPIData) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.ItemErrorGroup, 0, size)
	values := make([]eval_set.ItemErrorGroup, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Errors = _field
	return nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItemsOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemOutputs() {
		if err = oprot.WriteFieldBegin("itemOutputs", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ItemOutputs)); err != nil {
			return err
		}
		for _, v := range p.ItemOutputs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOpenAPIData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrors() {
		if err = oprot.WriteFieldBegin("errors", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Errors)); err != nil {
			return err
		}
		for _, v := range p.Errors {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchCreateEvaluationSetItemsOpenAPIData(%+v)", *p)

}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) DeepEqual(ano *BatchCreateEvaluationSetItemsOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ItemOutputs) {
		return false
	}
	if !p.Field2DeepEqual(ano.Errors) {
		return false
	}
	return true
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) Field1DeepEqual(src []*eval_set.DatasetItemOutput) bool {

	if len(p.ItemOutputs) != len(src) {
		return false
	}
	for i, v := range p.ItemOutputs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOpenAPIData) Field2DeepEqual(src []*eval_set.ItemErrorGroup) bool {

	if len(p.Errors) != len(src) {
		return false
	}
	for i, v := range p.Errors {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// 1.6 批量更新评测集数据
type BatchUpdateEvaluationSetItemsOApiRequest struct {
	WorkspaceID        *int64                        `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" `
	EvaluationSetID    *int64                        `thrift:"evaluation_set_id,2,optional" frugal:"2,optional,i64" json:"evaluation_set_id" path:"evaluation_set_id" `
	Items              []*eval_set.EvaluationSetItem `thrift:"items,3,optional" frugal:"3,optional,list<eval_set.EvaluationSetItem>" form:"items" json:"items,omitempty"`
	IsSkipInvalidItems *bool                         `thrift:"is_skip_invalid_items,4,optional" frugal:"4,optional,bool" form:"is_skip_invalid_items" json:"is_skip_invalid_items,omitempty"`
	Base               *base.Base                    `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchUpdateEvaluationSetItemsOApiRequest() *BatchUpdateEvaluationSetItemsOApiRequest {
	return &BatchUpdateEvaluationSetItemsOApiRequest{}
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) InitDefault() {
}

var BatchUpdateEvaluationSetItemsOApiRequest_WorkspaceID_DEFAULT int64

func (p *BatchUpdateEvaluationSetItemsOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return BatchUpdateEvaluationSetItemsOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var BatchUpdateEvaluationSetItemsOApiRequest_EvaluationSetID_DEFAULT int64

func (p *BatchUpdateEvaluationSetItemsOApiRequest) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return BatchUpdateEvaluationSetItemsOApiRequest_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var BatchUpdateEvaluationSetItemsOApiRequest_Items_DEFAULT []*eval_set.EvaluationSetItem

func (p *BatchUpdateEvaluationSetItemsOApiRequest) GetItems() (v []*eval_set.EvaluationSetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return BatchUpdateEvaluationSetItemsOApiRequest_Items_DEFAULT
	}
	return p.Items
}

var BatchUpdateEvaluationSetItemsOApiRequest_IsSkipInvalidItems_DEFAULT bool

func (p *BatchUpdateEvaluationSetItemsOApiRequest) GetIsSkipInvalidItems() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsSkipInvalidItems() {
		return BatchUpdateEvaluationSetItemsOApiRequest_IsSkipInvalidItems_DEFAULT
	}
	return *p.IsSkipInvalidItems
}

var BatchUpdateEvaluationSetItemsOApiRequest_Base_DEFAULT *base.Base

func (p *BatchUpdateEvaluationSetItemsOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchUpdateEvaluationSetItemsOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) SetItems(val []*eval_set.EvaluationSetItem) {
	p.Items = val
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) SetIsSkipInvalidItems(val *bool) {
	p.IsSkipInvalidItems = val
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchUpdateEvaluationSetItemsOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "items",
	4:   "is_skip_invalid_items",
	255: "Base",
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) IsSetItems() bool {
	return p.Items != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) IsSetIsSkipInvalidItems() bool {
	return p.IsSkipInvalidItems != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchUpdateEvaluationSetItemsOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSetItem, 0, size)
	values := make([]eval_set.EvaluationSetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsSkipInvalidItems = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateEvaluationSetItemsOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsSkipInvalidItems() {
		if err = oprot.WriteFieldBegin("is_skip_invalid_items", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsSkipInvalidItems); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchUpdateEvaluationSetItemsOApiRequest(%+v)", *p)

}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) DeepEqual(ano *BatchUpdateEvaluationSetItemsOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Items) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsSkipInvalidItems) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) Field2DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) Field3DeepEqual(src []*eval_set.EvaluationSetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) Field4DeepEqual(src *bool) bool {

	if p.IsSkipInvalidItems == src {
		return true
	} else if p.IsSkipInvalidItems == nil || src == nil {
		return false
	}
	if *p.IsSkipInvalidItems != *src {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchUpdateEvaluationSetItemsOApiResponse struct {
	Code     *int32                                    `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                                   `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *BatchUpdateEvaluationSetItemsOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,BatchUpdateEvaluationSetItemsOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchUpdateEvaluationSetItemsOApiResponse() *BatchUpdateEvaluationSetItemsOApiResponse {
	return &BatchUpdateEvaluationSetItemsOApiResponse{}
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) InitDefault() {
}

var BatchUpdateEvaluationSetItemsOApiResponse_Code_DEFAULT int32

func (p *BatchUpdateEvaluationSetItemsOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return BatchUpdateEvaluationSetItemsOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var BatchUpdateEvaluationSetItemsOApiResponse_Msg_DEFAULT string

func (p *BatchUpdateEvaluationSetItemsOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return BatchUpdateEvaluationSetItemsOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var BatchUpdateEvaluationSetItemsOApiResponse_Data_DEFAULT *BatchUpdateEvaluationSetItemsOpenAPIData

func (p *BatchUpdateEvaluationSetItemsOApiResponse) GetData() (v *BatchUpdateEvaluationSetItemsOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return BatchUpdateEvaluationSetItemsOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var BatchUpdateEvaluationSetItemsOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchUpdateEvaluationSetItemsOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchUpdateEvaluationSetItemsOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) SetData(val *BatchUpdateEvaluationSetItemsOpenAPIData) {
	p.Data = val
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchUpdateEvaluationSetItemsOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchUpdateEvaluationSetItemsOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewBatchUpdateEvaluationSetItemsOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateEvaluationSetItemsOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchUpdateEvaluationSetItemsOApiResponse(%+v)", *p)

}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) DeepEqual(ano *BatchUpdateEvaluationSetItemsOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) Field3DeepEqual(src *BatchUpdateEvaluationSetItemsOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchUpdateEvaluationSetItemsOpenAPIData struct {
	ItemOutputs []*eval_set.DatasetItemOutput `thrift:"itemOutputs,1,optional" frugal:"1,optional,list<eval_set.DatasetItemOutput>" form:"itemOutputs" json:"itemOutputs,omitempty" query:"itemOutputs"`
	Errors      []*eval_set.ItemErrorGroup    `thrift:"errors,2,optional" frugal:"2,optional,list<eval_set.ItemErrorGroup>" form:"errors" json:"errors,omitempty" query:"errors"`
}

func NewBatchUpdateEvaluationSetItemsOpenAPIData() *BatchUpdateEvaluationSetItemsOpenAPIData {
	return &BatchUpdateEvaluationSetItemsOpenAPIData{}
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) InitDefault() {
}

var BatchUpdateEvaluationSetItemsOpenAPIData_ItemOutputs_DEFAULT []*eval_set.DatasetItemOutput

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) GetItemOutputs() (v []*eval_set.DatasetItemOutput) {
	if p == nil {
		return
	}
	if !p.IsSetItemOutputs() {
		return BatchUpdateEvaluationSetItemsOpenAPIData_ItemOutputs_DEFAULT
	}
	return p.ItemOutputs
}

var BatchUpdateEvaluationSetItemsOpenAPIData_Errors_DEFAULT []*eval_set.ItemErrorGroup

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) GetErrors() (v []*eval_set.ItemErrorGroup) {
	if p == nil {
		return
	}
	if !p.IsSetErrors() {
		return BatchUpdateEvaluationSetItemsOpenAPIData_Errors_DEFAULT
	}
	return p.Errors
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIData) SetItemOutputs(val []*eval_set.DatasetItemOutput) {
	p.ItemOutputs = val
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIData) SetErrors(val []*eval_set.ItemErrorGroup) {
	p.Errors = val
}

var fieldIDToName_BatchUpdateEvaluationSetItemsOpenAPIData = map[int16]string{
	1: "itemOutputs",
	2: "errors",
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) IsSetItemOutputs() bool {
	return p.ItemOutputs != nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) IsSetErrors() bool {
	return p.Errors != nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchUpdateEvaluationSetItemsOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.DatasetItemOutput, 0, size)
	values := make([]eval_set.DatasetItemOutput, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ItemOutputs = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIData) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.ItemErrorGroup, 0, size)
	values := make([]eval_set.ItemErrorGroup, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Errors = _field
	return nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateEvaluationSetItemsOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemOutputs() {
		if err = oprot.WriteFieldBegin("itemOutputs", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ItemOutputs)); err != nil {
			return err
		}
		for _, v := range p.ItemOutputs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrors() {
		if err = oprot.WriteFieldBegin("errors", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Errors)); err != nil {
			return err
		}
		for _, v := range p.Errors {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchUpdateEvaluationSetItemsOpenAPIData(%+v)", *p)

}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) DeepEqual(ano *BatchUpdateEvaluationSetItemsOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ItemOutputs) {
		return false
	}
	if !p.Field2DeepEqual(ano.Errors) {
		return false
	}
	return true
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) Field1DeepEqual(src []*eval_set.DatasetItemOutput) bool {

	if len(p.ItemOutputs) != len(src) {
		return false
	}
	for i, v := range p.ItemOutputs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIData) Field2DeepEqual(src []*eval_set.ItemErrorGroup) bool {

	if len(p.Errors) != len(src) {
		return false
	}
	for i, v := range p.Errors {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// 1.7 批量删除评测集数据
type BatchDeleteEvaluationSetItemsOApiRequest struct {
	WorkspaceID     *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" `
	EvaluationSetID *int64     `thrift:"evaluation_set_id,2,optional" frugal:"2,optional,i64" json:"evaluation_set_id" path:"evaluation_set_id" `
	ItemIds         []int64    `thrift:"item_ids,3,optional" frugal:"3,optional,list<i64>" json:"item_ids" form:"item_ids" `
	IsDeleteAll     *bool      `thrift:"is_delete_all,4,optional" frugal:"4,optional,bool" form:"is_delete_all" json:"is_delete_all,omitempty"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchDeleteEvaluationSetItemsOApiRequest() *BatchDeleteEvaluationSetItemsOApiRequest {
	return &BatchDeleteEvaluationSetItemsOApiRequest{}
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) InitDefault() {
}

var BatchDeleteEvaluationSetItemsOApiRequest_WorkspaceID_DEFAULT int64

func (p *BatchDeleteEvaluationSetItemsOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return BatchDeleteEvaluationSetItemsOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var BatchDeleteEvaluationSetItemsOApiRequest_EvaluationSetID_DEFAULT int64

func (p *BatchDeleteEvaluationSetItemsOApiRequest) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return BatchDeleteEvaluationSetItemsOApiRequest_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var BatchDeleteEvaluationSetItemsOApiRequest_ItemIds_DEFAULT []int64

func (p *BatchDeleteEvaluationSetItemsOApiRequest) GetItemIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemIds() {
		return BatchDeleteEvaluationSetItemsOApiRequest_ItemIds_DEFAULT
	}
	return p.ItemIds
}

var BatchDeleteEvaluationSetItemsOApiRequest_IsDeleteAll_DEFAULT bool

func (p *BatchDeleteEvaluationSetItemsOApiRequest) GetIsDeleteAll() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsDeleteAll() {
		return BatchDeleteEvaluationSetItemsOApiRequest_IsDeleteAll_DEFAULT
	}
	return *p.IsDeleteAll
}

var BatchDeleteEvaluationSetItemsOApiRequest_Base_DEFAULT *base.Base

func (p *BatchDeleteEvaluationSetItemsOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchDeleteEvaluationSetItemsOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) SetItemIds(val []int64) {
	p.ItemIds = val
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) SetIsDeleteAll(val *bool) {
	p.IsDeleteAll = val
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchDeleteEvaluationSetItemsOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "item_ids",
	4:   "is_delete_all",
	255: "Base",
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) IsSetItemIds() bool {
	return p.ItemIds != nil
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) IsSetIsDeleteAll() bool {
	return p.IsDeleteAll != nil
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchDeleteEvaluationSetItemsOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ItemIds = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsDeleteAll = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteEvaluationSetItemsOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemIds() {
		if err = oprot.WriteFieldBegin("item_ids", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ItemIds)); err != nil {
			return err
		}
		for _, v := range p.ItemIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsDeleteAll() {
		if err = oprot.WriteFieldBegin("is_delete_all", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsDeleteAll); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchDeleteEvaluationSetItemsOApiRequest(%+v)", *p)

}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) DeepEqual(ano *BatchDeleteEvaluationSetItemsOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemIds) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsDeleteAll) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) Field2DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) Field3DeepEqual(src []int64) bool {

	if len(p.ItemIds) != len(src) {
		return false
	}
	for i, v := range p.ItemIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) Field4DeepEqual(src *bool) bool {

	if p.IsDeleteAll == src {
		return true
	} else if p.IsDeleteAll == nil || src == nil {
		return false
	}
	if *p.IsDeleteAll != *src {
		return false
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchDeleteEvaluationSetItemsOApiResponse struct {
	Code     *int32         `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string        `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchDeleteEvaluationSetItemsOApiResponse() *BatchDeleteEvaluationSetItemsOApiResponse {
	return &BatchDeleteEvaluationSetItemsOApiResponse{}
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) InitDefault() {
}

var BatchDeleteEvaluationSetItemsOApiResponse_Code_DEFAULT int32

func (p *BatchDeleteEvaluationSetItemsOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return BatchDeleteEvaluationSetItemsOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var BatchDeleteEvaluationSetItemsOApiResponse_Msg_DEFAULT string

func (p *BatchDeleteEvaluationSetItemsOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return BatchDeleteEvaluationSetItemsOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var BatchDeleteEvaluationSetItemsOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchDeleteEvaluationSetItemsOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchDeleteEvaluationSetItemsOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchDeleteEvaluationSetItemsOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	255: "BaseResp",
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchDeleteEvaluationSetItemsOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteEvaluationSetItemsOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchDeleteEvaluationSetItemsOApiResponse(%+v)", *p)

}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) DeepEqual(ano *BatchDeleteEvaluationSetItemsOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

// 1.9 查询评测集特定版本数据
type ListEvaluationSetVersionItemsOApiRequest struct {
	WorkspaceID     *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" query:"workspace_id" `
	EvaluationSetID *int64     `thrift:"evaluation_set_id,2,optional" frugal:"2,optional,i64" json:"evaluation_set_id" path:"evaluation_set_id" `
	VersionID       *int64     `thrift:"version_id,3,optional" frugal:"3,optional,i64" json:"version_id" query:"version_id" `
	PageToken       *string    `thrift:"page_token,100,optional" frugal:"100,optional,string" json:"page_token,omitempty" query:"page_token"`
	PageSize        *int32     `thrift:"page_size,101,optional" frugal:"101,optional,i32" json:"page_size,omitempty" query:"page_size"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListEvaluationSetVersionItemsOApiRequest() *ListEvaluationSetVersionItemsOApiRequest {
	return &ListEvaluationSetVersionItemsOApiRequest{}
}

func (p *ListEvaluationSetVersionItemsOApiRequest) InitDefault() {
}

var ListEvaluationSetVersionItemsOApiRequest_WorkspaceID_DEFAULT int64

func (p *ListEvaluationSetVersionItemsOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return ListEvaluationSetVersionItemsOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var ListEvaluationSetVersionItemsOApiRequest_EvaluationSetID_DEFAULT int64

func (p *ListEvaluationSetVersionItemsOApiRequest) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return ListEvaluationSetVersionItemsOApiRequest_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var ListEvaluationSetVersionItemsOApiRequest_VersionID_DEFAULT int64

func (p *ListEvaluationSetVersionItemsOApiRequest) GetVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetVersionID() {
		return ListEvaluationSetVersionItemsOApiRequest_VersionID_DEFAULT
	}
	return *p.VersionID
}

var ListEvaluationSetVersionItemsOApiRequest_PageToken_DEFAULT string

func (p *ListEvaluationSetVersionItemsOApiRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListEvaluationSetVersionItemsOApiRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListEvaluationSetVersionItemsOApiRequest_PageSize_DEFAULT int32

func (p *ListEvaluationSetVersionItemsOApiRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListEvaluationSetVersionItemsOApiRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListEvaluationSetVersionItemsOApiRequest_Base_DEFAULT *base.Base

func (p *ListEvaluationSetVersionItemsOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListEvaluationSetVersionItemsOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListEvaluationSetVersionItemsOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *ListEvaluationSetVersionItemsOApiRequest) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *ListEvaluationSetVersionItemsOApiRequest) SetVersionID(val *int64) {
	p.VersionID = val
}
func (p *ListEvaluationSetVersionItemsOApiRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListEvaluationSetVersionItemsOApiRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListEvaluationSetVersionItemsOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListEvaluationSetVersionItemsOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "version_id",
	100: "page_token",
	101: "page_size",
	255: "Base",
}

func (p *ListEvaluationSetVersionItemsOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *ListEvaluationSetVersionItemsOApiRequest) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *ListEvaluationSetVersionItemsOApiRequest) IsSetVersionID() bool {
	return p.VersionID != nil
}

func (p *ListEvaluationSetVersionItemsOApiRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListEvaluationSetVersionItemsOApiRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListEvaluationSetVersionItemsOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListEvaluationSetVersionItemsOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetVersionItemsOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionID = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListEvaluationSetVersionItemsOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionItemsOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionID() {
		if err = oprot.WriteFieldBegin("version_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOApiRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOApiRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetVersionItemsOApiRequest(%+v)", *p)

}

func (p *ListEvaluationSetVersionItemsOApiRequest) DeepEqual(ano *ListEvaluationSetVersionItemsOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.VersionID) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListEvaluationSetVersionItemsOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOApiRequest) Field2DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOApiRequest) Field3DeepEqual(src *int64) bool {

	if p.VersionID == src {
		return true
	} else if p.VersionID == nil || src == nil {
		return false
	}
	if *p.VersionID != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOApiRequest) Field100DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOApiRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetVersionItemsOApiResponse struct {
	Code     *int32                                    `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                                   `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *ListEvaluationSetVersionItemsOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,ListEvaluationSetVersionItemsOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListEvaluationSetVersionItemsOApiResponse() *ListEvaluationSetVersionItemsOApiResponse {
	return &ListEvaluationSetVersionItemsOApiResponse{}
}

func (p *ListEvaluationSetVersionItemsOApiResponse) InitDefault() {
}

var ListEvaluationSetVersionItemsOApiResponse_Code_DEFAULT int32

func (p *ListEvaluationSetVersionItemsOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return ListEvaluationSetVersionItemsOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var ListEvaluationSetVersionItemsOApiResponse_Msg_DEFAULT string

func (p *ListEvaluationSetVersionItemsOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return ListEvaluationSetVersionItemsOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var ListEvaluationSetVersionItemsOApiResponse_Data_DEFAULT *ListEvaluationSetVersionItemsOpenAPIData

func (p *ListEvaluationSetVersionItemsOApiResponse) GetData() (v *ListEvaluationSetVersionItemsOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return ListEvaluationSetVersionItemsOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var ListEvaluationSetVersionItemsOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListEvaluationSetVersionItemsOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListEvaluationSetVersionItemsOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListEvaluationSetVersionItemsOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *ListEvaluationSetVersionItemsOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *ListEvaluationSetVersionItemsOApiResponse) SetData(val *ListEvaluationSetVersionItemsOpenAPIData) {
	p.Data = val
}
func (p *ListEvaluationSetVersionItemsOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListEvaluationSetVersionItemsOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *ListEvaluationSetVersionItemsOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *ListEvaluationSetVersionItemsOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *ListEvaluationSetVersionItemsOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *ListEvaluationSetVersionItemsOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListEvaluationSetVersionItemsOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetVersionItemsOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetVersionItemsOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListEvaluationSetVersionItemsOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionItemsOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetVersionItemsOApiResponse(%+v)", *p)

}

func (p *ListEvaluationSetVersionItemsOApiResponse) DeepEqual(ano *ListEvaluationSetVersionItemsOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListEvaluationSetVersionItemsOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOApiResponse) Field3DeepEqual(src *ListEvaluationSetVersionItemsOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetVersionItemsOpenAPIData struct {
	Items         []*eval_set.EvaluationSetItem `thrift:"items,1,optional" frugal:"1,optional,list<eval_set.EvaluationSetItem>" form:"items" json:"items,omitempty" query:"items"`
	HasMore       *bool                         `thrift:"has_more,100,optional" frugal:"100,optional,bool" form:"has_more" json:"has_more,omitempty" query:"has_more"`
	NextPageToken *string                       `thrift:"next_page_token,101,optional" frugal:"101,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	Total         *int64                        `thrift:"total,102,optional" frugal:"102,optional,i64" json:"total" form:"total" query:"total"`
}

func NewListEvaluationSetVersionItemsOpenAPIData() *ListEvaluationSetVersionItemsOpenAPIData {
	return &ListEvaluationSetVersionItemsOpenAPIData{}
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) InitDefault() {
}

var ListEvaluationSetVersionItemsOpenAPIData_Items_DEFAULT []*eval_set.EvaluationSetItem

func (p *ListEvaluationSetVersionItemsOpenAPIData) GetItems() (v []*eval_set.EvaluationSetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return ListEvaluationSetVersionItemsOpenAPIData_Items_DEFAULT
	}
	return p.Items
}

var ListEvaluationSetVersionItemsOpenAPIData_HasMore_DEFAULT bool

func (p *ListEvaluationSetVersionItemsOpenAPIData) GetHasMore() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetHasMore() {
		return ListEvaluationSetVersionItemsOpenAPIData_HasMore_DEFAULT
	}
	return *p.HasMore
}

var ListEvaluationSetVersionItemsOpenAPIData_NextPageToken_DEFAULT string

func (p *ListEvaluationSetVersionItemsOpenAPIData) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListEvaluationSetVersionItemsOpenAPIData_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListEvaluationSetVersionItemsOpenAPIData_Total_DEFAULT int64

func (p *ListEvaluationSetVersionItemsOpenAPIData) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListEvaluationSetVersionItemsOpenAPIData_Total_DEFAULT
	}
	return *p.Total
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) SetItems(val []*eval_set.EvaluationSetItem) {
	p.Items = val
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) SetHasMore(val *bool) {
	p.HasMore = val
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) SetTotal(val *int64) {
	p.Total = val
}

var fieldIDToName_ListEvaluationSetVersionItemsOpenAPIData = map[int16]string{
	1:   "items",
	100: "has_more",
	101: "next_page_token",
	102: "total",
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) IsSetItems() bool {
	return p.Items != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) IsSetHasMore() bool {
	return p.HasMore != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetVersionItemsOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSetItem, 0, size)
	values := make([]eval_set.EvaluationSetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) ReadField100(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HasMore = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) ReadField101(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) ReadField102(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionItemsOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasMore() {
		if err = oprot.WriteFieldBegin("has_more", thrift.BOOL, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.HasMore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetVersionItemsOpenAPIData(%+v)", *p)

}

func (p *ListEvaluationSetVersionItemsOpenAPIData) DeepEqual(ano *ListEvaluationSetVersionItemsOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field100DeepEqual(ano.HasMore) {
		return false
	}
	if !p.Field101DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field102DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) Field1DeepEqual(src []*eval_set.EvaluationSetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) Field100DeepEqual(src *bool) bool {

	if p.HasMore == src {
		return true
	} else if p.HasMore == nil || src == nil {
		return false
	}
	if *p.HasMore != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) Field101DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) Field102DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}

type UpdateEvaluationSetSchemaOApiRequest struct {
	WorkspaceID     *int64 `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" `
	EvaluationSetID *int64 `thrift:"evaluation_set_id,2,optional" frugal:"2,optional,i64" json:"evaluation_set_id" path:"evaluation_set_id" `
	// fieldSchema.key 为空时：插入新的一列
	// fieldSchema.key 不为空时：更新对应的列
	// 删除（不支持恢复数据）的情况下，不需要写入入参的 field list；
	Fields []*eval_set.FieldSchema `thrift:"fields,10,optional" frugal:"10,optional,list<eval_set.FieldSchema>" form:"fields" json:"fields,omitempty"`
	Base   *base.Base              `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdateEvaluationSetSchemaOApiRequest() *UpdateEvaluationSetSchemaOApiRequest {
	return &UpdateEvaluationSetSchemaOApiRequest{}
}

func (p *UpdateEvaluationSetSchemaOApiRequest) InitDefault() {
}

var UpdateEvaluationSetSchemaOApiRequest_WorkspaceID_DEFAULT int64

func (p *UpdateEvaluationSetSchemaOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return UpdateEvaluationSetSchemaOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var UpdateEvaluationSetSchemaOApiRequest_EvaluationSetID_DEFAULT int64

func (p *UpdateEvaluationSetSchemaOApiRequest) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return UpdateEvaluationSetSchemaOApiRequest_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var UpdateEvaluationSetSchemaOApiRequest_Fields_DEFAULT []*eval_set.FieldSchema

func (p *UpdateEvaluationSetSchemaOApiRequest) GetFields() (v []*eval_set.FieldSchema) {
	if p == nil {
		return
	}
	if !p.IsSetFields() {
		return UpdateEvaluationSetSchemaOApiRequest_Fields_DEFAULT
	}
	return p.Fields
}

var UpdateEvaluationSetSchemaOApiRequest_Base_DEFAULT *base.Base

func (p *UpdateEvaluationSetSchemaOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdateEvaluationSetSchemaOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateEvaluationSetSchemaOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *UpdateEvaluationSetSchemaOApiRequest) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *UpdateEvaluationSetSchemaOApiRequest) SetFields(val []*eval_set.FieldSchema) {
	p.Fields = val
}
func (p *UpdateEvaluationSetSchemaOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateEvaluationSetSchemaOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	10:  "fields",
	255: "Base",
}

func (p *UpdateEvaluationSetSchemaOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *UpdateEvaluationSetSchemaOApiRequest) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *UpdateEvaluationSetSchemaOApiRequest) IsSetFields() bool {
	return p.Fields != nil
}

func (p *UpdateEvaluationSetSchemaOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateEvaluationSetSchemaOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEvaluationSetSchemaOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateEvaluationSetSchemaOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *UpdateEvaluationSetSchemaOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *UpdateEvaluationSetSchemaOApiRequest) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.FieldSchema, 0, size)
	values := make([]eval_set.FieldSchema, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Fields = _field
	return nil
}
func (p *UpdateEvaluationSetSchemaOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdateEvaluationSetSchemaOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluationSetSchemaOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEvaluationSetSchemaOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateEvaluationSetSchemaOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdateEvaluationSetSchemaOApiRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFields() {
		if err = oprot.WriteFieldBegin("fields", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
			return err
		}
		for _, v := range p.Fields {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *UpdateEvaluationSetSchemaOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateEvaluationSetSchemaOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEvaluationSetSchemaOApiRequest(%+v)", *p)

}

func (p *UpdateEvaluationSetSchemaOApiRequest) DeepEqual(ano *UpdateEvaluationSetSchemaOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field10DeepEqual(ano.Fields) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateEvaluationSetSchemaOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *UpdateEvaluationSetSchemaOApiRequest) Field2DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *UpdateEvaluationSetSchemaOApiRequest) Field10DeepEqual(src []*eval_set.FieldSchema) bool {

	if len(p.Fields) != len(src) {
		return false
	}
	for i, v := range p.Fields {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UpdateEvaluationSetSchemaOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateEvaluationSetSchemaOApiResponse struct {
	Code     *int32         `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string        `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewUpdateEvaluationSetSchemaOApiResponse() *UpdateEvaluationSetSchemaOApiResponse {
	return &UpdateEvaluationSetSchemaOApiResponse{}
}

func (p *UpdateEvaluationSetSchemaOApiResponse) InitDefault() {
}

var UpdateEvaluationSetSchemaOApiResponse_Code_DEFAULT int32

func (p *UpdateEvaluationSetSchemaOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return UpdateEvaluationSetSchemaOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var UpdateEvaluationSetSchemaOApiResponse_Msg_DEFAULT string

func (p *UpdateEvaluationSetSchemaOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return UpdateEvaluationSetSchemaOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var UpdateEvaluationSetSchemaOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateEvaluationSetSchemaOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdateEvaluationSetSchemaOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateEvaluationSetSchemaOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *UpdateEvaluationSetSchemaOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *UpdateEvaluationSetSchemaOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateEvaluationSetSchemaOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	255: "BaseResp",
}

func (p *UpdateEvaluationSetSchemaOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *UpdateEvaluationSetSchemaOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *UpdateEvaluationSetSchemaOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateEvaluationSetSchemaOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEvaluationSetSchemaOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateEvaluationSetSchemaOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *UpdateEvaluationSetSchemaOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *UpdateEvaluationSetSchemaOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdateEvaluationSetSchemaOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluationSetSchemaOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEvaluationSetSchemaOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateEvaluationSetSchemaOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdateEvaluationSetSchemaOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateEvaluationSetSchemaOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEvaluationSetSchemaOApiResponse(%+v)", *p)

}

func (p *UpdateEvaluationSetSchemaOApiResponse) DeepEqual(ano *UpdateEvaluationSetSchemaOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateEvaluationSetSchemaOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *UpdateEvaluationSetSchemaOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateEvaluationSetSchemaOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

// ===============================
// 评测实验相关接口 (2个接口)
// ===============================
// 3.1 创建评测实验
type SubmitExperimentOApiRequest struct {
	// 基础信息
	WorkspaceID *int64  `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" `
	Name        *string `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty"`
	Description *string `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty"`
	// 三元组信息
	EvalSetParam          *SubmitExperimentEvalSetParam       `thrift:"eval_set_param,4,optional" frugal:"4,optional,SubmitExperimentEvalSetParam" form:"eval_set_param" json:"eval_set_param,omitempty"`
	EvaluatorParams       []*SubmitExperimentEvaluatorParam   `thrift:"evaluator_params,5,optional" frugal:"5,optional,list<SubmitExperimentEvaluatorParam>" form:"evaluator_param" json:"evaluator_param,omitempty"`
	EvalTargetParam       *SubmitExperimentEvalTargetParam    `thrift:"eval_target_param,6,optional" frugal:"6,optional,SubmitExperimentEvalTargetParam" form:"eval_target_param" json:"eval_target_param,omitempty"`
	TargetFieldMapping    *experiment.TargetFieldMapping      `thrift:"target_field_mapping,7,optional" frugal:"7,optional,experiment.TargetFieldMapping" form:"target_field_mapping" json:"target_field_mapping,omitempty"`
	EvaluatorFieldMapping []*experiment.EvaluatorFieldMapping `thrift:"evaluator_field_mapping,8,optional" frugal:"8,optional,list<experiment.EvaluatorFieldMapping>" form:"evaluator_field_mapping" json:"evaluator_field_mapping,omitempty"`
	// 运行信息
	ItemConcurNum      *int32               `thrift:"item_concur_num,20,optional" frugal:"20,optional,i32" form:"item_concur_num" json:"item_concur_num,omitempty"`
	TargetRuntimeParam *common.RuntimeParam `thrift:"target_runtime_param,22,optional" frugal:"22,optional,common.RuntimeParam" form:"target_runtime_param" json:"target_runtime_param,omitempty"`
	Base               *base.Base           `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewSubmitExperimentOApiRequest() *SubmitExperimentOApiRequest {
	return &SubmitExperimentOApiRequest{}
}

func (p *SubmitExperimentOApiRequest) InitDefault() {
}

var SubmitExperimentOApiRequest_WorkspaceID_DEFAULT int64

func (p *SubmitExperimentOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return SubmitExperimentOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var SubmitExperimentOApiRequest_Name_DEFAULT string

func (p *SubmitExperimentOApiRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return SubmitExperimentOApiRequest_Name_DEFAULT
	}
	return *p.Name
}

var SubmitExperimentOApiRequest_Description_DEFAULT string

func (p *SubmitExperimentOApiRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return SubmitExperimentOApiRequest_Description_DEFAULT
	}
	return *p.Description
}

var SubmitExperimentOApiRequest_EvalSetParam_DEFAULT *SubmitExperimentEvalSetParam

func (p *SubmitExperimentOApiRequest) GetEvalSetParam() (v *SubmitExperimentEvalSetParam) {
	if p == nil {
		return
	}
	if !p.IsSetEvalSetParam() {
		return SubmitExperimentOApiRequest_EvalSetParam_DEFAULT
	}
	return p.EvalSetParam
}

var SubmitExperimentOApiRequest_EvaluatorParams_DEFAULT []*SubmitExperimentEvaluatorParam

func (p *SubmitExperimentOApiRequest) GetEvaluatorParams() (v []*SubmitExperimentEvaluatorParam) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorParams() {
		return SubmitExperimentOApiRequest_EvaluatorParams_DEFAULT
	}
	return p.EvaluatorParams
}

var SubmitExperimentOApiRequest_EvalTargetParam_DEFAULT *SubmitExperimentEvalTargetParam

func (p *SubmitExperimentOApiRequest) GetEvalTargetParam() (v *SubmitExperimentEvalTargetParam) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetParam() {
		return SubmitExperimentOApiRequest_EvalTargetParam_DEFAULT
	}
	return p.EvalTargetParam
}

var SubmitExperimentOApiRequest_TargetFieldMapping_DEFAULT *experiment.TargetFieldMapping

func (p *SubmitExperimentOApiRequest) GetTargetFieldMapping() (v *experiment.TargetFieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetTargetFieldMapping() {
		return SubmitExperimentOApiRequest_TargetFieldMapping_DEFAULT
	}
	return p.TargetFieldMapping
}

var SubmitExperimentOApiRequest_EvaluatorFieldMapping_DEFAULT []*experiment.EvaluatorFieldMapping

func (p *SubmitExperimentOApiRequest) GetEvaluatorFieldMapping() (v []*experiment.EvaluatorFieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorFieldMapping() {
		return SubmitExperimentOApiRequest_EvaluatorFieldMapping_DEFAULT
	}
	return p.EvaluatorFieldMapping
}

var SubmitExperimentOApiRequest_ItemConcurNum_DEFAULT int32

func (p *SubmitExperimentOApiRequest) GetItemConcurNum() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetItemConcurNum() {
		return SubmitExperimentOApiRequest_ItemConcurNum_DEFAULT
	}
	return *p.ItemConcurNum
}

var SubmitExperimentOApiRequest_TargetRuntimeParam_DEFAULT *common.RuntimeParam

func (p *SubmitExperimentOApiRequest) GetTargetRuntimeParam() (v *common.RuntimeParam) {
	if p == nil {
		return
	}
	if !p.IsSetTargetRuntimeParam() {
		return SubmitExperimentOApiRequest_TargetRuntimeParam_DEFAULT
	}
	return p.TargetRuntimeParam
}

var SubmitExperimentOApiRequest_Base_DEFAULT *base.Base

func (p *SubmitExperimentOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return SubmitExperimentOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *SubmitExperimentOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *SubmitExperimentOApiRequest) SetName(val *string) {
	p.Name = val
}
func (p *SubmitExperimentOApiRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *SubmitExperimentOApiRequest) SetEvalSetParam(val *SubmitExperimentEvalSetParam) {
	p.EvalSetParam = val
}
func (p *SubmitExperimentOApiRequest) SetEvaluatorParams(val []*SubmitExperimentEvaluatorParam) {
	p.EvaluatorParams = val
}
func (p *SubmitExperimentOApiRequest) SetEvalTargetParam(val *SubmitExperimentEvalTargetParam) {
	p.EvalTargetParam = val
}
func (p *SubmitExperimentOApiRequest) SetTargetFieldMapping(val *experiment.TargetFieldMapping) {
	p.TargetFieldMapping = val
}
func (p *SubmitExperimentOApiRequest) SetEvaluatorFieldMapping(val []*experiment.EvaluatorFieldMapping) {
	p.EvaluatorFieldMapping = val
}
func (p *SubmitExperimentOApiRequest) SetItemConcurNum(val *int32) {
	p.ItemConcurNum = val
}
func (p *SubmitExperimentOApiRequest) SetTargetRuntimeParam(val *common.RuntimeParam) {
	p.TargetRuntimeParam = val
}
func (p *SubmitExperimentOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_SubmitExperimentOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "name",
	3:   "description",
	4:   "eval_set_param",
	5:   "evaluator_params",
	6:   "eval_target_param",
	7:   "target_field_mapping",
	8:   "evaluator_field_mapping",
	20:  "item_concur_num",
	22:  "target_runtime_param",
	255: "Base",
}

func (p *SubmitExperimentOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *SubmitExperimentOApiRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *SubmitExperimentOApiRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *SubmitExperimentOApiRequest) IsSetEvalSetParam() bool {
	return p.EvalSetParam != nil
}

func (p *SubmitExperimentOApiRequest) IsSetEvaluatorParams() bool {
	return p.EvaluatorParams != nil
}

func (p *SubmitExperimentOApiRequest) IsSetEvalTargetParam() bool {
	return p.EvalTargetParam != nil
}

func (p *SubmitExperimentOApiRequest) IsSetTargetFieldMapping() bool {
	return p.TargetFieldMapping != nil
}

func (p *SubmitExperimentOApiRequest) IsSetEvaluatorFieldMapping() bool {
	return p.EvaluatorFieldMapping != nil
}

func (p *SubmitExperimentOApiRequest) IsSetItemConcurNum() bool {
	return p.ItemConcurNum != nil
}

func (p *SubmitExperimentOApiRequest) IsSetTargetRuntimeParam() bool {
	return p.TargetRuntimeParam != nil
}

func (p *SubmitExperimentOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *SubmitExperimentOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubmitExperimentOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubmitExperimentOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *SubmitExperimentOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *SubmitExperimentOApiRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *SubmitExperimentOApiRequest) ReadField4(iprot thrift.TProtocol) error {
	_field := NewSubmitExperimentEvalSetParam()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalSetParam = _field
	return nil
}
func (p *SubmitExperimentOApiRequest) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*SubmitExperimentEvaluatorParam, 0, size)
	values := make([]SubmitExperimentEvaluatorParam, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorParams = _field
	return nil
}
func (p *SubmitExperimentOApiRequest) ReadField6(iprot thrift.TProtocol) error {
	_field := NewSubmitExperimentEvalTargetParam()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalTargetParam = _field
	return nil
}
func (p *SubmitExperimentOApiRequest) ReadField7(iprot thrift.TProtocol) error {
	_field := experiment.NewTargetFieldMapping()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TargetFieldMapping = _field
	return nil
}
func (p *SubmitExperimentOApiRequest) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*experiment.EvaluatorFieldMapping, 0, size)
	values := make([]experiment.EvaluatorFieldMapping, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorFieldMapping = _field
	return nil
}
func (p *SubmitExperimentOApiRequest) ReadField20(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemConcurNum = _field
	return nil
}
func (p *SubmitExperimentOApiRequest) ReadField22(iprot thrift.TProtocol) error {
	_field := common.NewRuntimeParam()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TargetRuntimeParam = _field
	return nil
}
func (p *SubmitExperimentOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *SubmitExperimentOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitExperimentOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubmitExperimentOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SubmitExperimentOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SubmitExperimentOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *SubmitExperimentOApiRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalSetParam() {
		if err = oprot.WriteFieldBegin("eval_set_param", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalSetParam.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *SubmitExperimentOApiRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorParams() {
		if err = oprot.WriteFieldBegin("evaluator_params", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvaluatorParams)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorParams {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *SubmitExperimentOApiRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetParam() {
		if err = oprot.WriteFieldBegin("eval_target_param", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalTargetParam.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *SubmitExperimentOApiRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetFieldMapping() {
		if err = oprot.WriteFieldBegin("target_field_mapping", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TargetFieldMapping.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *SubmitExperimentOApiRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorFieldMapping() {
		if err = oprot.WriteFieldBegin("evaluator_field_mapping", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvaluatorFieldMapping)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorFieldMapping {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *SubmitExperimentOApiRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemConcurNum() {
		if err = oprot.WriteFieldBegin("item_concur_num", thrift.I32, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ItemConcurNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *SubmitExperimentOApiRequest) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetRuntimeParam() {
		if err = oprot.WriteFieldBegin("target_runtime_param", thrift.STRUCT, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TargetRuntimeParam.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}
func (p *SubmitExperimentOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SubmitExperimentOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitExperimentOApiRequest(%+v)", *p)

}

func (p *SubmitExperimentOApiRequest) DeepEqual(ano *SubmitExperimentOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvalSetParam) {
		return false
	}
	if !p.Field5DeepEqual(ano.EvaluatorParams) {
		return false
	}
	if !p.Field6DeepEqual(ano.EvalTargetParam) {
		return false
	}
	if !p.Field7DeepEqual(ano.TargetFieldMapping) {
		return false
	}
	if !p.Field8DeepEqual(ano.EvaluatorFieldMapping) {
		return false
	}
	if !p.Field20DeepEqual(ano.ItemConcurNum) {
		return false
	}
	if !p.Field22DeepEqual(ano.TargetRuntimeParam) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *SubmitExperimentOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *SubmitExperimentOApiRequest) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitExperimentOApiRequest) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitExperimentOApiRequest) Field4DeepEqual(src *SubmitExperimentEvalSetParam) bool {

	if !p.EvalSetParam.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SubmitExperimentOApiRequest) Field5DeepEqual(src []*SubmitExperimentEvaluatorParam) bool {

	if len(p.EvaluatorParams) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorParams {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *SubmitExperimentOApiRequest) Field6DeepEqual(src *SubmitExperimentEvalTargetParam) bool {

	if !p.EvalTargetParam.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SubmitExperimentOApiRequest) Field7DeepEqual(src *experiment.TargetFieldMapping) bool {

	if !p.TargetFieldMapping.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SubmitExperimentOApiRequest) Field8DeepEqual(src []*experiment.EvaluatorFieldMapping) bool {

	if len(p.EvaluatorFieldMapping) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorFieldMapping {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *SubmitExperimentOApiRequest) Field20DeepEqual(src *int32) bool {

	if p.ItemConcurNum == src {
		return true
	} else if p.ItemConcurNum == nil || src == nil {
		return false
	}
	if *p.ItemConcurNum != *src {
		return false
	}
	return true
}
func (p *SubmitExperimentOApiRequest) Field22DeepEqual(src *common.RuntimeParam) bool {

	if !p.TargetRuntimeParam.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SubmitExperimentOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type SubmitExperimentEvalSetParam struct {
	EvalSetID *int64  `thrift:"eval_set_id,1,optional" frugal:"1,optional,i64" json:"eval_set_id" form:"eval_set_id" query:"eval_set_id"`
	Version   *string `thrift:"version,2,optional" frugal:"2,optional,string" form:"version" json:"version,omitempty" query:"version"`
}

func NewSubmitExperimentEvalSetParam() *SubmitExperimentEvalSetParam {
	return &SubmitExperimentEvalSetParam{}
}

func (p *SubmitExperimentEvalSetParam) InitDefault() {
}

var SubmitExperimentEvalSetParam_EvalSetID_DEFAULT int64

func (p *SubmitExperimentEvalSetParam) GetEvalSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvalSetID() {
		return SubmitExperimentEvalSetParam_EvalSetID_DEFAULT
	}
	return *p.EvalSetID
}

var SubmitExperimentEvalSetParam_Version_DEFAULT string

func (p *SubmitExperimentEvalSetParam) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return SubmitExperimentEvalSetParam_Version_DEFAULT
	}
	return *p.Version
}
func (p *SubmitExperimentEvalSetParam) SetEvalSetID(val *int64) {
	p.EvalSetID = val
}
func (p *SubmitExperimentEvalSetParam) SetVersion(val *string) {
	p.Version = val
}

var fieldIDToName_SubmitExperimentEvalSetParam = map[int16]string{
	1: "eval_set_id",
	2: "version",
}

func (p *SubmitExperimentEvalSetParam) IsSetEvalSetID() bool {
	return p.EvalSetID != nil
}

func (p *SubmitExperimentEvalSetParam) IsSetVersion() bool {
	return p.Version != nil
}

func (p *SubmitExperimentEvalSetParam) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubmitExperimentEvalSetParam[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubmitExperimentEvalSetParam) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvalSetID = _field
	return nil
}
func (p *SubmitExperimentEvalSetParam) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}

func (p *SubmitExperimentEvalSetParam) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitExperimentEvalSetParam"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubmitExperimentEvalSetParam) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalSetID() {
		if err = oprot.WriteFieldBegin("eval_set_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvalSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SubmitExperimentEvalSetParam) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SubmitExperimentEvalSetParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitExperimentEvalSetParam(%+v)", *p)

}

func (p *SubmitExperimentEvalSetParam) DeepEqual(ano *SubmitExperimentEvalSetParam) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvalSetID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Version) {
		return false
	}
	return true
}

func (p *SubmitExperimentEvalSetParam) Field1DeepEqual(src *int64) bool {

	if p.EvalSetID == src {
		return true
	} else if p.EvalSetID == nil || src == nil {
		return false
	}
	if *p.EvalSetID != *src {
		return false
	}
	return true
}
func (p *SubmitExperimentEvalSetParam) Field2DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}

type SubmitExperimentEvaluatorParam struct {
	EvaluatorID *int64  `thrift:"evaluator_id,1,optional" frugal:"1,optional,i64" json:"evaluator_id" form:"evaluator_id" query:"evaluator_id"`
	Versions    *string `thrift:"versions,2,optional" frugal:"2,optional,string" form:"versions" json:"versions,omitempty" query:"versions"`
}

func NewSubmitExperimentEvaluatorParam() *SubmitExperimentEvaluatorParam {
	return &SubmitExperimentEvaluatorParam{}
}

func (p *SubmitExperimentEvaluatorParam) InitDefault() {
}

var SubmitExperimentEvaluatorParam_EvaluatorID_DEFAULT int64

func (p *SubmitExperimentEvaluatorParam) GetEvaluatorID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorID() {
		return SubmitExperimentEvaluatorParam_EvaluatorID_DEFAULT
	}
	return *p.EvaluatorID
}

var SubmitExperimentEvaluatorParam_Versions_DEFAULT string

func (p *SubmitExperimentEvaluatorParam) GetVersions() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersions() {
		return SubmitExperimentEvaluatorParam_Versions_DEFAULT
	}
	return *p.Versions
}
func (p *SubmitExperimentEvaluatorParam) SetEvaluatorID(val *int64) {
	p.EvaluatorID = val
}
func (p *SubmitExperimentEvaluatorParam) SetVersions(val *string) {
	p.Versions = val
}

var fieldIDToName_SubmitExperimentEvaluatorParam = map[int16]string{
	1: "evaluator_id",
	2: "versions",
}

func (p *SubmitExperimentEvaluatorParam) IsSetEvaluatorID() bool {
	return p.EvaluatorID != nil
}

func (p *SubmitExperimentEvaluatorParam) IsSetVersions() bool {
	return p.Versions != nil
}

func (p *SubmitExperimentEvaluatorParam) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubmitExperimentEvaluatorParam[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubmitExperimentEvaluatorParam) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *SubmitExperimentEvaluatorParam) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Versions = _field
	return nil
}

func (p *SubmitExperimentEvaluatorParam) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitExperimentEvaluatorParam"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubmitExperimentEvaluatorParam) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorID() {
		if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluatorID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SubmitExperimentEvaluatorParam) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersions() {
		if err = oprot.WriteFieldBegin("versions", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Versions); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SubmitExperimentEvaluatorParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitExperimentEvaluatorParam(%+v)", *p)

}

func (p *SubmitExperimentEvaluatorParam) DeepEqual(ano *SubmitExperimentEvaluatorParam) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Versions) {
		return false
	}
	return true
}

func (p *SubmitExperimentEvaluatorParam) Field1DeepEqual(src *int64) bool {

	if p.EvaluatorID == src {
		return true
	} else if p.EvaluatorID == nil || src == nil {
		return false
	}
	if *p.EvaluatorID != *src {
		return false
	}
	return true
}
func (p *SubmitExperimentEvaluatorParam) Field2DeepEqual(src *string) bool {

	if p.Versions == src {
		return true
	} else if p.Versions == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Versions, *src) != 0 {
		return false
	}
	return true
}

type SubmitExperimentEvalTargetParam struct {
	SourceTargetID      *string                      `thrift:"source_target_id,1,optional" frugal:"1,optional,string" form:"source_target_id" json:"source_target_id,omitempty" query:"source_target_id"`
	SourceTargetVersion *string                      `thrift:"source_target_version,2,optional" frugal:"2,optional,string" form:"source_target_version" json:"source_target_version,omitempty" query:"source_target_version"`
	EvalTargetType      *eval_target.EvalTargetType  `thrift:"eval_target_type,3,optional" frugal:"3,optional,string" form:"eval_target_type" json:"eval_target_type,omitempty" query:"eval_target_type"`
	BotInfoType         *eval_target.CozeBotInfoType `thrift:"bot_info_type,4,optional" frugal:"4,optional,string" form:"bot_info_type" json:"bot_info_type,omitempty" query:"bot_info_type"`
	// 如果是发布版本则需要填充这个字段
	BotPublishVersion *string `thrift:"bot_publish_version,5,optional" frugal:"5,optional,string" form:"bot_publish_version" json:"bot_publish_version,omitempty" query:"bot_publish_version"`
}

func NewSubmitExperimentEvalTargetParam() *SubmitExperimentEvalTargetParam {
	return &SubmitExperimentEvalTargetParam{}
}

func (p *SubmitExperimentEvalTargetParam) InitDefault() {
}

var SubmitExperimentEvalTargetParam_SourceTargetID_DEFAULT string

func (p *SubmitExperimentEvalTargetParam) GetSourceTargetID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSourceTargetID() {
		return SubmitExperimentEvalTargetParam_SourceTargetID_DEFAULT
	}
	return *p.SourceTargetID
}

var SubmitExperimentEvalTargetParam_SourceTargetVersion_DEFAULT string

func (p *SubmitExperimentEvalTargetParam) GetSourceTargetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSourceTargetVersion() {
		return SubmitExperimentEvalTargetParam_SourceTargetVersion_DEFAULT
	}
	return *p.SourceTargetVersion
}

var SubmitExperimentEvalTargetParam_EvalTargetType_DEFAULT eval_target.EvalTargetType

func (p *SubmitExperimentEvalTargetParam) GetEvalTargetType() (v eval_target.EvalTargetType) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetType() {
		return SubmitExperimentEvalTargetParam_EvalTargetType_DEFAULT
	}
	return *p.EvalTargetType
}

var SubmitExperimentEvalTargetParam_BotInfoType_DEFAULT eval_target.CozeBotInfoType

func (p *SubmitExperimentEvalTargetParam) GetBotInfoType() (v eval_target.CozeBotInfoType) {
	if p == nil {
		return
	}
	if !p.IsSetBotInfoType() {
		return SubmitExperimentEvalTargetParam_BotInfoType_DEFAULT
	}
	return *p.BotInfoType
}

var SubmitExperimentEvalTargetParam_BotPublishVersion_DEFAULT string

func (p *SubmitExperimentEvalTargetParam) GetBotPublishVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetBotPublishVersion() {
		return SubmitExperimentEvalTargetParam_BotPublishVersion_DEFAULT
	}
	return *p.BotPublishVersion
}
func (p *SubmitExperimentEvalTargetParam) SetSourceTargetID(val *string) {
	p.SourceTargetID = val
}
func (p *SubmitExperimentEvalTargetParam) SetSourceTargetVersion(val *string) {
	p.SourceTargetVersion = val
}
func (p *SubmitExperimentEvalTargetParam) SetEvalTargetType(val *eval_target.EvalTargetType) {
	p.EvalTargetType = val
}
func (p *SubmitExperimentEvalTargetParam) SetBotInfoType(val *eval_target.CozeBotInfoType) {
	p.BotInfoType = val
}
func (p *SubmitExperimentEvalTargetParam) SetBotPublishVersion(val *string) {
	p.BotPublishVersion = val
}

var fieldIDToName_SubmitExperimentEvalTargetParam = map[int16]string{
	1: "source_target_id",
	2: "source_target_version",
	3: "eval_target_type",
	4: "bot_info_type",
	5: "bot_publish_version",
}

func (p *SubmitExperimentEvalTargetParam) IsSetSourceTargetID() bool {
	return p.SourceTargetID != nil
}

func (p *SubmitExperimentEvalTargetParam) IsSetSourceTargetVersion() bool {
	return p.SourceTargetVersion != nil
}

func (p *SubmitExperimentEvalTargetParam) IsSetEvalTargetType() bool {
	return p.EvalTargetType != nil
}

func (p *SubmitExperimentEvalTargetParam) IsSetBotInfoType() bool {
	return p.BotInfoType != nil
}

func (p *SubmitExperimentEvalTargetParam) IsSetBotPublishVersion() bool {
	return p.BotPublishVersion != nil
}

func (p *SubmitExperimentEvalTargetParam) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubmitExperimentEvalTargetParam[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubmitExperimentEvalTargetParam) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SourceTargetID = _field
	return nil
}
func (p *SubmitExperimentEvalTargetParam) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SourceTargetVersion = _field
	return nil
}
func (p *SubmitExperimentEvalTargetParam) ReadField3(iprot thrift.TProtocol) error {

	var _field *eval_target.EvalTargetType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvalTargetType = _field
	return nil
}
func (p *SubmitExperimentEvalTargetParam) ReadField4(iprot thrift.TProtocol) error {

	var _field *eval_target.CozeBotInfoType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BotInfoType = _field
	return nil
}
func (p *SubmitExperimentEvalTargetParam) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BotPublishVersion = _field
	return nil
}

func (p *SubmitExperimentEvalTargetParam) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitExperimentEvalTargetParam"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubmitExperimentEvalTargetParam) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceTargetID() {
		if err = oprot.WriteFieldBegin("source_target_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SourceTargetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SubmitExperimentEvalTargetParam) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceTargetVersion() {
		if err = oprot.WriteFieldBegin("source_target_version", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SourceTargetVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SubmitExperimentEvalTargetParam) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetType() {
		if err = oprot.WriteFieldBegin("eval_target_type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvalTargetType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *SubmitExperimentEvalTargetParam) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBotInfoType() {
		if err = oprot.WriteFieldBegin("bot_info_type", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BotInfoType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *SubmitExperimentEvalTargetParam) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBotPublishVersion() {
		if err = oprot.WriteFieldBegin("bot_publish_version", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BotPublishVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *SubmitExperimentEvalTargetParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitExperimentEvalTargetParam(%+v)", *p)

}

func (p *SubmitExperimentEvalTargetParam) DeepEqual(ano *SubmitExperimentEvalTargetParam) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SourceTargetID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SourceTargetVersion) {
		return false
	}
	if !p.Field3DeepEqual(ano.EvalTargetType) {
		return false
	}
	if !p.Field4DeepEqual(ano.BotInfoType) {
		return false
	}
	if !p.Field5DeepEqual(ano.BotPublishVersion) {
		return false
	}
	return true
}

func (p *SubmitExperimentEvalTargetParam) Field1DeepEqual(src *string) bool {

	if p.SourceTargetID == src {
		return true
	} else if p.SourceTargetID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SourceTargetID, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitExperimentEvalTargetParam) Field2DeepEqual(src *string) bool {

	if p.SourceTargetVersion == src {
		return true
	} else if p.SourceTargetVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SourceTargetVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitExperimentEvalTargetParam) Field3DeepEqual(src *eval_target.EvalTargetType) bool {

	if p.EvalTargetType == src {
		return true
	} else if p.EvalTargetType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvalTargetType, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitExperimentEvalTargetParam) Field4DeepEqual(src *eval_target.CozeBotInfoType) bool {

	if p.BotInfoType == src {
		return true
	} else if p.BotInfoType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BotInfoType, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitExperimentEvalTargetParam) Field5DeepEqual(src *string) bool {

	if p.BotPublishVersion == src {
		return true
	} else if p.BotPublishVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BotPublishVersion, *src) != 0 {
		return false
	}
	return true
}

type SubmitExperimentOApiResponse struct {
	Code     *int32                       `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                      `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *SubmitExperimentOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,SubmitExperimentOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp               `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewSubmitExperimentOApiResponse() *SubmitExperimentOApiResponse {
	return &SubmitExperimentOApiResponse{}
}

func (p *SubmitExperimentOApiResponse) InitDefault() {
}

var SubmitExperimentOApiResponse_Code_DEFAULT int32

func (p *SubmitExperimentOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return SubmitExperimentOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var SubmitExperimentOApiResponse_Msg_DEFAULT string

func (p *SubmitExperimentOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return SubmitExperimentOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var SubmitExperimentOApiResponse_Data_DEFAULT *SubmitExperimentOpenAPIData

func (p *SubmitExperimentOApiResponse) GetData() (v *SubmitExperimentOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return SubmitExperimentOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var SubmitExperimentOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *SubmitExperimentOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return SubmitExperimentOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *SubmitExperimentOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *SubmitExperimentOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *SubmitExperimentOApiResponse) SetData(val *SubmitExperimentOpenAPIData) {
	p.Data = val
}
func (p *SubmitExperimentOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_SubmitExperimentOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *SubmitExperimentOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *SubmitExperimentOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *SubmitExperimentOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *SubmitExperimentOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *SubmitExperimentOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubmitExperimentOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubmitExperimentOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *SubmitExperimentOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *SubmitExperimentOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewSubmitExperimentOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *SubmitExperimentOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *SubmitExperimentOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitExperimentOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubmitExperimentOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SubmitExperimentOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SubmitExperimentOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *SubmitExperimentOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SubmitExperimentOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitExperimentOApiResponse(%+v)", *p)

}

func (p *SubmitExperimentOApiResponse) DeepEqual(ano *SubmitExperimentOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *SubmitExperimentOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *SubmitExperimentOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitExperimentOApiResponse) Field3DeepEqual(src *SubmitExperimentOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SubmitExperimentOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type SubmitExperimentOpenAPIData struct {
	Experiment *experiment.Experiment `thrift:"experiment,1,optional" frugal:"1,optional,experiment.Experiment" form:"experiment" json:"experiment,omitempty" query:"experiment"`
}

func NewSubmitExperimentOpenAPIData() *SubmitExperimentOpenAPIData {
	return &SubmitExperimentOpenAPIData{}
}

func (p *SubmitExperimentOpenAPIData) InitDefault() {
}

var SubmitExperimentOpenAPIData_Experiment_DEFAULT *experiment.Experiment

func (p *SubmitExperimentOpenAPIData) GetExperiment() (v *experiment.Experiment) {
	if p == nil {
		return
	}
	if !p.IsSetExperiment() {
		return SubmitExperimentOpenAPIData_Experiment_DEFAULT
	}
	return p.Experiment
}
func (p *SubmitExperimentOpenAPIData) SetExperiment(val *experiment.Experiment) {
	p.Experiment = val
}

var fieldIDToName_SubmitExperimentOpenAPIData = map[int16]string{
	1: "experiment",
}

func (p *SubmitExperimentOpenAPIData) IsSetExperiment() bool {
	return p.Experiment != nil
}

func (p *SubmitExperimentOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubmitExperimentOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubmitExperimentOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_field := experiment.NewExperiment()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Experiment = _field
	return nil
}

func (p *SubmitExperimentOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitExperimentOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubmitExperimentOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperiment() {
		if err = oprot.WriteFieldBegin("experiment", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Experiment.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubmitExperimentOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitExperimentOpenAPIData(%+v)", *p)

}

func (p *SubmitExperimentOpenAPIData) DeepEqual(ano *SubmitExperimentOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Experiment) {
		return false
	}
	return true
}

func (p *SubmitExperimentOpenAPIData) Field1DeepEqual(src *experiment.Experiment) bool {

	if !p.Experiment.DeepEqual(src) {
		return false
	}
	return true
}

// 3.2 获取评测实验详情
type GetExperimentsOApiRequest struct {
	WorkspaceID *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" query:"workspace_id" `
	ExptID      *int64     `thrift:"expt_id,2,optional" frugal:"2,optional,i64" json:"expt_id" path:"expt_id" `
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetExperimentsOApiRequest() *GetExperimentsOApiRequest {
	return &GetExperimentsOApiRequest{}
}

func (p *GetExperimentsOApiRequest) InitDefault() {
}

var GetExperimentsOApiRequest_WorkspaceID_DEFAULT int64

func (p *GetExperimentsOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return GetExperimentsOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var GetExperimentsOApiRequest_ExptID_DEFAULT int64

func (p *GetExperimentsOApiRequest) GetExptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExptID() {
		return GetExperimentsOApiRequest_ExptID_DEFAULT
	}
	return *p.ExptID
}

var GetExperimentsOApiRequest_Base_DEFAULT *base.Base

func (p *GetExperimentsOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetExperimentsOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetExperimentsOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *GetExperimentsOApiRequest) SetExptID(val *int64) {
	p.ExptID = val
}
func (p *GetExperimentsOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetExperimentsOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "expt_id",
	255: "Base",
}

func (p *GetExperimentsOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *GetExperimentsOApiRequest) IsSetExptID() bool {
	return p.ExptID != nil
}

func (p *GetExperimentsOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetExperimentsOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetExperimentsOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetExperimentsOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetExperimentsOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExptID = _field
	return nil
}
func (p *GetExperimentsOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetExperimentsOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentsOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetExperimentsOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetExperimentsOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExptID() {
		if err = oprot.WriteFieldBegin("expt_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetExperimentsOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetExperimentsOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetExperimentsOApiRequest(%+v)", *p)

}

func (p *GetExperimentsOApiRequest) DeepEqual(ano *GetExperimentsOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExptID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetExperimentsOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *GetExperimentsOApiRequest) Field2DeepEqual(src *int64) bool {

	if p.ExptID == src {
		return true
	} else if p.ExptID == nil || src == nil {
		return false
	}
	if *p.ExptID != *src {
		return false
	}
	return true
}
func (p *GetExperimentsOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetExperimentsOApiResponse struct {
	Code     *int32                         `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                        `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *GetExperimentsOpenAPIDataData `thrift:"data,3,optional" frugal:"3,optional,GetExperimentsOpenAPIDataData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                 `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetExperimentsOApiResponse() *GetExperimentsOApiResponse {
	return &GetExperimentsOApiResponse{}
}

func (p *GetExperimentsOApiResponse) InitDefault() {
}

var GetExperimentsOApiResponse_Code_DEFAULT int32

func (p *GetExperimentsOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return GetExperimentsOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var GetExperimentsOApiResponse_Msg_DEFAULT string

func (p *GetExperimentsOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return GetExperimentsOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var GetExperimentsOApiResponse_Data_DEFAULT *GetExperimentsOpenAPIDataData

func (p *GetExperimentsOApiResponse) GetData() (v *GetExperimentsOpenAPIDataData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return GetExperimentsOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var GetExperimentsOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetExperimentsOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetExperimentsOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetExperimentsOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *GetExperimentsOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *GetExperimentsOApiResponse) SetData(val *GetExperimentsOpenAPIDataData) {
	p.Data = val
}
func (p *GetExperimentsOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetExperimentsOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *GetExperimentsOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *GetExperimentsOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *GetExperimentsOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetExperimentsOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetExperimentsOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetExperimentsOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetExperimentsOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *GetExperimentsOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *GetExperimentsOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewGetExperimentsOpenAPIDataData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *GetExperimentsOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetExperimentsOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentsOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetExperimentsOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetExperimentsOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetExperimentsOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetExperimentsOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetExperimentsOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetExperimentsOApiResponse(%+v)", *p)

}

func (p *GetExperimentsOApiResponse) DeepEqual(ano *GetExperimentsOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetExperimentsOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *GetExperimentsOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *GetExperimentsOApiResponse) Field3DeepEqual(src *GetExperimentsOpenAPIDataData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetExperimentsOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetExperimentsOpenAPIDataData struct {
	Experiment *experiment.Experiment `thrift:"experiment,1,optional" frugal:"1,optional,experiment.Experiment" form:"experiment" json:"experiment,omitempty" query:"experiment"`
	BaseResp   *base.BaseResp         `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetExperimentsOpenAPIDataData() *GetExperimentsOpenAPIDataData {
	return &GetExperimentsOpenAPIDataData{}
}

func (p *GetExperimentsOpenAPIDataData) InitDefault() {
}

var GetExperimentsOpenAPIDataData_Experiment_DEFAULT *experiment.Experiment

func (p *GetExperimentsOpenAPIDataData) GetExperiment() (v *experiment.Experiment) {
	if p == nil {
		return
	}
	if !p.IsSetExperiment() {
		return GetExperimentsOpenAPIDataData_Experiment_DEFAULT
	}
	return p.Experiment
}

var GetExperimentsOpenAPIDataData_BaseResp_DEFAULT *base.BaseResp

func (p *GetExperimentsOpenAPIDataData) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetExperimentsOpenAPIDataData_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetExperimentsOpenAPIDataData) SetExperiment(val *experiment.Experiment) {
	p.Experiment = val
}
func (p *GetExperimentsOpenAPIDataData) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetExperimentsOpenAPIDataData = map[int16]string{
	1:   "experiment",
	255: "BaseResp",
}

func (p *GetExperimentsOpenAPIDataData) IsSetExperiment() bool {
	return p.Experiment != nil
}

func (p *GetExperimentsOpenAPIDataData) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetExperimentsOpenAPIDataData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetExperimentsOpenAPIDataData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetExperimentsOpenAPIDataData) ReadField1(iprot thrift.TProtocol) error {
	_field := experiment.NewExperiment()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Experiment = _field
	return nil
}
func (p *GetExperimentsOpenAPIDataData) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetExperimentsOpenAPIDataData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentsOpenAPIDataData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetExperimentsOpenAPIDataData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperiment() {
		if err = oprot.WriteFieldBegin("experiment", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Experiment.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetExperimentsOpenAPIDataData) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetExperimentsOpenAPIDataData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetExperimentsOpenAPIDataData(%+v)", *p)

}

func (p *GetExperimentsOpenAPIDataData) DeepEqual(ano *GetExperimentsOpenAPIDataData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Experiment) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetExperimentsOpenAPIDataData) Field1DeepEqual(src *experiment.Experiment) bool {

	if !p.Experiment.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetExperimentsOpenAPIDataData) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

// 3.3 获取评测实验结果
type ListExperimentResultOApiRequest struct {
	WorkspaceID  *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" `
	ExperimentID *int64     `thrift:"experiment_id,2,optional" frugal:"2,optional,i64" json:"experiment_id" path:"experiment_id" `
	PageNumber   *int32     `thrift:"page_number,100,optional" frugal:"100,optional,i32" form:"page_number" json:"page_number,omitempty"`
	PageSize     *int32     `thrift:"page_size,101,optional" frugal:"101,optional,i32" form:"page_size" json:"page_size,omitempty"`
	Base         *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListExperimentResultOApiRequest() *ListExperimentResultOApiRequest {
	return &ListExperimentResultOApiRequest{}
}

func (p *ListExperimentResultOApiRequest) InitDefault() {
}

var ListExperimentResultOApiRequest_WorkspaceID_DEFAULT int64

func (p *ListExperimentResultOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return ListExperimentResultOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var ListExperimentResultOApiRequest_ExperimentID_DEFAULT int64

func (p *ListExperimentResultOApiRequest) GetExperimentID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentID() {
		return ListExperimentResultOApiRequest_ExperimentID_DEFAULT
	}
	return *p.ExperimentID
}

var ListExperimentResultOApiRequest_PageNumber_DEFAULT int32

func (p *ListExperimentResultOApiRequest) GetPageNumber() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNumber() {
		return ListExperimentResultOApiRequest_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var ListExperimentResultOApiRequest_PageSize_DEFAULT int32

func (p *ListExperimentResultOApiRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListExperimentResultOApiRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListExperimentResultOApiRequest_Base_DEFAULT *base.Base

func (p *ListExperimentResultOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListExperimentResultOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListExperimentResultOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *ListExperimentResultOApiRequest) SetExperimentID(val *int64) {
	p.ExperimentID = val
}
func (p *ListExperimentResultOApiRequest) SetPageNumber(val *int32) {
	p.PageNumber = val
}
func (p *ListExperimentResultOApiRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListExperimentResultOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListExperimentResultOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "experiment_id",
	100: "page_number",
	101: "page_size",
	255: "Base",
}

func (p *ListExperimentResultOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *ListExperimentResultOApiRequest) IsSetExperimentID() bool {
	return p.ExperimentID != nil
}

func (p *ListExperimentResultOApiRequest) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *ListExperimentResultOApiRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListExperimentResultOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListExperimentResultOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListExperimentResultOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListExperimentResultOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListExperimentResultOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExperimentID = _field
	return nil
}
func (p *ListExperimentResultOApiRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNumber = _field
	return nil
}
func (p *ListExperimentResultOApiRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListExperimentResultOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListExperimentResultOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListExperimentResultOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListExperimentResultOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListExperimentResultOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentID() {
		if err = oprot.WriteFieldBegin("experiment_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExperimentID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListExperimentResultOApiRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("page_number", thrift.I32, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListExperimentResultOApiRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListExperimentResultOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListExperimentResultOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListExperimentResultOApiRequest(%+v)", *p)

}

func (p *ListExperimentResultOApiRequest) DeepEqual(ano *ListExperimentResultOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExperimentID) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListExperimentResultOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *ListExperimentResultOApiRequest) Field2DeepEqual(src *int64) bool {

	if p.ExperimentID == src {
		return true
	} else if p.ExperimentID == nil || src == nil {
		return false
	}
	if *p.ExperimentID != *src {
		return false
	}
	return true
}
func (p *ListExperimentResultOApiRequest) Field100DeepEqual(src *int32) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if *p.PageNumber != *src {
		return false
	}
	return true
}
func (p *ListExperimentResultOApiRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListExperimentResultOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListExperimentResultOApiResponse struct {
	Code     *int32                           `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                          `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *ListExperimentResultOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,ListExperimentResultOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                   `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListExperimentResultOApiResponse() *ListExperimentResultOApiResponse {
	return &ListExperimentResultOApiResponse{}
}

func (p *ListExperimentResultOApiResponse) InitDefault() {
}

var ListExperimentResultOApiResponse_Code_DEFAULT int32

func (p *ListExperimentResultOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return ListExperimentResultOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var ListExperimentResultOApiResponse_Msg_DEFAULT string

func (p *ListExperimentResultOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return ListExperimentResultOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var ListExperimentResultOApiResponse_Data_DEFAULT *ListExperimentResultOpenAPIData

func (p *ListExperimentResultOApiResponse) GetData() (v *ListExperimentResultOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return ListExperimentResultOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var ListExperimentResultOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListExperimentResultOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListExperimentResultOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListExperimentResultOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *ListExperimentResultOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *ListExperimentResultOApiResponse) SetData(val *ListExperimentResultOpenAPIData) {
	p.Data = val
}
func (p *ListExperimentResultOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListExperimentResultOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *ListExperimentResultOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *ListExperimentResultOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *ListExperimentResultOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *ListExperimentResultOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListExperimentResultOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListExperimentResultOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListExperimentResultOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *ListExperimentResultOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *ListExperimentResultOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewListExperimentResultOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *ListExperimentResultOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListExperimentResultOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListExperimentResultOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListExperimentResultOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListExperimentResultOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListExperimentResultOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListExperimentResultOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListExperimentResultOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListExperimentResultOApiResponse(%+v)", *p)

}

func (p *ListExperimentResultOApiResponse) DeepEqual(ano *ListExperimentResultOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListExperimentResultOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *ListExperimentResultOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *ListExperimentResultOApiResponse) Field3DeepEqual(src *ListExperimentResultOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListExperimentResultOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListExperimentResultOpenAPIData struct {
	// 评测集列
	ColumnEvalSetFields []*experiment.ColumnEvalSetField `thrift:"column_eval_set_fields,1,optional" frugal:"1,optional,list<experiment.ColumnEvalSetField>" form:"column_eval_set_fields" json:"column_eval_set_fields,omitempty" query:"column_eval_set_fields"`
	// 评估器列
	ColumnEvaluators []*experiment.ColumnEvaluator `thrift:"column_evaluators,2,optional" frugal:"2,optional,list<experiment.ColumnEvaluator>" form:"column_evaluators" json:"column_evaluators,omitempty" query:"column_evaluators"`
	// 评测行级结果
	ItemResults []*experiment.ItemResult_ `thrift:"item_results,3,optional" frugal:"3,optional,list<experiment.ItemResult_>" form:"item_results" json:"item_results,omitempty" query:"item_results"`
	Total       *int64                    `thrift:"total,100,optional" frugal:"100,optional,i64" form:"total" json:"total,omitempty" query:"total"`
}

func NewListExperimentResultOpenAPIData() *ListExperimentResultOpenAPIData {
	return &ListExperimentResultOpenAPIData{}
}

func (p *ListExperimentResultOpenAPIData) InitDefault() {
}

var ListExperimentResultOpenAPIData_ColumnEvalSetFields_DEFAULT []*experiment.ColumnEvalSetField

func (p *ListExperimentResultOpenAPIData) GetColumnEvalSetFields() (v []*experiment.ColumnEvalSetField) {
	if p == nil {
		return
	}
	if !p.IsSetColumnEvalSetFields() {
		return ListExperimentResultOpenAPIData_ColumnEvalSetFields_DEFAULT
	}
	return p.ColumnEvalSetFields
}

var ListExperimentResultOpenAPIData_ColumnEvaluators_DEFAULT []*experiment.ColumnEvaluator

func (p *ListExperimentResultOpenAPIData) GetColumnEvaluators() (v []*experiment.ColumnEvaluator) {
	if p == nil {
		return
	}
	if !p.IsSetColumnEvaluators() {
		return ListExperimentResultOpenAPIData_ColumnEvaluators_DEFAULT
	}
	return p.ColumnEvaluators
}

var ListExperimentResultOpenAPIData_ItemResults_DEFAULT []*experiment.ItemResult_

func (p *ListExperimentResultOpenAPIData) GetItemResults() (v []*experiment.ItemResult_) {
	if p == nil {
		return
	}
	if !p.IsSetItemResults() {
		return ListExperimentResultOpenAPIData_ItemResults_DEFAULT
	}
	return p.ItemResults
}

var ListExperimentResultOpenAPIData_Total_DEFAULT int64

func (p *ListExperimentResultOpenAPIData) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListExperimentResultOpenAPIData_Total_DEFAULT
	}
	return *p.Total
}
func (p *ListExperimentResultOpenAPIData) SetColumnEvalSetFields(val []*experiment.ColumnEvalSetField) {
	p.ColumnEvalSetFields = val
}
func (p *ListExperimentResultOpenAPIData) SetColumnEvaluators(val []*experiment.ColumnEvaluator) {
	p.ColumnEvaluators = val
}
func (p *ListExperimentResultOpenAPIData) SetItemResults(val []*experiment.ItemResult_) {
	p.ItemResults = val
}
func (p *ListExperimentResultOpenAPIData) SetTotal(val *int64) {
	p.Total = val
}

var fieldIDToName_ListExperimentResultOpenAPIData = map[int16]string{
	1:   "column_eval_set_fields",
	2:   "column_evaluators",
	3:   "item_results",
	100: "total",
}

func (p *ListExperimentResultOpenAPIData) IsSetColumnEvalSetFields() bool {
	return p.ColumnEvalSetFields != nil
}

func (p *ListExperimentResultOpenAPIData) IsSetColumnEvaluators() bool {
	return p.ColumnEvaluators != nil
}

func (p *ListExperimentResultOpenAPIData) IsSetItemResults() bool {
	return p.ItemResults != nil
}

func (p *ListExperimentResultOpenAPIData) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListExperimentResultOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListExperimentResultOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListExperimentResultOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*experiment.ColumnEvalSetField, 0, size)
	values := make([]experiment.ColumnEvalSetField, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnEvalSetFields = _field
	return nil
}
func (p *ListExperimentResultOpenAPIData) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*experiment.ColumnEvaluator, 0, size)
	values := make([]experiment.ColumnEvaluator, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnEvaluators = _field
	return nil
}
func (p *ListExperimentResultOpenAPIData) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*experiment.ItemResult_, 0, size)
	values := make([]experiment.ItemResult_, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ItemResults = _field
	return nil
}
func (p *ListExperimentResultOpenAPIData) ReadField100(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}

func (p *ListExperimentResultOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListExperimentResultOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListExperimentResultOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnEvalSetFields() {
		if err = oprot.WriteFieldBegin("column_eval_set_fields", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnEvalSetFields)); err != nil {
			return err
		}
		for _, v := range p.ColumnEvalSetFields {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListExperimentResultOpenAPIData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnEvaluators() {
		if err = oprot.WriteFieldBegin("column_evaluators", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnEvaluators)); err != nil {
			return err
		}
		for _, v := range p.ColumnEvaluators {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListExperimentResultOpenAPIData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemResults() {
		if err = oprot.WriteFieldBegin("item_results", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ItemResults)); err != nil {
			return err
		}
		for _, v := range p.ItemResults {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListExperimentResultOpenAPIData) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *ListExperimentResultOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListExperimentResultOpenAPIData(%+v)", *p)

}

func (p *ListExperimentResultOpenAPIData) DeepEqual(ano *ListExperimentResultOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnEvalSetFields) {
		return false
	}
	if !p.Field2DeepEqual(ano.ColumnEvaluators) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemResults) {
		return false
	}
	if !p.Field100DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *ListExperimentResultOpenAPIData) Field1DeepEqual(src []*experiment.ColumnEvalSetField) bool {

	if len(p.ColumnEvalSetFields) != len(src) {
		return false
	}
	for i, v := range p.ColumnEvalSetFields {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListExperimentResultOpenAPIData) Field2DeepEqual(src []*experiment.ColumnEvaluator) bool {

	if len(p.ColumnEvaluators) != len(src) {
		return false
	}
	for i, v := range p.ColumnEvaluators {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListExperimentResultOpenAPIData) Field3DeepEqual(src []*experiment.ItemResult_) bool {

	if len(p.ItemResults) != len(src) {
		return false
	}
	for i, v := range p.ItemResults {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListExperimentResultOpenAPIData) Field100DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}

// 3.4 获取聚合结果
type GetExperimentAggrResultOApiRequest struct {
	WorkspaceID  *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" `
	ExperimentID *int64     `thrift:"experiment_id,2,optional" frugal:"2,optional,i64" json:"experiment_id" path:"experiment_id" `
	Base         *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetExperimentAggrResultOApiRequest() *GetExperimentAggrResultOApiRequest {
	return &GetExperimentAggrResultOApiRequest{}
}

func (p *GetExperimentAggrResultOApiRequest) InitDefault() {
}

var GetExperimentAggrResultOApiRequest_WorkspaceID_DEFAULT int64

func (p *GetExperimentAggrResultOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return GetExperimentAggrResultOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var GetExperimentAggrResultOApiRequest_ExperimentID_DEFAULT int64

func (p *GetExperimentAggrResultOApiRequest) GetExperimentID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentID() {
		return GetExperimentAggrResultOApiRequest_ExperimentID_DEFAULT
	}
	return *p.ExperimentID
}

var GetExperimentAggrResultOApiRequest_Base_DEFAULT *base.Base

func (p *GetExperimentAggrResultOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetExperimentAggrResultOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetExperimentAggrResultOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *GetExperimentAggrResultOApiRequest) SetExperimentID(val *int64) {
	p.ExperimentID = val
}
func (p *GetExperimentAggrResultOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetExperimentAggrResultOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "experiment_id",
	255: "Base",
}

func (p *GetExperimentAggrResultOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *GetExperimentAggrResultOApiRequest) IsSetExperimentID() bool {
	return p.ExperimentID != nil
}

func (p *GetExperimentAggrResultOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetExperimentAggrResultOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetExperimentAggrResultOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetExperimentAggrResultOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetExperimentAggrResultOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExperimentID = _field
	return nil
}
func (p *GetExperimentAggrResultOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetExperimentAggrResultOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentAggrResultOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetExperimentAggrResultOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetExperimentAggrResultOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentID() {
		if err = oprot.WriteFieldBegin("experiment_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExperimentID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetExperimentAggrResultOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetExperimentAggrResultOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetExperimentAggrResultOApiRequest(%+v)", *p)

}

func (p *GetExperimentAggrResultOApiRequest) DeepEqual(ano *GetExperimentAggrResultOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExperimentID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetExperimentAggrResultOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *GetExperimentAggrResultOApiRequest) Field2DeepEqual(src *int64) bool {

	if p.ExperimentID == src {
		return true
	} else if p.ExperimentID == nil || src == nil {
		return false
	}
	if *p.ExperimentID != *src {
		return false
	}
	return true
}
func (p *GetExperimentAggrResultOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetExperimentAggrResultOApiResponse struct {
	Code     *int32                              `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                             `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *GetExperimentAggrResultOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,GetExperimentAggrResultOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                      `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetExperimentAggrResultOApiResponse() *GetExperimentAggrResultOApiResponse {
	return &GetExperimentAggrResultOApiResponse{}
}

func (p *GetExperimentAggrResultOApiResponse) InitDefault() {
}

var GetExperimentAggrResultOApiResponse_Code_DEFAULT int32

func (p *GetExperimentAggrResultOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return GetExperimentAggrResultOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var GetExperimentAggrResultOApiResponse_Msg_DEFAULT string

func (p *GetExperimentAggrResultOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return GetExperimentAggrResultOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var GetExperimentAggrResultOApiResponse_Data_DEFAULT *GetExperimentAggrResultOpenAPIData

func (p *GetExperimentAggrResultOApiResponse) GetData() (v *GetExperimentAggrResultOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return GetExperimentAggrResultOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var GetExperimentAggrResultOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetExperimentAggrResultOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetExperimentAggrResultOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetExperimentAggrResultOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *GetExperimentAggrResultOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *GetExperimentAggrResultOApiResponse) SetData(val *GetExperimentAggrResultOpenAPIData) {
	p.Data = val
}
func (p *GetExperimentAggrResultOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetExperimentAggrResultOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *GetExperimentAggrResultOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *GetExperimentAggrResultOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *GetExperimentAggrResultOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetExperimentAggrResultOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetExperimentAggrResultOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetExperimentAggrResultOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetExperimentAggrResultOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *GetExperimentAggrResultOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *GetExperimentAggrResultOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewGetExperimentAggrResultOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *GetExperimentAggrResultOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetExperimentAggrResultOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentAggrResultOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetExperimentAggrResultOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetExperimentAggrResultOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetExperimentAggrResultOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetExperimentAggrResultOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetExperimentAggrResultOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetExperimentAggrResultOApiResponse(%+v)", *p)

}

func (p *GetExperimentAggrResultOApiResponse) DeepEqual(ano *GetExperimentAggrResultOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetExperimentAggrResultOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *GetExperimentAggrResultOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *GetExperimentAggrResultOApiResponse) Field3DeepEqual(src *GetExperimentAggrResultOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetExperimentAggrResultOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetExperimentAggrResultOpenAPIData struct {
	EvaluatorResults []*experiment.EvaluatorAggregateResult_ `thrift:"evaluator_results,1,optional" frugal:"1,optional,list<experiment.EvaluatorAggregateResult_>" json:"evaluator_results" form:"evaluator_results" query:"evaluator_results"`
}

func NewGetExperimentAggrResultOpenAPIData() *GetExperimentAggrResultOpenAPIData {
	return &GetExperimentAggrResultOpenAPIData{}
}

func (p *GetExperimentAggrResultOpenAPIData) InitDefault() {
}

var GetExperimentAggrResultOpenAPIData_EvaluatorResults_DEFAULT []*experiment.EvaluatorAggregateResult_

func (p *GetExperimentAggrResultOpenAPIData) GetEvaluatorResults() (v []*experiment.EvaluatorAggregateResult_) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorResults() {
		return GetExperimentAggrResultOpenAPIData_EvaluatorResults_DEFAULT
	}
	return p.EvaluatorResults
}
func (p *GetExperimentAggrResultOpenAPIData) SetEvaluatorResults(val []*experiment.EvaluatorAggregateResult_) {
	p.EvaluatorResults = val
}

var fieldIDToName_GetExperimentAggrResultOpenAPIData = map[int16]string{
	1: "evaluator_results",
}

func (p *GetExperimentAggrResultOpenAPIData) IsSetEvaluatorResults() bool {
	return p.EvaluatorResults != nil
}

func (p *GetExperimentAggrResultOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetExperimentAggrResultOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetExperimentAggrResultOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*experiment.EvaluatorAggregateResult_, 0, size)
	values := make([]experiment.EvaluatorAggregateResult_, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorResults = _field
	return nil
}

func (p *GetExperimentAggrResultOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentAggrResultOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetExperimentAggrResultOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorResults() {
		if err = oprot.WriteFieldBegin("evaluator_results", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvaluatorResults)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorResults {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetExperimentAggrResultOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetExperimentAggrResultOpenAPIData(%+v)", *p)

}

func (p *GetExperimentAggrResultOpenAPIData) DeepEqual(ano *GetExperimentAggrResultOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorResults) {
		return false
	}
	return true
}

func (p *GetExperimentAggrResultOpenAPIData) Field1DeepEqual(src []*experiment.EvaluatorAggregateResult_) bool {

	if len(p.EvaluatorResults) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorResults {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// ===============================
// 服务定义 (16个接口总计)
// ===============================
type EvaluationOpenAPIService interface {
	// 评测集接口 (9个)
	// 1.1 创建评测集
	CreateEvaluationSetOApi(ctx context.Context, req *CreateEvaluationSetOApiRequest) (r *CreateEvaluationSetOApiResponse, err error)
	// 1.2 获取评测集详情
	GetEvaluationSetOApi(ctx context.Context, req *GetEvaluationSetOApiRequest) (r *GetEvaluationSetOApiResponse, err error)
	// 1.3 查询评测集列表
	ListEvaluationSetsOApi(ctx context.Context, req *ListEvaluationSetsOApiRequest) (r *ListEvaluationSetsOApiResponse, err error)
	// 1.4 创建评测集版本
	CreateEvaluationSetVersionOApi(ctx context.Context, req *CreateEvaluationSetVersionOApiRequest) (r *CreateEvaluationSetVersionOApiResponse, err error)
	// 1.6 获取评测集版本列表
	ListEvaluationSetVersionsOApi(ctx context.Context, req *ListEvaluationSetVersionsOApiRequest) (r *ListEvaluationSetVersionsOApiResponse, err error)
	// 1.5 批量添加评测集数据
	BatchCreateEvaluationSetItemsOApi(ctx context.Context, req *BatchCreateEvaluationSetItemsOApiRequest) (r *BatchCreateEvaluationSetItemsOApiResponse, err error)
	// 1.6 批量更新评测集数据
	BatchUpdateEvaluationSetItemsOApi(ctx context.Context, req *BatchUpdateEvaluationSetItemsOApiRequest) (r *BatchUpdateEvaluationSetItemsOApiResponse, err error)
	// 1.7 批量删除评测集数据
	BatchDeleteEvaluationSetItemsOApi(ctx context.Context, req *BatchDeleteEvaluationSetItemsOApiRequest) (r *BatchDeleteEvaluationSetItemsOApiResponse, err error)
	// 1.8 查询评测集特定版本数据
	ListEvaluationSetVersionItemsOApi(ctx context.Context, req *ListEvaluationSetVersionItemsOApiRequest) (r *ListEvaluationSetVersionItemsOApiResponse, err error)
	// 1.9 更新评测集字段信息
	UpdateEvaluationSetSchemaOApi(ctx context.Context, req *UpdateEvaluationSetSchemaOApiRequest) (r *UpdateEvaluationSetSchemaOApiResponse, err error)
	// 评测实验接口 (4个)
	// 3.1 创建评测实验
	SubmitExperimentOApi(ctx context.Context, req *SubmitExperimentOApiRequest) (r *SubmitExperimentOApiResponse, err error)
	// 3.2 获取评测实验
	GetExperimentsOApi(ctx context.Context, req *GetExperimentsOApiRequest) (r *GetExperimentsOApiResponse, err error)
	// 3.3 查询评测实验结果
	ListExperimentResultOApi(ctx context.Context, req *ListExperimentResultOApiRequest) (r *ListExperimentResultOApiResponse, err error)
	// 3.4 获取聚合结果
	GetExperimentAggrResultOApi(ctx context.Context, req *GetExperimentAggrResultOApiRequest) (r *GetExperimentAggrResultOApiResponse, err error)
}

type EvaluationOpenAPIServiceClient struct {
	c thrift.TClient
}

func NewEvaluationOpenAPIServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EvaluationOpenAPIServiceClient {
	return &EvaluationOpenAPIServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewEvaluationOpenAPIServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EvaluationOpenAPIServiceClient {
	return &EvaluationOpenAPIServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewEvaluationOpenAPIServiceClient(c thrift.TClient) *EvaluationOpenAPIServiceClient {
	return &EvaluationOpenAPIServiceClient{
		c: c,
	}
}

func (p *EvaluationOpenAPIServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *EvaluationOpenAPIServiceClient) CreateEvaluationSetOApi(ctx context.Context, req *CreateEvaluationSetOApiRequest) (r *CreateEvaluationSetOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceCreateEvaluationSetOApiResult
	if err = p.Client_().Call(ctx, "CreateEvaluationSetOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) GetEvaluationSetOApi(ctx context.Context, req *GetEvaluationSetOApiRequest) (r *GetEvaluationSetOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceGetEvaluationSetOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceGetEvaluationSetOApiResult
	if err = p.Client_().Call(ctx, "GetEvaluationSetOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) ListEvaluationSetsOApi(ctx context.Context, req *ListEvaluationSetsOApiRequest) (r *ListEvaluationSetsOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceListEvaluationSetsOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceListEvaluationSetsOApiResult
	if err = p.Client_().Call(ctx, "ListEvaluationSetsOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) CreateEvaluationSetVersionOApi(ctx context.Context, req *CreateEvaluationSetVersionOApiRequest) (r *CreateEvaluationSetVersionOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult
	if err = p.Client_().Call(ctx, "CreateEvaluationSetVersionOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) ListEvaluationSetVersionsOApi(ctx context.Context, req *ListEvaluationSetVersionsOApiRequest) (r *ListEvaluationSetVersionsOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult
	if err = p.Client_().Call(ctx, "ListEvaluationSetVersionsOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) BatchCreateEvaluationSetItemsOApi(ctx context.Context, req *BatchCreateEvaluationSetItemsOApiRequest) (r *BatchCreateEvaluationSetItemsOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult
	if err = p.Client_().Call(ctx, "BatchCreateEvaluationSetItemsOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) BatchUpdateEvaluationSetItemsOApi(ctx context.Context, req *BatchUpdateEvaluationSetItemsOApiRequest) (r *BatchUpdateEvaluationSetItemsOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult
	if err = p.Client_().Call(ctx, "BatchUpdateEvaluationSetItemsOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) BatchDeleteEvaluationSetItemsOApi(ctx context.Context, req *BatchDeleteEvaluationSetItemsOApiRequest) (r *BatchDeleteEvaluationSetItemsOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult
	if err = p.Client_().Call(ctx, "BatchDeleteEvaluationSetItemsOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) ListEvaluationSetVersionItemsOApi(ctx context.Context, req *ListEvaluationSetVersionItemsOApiRequest) (r *ListEvaluationSetVersionItemsOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult
	if err = p.Client_().Call(ctx, "ListEvaluationSetVersionItemsOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) UpdateEvaluationSetSchemaOApi(ctx context.Context, req *UpdateEvaluationSetSchemaOApiRequest) (r *UpdateEvaluationSetSchemaOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult
	if err = p.Client_().Call(ctx, "UpdateEvaluationSetSchemaOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) SubmitExperimentOApi(ctx context.Context, req *SubmitExperimentOApiRequest) (r *SubmitExperimentOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceSubmitExperimentOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceSubmitExperimentOApiResult
	if err = p.Client_().Call(ctx, "SubmitExperimentOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) GetExperimentsOApi(ctx context.Context, req *GetExperimentsOApiRequest) (r *GetExperimentsOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceGetExperimentsOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceGetExperimentsOApiResult
	if err = p.Client_().Call(ctx, "GetExperimentsOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) ListExperimentResultOApi(ctx context.Context, req *ListExperimentResultOApiRequest) (r *ListExperimentResultOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceListExperimentResultOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceListExperimentResultOApiResult
	if err = p.Client_().Call(ctx, "ListExperimentResultOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) GetExperimentAggrResultOApi(ctx context.Context, req *GetExperimentAggrResultOApiRequest) (r *GetExperimentAggrResultOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult
	if err = p.Client_().Call(ctx, "GetExperimentAggrResultOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type EvaluationOpenAPIServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      EvaluationOpenAPIService
}

func (p *EvaluationOpenAPIServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *EvaluationOpenAPIServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *EvaluationOpenAPIServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewEvaluationOpenAPIServiceProcessor(handler EvaluationOpenAPIService) *EvaluationOpenAPIServiceProcessor {
	self := &EvaluationOpenAPIServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateEvaluationSetOApi", &evaluationOpenAPIServiceProcessorCreateEvaluationSetOApi{handler: handler})
	self.AddToProcessorMap("GetEvaluationSetOApi", &evaluationOpenAPIServiceProcessorGetEvaluationSetOApi{handler: handler})
	self.AddToProcessorMap("ListEvaluationSetsOApi", &evaluationOpenAPIServiceProcessorListEvaluationSetsOApi{handler: handler})
	self.AddToProcessorMap("CreateEvaluationSetVersionOApi", &evaluationOpenAPIServiceProcessorCreateEvaluationSetVersionOApi{handler: handler})
	self.AddToProcessorMap("ListEvaluationSetVersionsOApi", &evaluationOpenAPIServiceProcessorListEvaluationSetVersionsOApi{handler: handler})
	self.AddToProcessorMap("BatchCreateEvaluationSetItemsOApi", &evaluationOpenAPIServiceProcessorBatchCreateEvaluationSetItemsOApi{handler: handler})
	self.AddToProcessorMap("BatchUpdateEvaluationSetItemsOApi", &evaluationOpenAPIServiceProcessorBatchUpdateEvaluationSetItemsOApi{handler: handler})
	self.AddToProcessorMap("BatchDeleteEvaluationSetItemsOApi", &evaluationOpenAPIServiceProcessorBatchDeleteEvaluationSetItemsOApi{handler: handler})
	self.AddToProcessorMap("ListEvaluationSetVersionItemsOApi", &evaluationOpenAPIServiceProcessorListEvaluationSetVersionItemsOApi{handler: handler})
	self.AddToProcessorMap("UpdateEvaluationSetSchemaOApi", &evaluationOpenAPIServiceProcessorUpdateEvaluationSetSchemaOApi{handler: handler})
	self.AddToProcessorMap("SubmitExperimentOApi", &evaluationOpenAPIServiceProcessorSubmitExperimentOApi{handler: handler})
	self.AddToProcessorMap("GetExperimentsOApi", &evaluationOpenAPIServiceProcessorGetExperimentsOApi{handler: handler})
	self.AddToProcessorMap("ListExperimentResultOApi", &evaluationOpenAPIServiceProcessorListExperimentResultOApi{handler: handler})
	self.AddToProcessorMap("GetExperimentAggrResultOApi", &evaluationOpenAPIServiceProcessorGetExperimentAggrResultOApi{handler: handler})
	return self
}
func (p *EvaluationOpenAPIServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type evaluationOpenAPIServiceProcessorCreateEvaluationSetOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorCreateEvaluationSetOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEvaluationSetOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceCreateEvaluationSetOApiResult{}
	var retval *CreateEvaluationSetOApiResponse
	if retval, err2 = p.handler.CreateEvaluationSetOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEvaluationSetOApi: "+err2.Error())
		oprot.WriteMessageBegin("CreateEvaluationSetOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEvaluationSetOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorGetEvaluationSetOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorGetEvaluationSetOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceGetEvaluationSetOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEvaluationSetOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceGetEvaluationSetOApiResult{}
	var retval *GetEvaluationSetOApiResponse
	if retval, err2 = p.handler.GetEvaluationSetOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEvaluationSetOApi: "+err2.Error())
		oprot.WriteMessageBegin("GetEvaluationSetOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEvaluationSetOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorListEvaluationSetsOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorListEvaluationSetsOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceListEvaluationSetsOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListEvaluationSetsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceListEvaluationSetsOApiResult{}
	var retval *ListEvaluationSetsOApiResponse
	if retval, err2 = p.handler.ListEvaluationSetsOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEvaluationSetsOApi: "+err2.Error())
		oprot.WriteMessageBegin("ListEvaluationSetsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListEvaluationSetsOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorCreateEvaluationSetVersionOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorCreateEvaluationSetVersionOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEvaluationSetVersionOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult{}
	var retval *CreateEvaluationSetVersionOApiResponse
	if retval, err2 = p.handler.CreateEvaluationSetVersionOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEvaluationSetVersionOApi: "+err2.Error())
		oprot.WriteMessageBegin("CreateEvaluationSetVersionOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEvaluationSetVersionOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorListEvaluationSetVersionsOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorListEvaluationSetVersionsOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListEvaluationSetVersionsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult{}
	var retval *ListEvaluationSetVersionsOApiResponse
	if retval, err2 = p.handler.ListEvaluationSetVersionsOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEvaluationSetVersionsOApi: "+err2.Error())
		oprot.WriteMessageBegin("ListEvaluationSetVersionsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListEvaluationSetVersionsOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorBatchCreateEvaluationSetItemsOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorBatchCreateEvaluationSetItemsOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchCreateEvaluationSetItemsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult{}
	var retval *BatchCreateEvaluationSetItemsOApiResponse
	if retval, err2 = p.handler.BatchCreateEvaluationSetItemsOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchCreateEvaluationSetItemsOApi: "+err2.Error())
		oprot.WriteMessageBegin("BatchCreateEvaluationSetItemsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchCreateEvaluationSetItemsOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorBatchUpdateEvaluationSetItemsOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorBatchUpdateEvaluationSetItemsOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchUpdateEvaluationSetItemsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult{}
	var retval *BatchUpdateEvaluationSetItemsOApiResponse
	if retval, err2 = p.handler.BatchUpdateEvaluationSetItemsOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchUpdateEvaluationSetItemsOApi: "+err2.Error())
		oprot.WriteMessageBegin("BatchUpdateEvaluationSetItemsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchUpdateEvaluationSetItemsOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorBatchDeleteEvaluationSetItemsOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorBatchDeleteEvaluationSetItemsOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchDeleteEvaluationSetItemsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult{}
	var retval *BatchDeleteEvaluationSetItemsOApiResponse
	if retval, err2 = p.handler.BatchDeleteEvaluationSetItemsOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchDeleteEvaluationSetItemsOApi: "+err2.Error())
		oprot.WriteMessageBegin("BatchDeleteEvaluationSetItemsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchDeleteEvaluationSetItemsOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorListEvaluationSetVersionItemsOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorListEvaluationSetVersionItemsOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListEvaluationSetVersionItemsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult{}
	var retval *ListEvaluationSetVersionItemsOApiResponse
	if retval, err2 = p.handler.ListEvaluationSetVersionItemsOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEvaluationSetVersionItemsOApi: "+err2.Error())
		oprot.WriteMessageBegin("ListEvaluationSetVersionItemsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListEvaluationSetVersionItemsOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorUpdateEvaluationSetSchemaOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorUpdateEvaluationSetSchemaOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateEvaluationSetSchemaOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult{}
	var retval *UpdateEvaluationSetSchemaOApiResponse
	if retval, err2 = p.handler.UpdateEvaluationSetSchemaOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateEvaluationSetSchemaOApi: "+err2.Error())
		oprot.WriteMessageBegin("UpdateEvaluationSetSchemaOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateEvaluationSetSchemaOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorSubmitExperimentOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorSubmitExperimentOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceSubmitExperimentOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SubmitExperimentOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceSubmitExperimentOApiResult{}
	var retval *SubmitExperimentOApiResponse
	if retval, err2 = p.handler.SubmitExperimentOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SubmitExperimentOApi: "+err2.Error())
		oprot.WriteMessageBegin("SubmitExperimentOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SubmitExperimentOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorGetExperimentsOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorGetExperimentsOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceGetExperimentsOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetExperimentsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceGetExperimentsOApiResult{}
	var retval *GetExperimentsOApiResponse
	if retval, err2 = p.handler.GetExperimentsOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetExperimentsOApi: "+err2.Error())
		oprot.WriteMessageBegin("GetExperimentsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetExperimentsOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorListExperimentResultOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorListExperimentResultOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceListExperimentResultOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListExperimentResultOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceListExperimentResultOApiResult{}
	var retval *ListExperimentResultOApiResponse
	if retval, err2 = p.handler.ListExperimentResultOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListExperimentResultOApi: "+err2.Error())
		oprot.WriteMessageBegin("ListExperimentResultOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListExperimentResultOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorGetExperimentAggrResultOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorGetExperimentAggrResultOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetExperimentAggrResultOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult{}
	var retval *GetExperimentAggrResultOApiResponse
	if retval, err2 = p.handler.GetExperimentAggrResultOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetExperimentAggrResultOApi: "+err2.Error())
		oprot.WriteMessageBegin("GetExperimentAggrResultOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetExperimentAggrResultOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs struct {
	Req *CreateEvaluationSetOApiRequest `thrift:"req,1" frugal:"1,default,CreateEvaluationSetOApiRequest"`
}

func NewEvaluationOpenAPIServiceCreateEvaluationSetOApiArgs() *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs {
	return &EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs{}
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs_Req_DEFAULT *CreateEvaluationSetOApiRequest

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) GetReq() (v *CreateEvaluationSetOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) SetReq(val *CreateEvaluationSetOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) Field1DeepEqual(src *CreateEvaluationSetOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceCreateEvaluationSetOApiResult struct {
	Success *CreateEvaluationSetOApiResponse `thrift:"success,0,optional" frugal:"0,optional,CreateEvaluationSetOApiResponse"`
}

func NewEvaluationOpenAPIServiceCreateEvaluationSetOApiResult() *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult {
	return &EvaluationOpenAPIServiceCreateEvaluationSetOApiResult{}
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceCreateEvaluationSetOApiResult_Success_DEFAULT *CreateEvaluationSetOApiResponse

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) GetSuccess() (v *CreateEvaluationSetOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceCreateEvaluationSetOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEvaluationSetOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateEvaluationSetOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) Field0DeepEqual(src *CreateEvaluationSetOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetEvaluationSetOApiArgs struct {
	Req *GetEvaluationSetOApiRequest `thrift:"req,1" frugal:"1,default,GetEvaluationSetOApiRequest"`
}

func NewEvaluationOpenAPIServiceGetEvaluationSetOApiArgs() *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs {
	return &EvaluationOpenAPIServiceGetEvaluationSetOApiArgs{}
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceGetEvaluationSetOApiArgs_Req_DEFAULT *GetEvaluationSetOApiRequest

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) GetReq() (v *GetEvaluationSetOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceGetEvaluationSetOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) SetReq(val *GetEvaluationSetOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceGetEvaluationSetOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetEvaluationSetOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEvaluationSetOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetEvaluationSetOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) Field1DeepEqual(src *GetEvaluationSetOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetEvaluationSetOApiResult struct {
	Success *GetEvaluationSetOApiResponse `thrift:"success,0,optional" frugal:"0,optional,GetEvaluationSetOApiResponse"`
}

func NewEvaluationOpenAPIServiceGetEvaluationSetOApiResult() *EvaluationOpenAPIServiceGetEvaluationSetOApiResult {
	return &EvaluationOpenAPIServiceGetEvaluationSetOApiResult{}
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceGetEvaluationSetOApiResult_Success_DEFAULT *GetEvaluationSetOApiResponse

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) GetSuccess() (v *GetEvaluationSetOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceGetEvaluationSetOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetEvaluationSetOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceGetEvaluationSetOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetEvaluationSetOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEvaluationSetOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetEvaluationSetOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) Field0DeepEqual(src *GetEvaluationSetOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceListEvaluationSetsOApiArgs struct {
	Req *ListEvaluationSetsOApiRequest `thrift:"req,1" frugal:"1,default,ListEvaluationSetsOApiRequest"`
}

func NewEvaluationOpenAPIServiceListEvaluationSetsOApiArgs() *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs {
	return &EvaluationOpenAPIServiceListEvaluationSetsOApiArgs{}
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceListEvaluationSetsOApiArgs_Req_DEFAULT *ListEvaluationSetsOApiRequest

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) GetReq() (v *ListEvaluationSetsOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceListEvaluationSetsOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) SetReq(val *ListEvaluationSetsOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetsOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetsOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetsOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetsOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceListEvaluationSetsOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) Field1DeepEqual(src *ListEvaluationSetsOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceListEvaluationSetsOApiResult struct {
	Success *ListEvaluationSetsOApiResponse `thrift:"success,0,optional" frugal:"0,optional,ListEvaluationSetsOApiResponse"`
}

func NewEvaluationOpenAPIServiceListEvaluationSetsOApiResult() *EvaluationOpenAPIServiceListEvaluationSetsOApiResult {
	return &EvaluationOpenAPIServiceListEvaluationSetsOApiResult{}
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceListEvaluationSetsOApiResult_Success_DEFAULT *ListEvaluationSetsOApiResponse

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) GetSuccess() (v *ListEvaluationSetsOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceListEvaluationSetsOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListEvaluationSetsOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetsOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetsOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetsOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetsOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceListEvaluationSetsOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) Field0DeepEqual(src *ListEvaluationSetsOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs struct {
	Req *CreateEvaluationSetVersionOApiRequest `thrift:"req,1" frugal:"1,default,CreateEvaluationSetVersionOApiRequest"`
}

func NewEvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs() *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs {
	return &EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs{}
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs_Req_DEFAULT *CreateEvaluationSetVersionOApiRequest

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) GetReq() (v *CreateEvaluationSetVersionOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) SetReq(val *CreateEvaluationSetVersionOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetVersionOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersionOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) Field1DeepEqual(src *CreateEvaluationSetVersionOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult struct {
	Success *CreateEvaluationSetVersionOApiResponse `thrift:"success,0,optional" frugal:"0,optional,CreateEvaluationSetVersionOApiResponse"`
}

func NewEvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult() *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult {
	return &EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult{}
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult_Success_DEFAULT *CreateEvaluationSetVersionOApiResponse

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) GetSuccess() (v *CreateEvaluationSetVersionOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEvaluationSetVersionOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetVersionOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersionOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) Field0DeepEqual(src *CreateEvaluationSetVersionOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs struct {
	Req *ListEvaluationSetVersionsOApiRequest `thrift:"req,1" frugal:"1,default,ListEvaluationSetVersionsOApiRequest"`
}

func NewEvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs() *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs {
	return &EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs{}
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs_Req_DEFAULT *ListEvaluationSetVersionsOApiRequest

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs) GetReq() (v *ListEvaluationSetVersionsOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs) SetReq(val *ListEvaluationSetVersionsOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetVersionsOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionsOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs) Field1DeepEqual(src *ListEvaluationSetVersionsOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult struct {
	Success *ListEvaluationSetVersionsOApiResponse `thrift:"success,0,optional" frugal:"0,optional,ListEvaluationSetVersionsOApiResponse"`
}

func NewEvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult() *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult {
	return &EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult{}
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult_Success_DEFAULT *ListEvaluationSetVersionsOApiResponse

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult) GetSuccess() (v *ListEvaluationSetVersionsOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListEvaluationSetVersionsOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetVersionsOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionsOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult) Field0DeepEqual(src *ListEvaluationSetVersionsOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs struct {
	Req *BatchCreateEvaluationSetItemsOApiRequest `thrift:"req,1" frugal:"1,default,BatchCreateEvaluationSetItemsOApiRequest"`
}

func NewEvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs() *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs {
	return &EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs{}
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs_Req_DEFAULT *BatchCreateEvaluationSetItemsOApiRequest

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) GetReq() (v *BatchCreateEvaluationSetItemsOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) SetReq(val *BatchCreateEvaluationSetItemsOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchCreateEvaluationSetItemsOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItemsOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) Field1DeepEqual(src *BatchCreateEvaluationSetItemsOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult struct {
	Success *BatchCreateEvaluationSetItemsOApiResponse `thrift:"success,0,optional" frugal:"0,optional,BatchCreateEvaluationSetItemsOApiResponse"`
}

func NewEvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult() *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult {
	return &EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult{}
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult_Success_DEFAULT *BatchCreateEvaluationSetItemsOApiResponse

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) GetSuccess() (v *BatchCreateEvaluationSetItemsOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchCreateEvaluationSetItemsOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchCreateEvaluationSetItemsOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItemsOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) Field0DeepEqual(src *BatchCreateEvaluationSetItemsOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs struct {
	Req *BatchUpdateEvaluationSetItemsOApiRequest `thrift:"req,1" frugal:"1,default,BatchUpdateEvaluationSetItemsOApiRequest"`
}

func NewEvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs() *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs {
	return &EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs{}
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs_Req_DEFAULT *BatchUpdateEvaluationSetItemsOApiRequest

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) GetReq() (v *BatchUpdateEvaluationSetItemsOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) SetReq(val *BatchUpdateEvaluationSetItemsOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchUpdateEvaluationSetItemsOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateEvaluationSetItemsOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) Field1DeepEqual(src *BatchUpdateEvaluationSetItemsOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult struct {
	Success *BatchUpdateEvaluationSetItemsOApiResponse `thrift:"success,0,optional" frugal:"0,optional,BatchUpdateEvaluationSetItemsOApiResponse"`
}

func NewEvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult() *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult {
	return &EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult{}
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult_Success_DEFAULT *BatchUpdateEvaluationSetItemsOApiResponse

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) GetSuccess() (v *BatchUpdateEvaluationSetItemsOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchUpdateEvaluationSetItemsOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchUpdateEvaluationSetItemsOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateEvaluationSetItemsOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) Field0DeepEqual(src *BatchUpdateEvaluationSetItemsOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs struct {
	Req *BatchDeleteEvaluationSetItemsOApiRequest `thrift:"req,1" frugal:"1,default,BatchDeleteEvaluationSetItemsOApiRequest"`
}

func NewEvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs() *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs {
	return &EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs{}
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs_Req_DEFAULT *BatchDeleteEvaluationSetItemsOApiRequest

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) GetReq() (v *BatchDeleteEvaluationSetItemsOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) SetReq(val *BatchDeleteEvaluationSetItemsOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchDeleteEvaluationSetItemsOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteEvaluationSetItemsOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) Field1DeepEqual(src *BatchDeleteEvaluationSetItemsOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult struct {
	Success *BatchDeleteEvaluationSetItemsOApiResponse `thrift:"success,0,optional" frugal:"0,optional,BatchDeleteEvaluationSetItemsOApiResponse"`
}

func NewEvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult() *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult {
	return &EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult{}
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult_Success_DEFAULT *BatchDeleteEvaluationSetItemsOApiResponse

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) GetSuccess() (v *BatchDeleteEvaluationSetItemsOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchDeleteEvaluationSetItemsOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchDeleteEvaluationSetItemsOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteEvaluationSetItemsOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) Field0DeepEqual(src *BatchDeleteEvaluationSetItemsOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs struct {
	Req *ListEvaluationSetVersionItemsOApiRequest `thrift:"req,1" frugal:"1,default,ListEvaluationSetVersionItemsOApiRequest"`
}

func NewEvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs() *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs {
	return &EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs{}
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs_Req_DEFAULT *ListEvaluationSetVersionItemsOApiRequest

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) GetReq() (v *ListEvaluationSetVersionItemsOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) SetReq(val *ListEvaluationSetVersionItemsOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetVersionItemsOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionItemsOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) Field1DeepEqual(src *ListEvaluationSetVersionItemsOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult struct {
	Success *ListEvaluationSetVersionItemsOApiResponse `thrift:"success,0,optional" frugal:"0,optional,ListEvaluationSetVersionItemsOApiResponse"`
}

func NewEvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult() *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult {
	return &EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult{}
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult_Success_DEFAULT *ListEvaluationSetVersionItemsOApiResponse

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) GetSuccess() (v *ListEvaluationSetVersionItemsOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListEvaluationSetVersionItemsOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetVersionItemsOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionItemsOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) Field0DeepEqual(src *ListEvaluationSetVersionItemsOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs struct {
	Req *UpdateEvaluationSetSchemaOApiRequest `thrift:"req,1" frugal:"1,default,UpdateEvaluationSetSchemaOApiRequest"`
}

func NewEvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs() *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs {
	return &EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs{}
}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs_Req_DEFAULT *UpdateEvaluationSetSchemaOApiRequest

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs) GetReq() (v *UpdateEvaluationSetSchemaOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs) SetReq(val *UpdateEvaluationSetSchemaOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateEvaluationSetSchemaOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluationSetSchemaOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs) Field1DeepEqual(src *UpdateEvaluationSetSchemaOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult struct {
	Success *UpdateEvaluationSetSchemaOApiResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateEvaluationSetSchemaOApiResponse"`
}

func NewEvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult() *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult {
	return &EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult{}
}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult_Success_DEFAULT *UpdateEvaluationSetSchemaOApiResponse

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult) GetSuccess() (v *UpdateEvaluationSetSchemaOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateEvaluationSetSchemaOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateEvaluationSetSchemaOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluationSetSchemaOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult) Field0DeepEqual(src *UpdateEvaluationSetSchemaOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceSubmitExperimentOApiArgs struct {
	Req *SubmitExperimentOApiRequest `thrift:"req,1" frugal:"1,default,SubmitExperimentOApiRequest"`
}

func NewEvaluationOpenAPIServiceSubmitExperimentOApiArgs() *EvaluationOpenAPIServiceSubmitExperimentOApiArgs {
	return &EvaluationOpenAPIServiceSubmitExperimentOApiArgs{}
}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceSubmitExperimentOApiArgs_Req_DEFAULT *SubmitExperimentOApiRequest

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiArgs) GetReq() (v *SubmitExperimentOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceSubmitExperimentOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceSubmitExperimentOApiArgs) SetReq(val *SubmitExperimentOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceSubmitExperimentOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceSubmitExperimentOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSubmitExperimentOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitExperimentOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceSubmitExperimentOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceSubmitExperimentOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiArgs) Field1DeepEqual(src *SubmitExperimentOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceSubmitExperimentOApiResult struct {
	Success *SubmitExperimentOApiResponse `thrift:"success,0,optional" frugal:"0,optional,SubmitExperimentOApiResponse"`
}

func NewEvaluationOpenAPIServiceSubmitExperimentOApiResult() *EvaluationOpenAPIServiceSubmitExperimentOApiResult {
	return &EvaluationOpenAPIServiceSubmitExperimentOApiResult{}
}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceSubmitExperimentOApiResult_Success_DEFAULT *SubmitExperimentOApiResponse

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiResult) GetSuccess() (v *SubmitExperimentOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceSubmitExperimentOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceSubmitExperimentOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*SubmitExperimentOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceSubmitExperimentOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceSubmitExperimentOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSubmitExperimentOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitExperimentOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceSubmitExperimentOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceSubmitExperimentOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceSubmitExperimentOApiResult) Field0DeepEqual(src *SubmitExperimentOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetExperimentsOApiArgs struct {
	Req *GetExperimentsOApiRequest `thrift:"req,1" frugal:"1,default,GetExperimentsOApiRequest"`
}

func NewEvaluationOpenAPIServiceGetExperimentsOApiArgs() *EvaluationOpenAPIServiceGetExperimentsOApiArgs {
	return &EvaluationOpenAPIServiceGetExperimentsOApiArgs{}
}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceGetExperimentsOApiArgs_Req_DEFAULT *GetExperimentsOApiRequest

func (p *EvaluationOpenAPIServiceGetExperimentsOApiArgs) GetReq() (v *GetExperimentsOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceGetExperimentsOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceGetExperimentsOApiArgs) SetReq(val *GetExperimentsOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceGetExperimentsOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetExperimentsOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetExperimentsOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentsOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetExperimentsOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceGetExperimentsOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiArgs) Field1DeepEqual(src *GetExperimentsOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetExperimentsOApiResult struct {
	Success *GetExperimentsOApiResponse `thrift:"success,0,optional" frugal:"0,optional,GetExperimentsOApiResponse"`
}

func NewEvaluationOpenAPIServiceGetExperimentsOApiResult() *EvaluationOpenAPIServiceGetExperimentsOApiResult {
	return &EvaluationOpenAPIServiceGetExperimentsOApiResult{}
}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceGetExperimentsOApiResult_Success_DEFAULT *GetExperimentsOApiResponse

func (p *EvaluationOpenAPIServiceGetExperimentsOApiResult) GetSuccess() (v *GetExperimentsOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceGetExperimentsOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceGetExperimentsOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetExperimentsOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceGetExperimentsOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetExperimentsOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetExperimentsOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentsOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetExperimentsOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceGetExperimentsOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetExperimentsOApiResult) Field0DeepEqual(src *GetExperimentsOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceListExperimentResultOApiArgs struct {
	Req *ListExperimentResultOApiRequest `thrift:"req,1" frugal:"1,default,ListExperimentResultOApiRequest"`
}

func NewEvaluationOpenAPIServiceListExperimentResultOApiArgs() *EvaluationOpenAPIServiceListExperimentResultOApiArgs {
	return &EvaluationOpenAPIServiceListExperimentResultOApiArgs{}
}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceListExperimentResultOApiArgs_Req_DEFAULT *ListExperimentResultOApiRequest

func (p *EvaluationOpenAPIServiceListExperimentResultOApiArgs) GetReq() (v *ListExperimentResultOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceListExperimentResultOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceListExperimentResultOApiArgs) SetReq(val *ListExperimentResultOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceListExperimentResultOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceListExperimentResultOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListExperimentResultOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListExperimentResultOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceListExperimentResultOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceListExperimentResultOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiArgs) Field1DeepEqual(src *ListExperimentResultOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceListExperimentResultOApiResult struct {
	Success *ListExperimentResultOApiResponse `thrift:"success,0,optional" frugal:"0,optional,ListExperimentResultOApiResponse"`
}

func NewEvaluationOpenAPIServiceListExperimentResultOApiResult() *EvaluationOpenAPIServiceListExperimentResultOApiResult {
	return &EvaluationOpenAPIServiceListExperimentResultOApiResult{}
}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceListExperimentResultOApiResult_Success_DEFAULT *ListExperimentResultOApiResponse

func (p *EvaluationOpenAPIServiceListExperimentResultOApiResult) GetSuccess() (v *ListExperimentResultOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceListExperimentResultOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceListExperimentResultOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListExperimentResultOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceListExperimentResultOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceListExperimentResultOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListExperimentResultOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListExperimentResultOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceListExperimentResultOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceListExperimentResultOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceListExperimentResultOApiResult) Field0DeepEqual(src *ListExperimentResultOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs struct {
	Req *GetExperimentAggrResultOApiRequest `thrift:"req,1" frugal:"1,default,GetExperimentAggrResultOApiRequest"`
}

func NewEvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs() *EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs {
	return &EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs{}
}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs_Req_DEFAULT *GetExperimentAggrResultOApiRequest

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs) GetReq() (v *GetExperimentAggrResultOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs) SetReq(val *GetExperimentAggrResultOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetExperimentAggrResultOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentAggrResultOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiArgs) Field1DeepEqual(src *GetExperimentAggrResultOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult struct {
	Success *GetExperimentAggrResultOApiResponse `thrift:"success,0,optional" frugal:"0,optional,GetExperimentAggrResultOApiResponse"`
}

func NewEvaluationOpenAPIServiceGetExperimentAggrResultOApiResult() *EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult {
	return &EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult{}
}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult_Success_DEFAULT *GetExperimentAggrResultOApiResponse

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult) GetSuccess() (v *GetExperimentAggrResultOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetExperimentAggrResultOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetExperimentAggrResultOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentAggrResultOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetExperimentAggrResultOApiResult) Field0DeepEqual(src *GetExperimentAggrResultOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

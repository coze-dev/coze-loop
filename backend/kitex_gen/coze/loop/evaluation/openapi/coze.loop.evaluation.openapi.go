// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package openapi

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain_openapi/eval_set"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain_openapi/evaluator"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain_openapi/experiment"
	"strings"
)

// ===============================
// 评测集相关接口 (9个接口)
// ===============================
// 1.1 创建评测集
type CreateEvaluationSetOApiRequest struct {
	WorkspaceID         *int64                        `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" `
	Name                *string                       `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty"`
	Description         *string                       `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty"`
	EvaluationSetSchema *eval_set.EvaluationSetSchema `thrift:"evaluation_set_schema,4,optional" frugal:"4,optional,eval_set.EvaluationSetSchema" form:"evaluation_set_schema" json:"evaluation_set_schema,omitempty"`
	Base                *base.Base                    `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateEvaluationSetOApiRequest() *CreateEvaluationSetOApiRequest {
	return &CreateEvaluationSetOApiRequest{}
}

func (p *CreateEvaluationSetOApiRequest) InitDefault() {
}

var CreateEvaluationSetOApiRequest_WorkspaceID_DEFAULT int64

func (p *CreateEvaluationSetOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return CreateEvaluationSetOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var CreateEvaluationSetOApiRequest_Name_DEFAULT string

func (p *CreateEvaluationSetOApiRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return CreateEvaluationSetOApiRequest_Name_DEFAULT
	}
	return *p.Name
}

var CreateEvaluationSetOApiRequest_Description_DEFAULT string

func (p *CreateEvaluationSetOApiRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return CreateEvaluationSetOApiRequest_Description_DEFAULT
	}
	return *p.Description
}

var CreateEvaluationSetOApiRequest_EvaluationSetSchema_DEFAULT *eval_set.EvaluationSetSchema

func (p *CreateEvaluationSetOApiRequest) GetEvaluationSetSchema() (v *eval_set.EvaluationSetSchema) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetSchema() {
		return CreateEvaluationSetOApiRequest_EvaluationSetSchema_DEFAULT
	}
	return p.EvaluationSetSchema
}

var CreateEvaluationSetOApiRequest_Base_DEFAULT *base.Base

func (p *CreateEvaluationSetOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateEvaluationSetOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateEvaluationSetOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *CreateEvaluationSetOApiRequest) SetName(val *string) {
	p.Name = val
}
func (p *CreateEvaluationSetOApiRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *CreateEvaluationSetOApiRequest) SetEvaluationSetSchema(val *eval_set.EvaluationSetSchema) {
	p.EvaluationSetSchema = val
}
func (p *CreateEvaluationSetOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateEvaluationSetOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "name",
	3:   "description",
	4:   "evaluation_set_schema",
	255: "Base",
}

func (p *CreateEvaluationSetOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *CreateEvaluationSetOApiRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *CreateEvaluationSetOApiRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CreateEvaluationSetOApiRequest) IsSetEvaluationSetSchema() bool {
	return p.EvaluationSetSchema != nil
}

func (p *CreateEvaluationSetOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateEvaluationSetOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateEvaluationSetOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *CreateEvaluationSetOApiRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *CreateEvaluationSetOApiRequest) ReadField4(iprot thrift.TProtocol) error {
	_field := eval_set.NewEvaluationSetSchema()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluationSetSchema = _field
	return nil
}
func (p *CreateEvaluationSetOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateEvaluationSetOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluationSetOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluationSetOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateEvaluationSetOApiRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetSchema() {
		if err = oprot.WriteFieldBegin("evaluation_set_schema", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluationSetSchema.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CreateEvaluationSetOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluationSetOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetOApiRequest(%+v)", *p)

}

func (p *CreateEvaluationSetOApiRequest) DeepEqual(ano *CreateEvaluationSetOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluationSetSchema) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOApiRequest) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOApiRequest) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOApiRequest) Field4DeepEqual(src *eval_set.EvaluationSetSchema) bool {

	if !p.EvaluationSetSchema.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluationSetOApiResponse struct {
	Code     *int32                          `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                         `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *CreateEvaluationSetOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,CreateEvaluationSetOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                  `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateEvaluationSetOApiResponse() *CreateEvaluationSetOApiResponse {
	return &CreateEvaluationSetOApiResponse{}
}

func (p *CreateEvaluationSetOApiResponse) InitDefault() {
}

var CreateEvaluationSetOApiResponse_Code_DEFAULT int32

func (p *CreateEvaluationSetOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return CreateEvaluationSetOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var CreateEvaluationSetOApiResponse_Msg_DEFAULT string

func (p *CreateEvaluationSetOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return CreateEvaluationSetOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var CreateEvaluationSetOApiResponse_Data_DEFAULT *CreateEvaluationSetOpenAPIData

func (p *CreateEvaluationSetOApiResponse) GetData() (v *CreateEvaluationSetOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return CreateEvaluationSetOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var CreateEvaluationSetOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateEvaluationSetOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateEvaluationSetOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateEvaluationSetOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *CreateEvaluationSetOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *CreateEvaluationSetOApiResponse) SetData(val *CreateEvaluationSetOpenAPIData) {
	p.Data = val
}
func (p *CreateEvaluationSetOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateEvaluationSetOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *CreateEvaluationSetOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *CreateEvaluationSetOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *CreateEvaluationSetOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *CreateEvaluationSetOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateEvaluationSetOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *CreateEvaluationSetOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *CreateEvaluationSetOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *CreateEvaluationSetOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateEvaluationSetOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluationSetOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluationSetOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateEvaluationSetOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluationSetOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetOApiResponse(%+v)", *p)

}

func (p *CreateEvaluationSetOApiResponse) DeepEqual(ano *CreateEvaluationSetOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOApiResponse) Field3DeepEqual(src *CreateEvaluationSetOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluationSetOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluationSetOpenAPIData struct {
	EvaluationSetID *int64 `thrift:"evaluation_set_id,1,optional" frugal:"1,optional,i64" json:"evaluation_set_id" form:"evaluation_set_id" query:"evaluation_set_id"`
}

func NewCreateEvaluationSetOpenAPIData() *CreateEvaluationSetOpenAPIData {
	return &CreateEvaluationSetOpenAPIData{}
}

func (p *CreateEvaluationSetOpenAPIData) InitDefault() {
}

var CreateEvaluationSetOpenAPIData_EvaluationSetID_DEFAULT int64

func (p *CreateEvaluationSetOpenAPIData) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return CreateEvaluationSetOpenAPIData_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}
func (p *CreateEvaluationSetOpenAPIData) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}

var fieldIDToName_CreateEvaluationSetOpenAPIData = map[int16]string{
	1: "evaluation_set_id",
}

func (p *CreateEvaluationSetOpenAPIData) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *CreateEvaluationSetOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetOpenAPIData) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}

func (p *CreateEvaluationSetOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEvaluationSetOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetOpenAPIData(%+v)", *p)

}

func (p *CreateEvaluationSetOpenAPIData) DeepEqual(ano *CreateEvaluationSetOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluationSetID) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetOpenAPIData) Field1DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}

// 1.2 获取评测集详情
type GetEvaluationSetOApiRequest struct {
	WorkspaceID     *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" query:"workspace_id" `
	EvaluationSetID *int64     `thrift:"evaluation_set_id,2,optional" frugal:"2,optional,i64" json:"evaluation_set_id" path:"evaluation_set_id" `
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetEvaluationSetOApiRequest() *GetEvaluationSetOApiRequest {
	return &GetEvaluationSetOApiRequest{}
}

func (p *GetEvaluationSetOApiRequest) InitDefault() {
}

var GetEvaluationSetOApiRequest_WorkspaceID_DEFAULT int64

func (p *GetEvaluationSetOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return GetEvaluationSetOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var GetEvaluationSetOApiRequest_EvaluationSetID_DEFAULT int64

func (p *GetEvaluationSetOApiRequest) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return GetEvaluationSetOApiRequest_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var GetEvaluationSetOApiRequest_Base_DEFAULT *base.Base

func (p *GetEvaluationSetOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetEvaluationSetOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetEvaluationSetOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *GetEvaluationSetOApiRequest) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *GetEvaluationSetOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetEvaluationSetOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	255: "Base",
}

func (p *GetEvaluationSetOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *GetEvaluationSetOApiRequest) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *GetEvaluationSetOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetEvaluationSetOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluationSetOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluationSetOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetEvaluationSetOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *GetEvaluationSetOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetEvaluationSetOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluationSetOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluationSetOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluationSetOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluationSetOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluationSetOApiRequest(%+v)", *p)

}

func (p *GetEvaluationSetOApiRequest) DeepEqual(ano *GetEvaluationSetOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetEvaluationSetOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *GetEvaluationSetOApiRequest) Field2DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *GetEvaluationSetOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluationSetOApiResponse struct {
	Code     *int32                       `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                      `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *GetEvaluationSetOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,GetEvaluationSetOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp               `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetEvaluationSetOApiResponse() *GetEvaluationSetOApiResponse {
	return &GetEvaluationSetOApiResponse{}
}

func (p *GetEvaluationSetOApiResponse) InitDefault() {
}

var GetEvaluationSetOApiResponse_Code_DEFAULT int32

func (p *GetEvaluationSetOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return GetEvaluationSetOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var GetEvaluationSetOApiResponse_Msg_DEFAULT string

func (p *GetEvaluationSetOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return GetEvaluationSetOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var GetEvaluationSetOApiResponse_Data_DEFAULT *GetEvaluationSetOpenAPIData

func (p *GetEvaluationSetOApiResponse) GetData() (v *GetEvaluationSetOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return GetEvaluationSetOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var GetEvaluationSetOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetEvaluationSetOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetEvaluationSetOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetEvaluationSetOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *GetEvaluationSetOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *GetEvaluationSetOApiResponse) SetData(val *GetEvaluationSetOpenAPIData) {
	p.Data = val
}
func (p *GetEvaluationSetOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetEvaluationSetOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *GetEvaluationSetOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *GetEvaluationSetOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *GetEvaluationSetOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetEvaluationSetOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetEvaluationSetOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluationSetOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluationSetOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *GetEvaluationSetOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *GetEvaluationSetOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewGetEvaluationSetOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *GetEvaluationSetOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetEvaluationSetOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluationSetOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluationSetOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluationSetOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetEvaluationSetOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluationSetOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluationSetOApiResponse(%+v)", *p)

}

func (p *GetEvaluationSetOApiResponse) DeepEqual(ano *GetEvaluationSetOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetEvaluationSetOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *GetEvaluationSetOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *GetEvaluationSetOApiResponse) Field3DeepEqual(src *GetEvaluationSetOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetEvaluationSetOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluationSetOpenAPIData struct {
	EvaluationSet *eval_set.EvaluationSet `thrift:"evaluation_set,1,optional" frugal:"1,optional,eval_set.EvaluationSet" form:"evaluation_set" json:"evaluation_set,omitempty" query:"evaluation_set"`
}

func NewGetEvaluationSetOpenAPIData() *GetEvaluationSetOpenAPIData {
	return &GetEvaluationSetOpenAPIData{}
}

func (p *GetEvaluationSetOpenAPIData) InitDefault() {
}

var GetEvaluationSetOpenAPIData_EvaluationSet_DEFAULT *eval_set.EvaluationSet

func (p *GetEvaluationSetOpenAPIData) GetEvaluationSet() (v *eval_set.EvaluationSet) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSet() {
		return GetEvaluationSetOpenAPIData_EvaluationSet_DEFAULT
	}
	return p.EvaluationSet
}
func (p *GetEvaluationSetOpenAPIData) SetEvaluationSet(val *eval_set.EvaluationSet) {
	p.EvaluationSet = val
}

var fieldIDToName_GetEvaluationSetOpenAPIData = map[int16]string{
	1: "evaluation_set",
}

func (p *GetEvaluationSetOpenAPIData) IsSetEvaluationSet() bool {
	return p.EvaluationSet != nil
}

func (p *GetEvaluationSetOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluationSetOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluationSetOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_field := eval_set.NewEvaluationSet()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluationSet = _field
	return nil
}

func (p *GetEvaluationSetOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluationSetOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSet() {
		if err = oprot.WriteFieldBegin("evaluation_set", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluationSet.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetEvaluationSetOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluationSetOpenAPIData(%+v)", *p)

}

func (p *GetEvaluationSetOpenAPIData) DeepEqual(ano *GetEvaluationSetOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluationSet) {
		return false
	}
	return true
}

func (p *GetEvaluationSetOpenAPIData) Field1DeepEqual(src *eval_set.EvaluationSet) bool {

	if !p.EvaluationSet.DeepEqual(src) {
		return false
	}
	return true
}

// 1.3 查询评测集列表
type ListEvaluationSetsOApiRequest struct {
	WorkspaceID      *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" query:"workspace_id" `
	Name             *string    `thrift:"name,2,optional" frugal:"2,optional,string" json:"name,omitempty" query:"name"`
	Creators         []string   `thrift:"creators,3,optional" frugal:"3,optional,list<string>" json:"creators,omitempty" query:"creators"`
	EvaluationSetIds []int64    `thrift:"evaluation_set_ids,4,optional" frugal:"4,optional,list<i64>" json:"evaluation_set_ids" query:"evaluation_set_ids" `
	PageToken        *string    `thrift:"page_token,100,optional" frugal:"100,optional,string" json:"page_token,omitempty" query:"page_token"`
	PageSize         *int32     `thrift:"page_size,101,optional" frugal:"101,optional,i32" json:"page_size,omitempty" query:"page_size"`
	Base             *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListEvaluationSetsOApiRequest() *ListEvaluationSetsOApiRequest {
	return &ListEvaluationSetsOApiRequest{}
}

func (p *ListEvaluationSetsOApiRequest) InitDefault() {
}

var ListEvaluationSetsOApiRequest_WorkspaceID_DEFAULT int64

func (p *ListEvaluationSetsOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return ListEvaluationSetsOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var ListEvaluationSetsOApiRequest_Name_DEFAULT string

func (p *ListEvaluationSetsOApiRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return ListEvaluationSetsOApiRequest_Name_DEFAULT
	}
	return *p.Name
}

var ListEvaluationSetsOApiRequest_Creators_DEFAULT []string

func (p *ListEvaluationSetsOApiRequest) GetCreators() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetCreators() {
		return ListEvaluationSetsOApiRequest_Creators_DEFAULT
	}
	return p.Creators
}

var ListEvaluationSetsOApiRequest_EvaluationSetIds_DEFAULT []int64

func (p *ListEvaluationSetsOApiRequest) GetEvaluationSetIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetIds() {
		return ListEvaluationSetsOApiRequest_EvaluationSetIds_DEFAULT
	}
	return p.EvaluationSetIds
}

var ListEvaluationSetsOApiRequest_PageToken_DEFAULT string

func (p *ListEvaluationSetsOApiRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListEvaluationSetsOApiRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListEvaluationSetsOApiRequest_PageSize_DEFAULT int32

func (p *ListEvaluationSetsOApiRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListEvaluationSetsOApiRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListEvaluationSetsOApiRequest_Base_DEFAULT *base.Base

func (p *ListEvaluationSetsOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListEvaluationSetsOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListEvaluationSetsOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *ListEvaluationSetsOApiRequest) SetName(val *string) {
	p.Name = val
}
func (p *ListEvaluationSetsOApiRequest) SetCreators(val []string) {
	p.Creators = val
}
func (p *ListEvaluationSetsOApiRequest) SetEvaluationSetIds(val []int64) {
	p.EvaluationSetIds = val
}
func (p *ListEvaluationSetsOApiRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListEvaluationSetsOApiRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListEvaluationSetsOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListEvaluationSetsOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "name",
	3:   "creators",
	4:   "evaluation_set_ids",
	100: "page_token",
	101: "page_size",
	255: "Base",
}

func (p *ListEvaluationSetsOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *ListEvaluationSetsOApiRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *ListEvaluationSetsOApiRequest) IsSetCreators() bool {
	return p.Creators != nil
}

func (p *ListEvaluationSetsOApiRequest) IsSetEvaluationSetIds() bool {
	return p.EvaluationSetIds != nil
}

func (p *ListEvaluationSetsOApiRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListEvaluationSetsOApiRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListEvaluationSetsOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListEvaluationSetsOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetsOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetsOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListEvaluationSetsOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *ListEvaluationSetsOApiRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Creators = _field
	return nil
}
func (p *ListEvaluationSetsOApiRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluationSetIds = _field
	return nil
}
func (p *ListEvaluationSetsOApiRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListEvaluationSetsOApiRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListEvaluationSetsOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListEvaluationSetsOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetsOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetsOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreators() {
		if err = oprot.WriteFieldBegin("creators", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Creators)); err != nil {
			return err
		}
		for _, v := range p.Creators {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetIds() {
		if err = oprot.WriteFieldBegin("evaluation_set_ids", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.EvaluationSetIds)); err != nil {
			return err
		}
		for _, v := range p.EvaluationSetIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetsOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetsOApiRequest(%+v)", *p)

}

func (p *ListEvaluationSetsOApiRequest) DeepEqual(ano *ListEvaluationSetsOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Creators) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluationSetIds) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListEvaluationSetsOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOApiRequest) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOApiRequest) Field3DeepEqual(src []string) bool {

	if len(p.Creators) != len(src) {
		return false
	}
	for i, v := range p.Creators {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetsOApiRequest) Field4DeepEqual(src []int64) bool {

	if len(p.EvaluationSetIds) != len(src) {
		return false
	}
	for i, v := range p.EvaluationSetIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetsOApiRequest) Field100DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOApiRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetsOApiResponse struct {
	Code     *int32                         `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                        `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *ListEvaluationSetsOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,ListEvaluationSetsOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                 `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListEvaluationSetsOApiResponse() *ListEvaluationSetsOApiResponse {
	return &ListEvaluationSetsOApiResponse{}
}

func (p *ListEvaluationSetsOApiResponse) InitDefault() {
}

var ListEvaluationSetsOApiResponse_Code_DEFAULT int32

func (p *ListEvaluationSetsOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return ListEvaluationSetsOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var ListEvaluationSetsOApiResponse_Msg_DEFAULT string

func (p *ListEvaluationSetsOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return ListEvaluationSetsOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var ListEvaluationSetsOApiResponse_Data_DEFAULT *ListEvaluationSetsOpenAPIData

func (p *ListEvaluationSetsOApiResponse) GetData() (v *ListEvaluationSetsOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return ListEvaluationSetsOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var ListEvaluationSetsOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListEvaluationSetsOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListEvaluationSetsOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListEvaluationSetsOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *ListEvaluationSetsOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *ListEvaluationSetsOApiResponse) SetData(val *ListEvaluationSetsOpenAPIData) {
	p.Data = val
}
func (p *ListEvaluationSetsOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListEvaluationSetsOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *ListEvaluationSetsOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *ListEvaluationSetsOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *ListEvaluationSetsOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *ListEvaluationSetsOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListEvaluationSetsOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetsOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetsOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *ListEvaluationSetsOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *ListEvaluationSetsOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetsOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *ListEvaluationSetsOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListEvaluationSetsOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetsOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetsOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetsOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetsOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetsOApiResponse(%+v)", *p)

}

func (p *ListEvaluationSetsOApiResponse) DeepEqual(ano *ListEvaluationSetsOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListEvaluationSetsOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOApiResponse) Field3DeepEqual(src *ListEvaluationSetsOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetsOpenAPIData struct {
	// 列表
	Sets          []*eval_set.EvaluationSet `thrift:"sets,1,optional" frugal:"1,optional,list<eval_set.EvaluationSet>" form:"sets" json:"sets,omitempty" query:"sets"`
	HasMore       *bool                     `thrift:"has_more,100,optional" frugal:"100,optional,bool" form:"has_more" json:"has_more,omitempty" query:"has_more"`
	NextPageToken *string                   `thrift:"next_page_token,101,optional" frugal:"101,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	Total         *int64                    `thrift:"total,102,optional" frugal:"102,optional,i64" form:"total" json:"total,omitempty" query:"total"`
}

func NewListEvaluationSetsOpenAPIData() *ListEvaluationSetsOpenAPIData {
	return &ListEvaluationSetsOpenAPIData{}
}

func (p *ListEvaluationSetsOpenAPIData) InitDefault() {
}

var ListEvaluationSetsOpenAPIData_Sets_DEFAULT []*eval_set.EvaluationSet

func (p *ListEvaluationSetsOpenAPIData) GetSets() (v []*eval_set.EvaluationSet) {
	if p == nil {
		return
	}
	if !p.IsSetSets() {
		return ListEvaluationSetsOpenAPIData_Sets_DEFAULT
	}
	return p.Sets
}

var ListEvaluationSetsOpenAPIData_HasMore_DEFAULT bool

func (p *ListEvaluationSetsOpenAPIData) GetHasMore() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetHasMore() {
		return ListEvaluationSetsOpenAPIData_HasMore_DEFAULT
	}
	return *p.HasMore
}

var ListEvaluationSetsOpenAPIData_NextPageToken_DEFAULT string

func (p *ListEvaluationSetsOpenAPIData) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListEvaluationSetsOpenAPIData_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListEvaluationSetsOpenAPIData_Total_DEFAULT int64

func (p *ListEvaluationSetsOpenAPIData) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListEvaluationSetsOpenAPIData_Total_DEFAULT
	}
	return *p.Total
}
func (p *ListEvaluationSetsOpenAPIData) SetSets(val []*eval_set.EvaluationSet) {
	p.Sets = val
}
func (p *ListEvaluationSetsOpenAPIData) SetHasMore(val *bool) {
	p.HasMore = val
}
func (p *ListEvaluationSetsOpenAPIData) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListEvaluationSetsOpenAPIData) SetTotal(val *int64) {
	p.Total = val
}

var fieldIDToName_ListEvaluationSetsOpenAPIData = map[int16]string{
	1:   "sets",
	100: "has_more",
	101: "next_page_token",
	102: "total",
}

func (p *ListEvaluationSetsOpenAPIData) IsSetSets() bool {
	return p.Sets != nil
}

func (p *ListEvaluationSetsOpenAPIData) IsSetHasMore() bool {
	return p.HasMore != nil
}

func (p *ListEvaluationSetsOpenAPIData) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListEvaluationSetsOpenAPIData) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListEvaluationSetsOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetsOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetsOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSet, 0, size)
	values := make([]eval_set.EvaluationSet, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Sets = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIData) ReadField100(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HasMore = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIData) ReadField101(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListEvaluationSetsOpenAPIData) ReadField102(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}

func (p *ListEvaluationSetsOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetsOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetsOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSets() {
		if err = oprot.WriteFieldBegin("sets", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Sets)); err != nil {
			return err
		}
		for _, v := range p.Sets {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIData) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasMore() {
		if err = oprot.WriteFieldBegin("has_more", thrift.BOOL, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.HasMore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIData) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluationSetsOpenAPIData) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}

func (p *ListEvaluationSetsOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetsOpenAPIData(%+v)", *p)

}

func (p *ListEvaluationSetsOpenAPIData) DeepEqual(ano *ListEvaluationSetsOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Sets) {
		return false
	}
	if !p.Field100DeepEqual(ano.HasMore) {
		return false
	}
	if !p.Field101DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field102DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *ListEvaluationSetsOpenAPIData) Field1DeepEqual(src []*eval_set.EvaluationSet) bool {

	if len(p.Sets) != len(src) {
		return false
	}
	for i, v := range p.Sets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIData) Field100DeepEqual(src *bool) bool {

	if p.HasMore == src {
		return true
	} else if p.HasMore == nil || src == nil {
		return false
	}
	if *p.HasMore != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIData) Field101DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetsOpenAPIData) Field102DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}

// 1.4 创建评测集版本
type CreateEvaluationSetVersionOApiRequest struct {
	WorkspaceID     *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" `
	EvaluationSetID *int64     `thrift:"evaluation_set_id,2,optional" frugal:"2,optional,i64" json:"evaluation_set_id" path:"evaluation_set_id" `
	Version         *string    `thrift:"version,3,optional" frugal:"3,optional,string" form:"version" json:"version,omitempty"`
	Description     *string    `thrift:"description,4,optional" frugal:"4,optional,string" form:"description" json:"description,omitempty"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateEvaluationSetVersionOApiRequest() *CreateEvaluationSetVersionOApiRequest {
	return &CreateEvaluationSetVersionOApiRequest{}
}

func (p *CreateEvaluationSetVersionOApiRequest) InitDefault() {
}

var CreateEvaluationSetVersionOApiRequest_WorkspaceID_DEFAULT int64

func (p *CreateEvaluationSetVersionOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return CreateEvaluationSetVersionOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var CreateEvaluationSetVersionOApiRequest_EvaluationSetID_DEFAULT int64

func (p *CreateEvaluationSetVersionOApiRequest) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return CreateEvaluationSetVersionOApiRequest_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var CreateEvaluationSetVersionOApiRequest_Version_DEFAULT string

func (p *CreateEvaluationSetVersionOApiRequest) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return CreateEvaluationSetVersionOApiRequest_Version_DEFAULT
	}
	return *p.Version
}

var CreateEvaluationSetVersionOApiRequest_Description_DEFAULT string

func (p *CreateEvaluationSetVersionOApiRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return CreateEvaluationSetVersionOApiRequest_Description_DEFAULT
	}
	return *p.Description
}

var CreateEvaluationSetVersionOApiRequest_Base_DEFAULT *base.Base

func (p *CreateEvaluationSetVersionOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateEvaluationSetVersionOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateEvaluationSetVersionOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *CreateEvaluationSetVersionOApiRequest) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *CreateEvaluationSetVersionOApiRequest) SetVersion(val *string) {
	p.Version = val
}
func (p *CreateEvaluationSetVersionOApiRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *CreateEvaluationSetVersionOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateEvaluationSetVersionOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "version",
	4:   "description",
	255: "Base",
}

func (p *CreateEvaluationSetVersionOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *CreateEvaluationSetVersionOApiRequest) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *CreateEvaluationSetVersionOApiRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *CreateEvaluationSetVersionOApiRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CreateEvaluationSetVersionOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateEvaluationSetVersionOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetVersionOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateEvaluationSetVersionOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *CreateEvaluationSetVersionOApiRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *CreateEvaluationSetVersionOApiRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *CreateEvaluationSetVersionOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateEvaluationSetVersionOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersionOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOApiRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetVersionOApiRequest(%+v)", *p)

}

func (p *CreateEvaluationSetVersionOApiRequest) DeepEqual(ano *CreateEvaluationSetVersionOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetVersionOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOApiRequest) Field2DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOApiRequest) Field3DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOApiRequest) Field4DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluationSetVersionOApiResponse struct {
	Code     *int32                                 `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                                `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *CreateEvaluationSetVersionOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,CreateEvaluationSetVersionOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                         `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateEvaluationSetVersionOApiResponse() *CreateEvaluationSetVersionOApiResponse {
	return &CreateEvaluationSetVersionOApiResponse{}
}

func (p *CreateEvaluationSetVersionOApiResponse) InitDefault() {
}

var CreateEvaluationSetVersionOApiResponse_Code_DEFAULT int32

func (p *CreateEvaluationSetVersionOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return CreateEvaluationSetVersionOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var CreateEvaluationSetVersionOApiResponse_Msg_DEFAULT string

func (p *CreateEvaluationSetVersionOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return CreateEvaluationSetVersionOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var CreateEvaluationSetVersionOApiResponse_Data_DEFAULT *CreateEvaluationSetVersionOpenAPIData

func (p *CreateEvaluationSetVersionOApiResponse) GetData() (v *CreateEvaluationSetVersionOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return CreateEvaluationSetVersionOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var CreateEvaluationSetVersionOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateEvaluationSetVersionOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateEvaluationSetVersionOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateEvaluationSetVersionOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *CreateEvaluationSetVersionOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *CreateEvaluationSetVersionOApiResponse) SetData(val *CreateEvaluationSetVersionOpenAPIData) {
	p.Data = val
}
func (p *CreateEvaluationSetVersionOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateEvaluationSetVersionOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *CreateEvaluationSetVersionOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *CreateEvaluationSetVersionOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *CreateEvaluationSetVersionOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *CreateEvaluationSetVersionOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateEvaluationSetVersionOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetVersionOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *CreateEvaluationSetVersionOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *CreateEvaluationSetVersionOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetVersionOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *CreateEvaluationSetVersionOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateEvaluationSetVersionOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersionOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateEvaluationSetVersionOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetVersionOApiResponse(%+v)", *p)

}

func (p *CreateEvaluationSetVersionOApiResponse) DeepEqual(ano *CreateEvaluationSetVersionOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetVersionOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOApiResponse) Field3DeepEqual(src *CreateEvaluationSetVersionOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluationSetVersionOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluationSetVersionOpenAPIData struct {
	VersionID *int64 `thrift:"version_id,1,optional" frugal:"1,optional,i64" json:"version_id" form:"version_id" query:"version_id"`
}

func NewCreateEvaluationSetVersionOpenAPIData() *CreateEvaluationSetVersionOpenAPIData {
	return &CreateEvaluationSetVersionOpenAPIData{}
}

func (p *CreateEvaluationSetVersionOpenAPIData) InitDefault() {
}

var CreateEvaluationSetVersionOpenAPIData_VersionID_DEFAULT int64

func (p *CreateEvaluationSetVersionOpenAPIData) GetVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetVersionID() {
		return CreateEvaluationSetVersionOpenAPIData_VersionID_DEFAULT
	}
	return *p.VersionID
}
func (p *CreateEvaluationSetVersionOpenAPIData) SetVersionID(val *int64) {
	p.VersionID = val
}

var fieldIDToName_CreateEvaluationSetVersionOpenAPIData = map[int16]string{
	1: "version_id",
}

func (p *CreateEvaluationSetVersionOpenAPIData) IsSetVersionID() bool {
	return p.VersionID != nil
}

func (p *CreateEvaluationSetVersionOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluationSetVersionOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOpenAPIData) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionID = _field
	return nil
}

func (p *CreateEvaluationSetVersionOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersionOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionID() {
		if err = oprot.WriteFieldBegin("version_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEvaluationSetVersionOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluationSetVersionOpenAPIData(%+v)", *p)

}

func (p *CreateEvaluationSetVersionOpenAPIData) DeepEqual(ano *CreateEvaluationSetVersionOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VersionID) {
		return false
	}
	return true
}

func (p *CreateEvaluationSetVersionOpenAPIData) Field1DeepEqual(src *int64) bool {

	if p.VersionID == src {
		return true
	} else if p.VersionID == nil || src == nil {
		return false
	}
	if *p.VersionID != *src {
		return false
	}
	return true
}

// 1.5 批量添加评测集数据
type BatchCreateEvaluationSetItemsOApiRequest struct {
	WorkspaceID     *int64                        `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" `
	EvaluationSetID *int64                        `thrift:"evaluation_set_id,2,optional" frugal:"2,optional,i64" json:"evaluation_set_id" path:"evaluation_set_id" `
	Items           []*eval_set.EvaluationSetItem `thrift:"items,3,optional" frugal:"3,optional,list<eval_set.EvaluationSetItem>" form:"items" json:"items,omitempty"`
	// items 中存在非法数据时，默认所有数据写入失败；设置 skipInvalidItems=true 则会跳过无效数据，写入有效数据
	IsSkipInvalidItems *bool `thrift:"is_skip_invalid_items,4,optional" frugal:"4,optional,bool" form:"is_skip_invalid_items" json:"is_skip_invalid_items,omitempty"`
	// 批量写入 items 如果超出数据集容量限制，默认所有数据写入失败；设置 partialAdd=true 会写入不超出容量限制的前 N 条
	IsAllowPartialAdd *bool      `thrift:"is_allow_partial_add,5,optional" frugal:"5,optional,bool" form:"is_allow_partial_add" json:"is_allow_partial_add,omitempty"`
	Base              *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchCreateEvaluationSetItemsOApiRequest() *BatchCreateEvaluationSetItemsOApiRequest {
	return &BatchCreateEvaluationSetItemsOApiRequest{}
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) InitDefault() {
}

var BatchCreateEvaluationSetItemsOApiRequest_WorkspaceID_DEFAULT int64

func (p *BatchCreateEvaluationSetItemsOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return BatchCreateEvaluationSetItemsOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var BatchCreateEvaluationSetItemsOApiRequest_EvaluationSetID_DEFAULT int64

func (p *BatchCreateEvaluationSetItemsOApiRequest) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return BatchCreateEvaluationSetItemsOApiRequest_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var BatchCreateEvaluationSetItemsOApiRequest_Items_DEFAULT []*eval_set.EvaluationSetItem

func (p *BatchCreateEvaluationSetItemsOApiRequest) GetItems() (v []*eval_set.EvaluationSetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return BatchCreateEvaluationSetItemsOApiRequest_Items_DEFAULT
	}
	return p.Items
}

var BatchCreateEvaluationSetItemsOApiRequest_IsSkipInvalidItems_DEFAULT bool

func (p *BatchCreateEvaluationSetItemsOApiRequest) GetIsSkipInvalidItems() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsSkipInvalidItems() {
		return BatchCreateEvaluationSetItemsOApiRequest_IsSkipInvalidItems_DEFAULT
	}
	return *p.IsSkipInvalidItems
}

var BatchCreateEvaluationSetItemsOApiRequest_IsAllowPartialAdd_DEFAULT bool

func (p *BatchCreateEvaluationSetItemsOApiRequest) GetIsAllowPartialAdd() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsAllowPartialAdd() {
		return BatchCreateEvaluationSetItemsOApiRequest_IsAllowPartialAdd_DEFAULT
	}
	return *p.IsAllowPartialAdd
}

var BatchCreateEvaluationSetItemsOApiRequest_Base_DEFAULT *base.Base

func (p *BatchCreateEvaluationSetItemsOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchCreateEvaluationSetItemsOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) SetItems(val []*eval_set.EvaluationSetItem) {
	p.Items = val
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) SetIsSkipInvalidItems(val *bool) {
	p.IsSkipInvalidItems = val
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) SetIsAllowPartialAdd(val *bool) {
	p.IsAllowPartialAdd = val
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchCreateEvaluationSetItemsOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "items",
	4:   "is_skip_invalid_items",
	5:   "is_allow_partial_add",
	255: "Base",
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) IsSetItems() bool {
	return p.Items != nil
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) IsSetIsSkipInvalidItems() bool {
	return p.IsSkipInvalidItems != nil
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) IsSetIsAllowPartialAdd() bool {
	return p.IsAllowPartialAdd != nil
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchCreateEvaluationSetItemsOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSetItem, 0, size)
	values := make([]eval_set.EvaluationSetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsSkipInvalidItems = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsAllowPartialAdd = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItemsOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsSkipInvalidItems() {
		if err = oprot.WriteFieldBegin("is_skip_invalid_items", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsSkipInvalidItems); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsAllowPartialAdd() {
		if err = oprot.WriteFieldBegin("is_allow_partial_add", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsAllowPartialAdd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchCreateEvaluationSetItemsOApiRequest(%+v)", *p)

}

func (p *BatchCreateEvaluationSetItemsOApiRequest) DeepEqual(ano *BatchCreateEvaluationSetItemsOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Items) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsSkipInvalidItems) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsAllowPartialAdd) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchCreateEvaluationSetItemsOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) Field2DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) Field3DeepEqual(src []*eval_set.EvaluationSetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) Field4DeepEqual(src *bool) bool {

	if p.IsSkipInvalidItems == src {
		return true
	} else if p.IsSkipInvalidItems == nil || src == nil {
		return false
	}
	if *p.IsSkipInvalidItems != *src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) Field5DeepEqual(src *bool) bool {

	if p.IsAllowPartialAdd == src {
		return true
	} else if p.IsAllowPartialAdd == nil || src == nil {
		return false
	}
	if *p.IsAllowPartialAdd != *src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchCreateEvaluationSetItemsOApiResponse struct {
	Code     *int32                                    `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                                   `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *BatchCreateEvaluationSetItemsOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,BatchCreateEvaluationSetItemsOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchCreateEvaluationSetItemsOApiResponse() *BatchCreateEvaluationSetItemsOApiResponse {
	return &BatchCreateEvaluationSetItemsOApiResponse{}
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) InitDefault() {
}

var BatchCreateEvaluationSetItemsOApiResponse_Code_DEFAULT int32

func (p *BatchCreateEvaluationSetItemsOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return BatchCreateEvaluationSetItemsOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var BatchCreateEvaluationSetItemsOApiResponse_Msg_DEFAULT string

func (p *BatchCreateEvaluationSetItemsOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return BatchCreateEvaluationSetItemsOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var BatchCreateEvaluationSetItemsOApiResponse_Data_DEFAULT *BatchCreateEvaluationSetItemsOpenAPIData

func (p *BatchCreateEvaluationSetItemsOApiResponse) GetData() (v *BatchCreateEvaluationSetItemsOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return BatchCreateEvaluationSetItemsOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var BatchCreateEvaluationSetItemsOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchCreateEvaluationSetItemsOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchCreateEvaluationSetItemsOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) SetData(val *BatchCreateEvaluationSetItemsOpenAPIData) {
	p.Data = val
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchCreateEvaluationSetItemsOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchCreateEvaluationSetItemsOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewBatchCreateEvaluationSetItemsOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItemsOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchCreateEvaluationSetItemsOApiResponse(%+v)", *p)

}

func (p *BatchCreateEvaluationSetItemsOApiResponse) DeepEqual(ano *BatchCreateEvaluationSetItemsOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchCreateEvaluationSetItemsOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) Field3DeepEqual(src *BatchCreateEvaluationSetItemsOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchCreateEvaluationSetItemsOpenAPIData struct {
	// key: item 在 items 中的索引，value: item_id
	AddedItems map[int64]int64            `thrift:"added_items,1,optional" frugal:"1,optional,map<i64:i64>" json:"added_items" form:"added_items" query:"added_items"`
	Errors     []*eval_set.ItemErrorGroup `thrift:"errors,2,optional" frugal:"2,optional,list<eval_set.ItemErrorGroup>" form:"errors" json:"errors,omitempty" query:"errors"`
}

func NewBatchCreateEvaluationSetItemsOpenAPIData() *BatchCreateEvaluationSetItemsOpenAPIData {
	return &BatchCreateEvaluationSetItemsOpenAPIData{}
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) InitDefault() {
}

var BatchCreateEvaluationSetItemsOpenAPIData_AddedItems_DEFAULT map[int64]int64

func (p *BatchCreateEvaluationSetItemsOpenAPIData) GetAddedItems() (v map[int64]int64) {
	if p == nil {
		return
	}
	if !p.IsSetAddedItems() {
		return BatchCreateEvaluationSetItemsOpenAPIData_AddedItems_DEFAULT
	}
	return p.AddedItems
}

var BatchCreateEvaluationSetItemsOpenAPIData_Errors_DEFAULT []*eval_set.ItemErrorGroup

func (p *BatchCreateEvaluationSetItemsOpenAPIData) GetErrors() (v []*eval_set.ItemErrorGroup) {
	if p == nil {
		return
	}
	if !p.IsSetErrors() {
		return BatchCreateEvaluationSetItemsOpenAPIData_Errors_DEFAULT
	}
	return p.Errors
}
func (p *BatchCreateEvaluationSetItemsOpenAPIData) SetAddedItems(val map[int64]int64) {
	p.AddedItems = val
}
func (p *BatchCreateEvaluationSetItemsOpenAPIData) SetErrors(val []*eval_set.ItemErrorGroup) {
	p.Errors = val
}

var fieldIDToName_BatchCreateEvaluationSetItemsOpenAPIData = map[int16]string{
	1: "added_items",
	2: "errors",
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) IsSetAddedItems() bool {
	return p.AddedItems != nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) IsSetErrors() bool {
	return p.Errors != nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchCreateEvaluationSetItemsOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]int64, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.AddedItems = _field
	return nil
}
func (p *BatchCreateEvaluationSetItemsOpenAPIData) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.ItemErrorGroup, 0, size)
	values := make([]eval_set.ItemErrorGroup, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Errors = _field
	return nil
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItemsOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddedItems() {
		if err = oprot.WriteFieldBegin("added_items", thrift.MAP, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.I64, len(p.AddedItems)); err != nil {
			return err
		}
		for k, v := range p.AddedItems {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchCreateEvaluationSetItemsOpenAPIData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrors() {
		if err = oprot.WriteFieldBegin("errors", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Errors)); err != nil {
			return err
		}
		for _, v := range p.Errors {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchCreateEvaluationSetItemsOpenAPIData(%+v)", *p)

}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) DeepEqual(ano *BatchCreateEvaluationSetItemsOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AddedItems) {
		return false
	}
	if !p.Field2DeepEqual(ano.Errors) {
		return false
	}
	return true
}

func (p *BatchCreateEvaluationSetItemsOpenAPIData) Field1DeepEqual(src map[int64]int64) bool {

	if len(p.AddedItems) != len(src) {
		return false
	}
	for k, v := range p.AddedItems {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchCreateEvaluationSetItemsOpenAPIData) Field2DeepEqual(src []*eval_set.ItemErrorGroup) bool {

	if len(p.Errors) != len(src) {
		return false
	}
	for i, v := range p.Errors {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// 1.6 批量更新评测集数据
type BatchUpdateEvaluationSetItemsOApiRequest struct {
	WorkspaceID        *int64                        `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" `
	EvaluationSetID    *int64                        `thrift:"evaluation_set_id,2,optional" frugal:"2,optional,i64" json:"evaluation_set_id" path:"evaluation_set_id" `
	Items              []*eval_set.EvaluationSetItem `thrift:"items,3,optional" frugal:"3,optional,list<eval_set.EvaluationSetItem>" form:"items" json:"items,omitempty"`
	IsSkipInvalidItems *bool                         `thrift:"is_skip_invalid_items,4,optional" frugal:"4,optional,bool" form:"is_skip_invalid_items" json:"is_skip_invalid_items,omitempty"`
	Base               *base.Base                    `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchUpdateEvaluationSetItemsOApiRequest() *BatchUpdateEvaluationSetItemsOApiRequest {
	return &BatchUpdateEvaluationSetItemsOApiRequest{}
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) InitDefault() {
}

var BatchUpdateEvaluationSetItemsOApiRequest_WorkspaceID_DEFAULT int64

func (p *BatchUpdateEvaluationSetItemsOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return BatchUpdateEvaluationSetItemsOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var BatchUpdateEvaluationSetItemsOApiRequest_EvaluationSetID_DEFAULT int64

func (p *BatchUpdateEvaluationSetItemsOApiRequest) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return BatchUpdateEvaluationSetItemsOApiRequest_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var BatchUpdateEvaluationSetItemsOApiRequest_Items_DEFAULT []*eval_set.EvaluationSetItem

func (p *BatchUpdateEvaluationSetItemsOApiRequest) GetItems() (v []*eval_set.EvaluationSetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return BatchUpdateEvaluationSetItemsOApiRequest_Items_DEFAULT
	}
	return p.Items
}

var BatchUpdateEvaluationSetItemsOApiRequest_IsSkipInvalidItems_DEFAULT bool

func (p *BatchUpdateEvaluationSetItemsOApiRequest) GetIsSkipInvalidItems() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsSkipInvalidItems() {
		return BatchUpdateEvaluationSetItemsOApiRequest_IsSkipInvalidItems_DEFAULT
	}
	return *p.IsSkipInvalidItems
}

var BatchUpdateEvaluationSetItemsOApiRequest_Base_DEFAULT *base.Base

func (p *BatchUpdateEvaluationSetItemsOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchUpdateEvaluationSetItemsOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) SetItems(val []*eval_set.EvaluationSetItem) {
	p.Items = val
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) SetIsSkipInvalidItems(val *bool) {
	p.IsSkipInvalidItems = val
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchUpdateEvaluationSetItemsOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "items",
	4:   "is_skip_invalid_items",
	255: "Base",
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) IsSetItems() bool {
	return p.Items != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) IsSetIsSkipInvalidItems() bool {
	return p.IsSkipInvalidItems != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchUpdateEvaluationSetItemsOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSetItem, 0, size)
	values := make([]eval_set.EvaluationSetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsSkipInvalidItems = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateEvaluationSetItemsOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsSkipInvalidItems() {
		if err = oprot.WriteFieldBegin("is_skip_invalid_items", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsSkipInvalidItems); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchUpdateEvaluationSetItemsOApiRequest(%+v)", *p)

}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) DeepEqual(ano *BatchUpdateEvaluationSetItemsOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Items) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsSkipInvalidItems) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchUpdateEvaluationSetItemsOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) Field2DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) Field3DeepEqual(src []*eval_set.EvaluationSetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) Field4DeepEqual(src *bool) bool {

	if p.IsSkipInvalidItems == src {
		return true
	} else if p.IsSkipInvalidItems == nil || src == nil {
		return false
	}
	if *p.IsSkipInvalidItems != *src {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchUpdateEvaluationSetItemsOApiResponse struct {
	Code     *int32                                    `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                                   `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *BatchUpdateEvaluationSetItemsOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,BatchUpdateEvaluationSetItemsOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchUpdateEvaluationSetItemsOApiResponse() *BatchUpdateEvaluationSetItemsOApiResponse {
	return &BatchUpdateEvaluationSetItemsOApiResponse{}
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) InitDefault() {
}

var BatchUpdateEvaluationSetItemsOApiResponse_Code_DEFAULT int32

func (p *BatchUpdateEvaluationSetItemsOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return BatchUpdateEvaluationSetItemsOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var BatchUpdateEvaluationSetItemsOApiResponse_Msg_DEFAULT string

func (p *BatchUpdateEvaluationSetItemsOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return BatchUpdateEvaluationSetItemsOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var BatchUpdateEvaluationSetItemsOApiResponse_Data_DEFAULT *BatchUpdateEvaluationSetItemsOpenAPIData

func (p *BatchUpdateEvaluationSetItemsOApiResponse) GetData() (v *BatchUpdateEvaluationSetItemsOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return BatchUpdateEvaluationSetItemsOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var BatchUpdateEvaluationSetItemsOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchUpdateEvaluationSetItemsOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchUpdateEvaluationSetItemsOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) SetData(val *BatchUpdateEvaluationSetItemsOpenAPIData) {
	p.Data = val
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchUpdateEvaluationSetItemsOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchUpdateEvaluationSetItemsOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewBatchUpdateEvaluationSetItemsOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateEvaluationSetItemsOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchUpdateEvaluationSetItemsOApiResponse(%+v)", *p)

}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) DeepEqual(ano *BatchUpdateEvaluationSetItemsOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchUpdateEvaluationSetItemsOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) Field3DeepEqual(src *BatchUpdateEvaluationSetItemsOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchUpdateEvaluationSetItemsOpenAPIData struct {
	// key: item 在 items 中的索引，value: item_id
	UpdatedItems map[int64]int64            `thrift:"updated_items,1,optional" frugal:"1,optional,map<i64:i64>" json:"updated_items" form:"updated_items" query:"updated_items"`
	Errors       []*eval_set.ItemErrorGroup `thrift:"errors,2,optional" frugal:"2,optional,list<eval_set.ItemErrorGroup>" form:"errors" json:"errors,omitempty" query:"errors"`
}

func NewBatchUpdateEvaluationSetItemsOpenAPIData() *BatchUpdateEvaluationSetItemsOpenAPIData {
	return &BatchUpdateEvaluationSetItemsOpenAPIData{}
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) InitDefault() {
}

var BatchUpdateEvaluationSetItemsOpenAPIData_UpdatedItems_DEFAULT map[int64]int64

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) GetUpdatedItems() (v map[int64]int64) {
	if p == nil {
		return
	}
	if !p.IsSetUpdatedItems() {
		return BatchUpdateEvaluationSetItemsOpenAPIData_UpdatedItems_DEFAULT
	}
	return p.UpdatedItems
}

var BatchUpdateEvaluationSetItemsOpenAPIData_Errors_DEFAULT []*eval_set.ItemErrorGroup

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) GetErrors() (v []*eval_set.ItemErrorGroup) {
	if p == nil {
		return
	}
	if !p.IsSetErrors() {
		return BatchUpdateEvaluationSetItemsOpenAPIData_Errors_DEFAULT
	}
	return p.Errors
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIData) SetUpdatedItems(val map[int64]int64) {
	p.UpdatedItems = val
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIData) SetErrors(val []*eval_set.ItemErrorGroup) {
	p.Errors = val
}

var fieldIDToName_BatchUpdateEvaluationSetItemsOpenAPIData = map[int16]string{
	1: "updated_items",
	2: "errors",
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) IsSetUpdatedItems() bool {
	return p.UpdatedItems != nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) IsSetErrors() bool {
	return p.Errors != nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchUpdateEvaluationSetItemsOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]int64, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.UpdatedItems = _field
	return nil
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIData) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.ItemErrorGroup, 0, size)
	values := make([]eval_set.ItemErrorGroup, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Errors = _field
	return nil
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateEvaluationSetItemsOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedItems() {
		if err = oprot.WriteFieldBegin("updated_items", thrift.MAP, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.I64, len(p.UpdatedItems)); err != nil {
			return err
		}
		for k, v := range p.UpdatedItems {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrors() {
		if err = oprot.WriteFieldBegin("errors", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Errors)); err != nil {
			return err
		}
		for _, v := range p.Errors {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchUpdateEvaluationSetItemsOpenAPIData(%+v)", *p)

}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) DeepEqual(ano *BatchUpdateEvaluationSetItemsOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UpdatedItems) {
		return false
	}
	if !p.Field2DeepEqual(ano.Errors) {
		return false
	}
	return true
}

func (p *BatchUpdateEvaluationSetItemsOpenAPIData) Field1DeepEqual(src map[int64]int64) bool {

	if len(p.UpdatedItems) != len(src) {
		return false
	}
	for k, v := range p.UpdatedItems {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchUpdateEvaluationSetItemsOpenAPIData) Field2DeepEqual(src []*eval_set.ItemErrorGroup) bool {

	if len(p.Errors) != len(src) {
		return false
	}
	for i, v := range p.Errors {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// 1.7 批量删除评测集数据
type BatchDeleteEvaluationSetItemsOApiRequest struct {
	WorkspaceID     *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" `
	EvaluationSetID *int64     `thrift:"evaluation_set_id,2,optional" frugal:"2,optional,i64" json:"evaluation_set_id" path:"evaluation_set_id" `
	ItemIds         []int64    `thrift:"item_ids,3,optional" frugal:"3,optional,list<i64>" json:"item_ids" form:"item_ids" `
	IsDeleteAll     *bool      `thrift:"is_delete_all,4,optional" frugal:"4,optional,bool" form:"is_delete_all" json:"is_delete_all,omitempty"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchDeleteEvaluationSetItemsOApiRequest() *BatchDeleteEvaluationSetItemsOApiRequest {
	return &BatchDeleteEvaluationSetItemsOApiRequest{}
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) InitDefault() {
}

var BatchDeleteEvaluationSetItemsOApiRequest_WorkspaceID_DEFAULT int64

func (p *BatchDeleteEvaluationSetItemsOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return BatchDeleteEvaluationSetItemsOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var BatchDeleteEvaluationSetItemsOApiRequest_EvaluationSetID_DEFAULT int64

func (p *BatchDeleteEvaluationSetItemsOApiRequest) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return BatchDeleteEvaluationSetItemsOApiRequest_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var BatchDeleteEvaluationSetItemsOApiRequest_ItemIds_DEFAULT []int64

func (p *BatchDeleteEvaluationSetItemsOApiRequest) GetItemIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemIds() {
		return BatchDeleteEvaluationSetItemsOApiRequest_ItemIds_DEFAULT
	}
	return p.ItemIds
}

var BatchDeleteEvaluationSetItemsOApiRequest_IsDeleteAll_DEFAULT bool

func (p *BatchDeleteEvaluationSetItemsOApiRequest) GetIsDeleteAll() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsDeleteAll() {
		return BatchDeleteEvaluationSetItemsOApiRequest_IsDeleteAll_DEFAULT
	}
	return *p.IsDeleteAll
}

var BatchDeleteEvaluationSetItemsOApiRequest_Base_DEFAULT *base.Base

func (p *BatchDeleteEvaluationSetItemsOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchDeleteEvaluationSetItemsOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) SetItemIds(val []int64) {
	p.ItemIds = val
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) SetIsDeleteAll(val *bool) {
	p.IsDeleteAll = val
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchDeleteEvaluationSetItemsOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "item_ids",
	4:   "is_delete_all",
	255: "Base",
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) IsSetItemIds() bool {
	return p.ItemIds != nil
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) IsSetIsDeleteAll() bool {
	return p.IsDeleteAll != nil
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchDeleteEvaluationSetItemsOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ItemIds = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsDeleteAll = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteEvaluationSetItemsOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemIds() {
		if err = oprot.WriteFieldBegin("item_ids", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ItemIds)); err != nil {
			return err
		}
		for _, v := range p.ItemIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsDeleteAll() {
		if err = oprot.WriteFieldBegin("is_delete_all", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsDeleteAll); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchDeleteEvaluationSetItemsOApiRequest(%+v)", *p)

}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) DeepEqual(ano *BatchDeleteEvaluationSetItemsOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemIds) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsDeleteAll) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchDeleteEvaluationSetItemsOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) Field2DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) Field3DeepEqual(src []int64) bool {

	if len(p.ItemIds) != len(src) {
		return false
	}
	for i, v := range p.ItemIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) Field4DeepEqual(src *bool) bool {

	if p.IsDeleteAll == src {
		return true
	} else if p.IsDeleteAll == nil || src == nil {
		return false
	}
	if *p.IsDeleteAll != *src {
		return false
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchDeleteEvaluationSetItemsOApiResponse struct {
	Code     *int32         `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string        `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchDeleteEvaluationSetItemsOApiResponse() *BatchDeleteEvaluationSetItemsOApiResponse {
	return &BatchDeleteEvaluationSetItemsOApiResponse{}
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) InitDefault() {
}

var BatchDeleteEvaluationSetItemsOApiResponse_Code_DEFAULT int32

func (p *BatchDeleteEvaluationSetItemsOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return BatchDeleteEvaluationSetItemsOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var BatchDeleteEvaluationSetItemsOApiResponse_Msg_DEFAULT string

func (p *BatchDeleteEvaluationSetItemsOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return BatchDeleteEvaluationSetItemsOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var BatchDeleteEvaluationSetItemsOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchDeleteEvaluationSetItemsOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchDeleteEvaluationSetItemsOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchDeleteEvaluationSetItemsOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	255: "BaseResp",
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchDeleteEvaluationSetItemsOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteEvaluationSetItemsOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchDeleteEvaluationSetItemsOApiResponse(%+v)", *p)

}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) DeepEqual(ano *BatchDeleteEvaluationSetItemsOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchDeleteEvaluationSetItemsOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *BatchDeleteEvaluationSetItemsOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

// 1.9 查询评测集特定版本数据
type ListEvaluationSetVersionItemsOApiRequest struct {
	WorkspaceID     *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" query:"workspace_id" `
	EvaluationSetID *int64     `thrift:"evaluation_set_id,2,optional" frugal:"2,optional,i64" json:"evaluation_set_id" path:"evaluation_set_id" `
	VersionID       *int64     `thrift:"version_id,3,optional" frugal:"3,optional,i64" json:"version_id" query:"version_id" `
	PageToken       *string    `thrift:"page_token,100,optional" frugal:"100,optional,string" json:"page_token,omitempty" query:"page_token"`
	PageSize        *int32     `thrift:"page_size,101,optional" frugal:"101,optional,i32" json:"page_size,omitempty" query:"page_size"`
	Base            *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListEvaluationSetVersionItemsOApiRequest() *ListEvaluationSetVersionItemsOApiRequest {
	return &ListEvaluationSetVersionItemsOApiRequest{}
}

func (p *ListEvaluationSetVersionItemsOApiRequest) InitDefault() {
}

var ListEvaluationSetVersionItemsOApiRequest_WorkspaceID_DEFAULT int64

func (p *ListEvaluationSetVersionItemsOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return ListEvaluationSetVersionItemsOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var ListEvaluationSetVersionItemsOApiRequest_EvaluationSetID_DEFAULT int64

func (p *ListEvaluationSetVersionItemsOApiRequest) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return ListEvaluationSetVersionItemsOApiRequest_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var ListEvaluationSetVersionItemsOApiRequest_VersionID_DEFAULT int64

func (p *ListEvaluationSetVersionItemsOApiRequest) GetVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetVersionID() {
		return ListEvaluationSetVersionItemsOApiRequest_VersionID_DEFAULT
	}
	return *p.VersionID
}

var ListEvaluationSetVersionItemsOApiRequest_PageToken_DEFAULT string

func (p *ListEvaluationSetVersionItemsOApiRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListEvaluationSetVersionItemsOApiRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListEvaluationSetVersionItemsOApiRequest_PageSize_DEFAULT int32

func (p *ListEvaluationSetVersionItemsOApiRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListEvaluationSetVersionItemsOApiRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListEvaluationSetVersionItemsOApiRequest_Base_DEFAULT *base.Base

func (p *ListEvaluationSetVersionItemsOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListEvaluationSetVersionItemsOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListEvaluationSetVersionItemsOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *ListEvaluationSetVersionItemsOApiRequest) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *ListEvaluationSetVersionItemsOApiRequest) SetVersionID(val *int64) {
	p.VersionID = val
}
func (p *ListEvaluationSetVersionItemsOApiRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListEvaluationSetVersionItemsOApiRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListEvaluationSetVersionItemsOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListEvaluationSetVersionItemsOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "version_id",
	100: "page_token",
	101: "page_size",
	255: "Base",
}

func (p *ListEvaluationSetVersionItemsOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *ListEvaluationSetVersionItemsOApiRequest) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *ListEvaluationSetVersionItemsOApiRequest) IsSetVersionID() bool {
	return p.VersionID != nil
}

func (p *ListEvaluationSetVersionItemsOApiRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListEvaluationSetVersionItemsOApiRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListEvaluationSetVersionItemsOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListEvaluationSetVersionItemsOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetVersionItemsOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionID = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListEvaluationSetVersionItemsOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionItemsOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionID() {
		if err = oprot.WriteFieldBegin("version_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOApiRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOApiRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetVersionItemsOApiRequest(%+v)", *p)

}

func (p *ListEvaluationSetVersionItemsOApiRequest) DeepEqual(ano *ListEvaluationSetVersionItemsOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.VersionID) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListEvaluationSetVersionItemsOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOApiRequest) Field2DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOApiRequest) Field3DeepEqual(src *int64) bool {

	if p.VersionID == src {
		return true
	} else if p.VersionID == nil || src == nil {
		return false
	}
	if *p.VersionID != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOApiRequest) Field100DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOApiRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetVersionItemsOApiResponse struct {
	Code     *int32                                    `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                                   `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *ListEvaluationSetVersionItemsOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,ListEvaluationSetVersionItemsOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListEvaluationSetVersionItemsOApiResponse() *ListEvaluationSetVersionItemsOApiResponse {
	return &ListEvaluationSetVersionItemsOApiResponse{}
}

func (p *ListEvaluationSetVersionItemsOApiResponse) InitDefault() {
}

var ListEvaluationSetVersionItemsOApiResponse_Code_DEFAULT int32

func (p *ListEvaluationSetVersionItemsOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return ListEvaluationSetVersionItemsOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var ListEvaluationSetVersionItemsOApiResponse_Msg_DEFAULT string

func (p *ListEvaluationSetVersionItemsOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return ListEvaluationSetVersionItemsOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var ListEvaluationSetVersionItemsOApiResponse_Data_DEFAULT *ListEvaluationSetVersionItemsOpenAPIData

func (p *ListEvaluationSetVersionItemsOApiResponse) GetData() (v *ListEvaluationSetVersionItemsOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return ListEvaluationSetVersionItemsOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var ListEvaluationSetVersionItemsOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListEvaluationSetVersionItemsOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListEvaluationSetVersionItemsOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListEvaluationSetVersionItemsOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *ListEvaluationSetVersionItemsOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *ListEvaluationSetVersionItemsOApiResponse) SetData(val *ListEvaluationSetVersionItemsOpenAPIData) {
	p.Data = val
}
func (p *ListEvaluationSetVersionItemsOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListEvaluationSetVersionItemsOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *ListEvaluationSetVersionItemsOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *ListEvaluationSetVersionItemsOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *ListEvaluationSetVersionItemsOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *ListEvaluationSetVersionItemsOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListEvaluationSetVersionItemsOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetVersionItemsOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetVersionItemsOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListEvaluationSetVersionItemsOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionItemsOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetVersionItemsOApiResponse(%+v)", *p)

}

func (p *ListEvaluationSetVersionItemsOApiResponse) DeepEqual(ano *ListEvaluationSetVersionItemsOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListEvaluationSetVersionItemsOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOApiResponse) Field3DeepEqual(src *ListEvaluationSetVersionItemsOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluationSetVersionItemsOpenAPIData struct {
	Items         []*eval_set.EvaluationSetItem `thrift:"items,1,optional" frugal:"1,optional,list<eval_set.EvaluationSetItem>" form:"items" json:"items,omitempty" query:"items"`
	HasMore       *bool                         `thrift:"has_more,100,optional" frugal:"100,optional,bool" form:"has_more" json:"has_more,omitempty" query:"has_more"`
	NextPageToken *string                       `thrift:"next_page_token,101,optional" frugal:"101,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	Total         *int64                        `thrift:"total,102,optional" frugal:"102,optional,i64" json:"total" form:"total" query:"total"`
}

func NewListEvaluationSetVersionItemsOpenAPIData() *ListEvaluationSetVersionItemsOpenAPIData {
	return &ListEvaluationSetVersionItemsOpenAPIData{}
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) InitDefault() {
}

var ListEvaluationSetVersionItemsOpenAPIData_Items_DEFAULT []*eval_set.EvaluationSetItem

func (p *ListEvaluationSetVersionItemsOpenAPIData) GetItems() (v []*eval_set.EvaluationSetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return ListEvaluationSetVersionItemsOpenAPIData_Items_DEFAULT
	}
	return p.Items
}

var ListEvaluationSetVersionItemsOpenAPIData_HasMore_DEFAULT bool

func (p *ListEvaluationSetVersionItemsOpenAPIData) GetHasMore() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetHasMore() {
		return ListEvaluationSetVersionItemsOpenAPIData_HasMore_DEFAULT
	}
	return *p.HasMore
}

var ListEvaluationSetVersionItemsOpenAPIData_NextPageToken_DEFAULT string

func (p *ListEvaluationSetVersionItemsOpenAPIData) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListEvaluationSetVersionItemsOpenAPIData_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListEvaluationSetVersionItemsOpenAPIData_Total_DEFAULT int64

func (p *ListEvaluationSetVersionItemsOpenAPIData) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListEvaluationSetVersionItemsOpenAPIData_Total_DEFAULT
	}
	return *p.Total
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) SetItems(val []*eval_set.EvaluationSetItem) {
	p.Items = val
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) SetHasMore(val *bool) {
	p.HasMore = val
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) SetTotal(val *int64) {
	p.Total = val
}

var fieldIDToName_ListEvaluationSetVersionItemsOpenAPIData = map[int16]string{
	1:   "items",
	100: "has_more",
	101: "next_page_token",
	102: "total",
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) IsSetItems() bool {
	return p.Items != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) IsSetHasMore() bool {
	return p.HasMore != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluationSetVersionItemsOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSetItem, 0, size)
	values := make([]eval_set.EvaluationSetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) ReadField100(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HasMore = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) ReadField101(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) ReadField102(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionItemsOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasMore() {
		if err = oprot.WriteFieldBegin("has_more", thrift.BOOL, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.HasMore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluationSetVersionItemsOpenAPIData(%+v)", *p)

}

func (p *ListEvaluationSetVersionItemsOpenAPIData) DeepEqual(ano *ListEvaluationSetVersionItemsOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field100DeepEqual(ano.HasMore) {
		return false
	}
	if !p.Field101DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field102DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *ListEvaluationSetVersionItemsOpenAPIData) Field1DeepEqual(src []*eval_set.EvaluationSetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) Field100DeepEqual(src *bool) bool {

	if p.HasMore == src {
		return true
	} else if p.HasMore == nil || src == nil {
		return false
	}
	if *p.HasMore != *src {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) Field101DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluationSetVersionItemsOpenAPIData) Field102DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}

// ===============================
// 评估器相关接口 (5个接口)
// ===============================
// 2.1 创建评估器
type CreateEvaluatorOApiRequest struct {
	WorkspaceID *int64               `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	Evaluator   *evaluator.Evaluator `thrift:"evaluator,2,optional" frugal:"2,optional,evaluator.Evaluator" form:"evaluator" json:"evaluator,omitempty" query:"evaluator"`
	Base        *base.Base           `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateEvaluatorOApiRequest() *CreateEvaluatorOApiRequest {
	return &CreateEvaluatorOApiRequest{}
}

func (p *CreateEvaluatorOApiRequest) InitDefault() {
}

var CreateEvaluatorOApiRequest_WorkspaceID_DEFAULT int64

func (p *CreateEvaluatorOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return CreateEvaluatorOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var CreateEvaluatorOApiRequest_Evaluator_DEFAULT *evaluator.Evaluator

func (p *CreateEvaluatorOApiRequest) GetEvaluator() (v *evaluator.Evaluator) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluator() {
		return CreateEvaluatorOApiRequest_Evaluator_DEFAULT
	}
	return p.Evaluator
}

var CreateEvaluatorOApiRequest_Base_DEFAULT *base.Base

func (p *CreateEvaluatorOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateEvaluatorOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateEvaluatorOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *CreateEvaluatorOApiRequest) SetEvaluator(val *evaluator.Evaluator) {
	p.Evaluator = val
}
func (p *CreateEvaluatorOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateEvaluatorOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator",
	255: "Base",
}

func (p *CreateEvaluatorOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *CreateEvaluatorOApiRequest) IsSetEvaluator() bool {
	return p.Evaluator != nil
}

func (p *CreateEvaluatorOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateEvaluatorOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluatorOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluatorOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateEvaluatorOApiRequest) ReadField2(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluator()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Evaluator = _field
	return nil
}
func (p *CreateEvaluatorOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateEvaluatorOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluatorOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluatorOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluatorOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluator() {
		if err = oprot.WriteFieldBegin("evaluator", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Evaluator.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluatorOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluatorOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluatorOApiRequest(%+v)", *p)

}

func (p *CreateEvaluatorOApiRequest) DeepEqual(ano *CreateEvaluatorOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Evaluator) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateEvaluatorOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *CreateEvaluatorOApiRequest) Field2DeepEqual(src *evaluator.Evaluator) bool {

	if !p.Evaluator.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluatorOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluatorOApiResponse struct {
	Code     *int32                      `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                     `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *CreateEvaluatorOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,CreateEvaluatorOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp              `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateEvaluatorOApiResponse() *CreateEvaluatorOApiResponse {
	return &CreateEvaluatorOApiResponse{}
}

func (p *CreateEvaluatorOApiResponse) InitDefault() {
}

var CreateEvaluatorOApiResponse_Code_DEFAULT int32

func (p *CreateEvaluatorOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return CreateEvaluatorOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var CreateEvaluatorOApiResponse_Msg_DEFAULT string

func (p *CreateEvaluatorOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return CreateEvaluatorOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var CreateEvaluatorOApiResponse_Data_DEFAULT *CreateEvaluatorOpenAPIData

func (p *CreateEvaluatorOApiResponse) GetData() (v *CreateEvaluatorOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return CreateEvaluatorOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var CreateEvaluatorOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateEvaluatorOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateEvaluatorOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateEvaluatorOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *CreateEvaluatorOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *CreateEvaluatorOApiResponse) SetData(val *CreateEvaluatorOpenAPIData) {
	p.Data = val
}
func (p *CreateEvaluatorOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateEvaluatorOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *CreateEvaluatorOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *CreateEvaluatorOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *CreateEvaluatorOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *CreateEvaluatorOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateEvaluatorOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluatorOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluatorOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *CreateEvaluatorOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *CreateEvaluatorOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluatorOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *CreateEvaluatorOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateEvaluatorOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluatorOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluatorOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluatorOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvaluatorOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateEvaluatorOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluatorOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluatorOApiResponse(%+v)", *p)

}

func (p *CreateEvaluatorOApiResponse) DeepEqual(ano *CreateEvaluatorOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateEvaluatorOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *CreateEvaluatorOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluatorOApiResponse) Field3DeepEqual(src *CreateEvaluatorOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluatorOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluatorOpenAPIData struct {
	EvaluatorID *string `thrift:"evaluator_id,1,optional" frugal:"1,optional,string" form:"evaluator_id" json:"evaluator_id,string,omitempty" query:"evaluator_id"`
}

func NewCreateEvaluatorOpenAPIData() *CreateEvaluatorOpenAPIData {
	return &CreateEvaluatorOpenAPIData{}
}

func (p *CreateEvaluatorOpenAPIData) InitDefault() {
}

var CreateEvaluatorOpenAPIData_EvaluatorID_DEFAULT string

func (p *CreateEvaluatorOpenAPIData) GetEvaluatorID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorID() {
		return CreateEvaluatorOpenAPIData_EvaluatorID_DEFAULT
	}
	return *p.EvaluatorID
}
func (p *CreateEvaluatorOpenAPIData) SetEvaluatorID(val *string) {
	p.EvaluatorID = val
}

var fieldIDToName_CreateEvaluatorOpenAPIData = map[int16]string{
	1: "evaluator_id",
}

func (p *CreateEvaluatorOpenAPIData) IsSetEvaluatorID() bool {
	return p.EvaluatorID != nil
}

func (p *CreateEvaluatorOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluatorOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluatorOpenAPIData) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorID = _field
	return nil
}

func (p *CreateEvaluatorOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluatorOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluatorOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorID() {
		if err = oprot.WriteFieldBegin("evaluator_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvaluatorID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateEvaluatorOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluatorOpenAPIData(%+v)", *p)

}

func (p *CreateEvaluatorOpenAPIData) DeepEqual(ano *CreateEvaluatorOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorID) {
		return false
	}
	return true
}

func (p *CreateEvaluatorOpenAPIData) Field1DeepEqual(src *string) bool {

	if p.EvaluatorID == src {
		return true
	} else if p.EvaluatorID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvaluatorID, *src) != 0 {
		return false
	}
	return true
}

// 2.2 提交评估器版本
type SubmitEvaluatorVersionOApiRequest struct {
	WorkspaceID *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	EvaluatorID *string    `thrift:"evaluator_id,2,optional" frugal:"2,optional,string" json:"evaluator_id,omitempty" path:"evaluator_id"`
	Version     *string    `thrift:"version,3,optional" frugal:"3,optional,string" form:"version" json:"version,omitempty" query:"version"`
	Description *string    `thrift:"description,4,optional" frugal:"4,optional,string" form:"description" json:"description,omitempty" query:"description"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewSubmitEvaluatorVersionOApiRequest() *SubmitEvaluatorVersionOApiRequest {
	return &SubmitEvaluatorVersionOApiRequest{}
}

func (p *SubmitEvaluatorVersionOApiRequest) InitDefault() {
}

var SubmitEvaluatorVersionOApiRequest_WorkspaceID_DEFAULT int64

func (p *SubmitEvaluatorVersionOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return SubmitEvaluatorVersionOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var SubmitEvaluatorVersionOApiRequest_EvaluatorID_DEFAULT string

func (p *SubmitEvaluatorVersionOApiRequest) GetEvaluatorID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorID() {
		return SubmitEvaluatorVersionOApiRequest_EvaluatorID_DEFAULT
	}
	return *p.EvaluatorID
}

var SubmitEvaluatorVersionOApiRequest_Version_DEFAULT string

func (p *SubmitEvaluatorVersionOApiRequest) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return SubmitEvaluatorVersionOApiRequest_Version_DEFAULT
	}
	return *p.Version
}

var SubmitEvaluatorVersionOApiRequest_Description_DEFAULT string

func (p *SubmitEvaluatorVersionOApiRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return SubmitEvaluatorVersionOApiRequest_Description_DEFAULT
	}
	return *p.Description
}

var SubmitEvaluatorVersionOApiRequest_Base_DEFAULT *base.Base

func (p *SubmitEvaluatorVersionOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return SubmitEvaluatorVersionOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *SubmitEvaluatorVersionOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *SubmitEvaluatorVersionOApiRequest) SetEvaluatorID(val *string) {
	p.EvaluatorID = val
}
func (p *SubmitEvaluatorVersionOApiRequest) SetVersion(val *string) {
	p.Version = val
}
func (p *SubmitEvaluatorVersionOApiRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *SubmitEvaluatorVersionOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_SubmitEvaluatorVersionOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_id",
	3:   "version",
	4:   "description",
	255: "Base",
}

func (p *SubmitEvaluatorVersionOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *SubmitEvaluatorVersionOApiRequest) IsSetEvaluatorID() bool {
	return p.EvaluatorID != nil
}

func (p *SubmitEvaluatorVersionOApiRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *SubmitEvaluatorVersionOApiRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *SubmitEvaluatorVersionOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *SubmitEvaluatorVersionOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubmitEvaluatorVersionOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubmitEvaluatorVersionOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *SubmitEvaluatorVersionOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *SubmitEvaluatorVersionOApiRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *SubmitEvaluatorVersionOApiRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *SubmitEvaluatorVersionOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *SubmitEvaluatorVersionOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitEvaluatorVersionOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubmitEvaluatorVersionOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorID() {
		if err = oprot.WriteFieldBegin("evaluator_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvaluatorID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionOApiRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SubmitEvaluatorVersionOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitEvaluatorVersionOApiRequest(%+v)", *p)

}

func (p *SubmitEvaluatorVersionOApiRequest) DeepEqual(ano *SubmitEvaluatorVersionOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *SubmitEvaluatorVersionOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionOApiRequest) Field2DeepEqual(src *string) bool {

	if p.EvaluatorID == src {
		return true
	} else if p.EvaluatorID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvaluatorID, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionOApiRequest) Field3DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionOApiRequest) Field4DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type SubmitEvaluatorVersionOApiResponse struct {
	Code     *int32                             `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                            `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *SubmitEvaluatorVersionOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,SubmitEvaluatorVersionOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                     `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewSubmitEvaluatorVersionOApiResponse() *SubmitEvaluatorVersionOApiResponse {
	return &SubmitEvaluatorVersionOApiResponse{}
}

func (p *SubmitEvaluatorVersionOApiResponse) InitDefault() {
}

var SubmitEvaluatorVersionOApiResponse_Code_DEFAULT int32

func (p *SubmitEvaluatorVersionOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return SubmitEvaluatorVersionOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var SubmitEvaluatorVersionOApiResponse_Msg_DEFAULT string

func (p *SubmitEvaluatorVersionOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return SubmitEvaluatorVersionOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var SubmitEvaluatorVersionOApiResponse_Data_DEFAULT *SubmitEvaluatorVersionOpenAPIData

func (p *SubmitEvaluatorVersionOApiResponse) GetData() (v *SubmitEvaluatorVersionOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return SubmitEvaluatorVersionOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var SubmitEvaluatorVersionOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *SubmitEvaluatorVersionOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return SubmitEvaluatorVersionOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *SubmitEvaluatorVersionOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *SubmitEvaluatorVersionOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *SubmitEvaluatorVersionOApiResponse) SetData(val *SubmitEvaluatorVersionOpenAPIData) {
	p.Data = val
}
func (p *SubmitEvaluatorVersionOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_SubmitEvaluatorVersionOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *SubmitEvaluatorVersionOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *SubmitEvaluatorVersionOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *SubmitEvaluatorVersionOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *SubmitEvaluatorVersionOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *SubmitEvaluatorVersionOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubmitEvaluatorVersionOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubmitEvaluatorVersionOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *SubmitEvaluatorVersionOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *SubmitEvaluatorVersionOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewSubmitEvaluatorVersionOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *SubmitEvaluatorVersionOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *SubmitEvaluatorVersionOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitEvaluatorVersionOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubmitEvaluatorVersionOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SubmitEvaluatorVersionOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitEvaluatorVersionOApiResponse(%+v)", *p)

}

func (p *SubmitEvaluatorVersionOApiResponse) DeepEqual(ano *SubmitEvaluatorVersionOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *SubmitEvaluatorVersionOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionOApiResponse) Field3DeepEqual(src *SubmitEvaluatorVersionOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type SubmitEvaluatorVersionOpenAPIData struct {
	Evaluator *evaluator.Evaluator `thrift:"evaluator,1,optional" frugal:"1,optional,evaluator.Evaluator" form:"evaluator" json:"evaluator,omitempty" query:"evaluator"`
}

func NewSubmitEvaluatorVersionOpenAPIData() *SubmitEvaluatorVersionOpenAPIData {
	return &SubmitEvaluatorVersionOpenAPIData{}
}

func (p *SubmitEvaluatorVersionOpenAPIData) InitDefault() {
}

var SubmitEvaluatorVersionOpenAPIData_Evaluator_DEFAULT *evaluator.Evaluator

func (p *SubmitEvaluatorVersionOpenAPIData) GetEvaluator() (v *evaluator.Evaluator) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluator() {
		return SubmitEvaluatorVersionOpenAPIData_Evaluator_DEFAULT
	}
	return p.Evaluator
}
func (p *SubmitEvaluatorVersionOpenAPIData) SetEvaluator(val *evaluator.Evaluator) {
	p.Evaluator = val
}

var fieldIDToName_SubmitEvaluatorVersionOpenAPIData = map[int16]string{
	1: "evaluator",
}

func (p *SubmitEvaluatorVersionOpenAPIData) IsSetEvaluator() bool {
	return p.Evaluator != nil
}

func (p *SubmitEvaluatorVersionOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubmitEvaluatorVersionOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubmitEvaluatorVersionOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluator()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Evaluator = _field
	return nil
}

func (p *SubmitEvaluatorVersionOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitEvaluatorVersionOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubmitEvaluatorVersionOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluator() {
		if err = oprot.WriteFieldBegin("evaluator", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Evaluator.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SubmitEvaluatorVersionOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitEvaluatorVersionOpenAPIData(%+v)", *p)

}

func (p *SubmitEvaluatorVersionOpenAPIData) DeepEqual(ano *SubmitEvaluatorVersionOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Evaluator) {
		return false
	}
	return true
}

func (p *SubmitEvaluatorVersionOpenAPIData) Field1DeepEqual(src *evaluator.Evaluator) bool {

	if !p.Evaluator.DeepEqual(src) {
		return false
	}
	return true
}

// 2.3 获取评估器版本详情
type GetEvaluatorVersionOApiRequest struct {
	WorkspaceID        *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	EvaluatorVersionID *string    `thrift:"evaluator_version_id,2,optional" frugal:"2,optional,string" json:"evaluator_version_id,omitempty" path:"evaluator_version_id"`
	IncludeDeleted     *bool      `thrift:"include_deleted,3,optional" frugal:"3,optional,bool" form:"include_deleted" json:"include_deleted,omitempty" query:"include_deleted"`
	Base               *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetEvaluatorVersionOApiRequest() *GetEvaluatorVersionOApiRequest {
	return &GetEvaluatorVersionOApiRequest{}
}

func (p *GetEvaluatorVersionOApiRequest) InitDefault() {
}

var GetEvaluatorVersionOApiRequest_WorkspaceID_DEFAULT int64

func (p *GetEvaluatorVersionOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return GetEvaluatorVersionOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var GetEvaluatorVersionOApiRequest_EvaluatorVersionID_DEFAULT string

func (p *GetEvaluatorVersionOApiRequest) GetEvaluatorVersionID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorVersionID() {
		return GetEvaluatorVersionOApiRequest_EvaluatorVersionID_DEFAULT
	}
	return *p.EvaluatorVersionID
}

var GetEvaluatorVersionOApiRequest_IncludeDeleted_DEFAULT bool

func (p *GetEvaluatorVersionOApiRequest) GetIncludeDeleted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIncludeDeleted() {
		return GetEvaluatorVersionOApiRequest_IncludeDeleted_DEFAULT
	}
	return *p.IncludeDeleted
}

var GetEvaluatorVersionOApiRequest_Base_DEFAULT *base.Base

func (p *GetEvaluatorVersionOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetEvaluatorVersionOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetEvaluatorVersionOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *GetEvaluatorVersionOApiRequest) SetEvaluatorVersionID(val *string) {
	p.EvaluatorVersionID = val
}
func (p *GetEvaluatorVersionOApiRequest) SetIncludeDeleted(val *bool) {
	p.IncludeDeleted = val
}
func (p *GetEvaluatorVersionOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetEvaluatorVersionOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_version_id",
	3:   "include_deleted",
	255: "Base",
}

func (p *GetEvaluatorVersionOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *GetEvaluatorVersionOApiRequest) IsSetEvaluatorVersionID() bool {
	return p.EvaluatorVersionID != nil
}

func (p *GetEvaluatorVersionOApiRequest) IsSetIncludeDeleted() bool {
	return p.IncludeDeleted != nil
}

func (p *GetEvaluatorVersionOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetEvaluatorVersionOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorVersionOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluatorVersionOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetEvaluatorVersionOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorVersionID = _field
	return nil
}
func (p *GetEvaluatorVersionOApiRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IncludeDeleted = _field
	return nil
}
func (p *GetEvaluatorVersionOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetEvaluatorVersionOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorVersionOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorVersionOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluatorVersionOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorVersionID() {
		if err = oprot.WriteFieldBegin("evaluator_version_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvaluatorVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluatorVersionOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeDeleted() {
		if err = oprot.WriteFieldBegin("include_deleted", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IncludeDeleted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetEvaluatorVersionOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluatorVersionOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorVersionOApiRequest(%+v)", *p)

}

func (p *GetEvaluatorVersionOApiRequest) DeepEqual(ano *GetEvaluatorVersionOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorVersionID) {
		return false
	}
	if !p.Field3DeepEqual(ano.IncludeDeleted) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetEvaluatorVersionOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *GetEvaluatorVersionOApiRequest) Field2DeepEqual(src *string) bool {

	if p.EvaluatorVersionID == src {
		return true
	} else if p.EvaluatorVersionID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvaluatorVersionID, *src) != 0 {
		return false
	}
	return true
}
func (p *GetEvaluatorVersionOApiRequest) Field3DeepEqual(src *bool) bool {

	if p.IncludeDeleted == src {
		return true
	} else if p.IncludeDeleted == nil || src == nil {
		return false
	}
	if *p.IncludeDeleted != *src {
		return false
	}
	return true
}
func (p *GetEvaluatorVersionOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluatorVersionOApiResponse struct {
	Code     *int32                          `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                         `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *GetEvaluatorVersionOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,GetEvaluatorVersionOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                  `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetEvaluatorVersionOApiResponse() *GetEvaluatorVersionOApiResponse {
	return &GetEvaluatorVersionOApiResponse{}
}

func (p *GetEvaluatorVersionOApiResponse) InitDefault() {
}

var GetEvaluatorVersionOApiResponse_Code_DEFAULT int32

func (p *GetEvaluatorVersionOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return GetEvaluatorVersionOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var GetEvaluatorVersionOApiResponse_Msg_DEFAULT string

func (p *GetEvaluatorVersionOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return GetEvaluatorVersionOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var GetEvaluatorVersionOApiResponse_Data_DEFAULT *GetEvaluatorVersionOpenAPIData

func (p *GetEvaluatorVersionOApiResponse) GetData() (v *GetEvaluatorVersionOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return GetEvaluatorVersionOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var GetEvaluatorVersionOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetEvaluatorVersionOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetEvaluatorVersionOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetEvaluatorVersionOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *GetEvaluatorVersionOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *GetEvaluatorVersionOApiResponse) SetData(val *GetEvaluatorVersionOpenAPIData) {
	p.Data = val
}
func (p *GetEvaluatorVersionOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetEvaluatorVersionOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *GetEvaluatorVersionOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *GetEvaluatorVersionOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *GetEvaluatorVersionOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetEvaluatorVersionOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetEvaluatorVersionOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorVersionOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluatorVersionOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *GetEvaluatorVersionOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *GetEvaluatorVersionOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorVersionOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *GetEvaluatorVersionOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetEvaluatorVersionOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorVersionOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorVersionOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluatorVersionOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluatorVersionOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetEvaluatorVersionOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluatorVersionOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorVersionOApiResponse(%+v)", *p)

}

func (p *GetEvaluatorVersionOApiResponse) DeepEqual(ano *GetEvaluatorVersionOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetEvaluatorVersionOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *GetEvaluatorVersionOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *GetEvaluatorVersionOApiResponse) Field3DeepEqual(src *GetEvaluatorVersionOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetEvaluatorVersionOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluatorVersionOpenAPIData struct {
	Evaluator *evaluator.Evaluator `thrift:"evaluator,1,optional" frugal:"1,optional,evaluator.Evaluator" form:"evaluator" json:"evaluator,omitempty" query:"evaluator"`
}

func NewGetEvaluatorVersionOpenAPIData() *GetEvaluatorVersionOpenAPIData {
	return &GetEvaluatorVersionOpenAPIData{}
}

func (p *GetEvaluatorVersionOpenAPIData) InitDefault() {
}

var GetEvaluatorVersionOpenAPIData_Evaluator_DEFAULT *evaluator.Evaluator

func (p *GetEvaluatorVersionOpenAPIData) GetEvaluator() (v *evaluator.Evaluator) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluator() {
		return GetEvaluatorVersionOpenAPIData_Evaluator_DEFAULT
	}
	return p.Evaluator
}
func (p *GetEvaluatorVersionOpenAPIData) SetEvaluator(val *evaluator.Evaluator) {
	p.Evaluator = val
}

var fieldIDToName_GetEvaluatorVersionOpenAPIData = map[int16]string{
	1: "evaluator",
}

func (p *GetEvaluatorVersionOpenAPIData) IsSetEvaluator() bool {
	return p.Evaluator != nil
}

func (p *GetEvaluatorVersionOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorVersionOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluatorVersionOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluator()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Evaluator = _field
	return nil
}

func (p *GetEvaluatorVersionOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorVersionOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorVersionOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluator() {
		if err = oprot.WriteFieldBegin("evaluator", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Evaluator.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetEvaluatorVersionOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorVersionOpenAPIData(%+v)", *p)

}

func (p *GetEvaluatorVersionOpenAPIData) DeepEqual(ano *GetEvaluatorVersionOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Evaluator) {
		return false
	}
	return true
}

func (p *GetEvaluatorVersionOpenAPIData) Field1DeepEqual(src *evaluator.Evaluator) bool {

	if !p.Evaluator.DeepEqual(src) {
		return false
	}
	return true
}

// 2.4 执行评估器
type RunEvaluatorOApiRequest struct {
	WorkspaceID        *int64                        `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	EvaluatorVersionID *string                       `thrift:"evaluator_version_id,2,optional" frugal:"2,optional,string" json:"evaluator_version_id,omitempty" path:"evaluator_version_id"`
	InputData          *evaluator.EvaluatorInputData `thrift:"input_data,3,optional" frugal:"3,optional,evaluator.EvaluatorInputData" form:"input_data" json:"input_data,omitempty" query:"input_data"`
	Ext                map[string]string             `thrift:"ext,4,optional" frugal:"4,optional,map<string:string>" form:"ext" json:"ext,omitempty" query:"ext"`
	Base               *base.Base                    `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewRunEvaluatorOApiRequest() *RunEvaluatorOApiRequest {
	return &RunEvaluatorOApiRequest{}
}

func (p *RunEvaluatorOApiRequest) InitDefault() {
}

var RunEvaluatorOApiRequest_WorkspaceID_DEFAULT int64

func (p *RunEvaluatorOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return RunEvaluatorOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var RunEvaluatorOApiRequest_EvaluatorVersionID_DEFAULT string

func (p *RunEvaluatorOApiRequest) GetEvaluatorVersionID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorVersionID() {
		return RunEvaluatorOApiRequest_EvaluatorVersionID_DEFAULT
	}
	return *p.EvaluatorVersionID
}

var RunEvaluatorOApiRequest_InputData_DEFAULT *evaluator.EvaluatorInputData

func (p *RunEvaluatorOApiRequest) GetInputData() (v *evaluator.EvaluatorInputData) {
	if p == nil {
		return
	}
	if !p.IsSetInputData() {
		return RunEvaluatorOApiRequest_InputData_DEFAULT
	}
	return p.InputData
}

var RunEvaluatorOApiRequest_Ext_DEFAULT map[string]string

func (p *RunEvaluatorOApiRequest) GetExt() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetExt() {
		return RunEvaluatorOApiRequest_Ext_DEFAULT
	}
	return p.Ext
}

var RunEvaluatorOApiRequest_Base_DEFAULT *base.Base

func (p *RunEvaluatorOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return RunEvaluatorOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *RunEvaluatorOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *RunEvaluatorOApiRequest) SetEvaluatorVersionID(val *string) {
	p.EvaluatorVersionID = val
}
func (p *RunEvaluatorOApiRequest) SetInputData(val *evaluator.EvaluatorInputData) {
	p.InputData = val
}
func (p *RunEvaluatorOApiRequest) SetExt(val map[string]string) {
	p.Ext = val
}
func (p *RunEvaluatorOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_RunEvaluatorOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_version_id",
	3:   "input_data",
	4:   "ext",
	255: "Base",
}

func (p *RunEvaluatorOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *RunEvaluatorOApiRequest) IsSetEvaluatorVersionID() bool {
	return p.EvaluatorVersionID != nil
}

func (p *RunEvaluatorOApiRequest) IsSetInputData() bool {
	return p.InputData != nil
}

func (p *RunEvaluatorOApiRequest) IsSetExt() bool {
	return p.Ext != nil
}

func (p *RunEvaluatorOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *RunEvaluatorOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RunEvaluatorOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RunEvaluatorOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *RunEvaluatorOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorVersionID = _field
	return nil
}
func (p *RunEvaluatorOApiRequest) ReadField3(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorInputData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.InputData = _field
	return nil
}
func (p *RunEvaluatorOApiRequest) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Ext = _field
	return nil
}
func (p *RunEvaluatorOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *RunEvaluatorOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunEvaluatorOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RunEvaluatorOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RunEvaluatorOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorVersionID() {
		if err = oprot.WriteFieldBegin("evaluator_version_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvaluatorVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *RunEvaluatorOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputData() {
		if err = oprot.WriteFieldBegin("input_data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.InputData.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *RunEvaluatorOApiRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExt() {
		if err = oprot.WriteFieldBegin("ext", thrift.MAP, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Ext)); err != nil {
			return err
		}
		for k, v := range p.Ext {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *RunEvaluatorOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RunEvaluatorOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RunEvaluatorOApiRequest(%+v)", *p)

}

func (p *RunEvaluatorOApiRequest) DeepEqual(ano *RunEvaluatorOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorVersionID) {
		return false
	}
	if !p.Field3DeepEqual(ano.InputData) {
		return false
	}
	if !p.Field4DeepEqual(ano.Ext) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *RunEvaluatorOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *RunEvaluatorOApiRequest) Field2DeepEqual(src *string) bool {

	if p.EvaluatorVersionID == src {
		return true
	} else if p.EvaluatorVersionID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvaluatorVersionID, *src) != 0 {
		return false
	}
	return true
}
func (p *RunEvaluatorOApiRequest) Field3DeepEqual(src *evaluator.EvaluatorInputData) bool {

	if !p.InputData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RunEvaluatorOApiRequest) Field4DeepEqual(src map[string]string) bool {

	if len(p.Ext) != len(src) {
		return false
	}
	for k, v := range p.Ext {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *RunEvaluatorOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type RunEvaluatorOApiResponse struct {
	Code     *int32                   `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                  `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *RunEvaluatorOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,RunEvaluatorOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp           `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewRunEvaluatorOApiResponse() *RunEvaluatorOApiResponse {
	return &RunEvaluatorOApiResponse{}
}

func (p *RunEvaluatorOApiResponse) InitDefault() {
}

var RunEvaluatorOApiResponse_Code_DEFAULT int32

func (p *RunEvaluatorOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return RunEvaluatorOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var RunEvaluatorOApiResponse_Msg_DEFAULT string

func (p *RunEvaluatorOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return RunEvaluatorOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var RunEvaluatorOApiResponse_Data_DEFAULT *RunEvaluatorOpenAPIData

func (p *RunEvaluatorOApiResponse) GetData() (v *RunEvaluatorOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return RunEvaluatorOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var RunEvaluatorOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *RunEvaluatorOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return RunEvaluatorOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *RunEvaluatorOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *RunEvaluatorOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *RunEvaluatorOApiResponse) SetData(val *RunEvaluatorOpenAPIData) {
	p.Data = val
}
func (p *RunEvaluatorOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_RunEvaluatorOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *RunEvaluatorOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *RunEvaluatorOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *RunEvaluatorOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *RunEvaluatorOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *RunEvaluatorOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RunEvaluatorOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RunEvaluatorOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *RunEvaluatorOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *RunEvaluatorOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewRunEvaluatorOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *RunEvaluatorOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *RunEvaluatorOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunEvaluatorOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RunEvaluatorOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RunEvaluatorOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *RunEvaluatorOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *RunEvaluatorOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RunEvaluatorOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RunEvaluatorOApiResponse(%+v)", *p)

}

func (p *RunEvaluatorOApiResponse) DeepEqual(ano *RunEvaluatorOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *RunEvaluatorOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *RunEvaluatorOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *RunEvaluatorOApiResponse) Field3DeepEqual(src *RunEvaluatorOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RunEvaluatorOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type RunEvaluatorOpenAPIData struct {
	Record *evaluator.EvaluatorRecord `thrift:"record,1,optional" frugal:"1,optional,evaluator.EvaluatorRecord" form:"record" json:"record,omitempty" query:"record"`
}

func NewRunEvaluatorOpenAPIData() *RunEvaluatorOpenAPIData {
	return &RunEvaluatorOpenAPIData{}
}

func (p *RunEvaluatorOpenAPIData) InitDefault() {
}

var RunEvaluatorOpenAPIData_Record_DEFAULT *evaluator.EvaluatorRecord

func (p *RunEvaluatorOpenAPIData) GetRecord() (v *evaluator.EvaluatorRecord) {
	if p == nil {
		return
	}
	if !p.IsSetRecord() {
		return RunEvaluatorOpenAPIData_Record_DEFAULT
	}
	return p.Record
}
func (p *RunEvaluatorOpenAPIData) SetRecord(val *evaluator.EvaluatorRecord) {
	p.Record = val
}

var fieldIDToName_RunEvaluatorOpenAPIData = map[int16]string{
	1: "record",
}

func (p *RunEvaluatorOpenAPIData) IsSetRecord() bool {
	return p.Record != nil
}

func (p *RunEvaluatorOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RunEvaluatorOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RunEvaluatorOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorRecord()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Record = _field
	return nil
}

func (p *RunEvaluatorOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunEvaluatorOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RunEvaluatorOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecord() {
		if err = oprot.WriteFieldBegin("record", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Record.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RunEvaluatorOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RunEvaluatorOpenAPIData(%+v)", *p)

}

func (p *RunEvaluatorOpenAPIData) DeepEqual(ano *RunEvaluatorOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Record) {
		return false
	}
	return true
}

func (p *RunEvaluatorOpenAPIData) Field1DeepEqual(src *evaluator.EvaluatorRecord) bool {

	if !p.Record.DeepEqual(src) {
		return false
	}
	return true
}

// 2.5 获取评估器执行结果
type GetEvaluatorRecordOApiRequest struct {
	WorkspaceID       *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	EvaluatorRecordID *string    `thrift:"evaluator_record_id,2,optional" frugal:"2,optional,string" json:"evaluator_record_id,omitempty" path:"evaluator_record_id"`
	IncludeDeleted    *bool      `thrift:"include_deleted,3,optional" frugal:"3,optional,bool" form:"include_deleted" json:"include_deleted,omitempty" query:"include_deleted"`
	Base              *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetEvaluatorRecordOApiRequest() *GetEvaluatorRecordOApiRequest {
	return &GetEvaluatorRecordOApiRequest{}
}

func (p *GetEvaluatorRecordOApiRequest) InitDefault() {
}

var GetEvaluatorRecordOApiRequest_WorkspaceID_DEFAULT int64

func (p *GetEvaluatorRecordOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return GetEvaluatorRecordOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var GetEvaluatorRecordOApiRequest_EvaluatorRecordID_DEFAULT string

func (p *GetEvaluatorRecordOApiRequest) GetEvaluatorRecordID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorRecordID() {
		return GetEvaluatorRecordOApiRequest_EvaluatorRecordID_DEFAULT
	}
	return *p.EvaluatorRecordID
}

var GetEvaluatorRecordOApiRequest_IncludeDeleted_DEFAULT bool

func (p *GetEvaluatorRecordOApiRequest) GetIncludeDeleted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIncludeDeleted() {
		return GetEvaluatorRecordOApiRequest_IncludeDeleted_DEFAULT
	}
	return *p.IncludeDeleted
}

var GetEvaluatorRecordOApiRequest_Base_DEFAULT *base.Base

func (p *GetEvaluatorRecordOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetEvaluatorRecordOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetEvaluatorRecordOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *GetEvaluatorRecordOApiRequest) SetEvaluatorRecordID(val *string) {
	p.EvaluatorRecordID = val
}
func (p *GetEvaluatorRecordOApiRequest) SetIncludeDeleted(val *bool) {
	p.IncludeDeleted = val
}
func (p *GetEvaluatorRecordOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetEvaluatorRecordOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_record_id",
	3:   "include_deleted",
	255: "Base",
}

func (p *GetEvaluatorRecordOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *GetEvaluatorRecordOApiRequest) IsSetEvaluatorRecordID() bool {
	return p.EvaluatorRecordID != nil
}

func (p *GetEvaluatorRecordOApiRequest) IsSetIncludeDeleted() bool {
	return p.IncludeDeleted != nil
}

func (p *GetEvaluatorRecordOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetEvaluatorRecordOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorRecordOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluatorRecordOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetEvaluatorRecordOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorRecordID = _field
	return nil
}
func (p *GetEvaluatorRecordOApiRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IncludeDeleted = _field
	return nil
}
func (p *GetEvaluatorRecordOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetEvaluatorRecordOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorRecordOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorRecordOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluatorRecordOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorRecordID() {
		if err = oprot.WriteFieldBegin("evaluator_record_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvaluatorRecordID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluatorRecordOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeDeleted() {
		if err = oprot.WriteFieldBegin("include_deleted", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IncludeDeleted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetEvaluatorRecordOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluatorRecordOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorRecordOApiRequest(%+v)", *p)

}

func (p *GetEvaluatorRecordOApiRequest) DeepEqual(ano *GetEvaluatorRecordOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorRecordID) {
		return false
	}
	if !p.Field3DeepEqual(ano.IncludeDeleted) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetEvaluatorRecordOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *GetEvaluatorRecordOApiRequest) Field2DeepEqual(src *string) bool {

	if p.EvaluatorRecordID == src {
		return true
	} else if p.EvaluatorRecordID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvaluatorRecordID, *src) != 0 {
		return false
	}
	return true
}
func (p *GetEvaluatorRecordOApiRequest) Field3DeepEqual(src *bool) bool {

	if p.IncludeDeleted == src {
		return true
	} else if p.IncludeDeleted == nil || src == nil {
		return false
	}
	if *p.IncludeDeleted != *src {
		return false
	}
	return true
}
func (p *GetEvaluatorRecordOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluatorRecordOApiResponse struct {
	Code     *int32                         `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                        `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *GetEvaluatorRecordOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,GetEvaluatorRecordOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                 `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetEvaluatorRecordOApiResponse() *GetEvaluatorRecordOApiResponse {
	return &GetEvaluatorRecordOApiResponse{}
}

func (p *GetEvaluatorRecordOApiResponse) InitDefault() {
}

var GetEvaluatorRecordOApiResponse_Code_DEFAULT int32

func (p *GetEvaluatorRecordOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return GetEvaluatorRecordOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var GetEvaluatorRecordOApiResponse_Msg_DEFAULT string

func (p *GetEvaluatorRecordOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return GetEvaluatorRecordOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var GetEvaluatorRecordOApiResponse_Data_DEFAULT *GetEvaluatorRecordOpenAPIData

func (p *GetEvaluatorRecordOApiResponse) GetData() (v *GetEvaluatorRecordOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return GetEvaluatorRecordOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var GetEvaluatorRecordOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetEvaluatorRecordOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetEvaluatorRecordOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetEvaluatorRecordOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *GetEvaluatorRecordOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *GetEvaluatorRecordOApiResponse) SetData(val *GetEvaluatorRecordOpenAPIData) {
	p.Data = val
}
func (p *GetEvaluatorRecordOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetEvaluatorRecordOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *GetEvaluatorRecordOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *GetEvaluatorRecordOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *GetEvaluatorRecordOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetEvaluatorRecordOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetEvaluatorRecordOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorRecordOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluatorRecordOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *GetEvaluatorRecordOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *GetEvaluatorRecordOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorRecordOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *GetEvaluatorRecordOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetEvaluatorRecordOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorRecordOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorRecordOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluatorRecordOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluatorRecordOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetEvaluatorRecordOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluatorRecordOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorRecordOApiResponse(%+v)", *p)

}

func (p *GetEvaluatorRecordOApiResponse) DeepEqual(ano *GetEvaluatorRecordOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetEvaluatorRecordOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *GetEvaluatorRecordOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *GetEvaluatorRecordOApiResponse) Field3DeepEqual(src *GetEvaluatorRecordOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetEvaluatorRecordOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluatorRecordOpenAPIData struct {
	Record *evaluator.EvaluatorRecord `thrift:"record,1,optional" frugal:"1,optional,evaluator.EvaluatorRecord" form:"record" json:"record,omitempty" query:"record"`
}

func NewGetEvaluatorRecordOpenAPIData() *GetEvaluatorRecordOpenAPIData {
	return &GetEvaluatorRecordOpenAPIData{}
}

func (p *GetEvaluatorRecordOpenAPIData) InitDefault() {
}

var GetEvaluatorRecordOpenAPIData_Record_DEFAULT *evaluator.EvaluatorRecord

func (p *GetEvaluatorRecordOpenAPIData) GetRecord() (v *evaluator.EvaluatorRecord) {
	if p == nil {
		return
	}
	if !p.IsSetRecord() {
		return GetEvaluatorRecordOpenAPIData_Record_DEFAULT
	}
	return p.Record
}
func (p *GetEvaluatorRecordOpenAPIData) SetRecord(val *evaluator.EvaluatorRecord) {
	p.Record = val
}

var fieldIDToName_GetEvaluatorRecordOpenAPIData = map[int16]string{
	1: "record",
}

func (p *GetEvaluatorRecordOpenAPIData) IsSetRecord() bool {
	return p.Record != nil
}

func (p *GetEvaluatorRecordOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorRecordOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluatorRecordOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorRecord()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Record = _field
	return nil
}

func (p *GetEvaluatorRecordOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorRecordOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorRecordOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRecord() {
		if err = oprot.WriteFieldBegin("record", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Record.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetEvaluatorRecordOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorRecordOpenAPIData(%+v)", *p)

}

func (p *GetEvaluatorRecordOpenAPIData) DeepEqual(ano *GetEvaluatorRecordOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Record) {
		return false
	}
	return true
}

func (p *GetEvaluatorRecordOpenAPIData) Field1DeepEqual(src *evaluator.EvaluatorRecord) bool {

	if !p.Record.DeepEqual(src) {
		return false
	}
	return true
}

// ===============================
// 评测实验相关接口 (2个接口)
// ===============================
// 3.1 创建评测实验
type CreateExperimentOApiRequest struct {
	WorkspaceID           *int64                              `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	EvalSetVersionID      *string                             `thrift:"eval_set_version_id,2,optional" frugal:"2,optional,string" form:"eval_set_version_id" json:"eval_set_version_id,omitempty" query:"eval_set_version_id"`
	TargetVersionID       *string                             `thrift:"target_version_id,3,optional" frugal:"3,optional,string" form:"target_version_id" json:"target_version_id,omitempty" query:"target_version_id"`
	EvaluatorVersionIds   []string                            `thrift:"evaluator_version_ids,4,optional" frugal:"4,optional,list<string>" form:"evaluator_version_ids" json:"evaluator_version_ids,omitempty" query:"evaluator_version_ids"`
	Name                  *string                             `thrift:"name,5,optional" frugal:"5,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Description           *string                             `thrift:"description,6,optional" frugal:"6,optional,string" form:"description" json:"description,omitempty" query:"description"`
	TargetFieldMapping    *experiment.TargetFieldMapping      `thrift:"target_field_mapping,7,optional" frugal:"7,optional,experiment.TargetFieldMapping" form:"target_field_mapping" json:"target_field_mapping,omitempty" query:"target_field_mapping"`
	EvaluatorFieldMapping []*experiment.EvaluatorFieldMapping `thrift:"evaluator_field_mapping,8,optional" frugal:"8,optional,list<experiment.EvaluatorFieldMapping>" form:"evaluator_field_mapping" json:"evaluator_field_mapping,omitempty" query:"evaluator_field_mapping"`
	ItemConcurNum         *int32                              `thrift:"item_concur_num,9,optional" frugal:"9,optional,i32" form:"item_concur_num" json:"item_concur_num,omitempty" query:"item_concur_num"`
	EvaluatorsConcurNum   *int32                              `thrift:"evaluators_concur_num,10,optional" frugal:"10,optional,i32" form:"evaluators_concur_num" json:"evaluators_concur_num,omitempty" query:"evaluators_concur_num"`
	Base                  *base.Base                          `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateExperimentOApiRequest() *CreateExperimentOApiRequest {
	return &CreateExperimentOApiRequest{}
}

func (p *CreateExperimentOApiRequest) InitDefault() {
}

var CreateExperimentOApiRequest_WorkspaceID_DEFAULT int64

func (p *CreateExperimentOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return CreateExperimentOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var CreateExperimentOApiRequest_EvalSetVersionID_DEFAULT string

func (p *CreateExperimentOApiRequest) GetEvalSetVersionID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEvalSetVersionID() {
		return CreateExperimentOApiRequest_EvalSetVersionID_DEFAULT
	}
	return *p.EvalSetVersionID
}

var CreateExperimentOApiRequest_TargetVersionID_DEFAULT string

func (p *CreateExperimentOApiRequest) GetTargetVersionID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTargetVersionID() {
		return CreateExperimentOApiRequest_TargetVersionID_DEFAULT
	}
	return *p.TargetVersionID
}

var CreateExperimentOApiRequest_EvaluatorVersionIds_DEFAULT []string

func (p *CreateExperimentOApiRequest) GetEvaluatorVersionIds() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorVersionIds() {
		return CreateExperimentOApiRequest_EvaluatorVersionIds_DEFAULT
	}
	return p.EvaluatorVersionIds
}

var CreateExperimentOApiRequest_Name_DEFAULT string

func (p *CreateExperimentOApiRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return CreateExperimentOApiRequest_Name_DEFAULT
	}
	return *p.Name
}

var CreateExperimentOApiRequest_Description_DEFAULT string

func (p *CreateExperimentOApiRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return CreateExperimentOApiRequest_Description_DEFAULT
	}
	return *p.Description
}

var CreateExperimentOApiRequest_TargetFieldMapping_DEFAULT *experiment.TargetFieldMapping

func (p *CreateExperimentOApiRequest) GetTargetFieldMapping() (v *experiment.TargetFieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetTargetFieldMapping() {
		return CreateExperimentOApiRequest_TargetFieldMapping_DEFAULT
	}
	return p.TargetFieldMapping
}

var CreateExperimentOApiRequest_EvaluatorFieldMapping_DEFAULT []*experiment.EvaluatorFieldMapping

func (p *CreateExperimentOApiRequest) GetEvaluatorFieldMapping() (v []*experiment.EvaluatorFieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorFieldMapping() {
		return CreateExperimentOApiRequest_EvaluatorFieldMapping_DEFAULT
	}
	return p.EvaluatorFieldMapping
}

var CreateExperimentOApiRequest_ItemConcurNum_DEFAULT int32

func (p *CreateExperimentOApiRequest) GetItemConcurNum() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetItemConcurNum() {
		return CreateExperimentOApiRequest_ItemConcurNum_DEFAULT
	}
	return *p.ItemConcurNum
}

var CreateExperimentOApiRequest_EvaluatorsConcurNum_DEFAULT int32

func (p *CreateExperimentOApiRequest) GetEvaluatorsConcurNum() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorsConcurNum() {
		return CreateExperimentOApiRequest_EvaluatorsConcurNum_DEFAULT
	}
	return *p.EvaluatorsConcurNum
}

var CreateExperimentOApiRequest_Base_DEFAULT *base.Base

func (p *CreateExperimentOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateExperimentOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateExperimentOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *CreateExperimentOApiRequest) SetEvalSetVersionID(val *string) {
	p.EvalSetVersionID = val
}
func (p *CreateExperimentOApiRequest) SetTargetVersionID(val *string) {
	p.TargetVersionID = val
}
func (p *CreateExperimentOApiRequest) SetEvaluatorVersionIds(val []string) {
	p.EvaluatorVersionIds = val
}
func (p *CreateExperimentOApiRequest) SetName(val *string) {
	p.Name = val
}
func (p *CreateExperimentOApiRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *CreateExperimentOApiRequest) SetTargetFieldMapping(val *experiment.TargetFieldMapping) {
	p.TargetFieldMapping = val
}
func (p *CreateExperimentOApiRequest) SetEvaluatorFieldMapping(val []*experiment.EvaluatorFieldMapping) {
	p.EvaluatorFieldMapping = val
}
func (p *CreateExperimentOApiRequest) SetItemConcurNum(val *int32) {
	p.ItemConcurNum = val
}
func (p *CreateExperimentOApiRequest) SetEvaluatorsConcurNum(val *int32) {
	p.EvaluatorsConcurNum = val
}
func (p *CreateExperimentOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateExperimentOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "eval_set_version_id",
	3:   "target_version_id",
	4:   "evaluator_version_ids",
	5:   "name",
	6:   "description",
	7:   "target_field_mapping",
	8:   "evaluator_field_mapping",
	9:   "item_concur_num",
	10:  "evaluators_concur_num",
	255: "Base",
}

func (p *CreateExperimentOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *CreateExperimentOApiRequest) IsSetEvalSetVersionID() bool {
	return p.EvalSetVersionID != nil
}

func (p *CreateExperimentOApiRequest) IsSetTargetVersionID() bool {
	return p.TargetVersionID != nil
}

func (p *CreateExperimentOApiRequest) IsSetEvaluatorVersionIds() bool {
	return p.EvaluatorVersionIds != nil
}

func (p *CreateExperimentOApiRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *CreateExperimentOApiRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CreateExperimentOApiRequest) IsSetTargetFieldMapping() bool {
	return p.TargetFieldMapping != nil
}

func (p *CreateExperimentOApiRequest) IsSetEvaluatorFieldMapping() bool {
	return p.EvaluatorFieldMapping != nil
}

func (p *CreateExperimentOApiRequest) IsSetItemConcurNum() bool {
	return p.ItemConcurNum != nil
}

func (p *CreateExperimentOApiRequest) IsSetEvaluatorsConcurNum() bool {
	return p.EvaluatorsConcurNum != nil
}

func (p *CreateExperimentOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateExperimentOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateExperimentOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateExperimentOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateExperimentOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvalSetVersionID = _field
	return nil
}
func (p *CreateExperimentOApiRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TargetVersionID = _field
	return nil
}
func (p *CreateExperimentOApiRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorVersionIds = _field
	return nil
}
func (p *CreateExperimentOApiRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *CreateExperimentOApiRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *CreateExperimentOApiRequest) ReadField7(iprot thrift.TProtocol) error {
	_field := experiment.NewTargetFieldMapping()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TargetFieldMapping = _field
	return nil
}
func (p *CreateExperimentOApiRequest) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*experiment.EvaluatorFieldMapping, 0, size)
	values := make([]experiment.EvaluatorFieldMapping, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorFieldMapping = _field
	return nil
}
func (p *CreateExperimentOApiRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemConcurNum = _field
	return nil
}
func (p *CreateExperimentOApiRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorsConcurNum = _field
	return nil
}
func (p *CreateExperimentOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateExperimentOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateExperimentOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateExperimentOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateExperimentOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalSetVersionID() {
		if err = oprot.WriteFieldBegin("eval_set_version_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvalSetVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateExperimentOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetVersionID() {
		if err = oprot.WriteFieldBegin("target_version_id", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TargetVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateExperimentOApiRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorVersionIds() {
		if err = oprot.WriteFieldBegin("evaluator_version_ids", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.EvaluatorVersionIds)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorVersionIds {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CreateExperimentOApiRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *CreateExperimentOApiRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *CreateExperimentOApiRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetFieldMapping() {
		if err = oprot.WriteFieldBegin("target_field_mapping", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TargetFieldMapping.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *CreateExperimentOApiRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorFieldMapping() {
		if err = oprot.WriteFieldBegin("evaluator_field_mapping", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvaluatorFieldMapping)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorFieldMapping {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *CreateExperimentOApiRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemConcurNum() {
		if err = oprot.WriteFieldBegin("item_concur_num", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ItemConcurNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *CreateExperimentOApiRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorsConcurNum() {
		if err = oprot.WriteFieldBegin("evaluators_concur_num", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.EvaluatorsConcurNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *CreateExperimentOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateExperimentOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateExperimentOApiRequest(%+v)", *p)

}

func (p *CreateExperimentOApiRequest) DeepEqual(ano *CreateExperimentOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvalSetVersionID) {
		return false
	}
	if !p.Field3DeepEqual(ano.TargetVersionID) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluatorVersionIds) {
		return false
	}
	if !p.Field5DeepEqual(ano.Name) {
		return false
	}
	if !p.Field6DeepEqual(ano.Description) {
		return false
	}
	if !p.Field7DeepEqual(ano.TargetFieldMapping) {
		return false
	}
	if !p.Field8DeepEqual(ano.EvaluatorFieldMapping) {
		return false
	}
	if !p.Field9DeepEqual(ano.ItemConcurNum) {
		return false
	}
	if !p.Field10DeepEqual(ano.EvaluatorsConcurNum) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateExperimentOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *CreateExperimentOApiRequest) Field2DeepEqual(src *string) bool {

	if p.EvalSetVersionID == src {
		return true
	} else if p.EvalSetVersionID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvalSetVersionID, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateExperimentOApiRequest) Field3DeepEqual(src *string) bool {

	if p.TargetVersionID == src {
		return true
	} else if p.TargetVersionID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TargetVersionID, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateExperimentOApiRequest) Field4DeepEqual(src []string) bool {

	if len(p.EvaluatorVersionIds) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorVersionIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *CreateExperimentOApiRequest) Field5DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateExperimentOApiRequest) Field6DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateExperimentOApiRequest) Field7DeepEqual(src *experiment.TargetFieldMapping) bool {

	if !p.TargetFieldMapping.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateExperimentOApiRequest) Field8DeepEqual(src []*experiment.EvaluatorFieldMapping) bool {

	if len(p.EvaluatorFieldMapping) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorFieldMapping {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateExperimentOApiRequest) Field9DeepEqual(src *int32) bool {

	if p.ItemConcurNum == src {
		return true
	} else if p.ItemConcurNum == nil || src == nil {
		return false
	}
	if *p.ItemConcurNum != *src {
		return false
	}
	return true
}
func (p *CreateExperimentOApiRequest) Field10DeepEqual(src *int32) bool {

	if p.EvaluatorsConcurNum == src {
		return true
	} else if p.EvaluatorsConcurNum == nil || src == nil {
		return false
	}
	if *p.EvaluatorsConcurNum != *src {
		return false
	}
	return true
}
func (p *CreateExperimentOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateExperimentOApiResponse struct {
	Code     *int32                       `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                      `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *CreateExperimentOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,CreateExperimentOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp               `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateExperimentOApiResponse() *CreateExperimentOApiResponse {
	return &CreateExperimentOApiResponse{}
}

func (p *CreateExperimentOApiResponse) InitDefault() {
}

var CreateExperimentOApiResponse_Code_DEFAULT int32

func (p *CreateExperimentOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return CreateExperimentOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var CreateExperimentOApiResponse_Msg_DEFAULT string

func (p *CreateExperimentOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return CreateExperimentOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var CreateExperimentOApiResponse_Data_DEFAULT *CreateExperimentOpenAPIData

func (p *CreateExperimentOApiResponse) GetData() (v *CreateExperimentOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return CreateExperimentOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var CreateExperimentOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateExperimentOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateExperimentOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateExperimentOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *CreateExperimentOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *CreateExperimentOApiResponse) SetData(val *CreateExperimentOpenAPIData) {
	p.Data = val
}
func (p *CreateExperimentOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateExperimentOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *CreateExperimentOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *CreateExperimentOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *CreateExperimentOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *CreateExperimentOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateExperimentOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateExperimentOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateExperimentOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *CreateExperimentOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *CreateExperimentOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewCreateExperimentOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *CreateExperimentOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateExperimentOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateExperimentOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateExperimentOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateExperimentOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateExperimentOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateExperimentOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateExperimentOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateExperimentOApiResponse(%+v)", *p)

}

func (p *CreateExperimentOApiResponse) DeepEqual(ano *CreateExperimentOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateExperimentOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *CreateExperimentOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateExperimentOApiResponse) Field3DeepEqual(src *CreateExperimentOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateExperimentOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CreateExperimentOpenAPIData struct {
	Experiment *experiment.Experiment `thrift:"experiment,1,optional" frugal:"1,optional,experiment.Experiment" form:"experiment" json:"experiment,omitempty" query:"experiment"`
}

func NewCreateExperimentOpenAPIData() *CreateExperimentOpenAPIData {
	return &CreateExperimentOpenAPIData{}
}

func (p *CreateExperimentOpenAPIData) InitDefault() {
}

var CreateExperimentOpenAPIData_Experiment_DEFAULT *experiment.Experiment

func (p *CreateExperimentOpenAPIData) GetExperiment() (v *experiment.Experiment) {
	if p == nil {
		return
	}
	if !p.IsSetExperiment() {
		return CreateExperimentOpenAPIData_Experiment_DEFAULT
	}
	return p.Experiment
}
func (p *CreateExperimentOpenAPIData) SetExperiment(val *experiment.Experiment) {
	p.Experiment = val
}

var fieldIDToName_CreateExperimentOpenAPIData = map[int16]string{
	1: "experiment",
}

func (p *CreateExperimentOpenAPIData) IsSetExperiment() bool {
	return p.Experiment != nil
}

func (p *CreateExperimentOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateExperimentOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateExperimentOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_field := experiment.NewExperiment()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Experiment = _field
	return nil
}

func (p *CreateExperimentOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateExperimentOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateExperimentOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperiment() {
		if err = oprot.WriteFieldBegin("experiment", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Experiment.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateExperimentOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateExperimentOpenAPIData(%+v)", *p)

}

func (p *CreateExperimentOpenAPIData) DeepEqual(ano *CreateExperimentOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Experiment) {
		return false
	}
	return true
}

func (p *CreateExperimentOpenAPIData) Field1DeepEqual(src *experiment.Experiment) bool {

	if !p.Experiment.DeepEqual(src) {
		return false
	}
	return true
}

// 3.2 获取评测实验结果
type GetExperimentResultOApiRequest struct {
	WorkspaceID  *int64     `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	ExperimentID *string    `thrift:"experiment_id,2,optional" frugal:"2,optional,string" json:"experiment_id,omitempty" path:"experiment_id"`
	PageToken    *string    `thrift:"page_token,3,optional" frugal:"3,optional,string" form:"page_token" json:"page_token,omitempty" query:"page_token"`
	PageSize     *int32     `thrift:"page_size,4,optional" frugal:"4,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	Base         *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetExperimentResultOApiRequest() *GetExperimentResultOApiRequest {
	return &GetExperimentResultOApiRequest{}
}

func (p *GetExperimentResultOApiRequest) InitDefault() {
}

var GetExperimentResultOApiRequest_WorkspaceID_DEFAULT int64

func (p *GetExperimentResultOApiRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return GetExperimentResultOApiRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var GetExperimentResultOApiRequest_ExperimentID_DEFAULT string

func (p *GetExperimentResultOApiRequest) GetExperimentID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentID() {
		return GetExperimentResultOApiRequest_ExperimentID_DEFAULT
	}
	return *p.ExperimentID
}

var GetExperimentResultOApiRequest_PageToken_DEFAULT string

func (p *GetExperimentResultOApiRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return GetExperimentResultOApiRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var GetExperimentResultOApiRequest_PageSize_DEFAULT int32

func (p *GetExperimentResultOApiRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return GetExperimentResultOApiRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var GetExperimentResultOApiRequest_Base_DEFAULT *base.Base

func (p *GetExperimentResultOApiRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetExperimentResultOApiRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetExperimentResultOApiRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *GetExperimentResultOApiRequest) SetExperimentID(val *string) {
	p.ExperimentID = val
}
func (p *GetExperimentResultOApiRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *GetExperimentResultOApiRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *GetExperimentResultOApiRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetExperimentResultOApiRequest = map[int16]string{
	1:   "workspace_id",
	2:   "experiment_id",
	3:   "page_token",
	4:   "page_size",
	255: "Base",
}

func (p *GetExperimentResultOApiRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *GetExperimentResultOApiRequest) IsSetExperimentID() bool {
	return p.ExperimentID != nil
}

func (p *GetExperimentResultOApiRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *GetExperimentResultOApiRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *GetExperimentResultOApiRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetExperimentResultOApiRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetExperimentResultOApiRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetExperimentResultOApiRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetExperimentResultOApiRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExperimentID = _field
	return nil
}
func (p *GetExperimentResultOApiRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *GetExperimentResultOApiRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *GetExperimentResultOApiRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetExperimentResultOApiRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentResultOApiRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetExperimentResultOApiRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetExperimentResultOApiRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentID() {
		if err = oprot.WriteFieldBegin("experiment_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ExperimentID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetExperimentResultOApiRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetExperimentResultOApiRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *GetExperimentResultOApiRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetExperimentResultOApiRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetExperimentResultOApiRequest(%+v)", *p)

}

func (p *GetExperimentResultOApiRequest) DeepEqual(ano *GetExperimentResultOApiRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExperimentID) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field4DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetExperimentResultOApiRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *GetExperimentResultOApiRequest) Field2DeepEqual(src *string) bool {

	if p.ExperimentID == src {
		return true
	} else if p.ExperimentID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ExperimentID, *src) != 0 {
		return false
	}
	return true
}
func (p *GetExperimentResultOApiRequest) Field3DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *GetExperimentResultOApiRequest) Field4DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *GetExperimentResultOApiRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetExperimentResultOApiResponse struct {
	Code     *int32                          `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string                         `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *GetExperimentResultOpenAPIData `thrift:"data,3,optional" frugal:"3,optional,GetExperimentResultOpenAPIData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp                  `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetExperimentResultOApiResponse() *GetExperimentResultOApiResponse {
	return &GetExperimentResultOApiResponse{}
}

func (p *GetExperimentResultOApiResponse) InitDefault() {
}

var GetExperimentResultOApiResponse_Code_DEFAULT int32

func (p *GetExperimentResultOApiResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return GetExperimentResultOApiResponse_Code_DEFAULT
	}
	return *p.Code
}

var GetExperimentResultOApiResponse_Msg_DEFAULT string

func (p *GetExperimentResultOApiResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return GetExperimentResultOApiResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var GetExperimentResultOApiResponse_Data_DEFAULT *GetExperimentResultOpenAPIData

func (p *GetExperimentResultOApiResponse) GetData() (v *GetExperimentResultOpenAPIData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return GetExperimentResultOApiResponse_Data_DEFAULT
	}
	return p.Data
}

var GetExperimentResultOApiResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetExperimentResultOApiResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetExperimentResultOApiResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetExperimentResultOApiResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *GetExperimentResultOApiResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *GetExperimentResultOApiResponse) SetData(val *GetExperimentResultOpenAPIData) {
	p.Data = val
}
func (p *GetExperimentResultOApiResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetExperimentResultOApiResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *GetExperimentResultOApiResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *GetExperimentResultOApiResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *GetExperimentResultOApiResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetExperimentResultOApiResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetExperimentResultOApiResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetExperimentResultOApiResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetExperimentResultOApiResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *GetExperimentResultOApiResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *GetExperimentResultOApiResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewGetExperimentResultOpenAPIData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *GetExperimentResultOApiResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetExperimentResultOApiResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentResultOApiResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetExperimentResultOApiResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetExperimentResultOApiResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetExperimentResultOApiResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetExperimentResultOApiResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetExperimentResultOApiResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetExperimentResultOApiResponse(%+v)", *p)

}

func (p *GetExperimentResultOApiResponse) DeepEqual(ano *GetExperimentResultOApiResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetExperimentResultOApiResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *GetExperimentResultOApiResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *GetExperimentResultOApiResponse) Field3DeepEqual(src *GetExperimentResultOpenAPIData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetExperimentResultOApiResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetExperimentResultOpenAPIData struct {
	ColumnEvalSetFields []*experiment.ColumnEvalSetField `thrift:"column_eval_set_fields,1,optional" frugal:"1,optional,list<experiment.ColumnEvalSetField>" form:"column_eval_set_fields" json:"column_eval_set_fields,omitempty" query:"column_eval_set_fields"`
	ColumnEvaluators    []*experiment.ColumnEvaluator    `thrift:"column_evaluators,2,optional" frugal:"2,optional,list<experiment.ColumnEvaluator>" form:"column_evaluators" json:"column_evaluators,omitempty" query:"column_evaluators"`
	ItemResults         []*experiment.ItemResult_        `thrift:"item_results,3,optional" frugal:"3,optional,list<experiment.ItemResult_>" form:"item_results" json:"item_results,omitempty" query:"item_results"`
	HasMore             *bool                            `thrift:"has_more,4,optional" frugal:"4,optional,bool" form:"has_more" json:"has_more,omitempty" query:"has_more"`
	NextPageToken       *string                          `thrift:"next_page_token,5,optional" frugal:"5,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	Total               *int64                           `thrift:"total,6,optional" frugal:"6,optional,i64" form:"total" json:"total,omitempty" query:"total"`
}

func NewGetExperimentResultOpenAPIData() *GetExperimentResultOpenAPIData {
	return &GetExperimentResultOpenAPIData{}
}

func (p *GetExperimentResultOpenAPIData) InitDefault() {
}

var GetExperimentResultOpenAPIData_ColumnEvalSetFields_DEFAULT []*experiment.ColumnEvalSetField

func (p *GetExperimentResultOpenAPIData) GetColumnEvalSetFields() (v []*experiment.ColumnEvalSetField) {
	if p == nil {
		return
	}
	if !p.IsSetColumnEvalSetFields() {
		return GetExperimentResultOpenAPIData_ColumnEvalSetFields_DEFAULT
	}
	return p.ColumnEvalSetFields
}

var GetExperimentResultOpenAPIData_ColumnEvaluators_DEFAULT []*experiment.ColumnEvaluator

func (p *GetExperimentResultOpenAPIData) GetColumnEvaluators() (v []*experiment.ColumnEvaluator) {
	if p == nil {
		return
	}
	if !p.IsSetColumnEvaluators() {
		return GetExperimentResultOpenAPIData_ColumnEvaluators_DEFAULT
	}
	return p.ColumnEvaluators
}

var GetExperimentResultOpenAPIData_ItemResults_DEFAULT []*experiment.ItemResult_

func (p *GetExperimentResultOpenAPIData) GetItemResults() (v []*experiment.ItemResult_) {
	if p == nil {
		return
	}
	if !p.IsSetItemResults() {
		return GetExperimentResultOpenAPIData_ItemResults_DEFAULT
	}
	return p.ItemResults
}

var GetExperimentResultOpenAPIData_HasMore_DEFAULT bool

func (p *GetExperimentResultOpenAPIData) GetHasMore() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetHasMore() {
		return GetExperimentResultOpenAPIData_HasMore_DEFAULT
	}
	return *p.HasMore
}

var GetExperimentResultOpenAPIData_NextPageToken_DEFAULT string

func (p *GetExperimentResultOpenAPIData) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return GetExperimentResultOpenAPIData_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var GetExperimentResultOpenAPIData_Total_DEFAULT int64

func (p *GetExperimentResultOpenAPIData) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return GetExperimentResultOpenAPIData_Total_DEFAULT
	}
	return *p.Total
}
func (p *GetExperimentResultOpenAPIData) SetColumnEvalSetFields(val []*experiment.ColumnEvalSetField) {
	p.ColumnEvalSetFields = val
}
func (p *GetExperimentResultOpenAPIData) SetColumnEvaluators(val []*experiment.ColumnEvaluator) {
	p.ColumnEvaluators = val
}
func (p *GetExperimentResultOpenAPIData) SetItemResults(val []*experiment.ItemResult_) {
	p.ItemResults = val
}
func (p *GetExperimentResultOpenAPIData) SetHasMore(val *bool) {
	p.HasMore = val
}
func (p *GetExperimentResultOpenAPIData) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *GetExperimentResultOpenAPIData) SetTotal(val *int64) {
	p.Total = val
}

var fieldIDToName_GetExperimentResultOpenAPIData = map[int16]string{
	1: "column_eval_set_fields",
	2: "column_evaluators",
	3: "item_results",
	4: "has_more",
	5: "next_page_token",
	6: "total",
}

func (p *GetExperimentResultOpenAPIData) IsSetColumnEvalSetFields() bool {
	return p.ColumnEvalSetFields != nil
}

func (p *GetExperimentResultOpenAPIData) IsSetColumnEvaluators() bool {
	return p.ColumnEvaluators != nil
}

func (p *GetExperimentResultOpenAPIData) IsSetItemResults() bool {
	return p.ItemResults != nil
}

func (p *GetExperimentResultOpenAPIData) IsSetHasMore() bool {
	return p.HasMore != nil
}

func (p *GetExperimentResultOpenAPIData) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *GetExperimentResultOpenAPIData) IsSetTotal() bool {
	return p.Total != nil
}

func (p *GetExperimentResultOpenAPIData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetExperimentResultOpenAPIData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetExperimentResultOpenAPIData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*experiment.ColumnEvalSetField, 0, size)
	values := make([]experiment.ColumnEvalSetField, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnEvalSetFields = _field
	return nil
}
func (p *GetExperimentResultOpenAPIData) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*experiment.ColumnEvaluator, 0, size)
	values := make([]experiment.ColumnEvaluator, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnEvaluators = _field
	return nil
}
func (p *GetExperimentResultOpenAPIData) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*experiment.ItemResult_, 0, size)
	values := make([]experiment.ItemResult_, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ItemResults = _field
	return nil
}
func (p *GetExperimentResultOpenAPIData) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HasMore = _field
	return nil
}
func (p *GetExperimentResultOpenAPIData) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *GetExperimentResultOpenAPIData) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}

func (p *GetExperimentResultOpenAPIData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentResultOpenAPIData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetExperimentResultOpenAPIData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnEvalSetFields() {
		if err = oprot.WriteFieldBegin("column_eval_set_fields", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnEvalSetFields)); err != nil {
			return err
		}
		for _, v := range p.ColumnEvalSetFields {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetExperimentResultOpenAPIData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnEvaluators() {
		if err = oprot.WriteFieldBegin("column_evaluators", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnEvaluators)); err != nil {
			return err
		}
		for _, v := range p.ColumnEvaluators {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetExperimentResultOpenAPIData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemResults() {
		if err = oprot.WriteFieldBegin("item_results", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ItemResults)); err != nil {
			return err
		}
		for _, v := range p.ItemResults {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetExperimentResultOpenAPIData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasMore() {
		if err = oprot.WriteFieldBegin("has_more", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.HasMore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *GetExperimentResultOpenAPIData) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *GetExperimentResultOpenAPIData) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *GetExperimentResultOpenAPIData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetExperimentResultOpenAPIData(%+v)", *p)

}

func (p *GetExperimentResultOpenAPIData) DeepEqual(ano *GetExperimentResultOpenAPIData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnEvalSetFields) {
		return false
	}
	if !p.Field2DeepEqual(ano.ColumnEvaluators) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemResults) {
		return false
	}
	if !p.Field4DeepEqual(ano.HasMore) {
		return false
	}
	if !p.Field5DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field6DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *GetExperimentResultOpenAPIData) Field1DeepEqual(src []*experiment.ColumnEvalSetField) bool {

	if len(p.ColumnEvalSetFields) != len(src) {
		return false
	}
	for i, v := range p.ColumnEvalSetFields {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetExperimentResultOpenAPIData) Field2DeepEqual(src []*experiment.ColumnEvaluator) bool {

	if len(p.ColumnEvaluators) != len(src) {
		return false
	}
	for i, v := range p.ColumnEvaluators {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetExperimentResultOpenAPIData) Field3DeepEqual(src []*experiment.ItemResult_) bool {

	if len(p.ItemResults) != len(src) {
		return false
	}
	for i, v := range p.ItemResults {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetExperimentResultOpenAPIData) Field4DeepEqual(src *bool) bool {

	if p.HasMore == src {
		return true
	} else if p.HasMore == nil || src == nil {
		return false
	}
	if *p.HasMore != *src {
		return false
	}
	return true
}
func (p *GetExperimentResultOpenAPIData) Field5DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *GetExperimentResultOpenAPIData) Field6DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}

// ===============================
// 服务定义 (16个接口总计)
// ===============================
type EvaluationOpenAPIService interface {
	// 评测集接口 (8个)
	// 1.1 创建评测集
	CreateEvaluationSetOApi(ctx context.Context, req *CreateEvaluationSetOApiRequest) (r *CreateEvaluationSetOApiResponse, err error)
	// 1.2 获取评测集详情
	GetEvaluationSetOApi(ctx context.Context, req *GetEvaluationSetOApiRequest) (r *GetEvaluationSetOApiResponse, err error)
	// 1.3 查询评测集列表
	ListEvaluationSetsOApi(ctx context.Context, req *ListEvaluationSetsOApiRequest) (r *ListEvaluationSetsOApiResponse, err error)
	// 1.4 创建评测集版本
	CreateEvaluationSetVersionOApi(ctx context.Context, req *CreateEvaluationSetVersionOApiRequest) (r *CreateEvaluationSetVersionOApiResponse, err error)
	// 1.5 批量添加评测集数据
	BatchCreateEvaluationSetItemsOApi(ctx context.Context, req *BatchCreateEvaluationSetItemsOApiRequest) (r *BatchCreateEvaluationSetItemsOApiResponse, err error)
	// 1.6 批量更新评测集数据
	BatchUpdateEvaluationSetItemsOApi(ctx context.Context, req *BatchUpdateEvaluationSetItemsOApiRequest) (r *BatchUpdateEvaluationSetItemsOApiResponse, err error)
	// 1.7 批量删除评测集数据
	BatchDeleteEvaluationSetItemsOApi(ctx context.Context, req *BatchDeleteEvaluationSetItemsOApiRequest) (r *BatchDeleteEvaluationSetItemsOApiResponse, err error)
	// 1.8 查询评测集特定版本数据
	ListEvaluationSetVersionItemsOApi(ctx context.Context, req *ListEvaluationSetVersionItemsOApiRequest) (r *ListEvaluationSetVersionItemsOApiResponse, err error)
	// 评估器接口 (5个)
	// 2.1 创建评估器
	CreateEvaluatorOApi(ctx context.Context, req *CreateEvaluatorOApiRequest) (r *CreateEvaluatorOApiResponse, err error)
	// 2.2 提交评估器版本
	SubmitEvaluatorVersionOApi(ctx context.Context, req *SubmitEvaluatorVersionOApiRequest) (r *SubmitEvaluatorVersionOApiResponse, err error)
	// 2.3 获取评估器版本详情
	GetEvaluatorVersionOApi(ctx context.Context, req *GetEvaluatorVersionOApiRequest) (r *GetEvaluatorVersionOApiResponse, err error)
	// 2.4 执行评估器
	RunEvaluatorOApi(ctx context.Context, req *RunEvaluatorOApiRequest) (r *RunEvaluatorOApiResponse, err error)
	// 2.5 获取评估器执行结果
	GetEvaluatorRecordOApi(ctx context.Context, req *GetEvaluatorRecordOApiRequest) (r *GetEvaluatorRecordOApiResponse, err error)
	// 评测实验接口 (2个)
	// 3.1 创建评测实验
	CreateExperimentOApi(ctx context.Context, req *CreateExperimentOApiRequest) (r *CreateExperimentOApiResponse, err error)
	// 3.2 获取评测实验结果
	GetExperimentResultOApi(ctx context.Context, req *GetExperimentResultOApiRequest) (r *GetExperimentResultOApiResponse, err error)
}

type EvaluationOpenAPIServiceClient struct {
	c thrift.TClient
}

func NewEvaluationOpenAPIServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EvaluationOpenAPIServiceClient {
	return &EvaluationOpenAPIServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewEvaluationOpenAPIServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EvaluationOpenAPIServiceClient {
	return &EvaluationOpenAPIServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewEvaluationOpenAPIServiceClient(c thrift.TClient) *EvaluationOpenAPIServiceClient {
	return &EvaluationOpenAPIServiceClient{
		c: c,
	}
}

func (p *EvaluationOpenAPIServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *EvaluationOpenAPIServiceClient) CreateEvaluationSetOApi(ctx context.Context, req *CreateEvaluationSetOApiRequest) (r *CreateEvaluationSetOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceCreateEvaluationSetOApiResult
	if err = p.Client_().Call(ctx, "CreateEvaluationSetOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) GetEvaluationSetOApi(ctx context.Context, req *GetEvaluationSetOApiRequest) (r *GetEvaluationSetOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceGetEvaluationSetOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceGetEvaluationSetOApiResult
	if err = p.Client_().Call(ctx, "GetEvaluationSetOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) ListEvaluationSetsOApi(ctx context.Context, req *ListEvaluationSetsOApiRequest) (r *ListEvaluationSetsOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceListEvaluationSetsOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceListEvaluationSetsOApiResult
	if err = p.Client_().Call(ctx, "ListEvaluationSetsOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) CreateEvaluationSetVersionOApi(ctx context.Context, req *CreateEvaluationSetVersionOApiRequest) (r *CreateEvaluationSetVersionOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult
	if err = p.Client_().Call(ctx, "CreateEvaluationSetVersionOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) BatchCreateEvaluationSetItemsOApi(ctx context.Context, req *BatchCreateEvaluationSetItemsOApiRequest) (r *BatchCreateEvaluationSetItemsOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult
	if err = p.Client_().Call(ctx, "BatchCreateEvaluationSetItemsOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) BatchUpdateEvaluationSetItemsOApi(ctx context.Context, req *BatchUpdateEvaluationSetItemsOApiRequest) (r *BatchUpdateEvaluationSetItemsOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult
	if err = p.Client_().Call(ctx, "BatchUpdateEvaluationSetItemsOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) BatchDeleteEvaluationSetItemsOApi(ctx context.Context, req *BatchDeleteEvaluationSetItemsOApiRequest) (r *BatchDeleteEvaluationSetItemsOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult
	if err = p.Client_().Call(ctx, "BatchDeleteEvaluationSetItemsOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) ListEvaluationSetVersionItemsOApi(ctx context.Context, req *ListEvaluationSetVersionItemsOApiRequest) (r *ListEvaluationSetVersionItemsOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult
	if err = p.Client_().Call(ctx, "ListEvaluationSetVersionItemsOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) CreateEvaluatorOApi(ctx context.Context, req *CreateEvaluatorOApiRequest) (r *CreateEvaluatorOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceCreateEvaluatorOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceCreateEvaluatorOApiResult
	if err = p.Client_().Call(ctx, "CreateEvaluatorOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) SubmitEvaluatorVersionOApi(ctx context.Context, req *SubmitEvaluatorVersionOApiRequest) (r *SubmitEvaluatorVersionOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult
	if err = p.Client_().Call(ctx, "SubmitEvaluatorVersionOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) GetEvaluatorVersionOApi(ctx context.Context, req *GetEvaluatorVersionOApiRequest) (r *GetEvaluatorVersionOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult
	if err = p.Client_().Call(ctx, "GetEvaluatorVersionOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) RunEvaluatorOApi(ctx context.Context, req *RunEvaluatorOApiRequest) (r *RunEvaluatorOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceRunEvaluatorOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceRunEvaluatorOApiResult
	if err = p.Client_().Call(ctx, "RunEvaluatorOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) GetEvaluatorRecordOApi(ctx context.Context, req *GetEvaluatorRecordOApiRequest) (r *GetEvaluatorRecordOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult
	if err = p.Client_().Call(ctx, "GetEvaluatorRecordOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) CreateExperimentOApi(ctx context.Context, req *CreateExperimentOApiRequest) (r *CreateExperimentOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceCreateExperimentOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceCreateExperimentOApiResult
	if err = p.Client_().Call(ctx, "CreateExperimentOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluationOpenAPIServiceClient) GetExperimentResultOApi(ctx context.Context, req *GetExperimentResultOApiRequest) (r *GetExperimentResultOApiResponse, err error) {
	var _args EvaluationOpenAPIServiceGetExperimentResultOApiArgs
	_args.Req = req
	var _result EvaluationOpenAPIServiceGetExperimentResultOApiResult
	if err = p.Client_().Call(ctx, "GetExperimentResultOApi", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type EvaluationOpenAPIServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      EvaluationOpenAPIService
}

func (p *EvaluationOpenAPIServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *EvaluationOpenAPIServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *EvaluationOpenAPIServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewEvaluationOpenAPIServiceProcessor(handler EvaluationOpenAPIService) *EvaluationOpenAPIServiceProcessor {
	self := &EvaluationOpenAPIServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateEvaluationSetOApi", &evaluationOpenAPIServiceProcessorCreateEvaluationSetOApi{handler: handler})
	self.AddToProcessorMap("GetEvaluationSetOApi", &evaluationOpenAPIServiceProcessorGetEvaluationSetOApi{handler: handler})
	self.AddToProcessorMap("ListEvaluationSetsOApi", &evaluationOpenAPIServiceProcessorListEvaluationSetsOApi{handler: handler})
	self.AddToProcessorMap("CreateEvaluationSetVersionOApi", &evaluationOpenAPIServiceProcessorCreateEvaluationSetVersionOApi{handler: handler})
	self.AddToProcessorMap("BatchCreateEvaluationSetItemsOApi", &evaluationOpenAPIServiceProcessorBatchCreateEvaluationSetItemsOApi{handler: handler})
	self.AddToProcessorMap("BatchUpdateEvaluationSetItemsOApi", &evaluationOpenAPIServiceProcessorBatchUpdateEvaluationSetItemsOApi{handler: handler})
	self.AddToProcessorMap("BatchDeleteEvaluationSetItemsOApi", &evaluationOpenAPIServiceProcessorBatchDeleteEvaluationSetItemsOApi{handler: handler})
	self.AddToProcessorMap("ListEvaluationSetVersionItemsOApi", &evaluationOpenAPIServiceProcessorListEvaluationSetVersionItemsOApi{handler: handler})
	self.AddToProcessorMap("CreateEvaluatorOApi", &evaluationOpenAPIServiceProcessorCreateEvaluatorOApi{handler: handler})
	self.AddToProcessorMap("SubmitEvaluatorVersionOApi", &evaluationOpenAPIServiceProcessorSubmitEvaluatorVersionOApi{handler: handler})
	self.AddToProcessorMap("GetEvaluatorVersionOApi", &evaluationOpenAPIServiceProcessorGetEvaluatorVersionOApi{handler: handler})
	self.AddToProcessorMap("RunEvaluatorOApi", &evaluationOpenAPIServiceProcessorRunEvaluatorOApi{handler: handler})
	self.AddToProcessorMap("GetEvaluatorRecordOApi", &evaluationOpenAPIServiceProcessorGetEvaluatorRecordOApi{handler: handler})
	self.AddToProcessorMap("CreateExperimentOApi", &evaluationOpenAPIServiceProcessorCreateExperimentOApi{handler: handler})
	self.AddToProcessorMap("GetExperimentResultOApi", &evaluationOpenAPIServiceProcessorGetExperimentResultOApi{handler: handler})
	return self
}
func (p *EvaluationOpenAPIServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type evaluationOpenAPIServiceProcessorCreateEvaluationSetOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorCreateEvaluationSetOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEvaluationSetOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceCreateEvaluationSetOApiResult{}
	var retval *CreateEvaluationSetOApiResponse
	if retval, err2 = p.handler.CreateEvaluationSetOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEvaluationSetOApi: "+err2.Error())
		oprot.WriteMessageBegin("CreateEvaluationSetOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEvaluationSetOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorGetEvaluationSetOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorGetEvaluationSetOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceGetEvaluationSetOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEvaluationSetOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceGetEvaluationSetOApiResult{}
	var retval *GetEvaluationSetOApiResponse
	if retval, err2 = p.handler.GetEvaluationSetOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEvaluationSetOApi: "+err2.Error())
		oprot.WriteMessageBegin("GetEvaluationSetOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEvaluationSetOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorListEvaluationSetsOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorListEvaluationSetsOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceListEvaluationSetsOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListEvaluationSetsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceListEvaluationSetsOApiResult{}
	var retval *ListEvaluationSetsOApiResponse
	if retval, err2 = p.handler.ListEvaluationSetsOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEvaluationSetsOApi: "+err2.Error())
		oprot.WriteMessageBegin("ListEvaluationSetsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListEvaluationSetsOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorCreateEvaluationSetVersionOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorCreateEvaluationSetVersionOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEvaluationSetVersionOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult{}
	var retval *CreateEvaluationSetVersionOApiResponse
	if retval, err2 = p.handler.CreateEvaluationSetVersionOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEvaluationSetVersionOApi: "+err2.Error())
		oprot.WriteMessageBegin("CreateEvaluationSetVersionOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEvaluationSetVersionOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorBatchCreateEvaluationSetItemsOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorBatchCreateEvaluationSetItemsOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchCreateEvaluationSetItemsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult{}
	var retval *BatchCreateEvaluationSetItemsOApiResponse
	if retval, err2 = p.handler.BatchCreateEvaluationSetItemsOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchCreateEvaluationSetItemsOApi: "+err2.Error())
		oprot.WriteMessageBegin("BatchCreateEvaluationSetItemsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchCreateEvaluationSetItemsOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorBatchUpdateEvaluationSetItemsOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorBatchUpdateEvaluationSetItemsOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchUpdateEvaluationSetItemsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult{}
	var retval *BatchUpdateEvaluationSetItemsOApiResponse
	if retval, err2 = p.handler.BatchUpdateEvaluationSetItemsOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchUpdateEvaluationSetItemsOApi: "+err2.Error())
		oprot.WriteMessageBegin("BatchUpdateEvaluationSetItemsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchUpdateEvaluationSetItemsOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorBatchDeleteEvaluationSetItemsOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorBatchDeleteEvaluationSetItemsOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchDeleteEvaluationSetItemsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult{}
	var retval *BatchDeleteEvaluationSetItemsOApiResponse
	if retval, err2 = p.handler.BatchDeleteEvaluationSetItemsOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchDeleteEvaluationSetItemsOApi: "+err2.Error())
		oprot.WriteMessageBegin("BatchDeleteEvaluationSetItemsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchDeleteEvaluationSetItemsOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorListEvaluationSetVersionItemsOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorListEvaluationSetVersionItemsOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListEvaluationSetVersionItemsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult{}
	var retval *ListEvaluationSetVersionItemsOApiResponse
	if retval, err2 = p.handler.ListEvaluationSetVersionItemsOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEvaluationSetVersionItemsOApi: "+err2.Error())
		oprot.WriteMessageBegin("ListEvaluationSetVersionItemsOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListEvaluationSetVersionItemsOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorCreateEvaluatorOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorCreateEvaluatorOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceCreateEvaluatorOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEvaluatorOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceCreateEvaluatorOApiResult{}
	var retval *CreateEvaluatorOApiResponse
	if retval, err2 = p.handler.CreateEvaluatorOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEvaluatorOApi: "+err2.Error())
		oprot.WriteMessageBegin("CreateEvaluatorOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEvaluatorOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorSubmitEvaluatorVersionOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorSubmitEvaluatorVersionOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SubmitEvaluatorVersionOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult{}
	var retval *SubmitEvaluatorVersionOApiResponse
	if retval, err2 = p.handler.SubmitEvaluatorVersionOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SubmitEvaluatorVersionOApi: "+err2.Error())
		oprot.WriteMessageBegin("SubmitEvaluatorVersionOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SubmitEvaluatorVersionOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorGetEvaluatorVersionOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorGetEvaluatorVersionOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEvaluatorVersionOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult{}
	var retval *GetEvaluatorVersionOApiResponse
	if retval, err2 = p.handler.GetEvaluatorVersionOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEvaluatorVersionOApi: "+err2.Error())
		oprot.WriteMessageBegin("GetEvaluatorVersionOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEvaluatorVersionOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorRunEvaluatorOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorRunEvaluatorOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceRunEvaluatorOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RunEvaluatorOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceRunEvaluatorOApiResult{}
	var retval *RunEvaluatorOApiResponse
	if retval, err2 = p.handler.RunEvaluatorOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RunEvaluatorOApi: "+err2.Error())
		oprot.WriteMessageBegin("RunEvaluatorOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RunEvaluatorOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorGetEvaluatorRecordOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorGetEvaluatorRecordOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEvaluatorRecordOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult{}
	var retval *GetEvaluatorRecordOApiResponse
	if retval, err2 = p.handler.GetEvaluatorRecordOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEvaluatorRecordOApi: "+err2.Error())
		oprot.WriteMessageBegin("GetEvaluatorRecordOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEvaluatorRecordOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorCreateExperimentOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorCreateExperimentOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceCreateExperimentOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateExperimentOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceCreateExperimentOApiResult{}
	var retval *CreateExperimentOApiResponse
	if retval, err2 = p.handler.CreateExperimentOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateExperimentOApi: "+err2.Error())
		oprot.WriteMessageBegin("CreateExperimentOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateExperimentOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluationOpenAPIServiceProcessorGetExperimentResultOApi struct {
	handler EvaluationOpenAPIService
}

func (p *evaluationOpenAPIServiceProcessorGetExperimentResultOApi) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluationOpenAPIServiceGetExperimentResultOApiArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetExperimentResultOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluationOpenAPIServiceGetExperimentResultOApiResult{}
	var retval *GetExperimentResultOApiResponse
	if retval, err2 = p.handler.GetExperimentResultOApi(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetExperimentResultOApi: "+err2.Error())
		oprot.WriteMessageBegin("GetExperimentResultOApi", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetExperimentResultOApi", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs struct {
	Req *CreateEvaluationSetOApiRequest `thrift:"req,1" frugal:"1,default,CreateEvaluationSetOApiRequest"`
}

func NewEvaluationOpenAPIServiceCreateEvaluationSetOApiArgs() *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs {
	return &EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs{}
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs_Req_DEFAULT *CreateEvaluationSetOApiRequest

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) GetReq() (v *CreateEvaluationSetOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) SetReq(val *CreateEvaluationSetOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs) Field1DeepEqual(src *CreateEvaluationSetOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceCreateEvaluationSetOApiResult struct {
	Success *CreateEvaluationSetOApiResponse `thrift:"success,0,optional" frugal:"0,optional,CreateEvaluationSetOApiResponse"`
}

func NewEvaluationOpenAPIServiceCreateEvaluationSetOApiResult() *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult {
	return &EvaluationOpenAPIServiceCreateEvaluationSetOApiResult{}
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceCreateEvaluationSetOApiResult_Success_DEFAULT *CreateEvaluationSetOApiResponse

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) GetSuccess() (v *CreateEvaluationSetOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceCreateEvaluationSetOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEvaluationSetOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateEvaluationSetOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetOApiResult) Field0DeepEqual(src *CreateEvaluationSetOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetEvaluationSetOApiArgs struct {
	Req *GetEvaluationSetOApiRequest `thrift:"req,1" frugal:"1,default,GetEvaluationSetOApiRequest"`
}

func NewEvaluationOpenAPIServiceGetEvaluationSetOApiArgs() *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs {
	return &EvaluationOpenAPIServiceGetEvaluationSetOApiArgs{}
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceGetEvaluationSetOApiArgs_Req_DEFAULT *GetEvaluationSetOApiRequest

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) GetReq() (v *GetEvaluationSetOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceGetEvaluationSetOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) SetReq(val *GetEvaluationSetOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceGetEvaluationSetOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetEvaluationSetOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEvaluationSetOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetEvaluationSetOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiArgs) Field1DeepEqual(src *GetEvaluationSetOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetEvaluationSetOApiResult struct {
	Success *GetEvaluationSetOApiResponse `thrift:"success,0,optional" frugal:"0,optional,GetEvaluationSetOApiResponse"`
}

func NewEvaluationOpenAPIServiceGetEvaluationSetOApiResult() *EvaluationOpenAPIServiceGetEvaluationSetOApiResult {
	return &EvaluationOpenAPIServiceGetEvaluationSetOApiResult{}
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceGetEvaluationSetOApiResult_Success_DEFAULT *GetEvaluationSetOApiResponse

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) GetSuccess() (v *GetEvaluationSetOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceGetEvaluationSetOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetEvaluationSetOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceGetEvaluationSetOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetEvaluationSetOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEvaluationSetOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluationSetOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetEvaluationSetOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetEvaluationSetOApiResult) Field0DeepEqual(src *GetEvaluationSetOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceListEvaluationSetsOApiArgs struct {
	Req *ListEvaluationSetsOApiRequest `thrift:"req,1" frugal:"1,default,ListEvaluationSetsOApiRequest"`
}

func NewEvaluationOpenAPIServiceListEvaluationSetsOApiArgs() *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs {
	return &EvaluationOpenAPIServiceListEvaluationSetsOApiArgs{}
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceListEvaluationSetsOApiArgs_Req_DEFAULT *ListEvaluationSetsOApiRequest

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) GetReq() (v *ListEvaluationSetsOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceListEvaluationSetsOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) SetReq(val *ListEvaluationSetsOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetsOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetsOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetsOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetsOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceListEvaluationSetsOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiArgs) Field1DeepEqual(src *ListEvaluationSetsOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceListEvaluationSetsOApiResult struct {
	Success *ListEvaluationSetsOApiResponse `thrift:"success,0,optional" frugal:"0,optional,ListEvaluationSetsOApiResponse"`
}

func NewEvaluationOpenAPIServiceListEvaluationSetsOApiResult() *EvaluationOpenAPIServiceListEvaluationSetsOApiResult {
	return &EvaluationOpenAPIServiceListEvaluationSetsOApiResult{}
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceListEvaluationSetsOApiResult_Success_DEFAULT *ListEvaluationSetsOApiResponse

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) GetSuccess() (v *ListEvaluationSetsOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceListEvaluationSetsOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListEvaluationSetsOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetsOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetsOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetsOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetsOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceListEvaluationSetsOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceListEvaluationSetsOApiResult) Field0DeepEqual(src *ListEvaluationSetsOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs struct {
	Req *CreateEvaluationSetVersionOApiRequest `thrift:"req,1" frugal:"1,default,CreateEvaluationSetVersionOApiRequest"`
}

func NewEvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs() *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs {
	return &EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs{}
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs_Req_DEFAULT *CreateEvaluationSetVersionOApiRequest

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) GetReq() (v *CreateEvaluationSetVersionOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) SetReq(val *CreateEvaluationSetVersionOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetVersionOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersionOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs) Field1DeepEqual(src *CreateEvaluationSetVersionOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult struct {
	Success *CreateEvaluationSetVersionOApiResponse `thrift:"success,0,optional" frugal:"0,optional,CreateEvaluationSetVersionOApiResponse"`
}

func NewEvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult() *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult {
	return &EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult{}
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult_Success_DEFAULT *CreateEvaluationSetVersionOApiResponse

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) GetSuccess() (v *CreateEvaluationSetVersionOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEvaluationSetVersionOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluationSetVersionOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluationSetVersionOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult) Field0DeepEqual(src *CreateEvaluationSetVersionOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs struct {
	Req *BatchCreateEvaluationSetItemsOApiRequest `thrift:"req,1" frugal:"1,default,BatchCreateEvaluationSetItemsOApiRequest"`
}

func NewEvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs() *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs {
	return &EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs{}
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs_Req_DEFAULT *BatchCreateEvaluationSetItemsOApiRequest

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) GetReq() (v *BatchCreateEvaluationSetItemsOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) SetReq(val *BatchCreateEvaluationSetItemsOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchCreateEvaluationSetItemsOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItemsOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs) Field1DeepEqual(src *BatchCreateEvaluationSetItemsOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult struct {
	Success *BatchCreateEvaluationSetItemsOApiResponse `thrift:"success,0,optional" frugal:"0,optional,BatchCreateEvaluationSetItemsOApiResponse"`
}

func NewEvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult() *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult {
	return &EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult{}
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult_Success_DEFAULT *BatchCreateEvaluationSetItemsOApiResponse

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) GetSuccess() (v *BatchCreateEvaluationSetItemsOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchCreateEvaluationSetItemsOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchCreateEvaluationSetItemsOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchCreateEvaluationSetItemsOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult) Field0DeepEqual(src *BatchCreateEvaluationSetItemsOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs struct {
	Req *BatchUpdateEvaluationSetItemsOApiRequest `thrift:"req,1" frugal:"1,default,BatchUpdateEvaluationSetItemsOApiRequest"`
}

func NewEvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs() *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs {
	return &EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs{}
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs_Req_DEFAULT *BatchUpdateEvaluationSetItemsOApiRequest

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) GetReq() (v *BatchUpdateEvaluationSetItemsOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) SetReq(val *BatchUpdateEvaluationSetItemsOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchUpdateEvaluationSetItemsOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateEvaluationSetItemsOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs) Field1DeepEqual(src *BatchUpdateEvaluationSetItemsOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult struct {
	Success *BatchUpdateEvaluationSetItemsOApiResponse `thrift:"success,0,optional" frugal:"0,optional,BatchUpdateEvaluationSetItemsOApiResponse"`
}

func NewEvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult() *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult {
	return &EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult{}
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult_Success_DEFAULT *BatchUpdateEvaluationSetItemsOApiResponse

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) GetSuccess() (v *BatchUpdateEvaluationSetItemsOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchUpdateEvaluationSetItemsOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchUpdateEvaluationSetItemsOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateEvaluationSetItemsOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult) Field0DeepEqual(src *BatchUpdateEvaluationSetItemsOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs struct {
	Req *BatchDeleteEvaluationSetItemsOApiRequest `thrift:"req,1" frugal:"1,default,BatchDeleteEvaluationSetItemsOApiRequest"`
}

func NewEvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs() *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs {
	return &EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs{}
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs_Req_DEFAULT *BatchDeleteEvaluationSetItemsOApiRequest

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) GetReq() (v *BatchDeleteEvaluationSetItemsOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) SetReq(val *BatchDeleteEvaluationSetItemsOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchDeleteEvaluationSetItemsOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteEvaluationSetItemsOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs) Field1DeepEqual(src *BatchDeleteEvaluationSetItemsOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult struct {
	Success *BatchDeleteEvaluationSetItemsOApiResponse `thrift:"success,0,optional" frugal:"0,optional,BatchDeleteEvaluationSetItemsOApiResponse"`
}

func NewEvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult() *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult {
	return &EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult{}
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult_Success_DEFAULT *BatchDeleteEvaluationSetItemsOApiResponse

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) GetSuccess() (v *BatchDeleteEvaluationSetItemsOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchDeleteEvaluationSetItemsOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchDeleteEvaluationSetItemsOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteEvaluationSetItemsOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult) Field0DeepEqual(src *BatchDeleteEvaluationSetItemsOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs struct {
	Req *ListEvaluationSetVersionItemsOApiRequest `thrift:"req,1" frugal:"1,default,ListEvaluationSetVersionItemsOApiRequest"`
}

func NewEvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs() *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs {
	return &EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs{}
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs_Req_DEFAULT *ListEvaluationSetVersionItemsOApiRequest

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) GetReq() (v *ListEvaluationSetVersionItemsOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) SetReq(val *ListEvaluationSetVersionItemsOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetVersionItemsOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionItemsOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs) Field1DeepEqual(src *ListEvaluationSetVersionItemsOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult struct {
	Success *ListEvaluationSetVersionItemsOApiResponse `thrift:"success,0,optional" frugal:"0,optional,ListEvaluationSetVersionItemsOApiResponse"`
}

func NewEvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult() *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult {
	return &EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult{}
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult_Success_DEFAULT *ListEvaluationSetVersionItemsOApiResponse

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) GetSuccess() (v *ListEvaluationSetVersionItemsOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListEvaluationSetVersionItemsOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListEvaluationSetVersionItemsOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluationSetVersionItemsOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult) Field0DeepEqual(src *ListEvaluationSetVersionItemsOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceCreateEvaluatorOApiArgs struct {
	Req *CreateEvaluatorOApiRequest `thrift:"req,1" frugal:"1,default,CreateEvaluatorOApiRequest"`
}

func NewEvaluationOpenAPIServiceCreateEvaluatorOApiArgs() *EvaluationOpenAPIServiceCreateEvaluatorOApiArgs {
	return &EvaluationOpenAPIServiceCreateEvaluatorOApiArgs{}
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceCreateEvaluatorOApiArgs_Req_DEFAULT *CreateEvaluatorOApiRequest

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiArgs) GetReq() (v *CreateEvaluatorOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceCreateEvaluatorOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiArgs) SetReq(val *CreateEvaluatorOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceCreateEvaluatorOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateEvaluatorOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluatorOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluatorOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateEvaluatorOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceCreateEvaluatorOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiArgs) Field1DeepEqual(src *CreateEvaluatorOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceCreateEvaluatorOApiResult struct {
	Success *CreateEvaluatorOApiResponse `thrift:"success,0,optional" frugal:"0,optional,CreateEvaluatorOApiResponse"`
}

func NewEvaluationOpenAPIServiceCreateEvaluatorOApiResult() *EvaluationOpenAPIServiceCreateEvaluatorOApiResult {
	return &EvaluationOpenAPIServiceCreateEvaluatorOApiResult{}
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceCreateEvaluatorOApiResult_Success_DEFAULT *CreateEvaluatorOApiResponse

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiResult) GetSuccess() (v *CreateEvaluatorOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceCreateEvaluatorOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEvaluatorOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceCreateEvaluatorOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateEvaluatorOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluatorOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluatorOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateEvaluatorOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceCreateEvaluatorOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateEvaluatorOApiResult) Field0DeepEqual(src *CreateEvaluatorOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs struct {
	Req *SubmitEvaluatorVersionOApiRequest `thrift:"req,1" frugal:"1,default,SubmitEvaluatorVersionOApiRequest"`
}

func NewEvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs() *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs {
	return &EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs{}
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs_Req_DEFAULT *SubmitEvaluatorVersionOApiRequest

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs) GetReq() (v *SubmitEvaluatorVersionOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs) SetReq(val *SubmitEvaluatorVersionOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSubmitEvaluatorVersionOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitEvaluatorVersionOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiArgs) Field1DeepEqual(src *SubmitEvaluatorVersionOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult struct {
	Success *SubmitEvaluatorVersionOApiResponse `thrift:"success,0,optional" frugal:"0,optional,SubmitEvaluatorVersionOApiResponse"`
}

func NewEvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult() *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult {
	return &EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult{}
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult_Success_DEFAULT *SubmitEvaluatorVersionOApiResponse

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult) GetSuccess() (v *SubmitEvaluatorVersionOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*SubmitEvaluatorVersionOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSubmitEvaluatorVersionOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitEvaluatorVersionOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceSubmitEvaluatorVersionOApiResult) Field0DeepEqual(src *SubmitEvaluatorVersionOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs struct {
	Req *GetEvaluatorVersionOApiRequest `thrift:"req,1" frugal:"1,default,GetEvaluatorVersionOApiRequest"`
}

func NewEvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs() *EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs {
	return &EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs{}
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs_Req_DEFAULT *GetEvaluatorVersionOApiRequest

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs) GetReq() (v *GetEvaluatorVersionOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs) SetReq(val *GetEvaluatorVersionOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorVersionOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorVersionOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiArgs) Field1DeepEqual(src *GetEvaluatorVersionOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult struct {
	Success *GetEvaluatorVersionOApiResponse `thrift:"success,0,optional" frugal:"0,optional,GetEvaluatorVersionOApiResponse"`
}

func NewEvaluationOpenAPIServiceGetEvaluatorVersionOApiResult() *EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult {
	return &EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult{}
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult_Success_DEFAULT *GetEvaluatorVersionOApiResponse

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult) GetSuccess() (v *GetEvaluatorVersionOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetEvaluatorVersionOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorVersionOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorVersionOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetEvaluatorVersionOApiResult) Field0DeepEqual(src *GetEvaluatorVersionOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceRunEvaluatorOApiArgs struct {
	Req *RunEvaluatorOApiRequest `thrift:"req,1" frugal:"1,default,RunEvaluatorOApiRequest"`
}

func NewEvaluationOpenAPIServiceRunEvaluatorOApiArgs() *EvaluationOpenAPIServiceRunEvaluatorOApiArgs {
	return &EvaluationOpenAPIServiceRunEvaluatorOApiArgs{}
}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceRunEvaluatorOApiArgs_Req_DEFAULT *RunEvaluatorOApiRequest

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiArgs) GetReq() (v *RunEvaluatorOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceRunEvaluatorOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceRunEvaluatorOApiArgs) SetReq(val *RunEvaluatorOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceRunEvaluatorOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceRunEvaluatorOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRunEvaluatorOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunEvaluatorOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceRunEvaluatorOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceRunEvaluatorOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiArgs) Field1DeepEqual(src *RunEvaluatorOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceRunEvaluatorOApiResult struct {
	Success *RunEvaluatorOApiResponse `thrift:"success,0,optional" frugal:"0,optional,RunEvaluatorOApiResponse"`
}

func NewEvaluationOpenAPIServiceRunEvaluatorOApiResult() *EvaluationOpenAPIServiceRunEvaluatorOApiResult {
	return &EvaluationOpenAPIServiceRunEvaluatorOApiResult{}
}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceRunEvaluatorOApiResult_Success_DEFAULT *RunEvaluatorOApiResponse

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiResult) GetSuccess() (v *RunEvaluatorOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceRunEvaluatorOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceRunEvaluatorOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*RunEvaluatorOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceRunEvaluatorOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceRunEvaluatorOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRunEvaluatorOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunEvaluatorOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceRunEvaluatorOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceRunEvaluatorOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceRunEvaluatorOApiResult) Field0DeepEqual(src *RunEvaluatorOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs struct {
	Req *GetEvaluatorRecordOApiRequest `thrift:"req,1" frugal:"1,default,GetEvaluatorRecordOApiRequest"`
}

func NewEvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs() *EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs {
	return &EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs{}
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs_Req_DEFAULT *GetEvaluatorRecordOApiRequest

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs) GetReq() (v *GetEvaluatorRecordOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs) SetReq(val *GetEvaluatorRecordOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorRecordOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorRecordOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiArgs) Field1DeepEqual(src *GetEvaluatorRecordOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult struct {
	Success *GetEvaluatorRecordOApiResponse `thrift:"success,0,optional" frugal:"0,optional,GetEvaluatorRecordOApiResponse"`
}

func NewEvaluationOpenAPIServiceGetEvaluatorRecordOApiResult() *EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult {
	return &EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult{}
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult_Success_DEFAULT *GetEvaluatorRecordOApiResponse

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult) GetSuccess() (v *GetEvaluatorRecordOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetEvaluatorRecordOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorRecordOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorRecordOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetEvaluatorRecordOApiResult) Field0DeepEqual(src *GetEvaluatorRecordOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceCreateExperimentOApiArgs struct {
	Req *CreateExperimentOApiRequest `thrift:"req,1" frugal:"1,default,CreateExperimentOApiRequest"`
}

func NewEvaluationOpenAPIServiceCreateExperimentOApiArgs() *EvaluationOpenAPIServiceCreateExperimentOApiArgs {
	return &EvaluationOpenAPIServiceCreateExperimentOApiArgs{}
}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceCreateExperimentOApiArgs_Req_DEFAULT *CreateExperimentOApiRequest

func (p *EvaluationOpenAPIServiceCreateExperimentOApiArgs) GetReq() (v *CreateExperimentOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceCreateExperimentOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceCreateExperimentOApiArgs) SetReq(val *CreateExperimentOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceCreateExperimentOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateExperimentOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateExperimentOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateExperimentOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateExperimentOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceCreateExperimentOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiArgs) Field1DeepEqual(src *CreateExperimentOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceCreateExperimentOApiResult struct {
	Success *CreateExperimentOApiResponse `thrift:"success,0,optional" frugal:"0,optional,CreateExperimentOApiResponse"`
}

func NewEvaluationOpenAPIServiceCreateExperimentOApiResult() *EvaluationOpenAPIServiceCreateExperimentOApiResult {
	return &EvaluationOpenAPIServiceCreateExperimentOApiResult{}
}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceCreateExperimentOApiResult_Success_DEFAULT *CreateExperimentOApiResponse

func (p *EvaluationOpenAPIServiceCreateExperimentOApiResult) GetSuccess() (v *CreateExperimentOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceCreateExperimentOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceCreateExperimentOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateExperimentOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceCreateExperimentOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceCreateExperimentOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateExperimentOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateExperimentOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceCreateExperimentOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceCreateExperimentOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceCreateExperimentOApiResult) Field0DeepEqual(src *CreateExperimentOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetExperimentResultOApiArgs struct {
	Req *GetExperimentResultOApiRequest `thrift:"req,1" frugal:"1,default,GetExperimentResultOApiRequest"`
}

func NewEvaluationOpenAPIServiceGetExperimentResultOApiArgs() *EvaluationOpenAPIServiceGetExperimentResultOApiArgs {
	return &EvaluationOpenAPIServiceGetExperimentResultOApiArgs{}
}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiArgs) InitDefault() {
}

var EvaluationOpenAPIServiceGetExperimentResultOApiArgs_Req_DEFAULT *GetExperimentResultOApiRequest

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiArgs) GetReq() (v *GetExperimentResultOApiRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluationOpenAPIServiceGetExperimentResultOApiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluationOpenAPIServiceGetExperimentResultOApiArgs) SetReq(val *GetExperimentResultOApiRequest) {
	p.Req = val
}

var fieldIDToName_EvaluationOpenAPIServiceGetExperimentResultOApiArgs = map[int16]string{
	1: "req",
}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetExperimentResultOApiArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetExperimentResultOApiRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentResultOApi_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetExperimentResultOApiArgs(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiArgs) DeepEqual(ano *EvaluationOpenAPIServiceGetExperimentResultOApiArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiArgs) Field1DeepEqual(src *GetExperimentResultOApiRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationOpenAPIServiceGetExperimentResultOApiResult struct {
	Success *GetExperimentResultOApiResponse `thrift:"success,0,optional" frugal:"0,optional,GetExperimentResultOApiResponse"`
}

func NewEvaluationOpenAPIServiceGetExperimentResultOApiResult() *EvaluationOpenAPIServiceGetExperimentResultOApiResult {
	return &EvaluationOpenAPIServiceGetExperimentResultOApiResult{}
}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiResult) InitDefault() {
}

var EvaluationOpenAPIServiceGetExperimentResultOApiResult_Success_DEFAULT *GetExperimentResultOApiResponse

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiResult) GetSuccess() (v *GetExperimentResultOApiResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluationOpenAPIServiceGetExperimentResultOApiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluationOpenAPIServiceGetExperimentResultOApiResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetExperimentResultOApiResponse)
}

var fieldIDToName_EvaluationOpenAPIServiceGetExperimentResultOApiResult = map[int16]string{
	0: "success",
}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationOpenAPIServiceGetExperimentResultOApiResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetExperimentResultOApiResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetExperimentResultOApi_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationOpenAPIServiceGetExperimentResultOApiResult(%+v)", *p)

}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiResult) DeepEqual(ano *EvaluationOpenAPIServiceGetExperimentResultOApiResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluationOpenAPIServiceGetExperimentResultOApiResult) Field0DeepEqual(src *GetExperimentResultOApiResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

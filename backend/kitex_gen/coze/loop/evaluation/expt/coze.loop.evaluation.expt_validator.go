// Code generated by Validator v0.2.6. DO NOT EDIT.

package expt

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *CreateExperimentRequest) IsValid() error {
	if p.TargetFieldMapping != nil {
		if err := p.TargetFieldMapping.IsValid(); err != nil {
			return fmt.Errorf("field TargetFieldMapping not valid, %w", err)
		}
	}
	if p.CreateEvalTargetParam != nil {
		if err := p.CreateEvalTargetParam.IsValid(); err != nil {
			return fmt.Errorf("field CreateEvalTargetParam not valid, %w", err)
		}
	}
	if p.TargetRuntimeParam != nil {
		if err := p.TargetRuntimeParam.IsValid(); err != nil {
			return fmt.Errorf("field TargetRuntimeParam not valid, %w", err)
		}
	}
	if p.Session != nil {
		if err := p.Session.IsValid(); err != nil {
			return fmt.Errorf("field Session not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateExperimentResponse) IsValid() error {
	if p.Experiment != nil {
		if err := p.Experiment.IsValid(); err != nil {
			return fmt.Errorf("field Experiment not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *SubmitExperimentRequest) IsValid() error {
	if p.TargetFieldMapping != nil {
		if err := p.TargetFieldMapping.IsValid(); err != nil {
			return fmt.Errorf("field TargetFieldMapping not valid, %w", err)
		}
	}
	if p.CreateEvalTargetParam != nil {
		if err := p.CreateEvalTargetParam.IsValid(); err != nil {
			return fmt.Errorf("field CreateEvalTargetParam not valid, %w", err)
		}
	}
	if p.TargetRuntimeParam != nil {
		if err := p.TargetRuntimeParam.IsValid(); err != nil {
			return fmt.Errorf("field TargetRuntimeParam not valid, %w", err)
		}
	}
	if p.Session != nil {
		if err := p.Session.IsValid(); err != nil {
			return fmt.Errorf("field Session not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *SubmitExperimentResponse) IsValid() error {
	if p.Experiment != nil {
		if err := p.Experiment.IsValid(); err != nil {
			return fmt.Errorf("field Experiment not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListExperimentsRequest) IsValid() error {
	if p.FilterOption != nil {
		if err := p.FilterOption.IsValid(); err != nil {
			return fmt.Errorf("field FilterOption not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListExperimentsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetExperimentsRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetExperimentsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateExperimentRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateExperimentResponse) IsValid() error {
	if p.Experiment != nil {
		if err := p.Experiment.IsValid(); err != nil {
			return fmt.Errorf("field Experiment not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *DeleteExperimentRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *DeleteExperimentResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchDeleteExperimentsRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchDeleteExperimentsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *RunExperimentRequest) IsValid() error {
	if p.Session != nil {
		if err := p.Session.IsValid(); err != nil {
			return fmt.Errorf("field Session not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *RunExperimentResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *RetryExperimentRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *RetryExperimentResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *KillExperimentRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *KillExperimentResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *CloneExperimentRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CloneExperimentResponse) IsValid() error {
	if p.Experiment != nil {
		if err := p.Experiment.IsValid(); err != nil {
			return fmt.Errorf("field Experiment not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetExperimentResultRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetExperimentResultResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetExperimentAggrResultRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetExperimentAggrResultResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *CheckExperimentNameRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CheckExperimentNameResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *InvokeExperimentRequest) IsValid() error {
	if len(p.Items) < int(1) {
		return fmt.Errorf("field Items MinLen rule failed, current value: %v", p.Items)
	}
	if len(p.Items) > int(100) {
		return fmt.Errorf("field Items MaxLen rule failed, current value: %v", p.Items)
	}
	if p.Session != nil {
		if err := p.Session.IsValid(); err != nil {
			return fmt.Errorf("field Session not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *InvokeExperimentResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *FinishExperimentRequest) IsValid() error {
	if p.Session != nil {
		if err := p.Session.IsValid(); err != nil {
			return fmt.Errorf("field Session not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *FinishExperimentResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListExperimentStatsRequest) IsValid() error {
	if p.FilterOption != nil {
		if err := p.FilterOption.IsValid(); err != nil {
			return fmt.Errorf("field FilterOption not valid, %w", err)
		}
	}
	if p.Session != nil {
		if err := p.Session.IsValid(); err != nil {
			return fmt.Errorf("field Session not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListExperimentStatsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *UpsertExptTurnResultFilterRequest) IsValid() error {
	return nil
}
func (p *UpsertExptTurnResultFilterResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *AssociateAnnotationTagReq) IsValid() error {
	if p.Session != nil {
		if err := p.Session.IsValid(); err != nil {
			return fmt.Errorf("field Session not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *AssociateAnnotationTagResp) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *DeleteAnnotationTagReq) IsValid() error {
	if p.Session != nil {
		if err := p.Session.IsValid(); err != nil {
			return fmt.Errorf("field Session not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *DeleteAnnotationTagResp) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateAnnotateRecordReq) IsValid() error {
	if p.AnnotateRecord != nil {
		if err := p.AnnotateRecord.IsValid(); err != nil {
			return fmt.Errorf("field AnnotateRecord not valid, %w", err)
		}
	}
	if p.Session != nil {
		if err := p.Session.IsValid(); err != nil {
			return fmt.Errorf("field Session not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateAnnotateRecordResp) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateAnnotateRecordReq) IsValid() error {
	if p.AnnotateRecords != nil {
		if err := p.AnnotateRecords.IsValid(); err != nil {
			return fmt.Errorf("field AnnotateRecords not valid, %w", err)
		}
	}
	if p.Session != nil {
		if err := p.Session.IsValid(); err != nil {
			return fmt.Errorf("field Session not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateAnnotateRecordResp) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ExportExptResultRequest) IsValid() error {
	if p.Session != nil {
		if err := p.Session.IsValid(); err != nil {
			return fmt.Errorf("field Session not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ExportExptResultResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListExptResultExportRecordRequest) IsValid() error {
	if p.Session != nil {
		if err := p.Session.IsValid(); err != nil {
			return fmt.Errorf("field Session not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListExptResultExportRecordResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetExptResultExportRecordRequest) IsValid() error {
	if p.Session != nil {
		if err := p.Session.IsValid(); err != nil {
			return fmt.Errorf("field Session not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetExptResultExportRecordResponse) IsValid() error {
	if p.ExptResultExportRecord != nil {
		if err := p.ExptResultExportRecord.IsValid(); err != nil {
			return fmt.Errorf("field ExptResultExportRecord not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}

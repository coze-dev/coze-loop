// Code generated by Validator v0.2.6. DO NOT EDIT.

package evaluator

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *Message) IsValid() error {
	if p.Content != nil {
		if err := p.Content.IsValid(); err != nil {
			return fmt.Errorf("field Content not valid, %w", err)
		}
	}
	return nil
}
func (p *PromptEvaluator) IsValid() error {
	if p.ModelConfig != nil {
		if err := p.ModelConfig.IsValid(); err != nil {
			return fmt.Errorf("field ModelConfig not valid, %w", err)
		}
	}
	return nil
}
func (p *CodeEvaluator) IsValid() error {
	return nil
}
func (p *EvaluatorContent) IsValid() error {
	if p.PromptEvaluator != nil {
		if err := p.PromptEvaluator.IsValid(); err != nil {
			return fmt.Errorf("field PromptEvaluator not valid, %w", err)
		}
	}
	if p.CodeEvaluator != nil {
		if err := p.CodeEvaluator.IsValid(); err != nil {
			return fmt.Errorf("field CodeEvaluator not valid, %w", err)
		}
	}
	return nil
}
func (p *EvaluatorVersion) IsValid() error {
	if p.EvaluatorContent != nil {
		if err := p.EvaluatorContent.IsValid(); err != nil {
			return fmt.Errorf("field EvaluatorContent not valid, %w", err)
		}
	}
	if p.BaseInfo != nil {
		if err := p.BaseInfo.IsValid(); err != nil {
			return fmt.Errorf("field BaseInfo not valid, %w", err)
		}
	}
	return nil
}
func (p *Evaluator) IsValid() error {
	if p.CurrentVersion != nil {
		if err := p.CurrentVersion.IsValid(); err != nil {
			return fmt.Errorf("field CurrentVersion not valid, %w", err)
		}
	}
	if p.BaseInfo != nil {
		if err := p.BaseInfo.IsValid(); err != nil {
			return fmt.Errorf("field BaseInfo not valid, %w", err)
		}
	}
	return nil
}
func (p *EvaluatorResult_) IsValid() error {
	return nil
}
func (p *EvaluatorUsage) IsValid() error {
	return nil
}
func (p *EvaluatorRunError) IsValid() error {
	return nil
}
func (p *EvaluatorOutputData) IsValid() error {
	if p.EvaluatorResult_ != nil {
		if err := p.EvaluatorResult_.IsValid(); err != nil {
			return fmt.Errorf("field EvaluatorResult_ not valid, %w", err)
		}
	}
	if p.EvaluatorUsage != nil {
		if err := p.EvaluatorUsage.IsValid(); err != nil {
			return fmt.Errorf("field EvaluatorUsage not valid, %w", err)
		}
	}
	if p.EvaluatorRunError != nil {
		if err := p.EvaluatorRunError.IsValid(); err != nil {
			return fmt.Errorf("field EvaluatorRunError not valid, %w", err)
		}
	}
	return nil
}
func (p *EvaluatorInputData) IsValid() error {
	return nil
}
func (p *EvaluatorRecord) IsValid() error {
	if p.EvaluatorInputData != nil {
		if err := p.EvaluatorInputData.IsValid(); err != nil {
			return fmt.Errorf("field EvaluatorInputData not valid, %w", err)
		}
	}
	if p.EvaluatorOutputData != nil {
		if err := p.EvaluatorOutputData.IsValid(); err != nil {
			return fmt.Errorf("field EvaluatorOutputData not valid, %w", err)
		}
	}
	if p.BaseInfo != nil {
		if err := p.BaseInfo.IsValid(); err != nil {
			return fmt.Errorf("field BaseInfo not valid, %w", err)
		}
	}
	return nil
}

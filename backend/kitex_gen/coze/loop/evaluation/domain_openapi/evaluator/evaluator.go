// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package evaluator

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain_openapi/common"
	"strings"
)

const (
	EvaluatorTypePrompt = "prompt"

	EvaluatorTypeCode = "code"

	LanguageTypePython = "python"

	LanguageTypeJS = "javascript"

	EvaluatorRunStatusSuccess = "success"

	EvaluatorRunStatusFailed = "failed"

	EvaluatorRunStatusProcessing = "processing"
)

// 评估器类型
type EvaluatorType = string

// 语言类型
type LanguageType = string

// 运行状态
type EvaluatorRunStatus = string

// Prompt评估器
type PromptEvaluator struct {
	MessageList []*common.Message   `thrift:"message_list,1,optional" frugal:"1,optional,list<common.Message>" form:"message_list" json:"message_list,omitempty" query:"message_list"`
	ModelConfig *common.ModelConfig `thrift:"model_config,2,optional" frugal:"2,optional,common.ModelConfig" form:"model_config" json:"model_config,omitempty" query:"model_config"`
}

func NewPromptEvaluator() *PromptEvaluator {
	return &PromptEvaluator{}
}

func (p *PromptEvaluator) InitDefault() {
}

var PromptEvaluator_MessageList_DEFAULT []*common.Message

func (p *PromptEvaluator) GetMessageList() (v []*common.Message) {
	if p == nil {
		return
	}
	if !p.IsSetMessageList() {
		return PromptEvaluator_MessageList_DEFAULT
	}
	return p.MessageList
}

var PromptEvaluator_ModelConfig_DEFAULT *common.ModelConfig

func (p *PromptEvaluator) GetModelConfig() (v *common.ModelConfig) {
	if p == nil {
		return
	}
	if !p.IsSetModelConfig() {
		return PromptEvaluator_ModelConfig_DEFAULT
	}
	return p.ModelConfig
}
func (p *PromptEvaluator) SetMessageList(val []*common.Message) {
	p.MessageList = val
}
func (p *PromptEvaluator) SetModelConfig(val *common.ModelConfig) {
	p.ModelConfig = val
}

var fieldIDToName_PromptEvaluator = map[int16]string{
	1: "message_list",
	2: "model_config",
}

func (p *PromptEvaluator) IsSetMessageList() bool {
	return p.MessageList != nil
}

func (p *PromptEvaluator) IsSetModelConfig() bool {
	return p.ModelConfig != nil
}

func (p *PromptEvaluator) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptEvaluator[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptEvaluator) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*common.Message, 0, size)
	values := make([]common.Message, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MessageList = _field
	return nil
}
func (p *PromptEvaluator) ReadField2(iprot thrift.TProtocol) error {
	_field := common.NewModelConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ModelConfig = _field
	return nil
}

func (p *PromptEvaluator) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PromptEvaluator"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptEvaluator) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessageList() {
		if err = oprot.WriteFieldBegin("message_list", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MessageList)); err != nil {
			return err
		}
		for _, v := range p.MessageList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *PromptEvaluator) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetModelConfig() {
		if err = oprot.WriteFieldBegin("model_config", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ModelConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PromptEvaluator) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptEvaluator(%+v)", *p)

}

func (p *PromptEvaluator) DeepEqual(ano *PromptEvaluator) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MessageList) {
		return false
	}
	if !p.Field2DeepEqual(ano.ModelConfig) {
		return false
	}
	return true
}

func (p *PromptEvaluator) Field1DeepEqual(src []*common.Message) bool {

	if len(p.MessageList) != len(src) {
		return false
	}
	for i, v := range p.MessageList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *PromptEvaluator) Field2DeepEqual(src *common.ModelConfig) bool {

	if !p.ModelConfig.DeepEqual(src) {
		return false
	}
	return true
}

// 代码评估器
type CodeEvaluator struct {
	LanguageType *LanguageType `thrift:"language_type,1,optional" frugal:"1,optional,string" form:"language_type" json:"language_type,omitempty" query:"language_type"`
	CodeContent  *string       `thrift:"code_content,2,optional" frugal:"2,optional,string" form:"code_content" json:"code_content,omitempty" query:"code_content"`
}

func NewCodeEvaluator() *CodeEvaluator {
	return &CodeEvaluator{}
}

func (p *CodeEvaluator) InitDefault() {
}

var CodeEvaluator_LanguageType_DEFAULT LanguageType

func (p *CodeEvaluator) GetLanguageType() (v LanguageType) {
	if p == nil {
		return
	}
	if !p.IsSetLanguageType() {
		return CodeEvaluator_LanguageType_DEFAULT
	}
	return *p.LanguageType
}

var CodeEvaluator_CodeContent_DEFAULT string

func (p *CodeEvaluator) GetCodeContent() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCodeContent() {
		return CodeEvaluator_CodeContent_DEFAULT
	}
	return *p.CodeContent
}
func (p *CodeEvaluator) SetLanguageType(val *LanguageType) {
	p.LanguageType = val
}
func (p *CodeEvaluator) SetCodeContent(val *string) {
	p.CodeContent = val
}

var fieldIDToName_CodeEvaluator = map[int16]string{
	1: "language_type",
	2: "code_content",
}

func (p *CodeEvaluator) IsSetLanguageType() bool {
	return p.LanguageType != nil
}

func (p *CodeEvaluator) IsSetCodeContent() bool {
	return p.CodeContent != nil
}

func (p *CodeEvaluator) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CodeEvaluator[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CodeEvaluator) ReadField1(iprot thrift.TProtocol) error {

	var _field *LanguageType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LanguageType = _field
	return nil
}
func (p *CodeEvaluator) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CodeContent = _field
	return nil
}

func (p *CodeEvaluator) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CodeEvaluator"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CodeEvaluator) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetLanguageType() {
		if err = oprot.WriteFieldBegin("language_type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LanguageType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CodeEvaluator) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCodeContent() {
		if err = oprot.WriteFieldBegin("code_content", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CodeContent); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CodeEvaluator) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CodeEvaluator(%+v)", *p)

}

func (p *CodeEvaluator) DeepEqual(ano *CodeEvaluator) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LanguageType) {
		return false
	}
	if !p.Field2DeepEqual(ano.CodeContent) {
		return false
	}
	return true
}

func (p *CodeEvaluator) Field1DeepEqual(src *LanguageType) bool {

	if p.LanguageType == src {
		return true
	} else if p.LanguageType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LanguageType, *src) != 0 {
		return false
	}
	return true
}
func (p *CodeEvaluator) Field2DeepEqual(src *string) bool {

	if p.CodeContent == src {
		return true
	} else if p.CodeContent == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CodeContent, *src) != 0 {
		return false
	}
	return true
}

// 评估器内容
type EvaluatorContent struct {
	ReceiveChatHistory *bool                `thrift:"receive_chat_history,1,optional" frugal:"1,optional,bool" form:"receive_chat_history" json:"receive_chat_history,omitempty" query:"receive_chat_history"`
	InputSchemas       []*common.ArgsSchema `thrift:"input_schemas,2,optional" frugal:"2,optional,list<common.ArgsSchema>" form:"input_schemas" json:"input_schemas,omitempty" query:"input_schemas"`
	// 101-200 Evaluator类型
	PromptEvaluator *PromptEvaluator `thrift:"prompt_evaluator,101,optional" frugal:"101,optional,PromptEvaluator" form:"prompt_evaluator" json:"prompt_evaluator,omitempty" query:"prompt_evaluator"`
	CodeEvaluator   *CodeEvaluator   `thrift:"code_evaluator,102,optional" frugal:"102,optional,CodeEvaluator" form:"code_evaluator" json:"code_evaluator,omitempty" query:"code_evaluator"`
}

func NewEvaluatorContent() *EvaluatorContent {
	return &EvaluatorContent{}
}

func (p *EvaluatorContent) InitDefault() {
}

var EvaluatorContent_ReceiveChatHistory_DEFAULT bool

func (p *EvaluatorContent) GetReceiveChatHistory() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetReceiveChatHistory() {
		return EvaluatorContent_ReceiveChatHistory_DEFAULT
	}
	return *p.ReceiveChatHistory
}

var EvaluatorContent_InputSchemas_DEFAULT []*common.ArgsSchema

func (p *EvaluatorContent) GetInputSchemas() (v []*common.ArgsSchema) {
	if p == nil {
		return
	}
	if !p.IsSetInputSchemas() {
		return EvaluatorContent_InputSchemas_DEFAULT
	}
	return p.InputSchemas
}

var EvaluatorContent_PromptEvaluator_DEFAULT *PromptEvaluator

func (p *EvaluatorContent) GetPromptEvaluator() (v *PromptEvaluator) {
	if p == nil {
		return
	}
	if !p.IsSetPromptEvaluator() {
		return EvaluatorContent_PromptEvaluator_DEFAULT
	}
	return p.PromptEvaluator
}

var EvaluatorContent_CodeEvaluator_DEFAULT *CodeEvaluator

func (p *EvaluatorContent) GetCodeEvaluator() (v *CodeEvaluator) {
	if p == nil {
		return
	}
	if !p.IsSetCodeEvaluator() {
		return EvaluatorContent_CodeEvaluator_DEFAULT
	}
	return p.CodeEvaluator
}
func (p *EvaluatorContent) SetReceiveChatHistory(val *bool) {
	p.ReceiveChatHistory = val
}
func (p *EvaluatorContent) SetInputSchemas(val []*common.ArgsSchema) {
	p.InputSchemas = val
}
func (p *EvaluatorContent) SetPromptEvaluator(val *PromptEvaluator) {
	p.PromptEvaluator = val
}
func (p *EvaluatorContent) SetCodeEvaluator(val *CodeEvaluator) {
	p.CodeEvaluator = val
}

var fieldIDToName_EvaluatorContent = map[int16]string{
	1:   "receive_chat_history",
	2:   "input_schemas",
	101: "prompt_evaluator",
	102: "code_evaluator",
}

func (p *EvaluatorContent) IsSetReceiveChatHistory() bool {
	return p.ReceiveChatHistory != nil
}

func (p *EvaluatorContent) IsSetInputSchemas() bool {
	return p.InputSchemas != nil
}

func (p *EvaluatorContent) IsSetPromptEvaluator() bool {
	return p.PromptEvaluator != nil
}

func (p *EvaluatorContent) IsSetCodeEvaluator() bool {
	return p.CodeEvaluator != nil
}

func (p *EvaluatorContent) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorContent[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorContent) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReceiveChatHistory = _field
	return nil
}
func (p *EvaluatorContent) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*common.ArgsSchema, 0, size)
	values := make([]common.ArgsSchema, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.InputSchemas = _field
	return nil
}
func (p *EvaluatorContent) ReadField101(iprot thrift.TProtocol) error {
	_field := NewPromptEvaluator()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PromptEvaluator = _field
	return nil
}
func (p *EvaluatorContent) ReadField102(iprot thrift.TProtocol) error {
	_field := NewCodeEvaluator()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CodeEvaluator = _field
	return nil
}

func (p *EvaluatorContent) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluatorContent"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorContent) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetReceiveChatHistory() {
		if err = oprot.WriteFieldBegin("receive_chat_history", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ReceiveChatHistory); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluatorContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputSchemas() {
		if err = oprot.WriteFieldBegin("input_schemas", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InputSchemas)); err != nil {
			return err
		}
		for _, v := range p.InputSchemas {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvaluatorContent) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptEvaluator() {
		if err = oprot.WriteFieldBegin("prompt_evaluator", thrift.STRUCT, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PromptEvaluator.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *EvaluatorContent) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetCodeEvaluator() {
		if err = oprot.WriteFieldBegin("code_evaluator", thrift.STRUCT, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CodeEvaluator.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}

func (p *EvaluatorContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorContent(%+v)", *p)

}

func (p *EvaluatorContent) DeepEqual(ano *EvaluatorContent) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ReceiveChatHistory) {
		return false
	}
	if !p.Field2DeepEqual(ano.InputSchemas) {
		return false
	}
	if !p.Field101DeepEqual(ano.PromptEvaluator) {
		return false
	}
	if !p.Field102DeepEqual(ano.CodeEvaluator) {
		return false
	}
	return true
}

func (p *EvaluatorContent) Field1DeepEqual(src *bool) bool {

	if p.ReceiveChatHistory == src {
		return true
	} else if p.ReceiveChatHistory == nil || src == nil {
		return false
	}
	if *p.ReceiveChatHistory != *src {
		return false
	}
	return true
}
func (p *EvaluatorContent) Field2DeepEqual(src []*common.ArgsSchema) bool {

	if len(p.InputSchemas) != len(src) {
		return false
	}
	for i, v := range p.InputSchemas {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *EvaluatorContent) Field101DeepEqual(src *PromptEvaluator) bool {

	if !p.PromptEvaluator.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvaluatorContent) Field102DeepEqual(src *CodeEvaluator) bool {

	if !p.CodeEvaluator.DeepEqual(src) {
		return false
	}
	return true
}

// 评估器版本
type EvaluatorVersion struct {
	// 版本ID
	ID               *int64            `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	Version          *string           `thrift:"version,2,optional" frugal:"2,optional,string" form:"version" json:"version,omitempty" query:"version"`
	Description      *string           `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty" query:"description"`
	EvaluatorContent *EvaluatorContent `thrift:"evaluator_content,20,optional" frugal:"20,optional,EvaluatorContent" form:"evaluator_content" json:"evaluator_content,omitempty" query:"evaluator_content"`
	BaseInfo         *common.BaseInfo  `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" form:"base_info" json:"base_info,omitempty" query:"base_info"`
}

func NewEvaluatorVersion() *EvaluatorVersion {
	return &EvaluatorVersion{}
}

func (p *EvaluatorVersion) InitDefault() {
}

var EvaluatorVersion_ID_DEFAULT int64

func (p *EvaluatorVersion) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return EvaluatorVersion_ID_DEFAULT
	}
	return *p.ID
}

var EvaluatorVersion_Version_DEFAULT string

func (p *EvaluatorVersion) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return EvaluatorVersion_Version_DEFAULT
	}
	return *p.Version
}

var EvaluatorVersion_Description_DEFAULT string

func (p *EvaluatorVersion) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return EvaluatorVersion_Description_DEFAULT
	}
	return *p.Description
}

var EvaluatorVersion_EvaluatorContent_DEFAULT *EvaluatorContent

func (p *EvaluatorVersion) GetEvaluatorContent() (v *EvaluatorContent) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorContent() {
		return EvaluatorVersion_EvaluatorContent_DEFAULT
	}
	return p.EvaluatorContent
}

var EvaluatorVersion_BaseInfo_DEFAULT *common.BaseInfo

func (p *EvaluatorVersion) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return EvaluatorVersion_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *EvaluatorVersion) SetID(val *int64) {
	p.ID = val
}
func (p *EvaluatorVersion) SetVersion(val *string) {
	p.Version = val
}
func (p *EvaluatorVersion) SetDescription(val *string) {
	p.Description = val
}
func (p *EvaluatorVersion) SetEvaluatorContent(val *EvaluatorContent) {
	p.EvaluatorContent = val
}
func (p *EvaluatorVersion) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_EvaluatorVersion = map[int16]string{
	1:   "id",
	2:   "version",
	3:   "description",
	20:  "evaluator_content",
	100: "base_info",
}

func (p *EvaluatorVersion) IsSetID() bool {
	return p.ID != nil
}

func (p *EvaluatorVersion) IsSetVersion() bool {
	return p.Version != nil
}

func (p *EvaluatorVersion) IsSetDescription() bool {
	return p.Description != nil
}

func (p *EvaluatorVersion) IsSetEvaluatorContent() bool {
	return p.EvaluatorContent != nil
}

func (p *EvaluatorVersion) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *EvaluatorVersion) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorVersion[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorVersion) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *EvaluatorVersion) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *EvaluatorVersion) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *EvaluatorVersion) ReadField20(iprot thrift.TProtocol) error {
	_field := NewEvaluatorContent()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorContent = _field
	return nil
}
func (p *EvaluatorVersion) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *EvaluatorVersion) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluatorVersion"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorVersion) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluatorVersion) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvaluatorVersion) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvaluatorVersion) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorContent() {
		if err = oprot.WriteFieldBegin("evaluator_content", thrift.STRUCT, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluatorContent.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *EvaluatorVersion) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *EvaluatorVersion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorVersion(%+v)", *p)

}

func (p *EvaluatorVersion) DeepEqual(ano *EvaluatorVersion) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Version) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field20DeepEqual(ano.EvaluatorContent) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *EvaluatorVersion) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *EvaluatorVersion) Field2DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluatorVersion) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluatorVersion) Field20DeepEqual(src *EvaluatorContent) bool {

	if !p.EvaluatorContent.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvaluatorVersion) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

// 评估器
type Evaluator struct {
	ID             *int64            `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	Name           *string           `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Description    *string           `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty" query:"description"`
	EvaluatorType  *EvaluatorType    `thrift:"evaluator_type,4,optional" frugal:"4,optional,string" form:"evaluator_type" json:"evaluator_type,omitempty" query:"evaluator_type"`
	DraftSubmitted *bool             `thrift:"draft_submitted,5,optional" frugal:"5,optional,bool" form:"draft_submitted" json:"draft_submitted,omitempty" query:"draft_submitted"`
	LatestVersion  *string           `thrift:"latest_version,6,optional" frugal:"6,optional,string" form:"latest_version" json:"latest_version,omitempty" query:"latest_version"`
	CurrentVersion *EvaluatorVersion `thrift:"current_version,20,optional" frugal:"20,optional,EvaluatorVersion" form:"current_version" json:"current_version,omitempty" query:"current_version"`
	BaseInfo       *common.BaseInfo  `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" form:"base_info" json:"base_info,omitempty" query:"base_info"`
}

func NewEvaluator() *Evaluator {
	return &Evaluator{}
}

func (p *Evaluator) InitDefault() {
}

var Evaluator_ID_DEFAULT int64

func (p *Evaluator) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return Evaluator_ID_DEFAULT
	}
	return *p.ID
}

var Evaluator_Name_DEFAULT string

func (p *Evaluator) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return Evaluator_Name_DEFAULT
	}
	return *p.Name
}

var Evaluator_Description_DEFAULT string

func (p *Evaluator) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return Evaluator_Description_DEFAULT
	}
	return *p.Description
}

var Evaluator_EvaluatorType_DEFAULT EvaluatorType

func (p *Evaluator) GetEvaluatorType() (v EvaluatorType) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorType() {
		return Evaluator_EvaluatorType_DEFAULT
	}
	return *p.EvaluatorType
}

var Evaluator_DraftSubmitted_DEFAULT bool

func (p *Evaluator) GetDraftSubmitted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetDraftSubmitted() {
		return Evaluator_DraftSubmitted_DEFAULT
	}
	return *p.DraftSubmitted
}

var Evaluator_LatestVersion_DEFAULT string

func (p *Evaluator) GetLatestVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetLatestVersion() {
		return Evaluator_LatestVersion_DEFAULT
	}
	return *p.LatestVersion
}

var Evaluator_CurrentVersion_DEFAULT *EvaluatorVersion

func (p *Evaluator) GetCurrentVersion() (v *EvaluatorVersion) {
	if p == nil {
		return
	}
	if !p.IsSetCurrentVersion() {
		return Evaluator_CurrentVersion_DEFAULT
	}
	return p.CurrentVersion
}

var Evaluator_BaseInfo_DEFAULT *common.BaseInfo

func (p *Evaluator) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return Evaluator_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *Evaluator) SetID(val *int64) {
	p.ID = val
}
func (p *Evaluator) SetName(val *string) {
	p.Name = val
}
func (p *Evaluator) SetDescription(val *string) {
	p.Description = val
}
func (p *Evaluator) SetEvaluatorType(val *EvaluatorType) {
	p.EvaluatorType = val
}
func (p *Evaluator) SetDraftSubmitted(val *bool) {
	p.DraftSubmitted = val
}
func (p *Evaluator) SetLatestVersion(val *string) {
	p.LatestVersion = val
}
func (p *Evaluator) SetCurrentVersion(val *EvaluatorVersion) {
	p.CurrentVersion = val
}
func (p *Evaluator) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_Evaluator = map[int16]string{
	1:   "id",
	2:   "name",
	3:   "description",
	4:   "evaluator_type",
	5:   "draft_submitted",
	6:   "latest_version",
	20:  "current_version",
	100: "base_info",
}

func (p *Evaluator) IsSetID() bool {
	return p.ID != nil
}

func (p *Evaluator) IsSetName() bool {
	return p.Name != nil
}

func (p *Evaluator) IsSetDescription() bool {
	return p.Description != nil
}

func (p *Evaluator) IsSetEvaluatorType() bool {
	return p.EvaluatorType != nil
}

func (p *Evaluator) IsSetDraftSubmitted() bool {
	return p.DraftSubmitted != nil
}

func (p *Evaluator) IsSetLatestVersion() bool {
	return p.LatestVersion != nil
}

func (p *Evaluator) IsSetCurrentVersion() bool {
	return p.CurrentVersion != nil
}

func (p *Evaluator) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *Evaluator) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Evaluator[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Evaluator) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *Evaluator) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *Evaluator) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *Evaluator) ReadField4(iprot thrift.TProtocol) error {

	var _field *EvaluatorType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorType = _field
	return nil
}
func (p *Evaluator) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DraftSubmitted = _field
	return nil
}
func (p *Evaluator) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LatestVersion = _field
	return nil
}
func (p *Evaluator) ReadField20(iprot thrift.TProtocol) error {
	_field := NewEvaluatorVersion()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CurrentVersion = _field
	return nil
}
func (p *Evaluator) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *Evaluator) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Evaluator"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Evaluator) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Evaluator) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Evaluator) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *Evaluator) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorType() {
		if err = oprot.WriteFieldBegin("evaluator_type", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvaluatorType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *Evaluator) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDraftSubmitted() {
		if err = oprot.WriteFieldBegin("draft_submitted", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.DraftSubmitted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *Evaluator) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLatestVersion() {
		if err = oprot.WriteFieldBegin("latest_version", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LatestVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *Evaluator) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentVersion() {
		if err = oprot.WriteFieldBegin("current_version", thrift.STRUCT, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CurrentVersion.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *Evaluator) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *Evaluator) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Evaluator(%+v)", *p)

}

func (p *Evaluator) DeepEqual(ano *Evaluator) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluatorType) {
		return false
	}
	if !p.Field5DeepEqual(ano.DraftSubmitted) {
		return false
	}
	if !p.Field6DeepEqual(ano.LatestVersion) {
		return false
	}
	if !p.Field20DeepEqual(ano.CurrentVersion) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *Evaluator) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *Evaluator) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *Evaluator) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *Evaluator) Field4DeepEqual(src *EvaluatorType) bool {

	if p.EvaluatorType == src {
		return true
	} else if p.EvaluatorType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvaluatorType, *src) != 0 {
		return false
	}
	return true
}
func (p *Evaluator) Field5DeepEqual(src *bool) bool {

	if p.DraftSubmitted == src {
		return true
	} else if p.DraftSubmitted == nil || src == nil {
		return false
	}
	if *p.DraftSubmitted != *src {
		return false
	}
	return true
}
func (p *Evaluator) Field6DeepEqual(src *string) bool {

	if p.LatestVersion == src {
		return true
	} else if p.LatestVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LatestVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *Evaluator) Field20DeepEqual(src *EvaluatorVersion) bool {

	if !p.CurrentVersion.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Evaluator) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

// 评估器结果
type EvaluatorResult_ struct {
	Score     *float64 `thrift:"score,1,optional" frugal:"1,optional,double" form:"score" json:"score,omitempty" query:"score"`
	Reasoning *string  `thrift:"reasoning,2,optional" frugal:"2,optional,string" form:"reasoning" json:"reasoning,omitempty" query:"reasoning"`
}

func NewEvaluatorResult_() *EvaluatorResult_ {
	return &EvaluatorResult_{}
}

func (p *EvaluatorResult_) InitDefault() {
}

var EvaluatorResult__Score_DEFAULT float64

func (p *EvaluatorResult_) GetScore() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetScore() {
		return EvaluatorResult__Score_DEFAULT
	}
	return *p.Score
}

var EvaluatorResult__Reasoning_DEFAULT string

func (p *EvaluatorResult_) GetReasoning() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetReasoning() {
		return EvaluatorResult__Reasoning_DEFAULT
	}
	return *p.Reasoning
}
func (p *EvaluatorResult_) SetScore(val *float64) {
	p.Score = val
}
func (p *EvaluatorResult_) SetReasoning(val *string) {
	p.Reasoning = val
}

var fieldIDToName_EvaluatorResult_ = map[int16]string{
	1: "score",
	2: "reasoning",
}

func (p *EvaluatorResult_) IsSetScore() bool {
	return p.Score != nil
}

func (p *EvaluatorResult_) IsSetReasoning() bool {
	return p.Reasoning != nil
}

func (p *EvaluatorResult_) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Score = _field
	return nil
}
func (p *EvaluatorResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Reasoning = _field
	return nil
}

func (p *EvaluatorResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluatorResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetScore() {
		if err = oprot.WriteFieldBegin("score", thrift.DOUBLE, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.Score); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluatorResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetReasoning() {
		if err = oprot.WriteFieldBegin("reasoning", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Reasoning); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EvaluatorResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorResult_(%+v)", *p)

}

func (p *EvaluatorResult_) DeepEqual(ano *EvaluatorResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Score) {
		return false
	}
	if !p.Field2DeepEqual(ano.Reasoning) {
		return false
	}
	return true
}

func (p *EvaluatorResult_) Field1DeepEqual(src *float64) bool {

	if p.Score == src {
		return true
	} else if p.Score == nil || src == nil {
		return false
	}
	if *p.Score != *src {
		return false
	}
	return true
}
func (p *EvaluatorResult_) Field2DeepEqual(src *string) bool {

	if p.Reasoning == src {
		return true
	} else if p.Reasoning == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Reasoning, *src) != 0 {
		return false
	}
	return true
}

// 评估器使用量
type EvaluatorUsage struct {
	InputTokens  *int64 `thrift:"input_tokens,1,optional" frugal:"1,optional,i64" json:"input_tokens" form:"input_tokens" query:"input_tokens"`
	OutputTokens *int64 `thrift:"output_tokens,2,optional" frugal:"2,optional,i64" json:"output_tokens" form:"output_tokens" query:"output_tokens"`
}

func NewEvaluatorUsage() *EvaluatorUsage {
	return &EvaluatorUsage{}
}

func (p *EvaluatorUsage) InitDefault() {
}

var EvaluatorUsage_InputTokens_DEFAULT int64

func (p *EvaluatorUsage) GetInputTokens() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetInputTokens() {
		return EvaluatorUsage_InputTokens_DEFAULT
	}
	return *p.InputTokens
}

var EvaluatorUsage_OutputTokens_DEFAULT int64

func (p *EvaluatorUsage) GetOutputTokens() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetOutputTokens() {
		return EvaluatorUsage_OutputTokens_DEFAULT
	}
	return *p.OutputTokens
}
func (p *EvaluatorUsage) SetInputTokens(val *int64) {
	p.InputTokens = val
}
func (p *EvaluatorUsage) SetOutputTokens(val *int64) {
	p.OutputTokens = val
}

var fieldIDToName_EvaluatorUsage = map[int16]string{
	1: "input_tokens",
	2: "output_tokens",
}

func (p *EvaluatorUsage) IsSetInputTokens() bool {
	return p.InputTokens != nil
}

func (p *EvaluatorUsage) IsSetOutputTokens() bool {
	return p.OutputTokens != nil
}

func (p *EvaluatorUsage) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorUsage[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorUsage) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InputTokens = _field
	return nil
}
func (p *EvaluatorUsage) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OutputTokens = _field
	return nil
}

func (p *EvaluatorUsage) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluatorUsage"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorUsage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputTokens() {
		if err = oprot.WriteFieldBegin("input_tokens", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.InputTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluatorUsage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputTokens() {
		if err = oprot.WriteFieldBegin("output_tokens", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.OutputTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EvaluatorUsage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorUsage(%+v)", *p)

}

func (p *EvaluatorUsage) DeepEqual(ano *EvaluatorUsage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.InputTokens) {
		return false
	}
	if !p.Field2DeepEqual(ano.OutputTokens) {
		return false
	}
	return true
}

func (p *EvaluatorUsage) Field1DeepEqual(src *int64) bool {

	if p.InputTokens == src {
		return true
	} else if p.InputTokens == nil || src == nil {
		return false
	}
	if *p.InputTokens != *src {
		return false
	}
	return true
}
func (p *EvaluatorUsage) Field2DeepEqual(src *int64) bool {

	if p.OutputTokens == src {
		return true
	} else if p.OutputTokens == nil || src == nil {
		return false
	}
	if *p.OutputTokens != *src {
		return false
	}
	return true
}

// 评估器运行错误
type EvaluatorRunError struct {
	Code    *int32  `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Message *string `thrift:"message,2,optional" frugal:"2,optional,string" form:"message" json:"message,omitempty" query:"message"`
}

func NewEvaluatorRunError() *EvaluatorRunError {
	return &EvaluatorRunError{}
}

func (p *EvaluatorRunError) InitDefault() {
}

var EvaluatorRunError_Code_DEFAULT int32

func (p *EvaluatorRunError) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return EvaluatorRunError_Code_DEFAULT
	}
	return *p.Code
}

var EvaluatorRunError_Message_DEFAULT string

func (p *EvaluatorRunError) GetMessage() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMessage() {
		return EvaluatorRunError_Message_DEFAULT
	}
	return *p.Message
}
func (p *EvaluatorRunError) SetCode(val *int32) {
	p.Code = val
}
func (p *EvaluatorRunError) SetMessage(val *string) {
	p.Message = val
}

var fieldIDToName_EvaluatorRunError = map[int16]string{
	1: "code",
	2: "message",
}

func (p *EvaluatorRunError) IsSetCode() bool {
	return p.Code != nil
}

func (p *EvaluatorRunError) IsSetMessage() bool {
	return p.Message != nil
}

func (p *EvaluatorRunError) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorRunError[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorRunError) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *EvaluatorRunError) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Message = _field
	return nil
}

func (p *EvaluatorRunError) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluatorRunError"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorRunError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluatorRunError) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Message); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EvaluatorRunError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorRunError(%+v)", *p)

}

func (p *EvaluatorRunError) DeepEqual(ano *EvaluatorRunError) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *EvaluatorRunError) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *EvaluatorRunError) Field2DeepEqual(src *string) bool {

	if p.Message == src {
		return true
	} else if p.Message == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Message, *src) != 0 {
		return false
	}
	return true
}

// 评估器输出数据
type EvaluatorOutputData struct {
	EvaluatorResult_  *EvaluatorResult_  `thrift:"evaluator_result,1,optional" frugal:"1,optional,EvaluatorResult_" form:"evaluator_result" json:"evaluator_result,omitempty" query:"evaluator_result"`
	EvaluatorUsage    *EvaluatorUsage    `thrift:"evaluator_usage,2,optional" frugal:"2,optional,EvaluatorUsage" form:"evaluator_usage" json:"evaluator_usage,omitempty" query:"evaluator_usage"`
	EvaluatorRunError *EvaluatorRunError `thrift:"evaluator_run_error,3,optional" frugal:"3,optional,EvaluatorRunError" form:"evaluator_run_error" json:"evaluator_run_error,omitempty" query:"evaluator_run_error"`
	TimeConsumingMs   *int64             `thrift:"time_consuming_ms,4,optional" frugal:"4,optional,i64" json:"time_consuming_ms" form:"time_consuming_ms" query:"time_consuming_ms"`
}

func NewEvaluatorOutputData() *EvaluatorOutputData {
	return &EvaluatorOutputData{}
}

func (p *EvaluatorOutputData) InitDefault() {
}

var EvaluatorOutputData_EvaluatorResult__DEFAULT *EvaluatorResult_

func (p *EvaluatorOutputData) GetEvaluatorResult_() (v *EvaluatorResult_) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorResult_() {
		return EvaluatorOutputData_EvaluatorResult__DEFAULT
	}
	return p.EvaluatorResult_
}

var EvaluatorOutputData_EvaluatorUsage_DEFAULT *EvaluatorUsage

func (p *EvaluatorOutputData) GetEvaluatorUsage() (v *EvaluatorUsage) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorUsage() {
		return EvaluatorOutputData_EvaluatorUsage_DEFAULT
	}
	return p.EvaluatorUsage
}

var EvaluatorOutputData_EvaluatorRunError_DEFAULT *EvaluatorRunError

func (p *EvaluatorOutputData) GetEvaluatorRunError() (v *EvaluatorRunError) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorRunError() {
		return EvaluatorOutputData_EvaluatorRunError_DEFAULT
	}
	return p.EvaluatorRunError
}

var EvaluatorOutputData_TimeConsumingMs_DEFAULT int64

func (p *EvaluatorOutputData) GetTimeConsumingMs() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTimeConsumingMs() {
		return EvaluatorOutputData_TimeConsumingMs_DEFAULT
	}
	return *p.TimeConsumingMs
}
func (p *EvaluatorOutputData) SetEvaluatorResult_(val *EvaluatorResult_) {
	p.EvaluatorResult_ = val
}
func (p *EvaluatorOutputData) SetEvaluatorUsage(val *EvaluatorUsage) {
	p.EvaluatorUsage = val
}
func (p *EvaluatorOutputData) SetEvaluatorRunError(val *EvaluatorRunError) {
	p.EvaluatorRunError = val
}
func (p *EvaluatorOutputData) SetTimeConsumingMs(val *int64) {
	p.TimeConsumingMs = val
}

var fieldIDToName_EvaluatorOutputData = map[int16]string{
	1: "evaluator_result",
	2: "evaluator_usage",
	3: "evaluator_run_error",
	4: "time_consuming_ms",
}

func (p *EvaluatorOutputData) IsSetEvaluatorResult_() bool {
	return p.EvaluatorResult_ != nil
}

func (p *EvaluatorOutputData) IsSetEvaluatorUsage() bool {
	return p.EvaluatorUsage != nil
}

func (p *EvaluatorOutputData) IsSetEvaluatorRunError() bool {
	return p.EvaluatorRunError != nil
}

func (p *EvaluatorOutputData) IsSetTimeConsumingMs() bool {
	return p.TimeConsumingMs != nil
}

func (p *EvaluatorOutputData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorOutputData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorOutputData) ReadField1(iprot thrift.TProtocol) error {
	_field := NewEvaluatorResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorResult_ = _field
	return nil
}
func (p *EvaluatorOutputData) ReadField2(iprot thrift.TProtocol) error {
	_field := NewEvaluatorUsage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorUsage = _field
	return nil
}
func (p *EvaluatorOutputData) ReadField3(iprot thrift.TProtocol) error {
	_field := NewEvaluatorRunError()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorRunError = _field
	return nil
}
func (p *EvaluatorOutputData) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TimeConsumingMs = _field
	return nil
}

func (p *EvaluatorOutputData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluatorOutputData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorOutputData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorResult_() {
		if err = oprot.WriteFieldBegin("evaluator_result", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluatorResult_.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluatorOutputData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorUsage() {
		if err = oprot.WriteFieldBegin("evaluator_usage", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluatorUsage.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvaluatorOutputData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorRunError() {
		if err = oprot.WriteFieldBegin("evaluator_run_error", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluatorRunError.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvaluatorOutputData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeConsumingMs() {
		if err = oprot.WriteFieldBegin("time_consuming_ms", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TimeConsumingMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *EvaluatorOutputData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorOutputData(%+v)", *p)

}

func (p *EvaluatorOutputData) DeepEqual(ano *EvaluatorOutputData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorResult_) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorUsage) {
		return false
	}
	if !p.Field3DeepEqual(ano.EvaluatorRunError) {
		return false
	}
	if !p.Field4DeepEqual(ano.TimeConsumingMs) {
		return false
	}
	return true
}

func (p *EvaluatorOutputData) Field1DeepEqual(src *EvaluatorResult_) bool {

	if !p.EvaluatorResult_.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvaluatorOutputData) Field2DeepEqual(src *EvaluatorUsage) bool {

	if !p.EvaluatorUsage.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvaluatorOutputData) Field3DeepEqual(src *EvaluatorRunError) bool {

	if !p.EvaluatorRunError.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvaluatorOutputData) Field4DeepEqual(src *int64) bool {

	if p.TimeConsumingMs == src {
		return true
	} else if p.TimeConsumingMs == nil || src == nil {
		return false
	}
	if *p.TimeConsumingMs != *src {
		return false
	}
	return true
}

// 评估器输入数据
type EvaluatorInputData struct {
	HistoryMessages []*common.Message          `thrift:"history_messages,1,optional" frugal:"1,optional,list<common.Message>" form:"history_messages" json:"history_messages,omitempty" query:"history_messages"`
	InputFields     map[string]*common.Content `thrift:"input_fields,2,optional" frugal:"2,optional,map<string:common.Content>" form:"input_fields" json:"input_fields,omitempty" query:"input_fields"`
}

func NewEvaluatorInputData() *EvaluatorInputData {
	return &EvaluatorInputData{}
}

func (p *EvaluatorInputData) InitDefault() {
}

var EvaluatorInputData_HistoryMessages_DEFAULT []*common.Message

func (p *EvaluatorInputData) GetHistoryMessages() (v []*common.Message) {
	if p == nil {
		return
	}
	if !p.IsSetHistoryMessages() {
		return EvaluatorInputData_HistoryMessages_DEFAULT
	}
	return p.HistoryMessages
}

var EvaluatorInputData_InputFields_DEFAULT map[string]*common.Content

func (p *EvaluatorInputData) GetInputFields() (v map[string]*common.Content) {
	if p == nil {
		return
	}
	if !p.IsSetInputFields() {
		return EvaluatorInputData_InputFields_DEFAULT
	}
	return p.InputFields
}
func (p *EvaluatorInputData) SetHistoryMessages(val []*common.Message) {
	p.HistoryMessages = val
}
func (p *EvaluatorInputData) SetInputFields(val map[string]*common.Content) {
	p.InputFields = val
}

var fieldIDToName_EvaluatorInputData = map[int16]string{
	1: "history_messages",
	2: "input_fields",
}

func (p *EvaluatorInputData) IsSetHistoryMessages() bool {
	return p.HistoryMessages != nil
}

func (p *EvaluatorInputData) IsSetInputFields() bool {
	return p.InputFields != nil
}

func (p *EvaluatorInputData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorInputData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorInputData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*common.Message, 0, size)
	values := make([]common.Message, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.HistoryMessages = _field
	return nil
}
func (p *EvaluatorInputData) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]*common.Content, size)
	values := make([]common.Content, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.InputFields = _field
	return nil
}

func (p *EvaluatorInputData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluatorInputData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorInputData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHistoryMessages() {
		if err = oprot.WriteFieldBegin("history_messages", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HistoryMessages)); err != nil {
			return err
		}
		for _, v := range p.HistoryMessages {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluatorInputData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputFields() {
		if err = oprot.WriteFieldBegin("input_fields", thrift.MAP, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.InputFields)); err != nil {
			return err
		}
		for k, v := range p.InputFields {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EvaluatorInputData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorInputData(%+v)", *p)

}

func (p *EvaluatorInputData) DeepEqual(ano *EvaluatorInputData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.HistoryMessages) {
		return false
	}
	if !p.Field2DeepEqual(ano.InputFields) {
		return false
	}
	return true
}

func (p *EvaluatorInputData) Field1DeepEqual(src []*common.Message) bool {

	if len(p.HistoryMessages) != len(src) {
		return false
	}
	for i, v := range p.HistoryMessages {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *EvaluatorInputData) Field2DeepEqual(src map[string]*common.Content) bool {

	if len(p.InputFields) != len(src) {
		return false
	}
	for k, v := range p.InputFields {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// 评估器执行记录
type EvaluatorRecord struct {
	ID                  *int64               `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	EvaluatorVersionID  *int64               `thrift:"evaluator_version_id,2,optional" frugal:"2,optional,i64" json:"evaluator_version_id" form:"evaluator_version_id" query:"evaluator_version_id"`
	ItemID              *int64               `thrift:"item_id,3,optional" frugal:"3,optional,i64" json:"item_id" form:"item_id" query:"item_id"`
	TurnID              *int64               `thrift:"turn_id,4,optional" frugal:"4,optional,i64" json:"turn_id" form:"turn_id" query:"turn_id"`
	Status              *EvaluatorRunStatus  `thrift:"status,20,optional" frugal:"20,optional,string" form:"status" json:"status,omitempty" query:"status"`
	EvaluatorOutputData *EvaluatorOutputData `thrift:"evaluator_output_data,21,optional" frugal:"21,optional,EvaluatorOutputData" form:"evaluator_output_data" json:"evaluator_output_data,omitempty" query:"evaluator_output_data"`
	BaseInfo            *common.BaseInfo     `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" form:"base_info" json:"base_info,omitempty" query:"base_info"`
}

func NewEvaluatorRecord() *EvaluatorRecord {
	return &EvaluatorRecord{}
}

func (p *EvaluatorRecord) InitDefault() {
}

var EvaluatorRecord_ID_DEFAULT int64

func (p *EvaluatorRecord) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return EvaluatorRecord_ID_DEFAULT
	}
	return *p.ID
}

var EvaluatorRecord_EvaluatorVersionID_DEFAULT int64

func (p *EvaluatorRecord) GetEvaluatorVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorVersionID() {
		return EvaluatorRecord_EvaluatorVersionID_DEFAULT
	}
	return *p.EvaluatorVersionID
}

var EvaluatorRecord_ItemID_DEFAULT int64

func (p *EvaluatorRecord) GetItemID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemID() {
		return EvaluatorRecord_ItemID_DEFAULT
	}
	return *p.ItemID
}

var EvaluatorRecord_TurnID_DEFAULT int64

func (p *EvaluatorRecord) GetTurnID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTurnID() {
		return EvaluatorRecord_TurnID_DEFAULT
	}
	return *p.TurnID
}

var EvaluatorRecord_Status_DEFAULT EvaluatorRunStatus

func (p *EvaluatorRecord) GetStatus() (v EvaluatorRunStatus) {
	if p == nil {
		return
	}
	if !p.IsSetStatus() {
		return EvaluatorRecord_Status_DEFAULT
	}
	return *p.Status
}

var EvaluatorRecord_EvaluatorOutputData_DEFAULT *EvaluatorOutputData

func (p *EvaluatorRecord) GetEvaluatorOutputData() (v *EvaluatorOutputData) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorOutputData() {
		return EvaluatorRecord_EvaluatorOutputData_DEFAULT
	}
	return p.EvaluatorOutputData
}

var EvaluatorRecord_BaseInfo_DEFAULT *common.BaseInfo

func (p *EvaluatorRecord) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return EvaluatorRecord_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *EvaluatorRecord) SetID(val *int64) {
	p.ID = val
}
func (p *EvaluatorRecord) SetEvaluatorVersionID(val *int64) {
	p.EvaluatorVersionID = val
}
func (p *EvaluatorRecord) SetItemID(val *int64) {
	p.ItemID = val
}
func (p *EvaluatorRecord) SetTurnID(val *int64) {
	p.TurnID = val
}
func (p *EvaluatorRecord) SetStatus(val *EvaluatorRunStatus) {
	p.Status = val
}
func (p *EvaluatorRecord) SetEvaluatorOutputData(val *EvaluatorOutputData) {
	p.EvaluatorOutputData = val
}
func (p *EvaluatorRecord) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_EvaluatorRecord = map[int16]string{
	1:   "id",
	2:   "evaluator_version_id",
	3:   "item_id",
	4:   "turn_id",
	20:  "status",
	21:  "evaluator_output_data",
	100: "base_info",
}

func (p *EvaluatorRecord) IsSetID() bool {
	return p.ID != nil
}

func (p *EvaluatorRecord) IsSetEvaluatorVersionID() bool {
	return p.EvaluatorVersionID != nil
}

func (p *EvaluatorRecord) IsSetItemID() bool {
	return p.ItemID != nil
}

func (p *EvaluatorRecord) IsSetTurnID() bool {
	return p.TurnID != nil
}

func (p *EvaluatorRecord) IsSetStatus() bool {
	return p.Status != nil
}

func (p *EvaluatorRecord) IsSetEvaluatorOutputData() bool {
	return p.EvaluatorOutputData != nil
}

func (p *EvaluatorRecord) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *EvaluatorRecord) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorRecord[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorRecord) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *EvaluatorRecord) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorVersionID = _field
	return nil
}
func (p *EvaluatorRecord) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemID = _field
	return nil
}
func (p *EvaluatorRecord) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TurnID = _field
	return nil
}
func (p *EvaluatorRecord) ReadField20(iprot thrift.TProtocol) error {

	var _field *EvaluatorRunStatus
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}
func (p *EvaluatorRecord) ReadField21(iprot thrift.TProtocol) error {
	_field := NewEvaluatorOutputData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorOutputData = _field
	return nil
}
func (p *EvaluatorRecord) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *EvaluatorRecord) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluatorRecord"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluatorRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorVersionID() {
		if err = oprot.WriteFieldBegin("evaluator_version_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluatorVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvaluatorRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemID() {
		if err = oprot.WriteFieldBegin("item_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ItemID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvaluatorRecord) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTurnID() {
		if err = oprot.WriteFieldBegin("turn_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TurnID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *EvaluatorRecord) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRING, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *EvaluatorRecord) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorOutputData() {
		if err = oprot.WriteFieldBegin("evaluator_output_data", thrift.STRUCT, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluatorOutputData.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *EvaluatorRecord) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *EvaluatorRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorRecord(%+v)", *p)

}

func (p *EvaluatorRecord) DeepEqual(ano *EvaluatorRecord) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorVersionID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemID) {
		return false
	}
	if !p.Field4DeepEqual(ano.TurnID) {
		return false
	}
	if !p.Field20DeepEqual(ano.Status) {
		return false
	}
	if !p.Field21DeepEqual(ano.EvaluatorOutputData) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *EvaluatorRecord) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *EvaluatorRecord) Field2DeepEqual(src *int64) bool {

	if p.EvaluatorVersionID == src {
		return true
	} else if p.EvaluatorVersionID == nil || src == nil {
		return false
	}
	if *p.EvaluatorVersionID != *src {
		return false
	}
	return true
}
func (p *EvaluatorRecord) Field3DeepEqual(src *int64) bool {

	if p.ItemID == src {
		return true
	} else if p.ItemID == nil || src == nil {
		return false
	}
	if *p.ItemID != *src {
		return false
	}
	return true
}
func (p *EvaluatorRecord) Field4DeepEqual(src *int64) bool {

	if p.TurnID == src {
		return true
	} else if p.TurnID == nil || src == nil {
		return false
	}
	if *p.TurnID != *src {
		return false
	}
	return true
}
func (p *EvaluatorRecord) Field20DeepEqual(src *EvaluatorRunStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Status, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluatorRecord) Field21DeepEqual(src *EvaluatorOutputData) bool {

	if !p.EvaluatorOutputData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvaluatorRecord) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

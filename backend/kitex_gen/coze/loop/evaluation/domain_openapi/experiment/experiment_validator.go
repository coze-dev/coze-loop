// Code generated by Validator v0.2.6. DO NOT EDIT.

package experiment

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *FieldMapping) IsValid() error {
	return nil
}
func (p *TargetFieldMapping) IsValid() error {
	return nil
}
func (p *EvaluatorFieldMapping) IsValid() error {
	return nil
}
func (p *TokenUsage) IsValid() error {
	return nil
}
func (p *EvaluatorAggregateResult_) IsValid() error {
	return nil
}
func (p *ExperimentStatistics) IsValid() error {
	if p.TokenUsage != nil {
		if err := p.TokenUsage.IsValid(); err != nil {
			return fmt.Errorf("field TokenUsage not valid, %w", err)
		}
	}
	return nil
}
func (p *Experiment) IsValid() error {
	if p.TargetFieldMapping != nil {
		if err := p.TargetFieldMapping.IsValid(); err != nil {
			return fmt.Errorf("field TargetFieldMapping not valid, %w", err)
		}
	}
	if p.ExperimentStatistics != nil {
		if err := p.ExperimentStatistics.IsValid(); err != nil {
			return fmt.Errorf("field ExperimentStatistics not valid, %w", err)
		}
	}
	if p.BaseInfo != nil {
		if err := p.BaseInfo.IsValid(); err != nil {
			return fmt.Errorf("field BaseInfo not valid, %w", err)
		}
	}
	return nil
}
func (p *ColumnEvalSetField) IsValid() error {
	return nil
}
func (p *ColumnEvaluator) IsValid() error {
	return nil
}
func (p *TargetOutput) IsValid() error {
	if p.Error != nil {
		if err := p.Error.IsValid(); err != nil {
			return fmt.Errorf("field Error not valid, %w", err)
		}
	}
	return nil
}
func (p *EvaluatorOutput) IsValid() error {
	return nil
}
func (p *ExperimentResultPayload) IsValid() error {
	if p.EvalSetTurn != nil {
		if err := p.EvalSetTurn.IsValid(); err != nil {
			return fmt.Errorf("field EvalSetTurn not valid, %w", err)
		}
	}
	if p.TargetOutput != nil {
		if err := p.TargetOutput.IsValid(); err != nil {
			return fmt.Errorf("field TargetOutput not valid, %w", err)
		}
	}
	if p.EvaluatorOutput != nil {
		if err := p.EvaluatorOutput.IsValid(); err != nil {
			return fmt.Errorf("field EvaluatorOutput not valid, %w", err)
		}
	}
	return nil
}
func (p *TurnResult_) IsValid() error {
	return nil
}
func (p *ExperimentResult_) IsValid() error {
	if p.Payload != nil {
		if err := p.Payload.IsValid(); err != nil {
			return fmt.Errorf("field Payload not valid, %w", err)
		}
	}
	return nil
}
func (p *ItemResult_) IsValid() error {
	return nil
}

// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package experiment

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain_openapi/common"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain_openapi/eval_set"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain_openapi/evaluator"
	"strings"
)

const (
	ExperimentStatusPending = "pending"

	ExperimentStatusProcessing = "processing"

	ExperimentStatusSuccess = "success"

	ExperimentStatusFailed = "failed"

	ExperimentStatusTerminated = "terminated"

	ExperimentTypeOffline = "offline"

	ExperimentTypeOnline = "online"
)

// 实验状态
type ExperimentStatus = string

// 实验类型
type ExperimentType = string

// 字段映射
type FieldMapping struct {
	FieldName     *string `thrift:"field_name,1,optional" frugal:"1,optional,string" form:"field_name" json:"field_name,omitempty" query:"field_name"`
	FromFieldName *string `thrift:"from_field_name,2,optional" frugal:"2,optional,string" form:"from_field_name" json:"from_field_name,omitempty" query:"from_field_name"`
	ConstValue    *string `thrift:"const_value,3,optional" frugal:"3,optional,string" form:"const_value" json:"const_value,omitempty" query:"const_value"`
}

func NewFieldMapping() *FieldMapping {
	return &FieldMapping{}
}

func (p *FieldMapping) InitDefault() {
}

var FieldMapping_FieldName_DEFAULT string

func (p *FieldMapping) GetFieldName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetFieldName() {
		return FieldMapping_FieldName_DEFAULT
	}
	return *p.FieldName
}

var FieldMapping_FromFieldName_DEFAULT string

func (p *FieldMapping) GetFromFieldName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetFromFieldName() {
		return FieldMapping_FromFieldName_DEFAULT
	}
	return *p.FromFieldName
}

var FieldMapping_ConstValue_DEFAULT string

func (p *FieldMapping) GetConstValue() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetConstValue() {
		return FieldMapping_ConstValue_DEFAULT
	}
	return *p.ConstValue
}
func (p *FieldMapping) SetFieldName(val *string) {
	p.FieldName = val
}
func (p *FieldMapping) SetFromFieldName(val *string) {
	p.FromFieldName = val
}
func (p *FieldMapping) SetConstValue(val *string) {
	p.ConstValue = val
}

var fieldIDToName_FieldMapping = map[int16]string{
	1: "field_name",
	2: "from_field_name",
	3: "const_value",
}

func (p *FieldMapping) IsSetFieldName() bool {
	return p.FieldName != nil
}

func (p *FieldMapping) IsSetFromFieldName() bool {
	return p.FromFieldName != nil
}

func (p *FieldMapping) IsSetConstValue() bool {
	return p.ConstValue != nil
}

func (p *FieldMapping) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FieldMapping[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FieldMapping) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FieldName = _field
	return nil
}
func (p *FieldMapping) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FromFieldName = _field
	return nil
}
func (p *FieldMapping) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConstValue = _field
	return nil
}

func (p *FieldMapping) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FieldMapping"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FieldMapping) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldName() {
		if err = oprot.WriteFieldBegin("field_name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FieldName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FieldMapping) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFromFieldName() {
		if err = oprot.WriteFieldBegin("from_field_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FromFieldName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *FieldMapping) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetConstValue() {
		if err = oprot.WriteFieldBegin("const_value", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ConstValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *FieldMapping) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldMapping(%+v)", *p)

}

func (p *FieldMapping) DeepEqual(ano *FieldMapping) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FieldName) {
		return false
	}
	if !p.Field2DeepEqual(ano.FromFieldName) {
		return false
	}
	if !p.Field3DeepEqual(ano.ConstValue) {
		return false
	}
	return true
}

func (p *FieldMapping) Field1DeepEqual(src *string) bool {

	if p.FieldName == src {
		return true
	} else if p.FieldName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FieldName, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldMapping) Field2DeepEqual(src *string) bool {

	if p.FromFieldName == src {
		return true
	} else if p.FromFieldName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FromFieldName, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldMapping) Field3DeepEqual(src *string) bool {

	if p.ConstValue == src {
		return true
	} else if p.ConstValue == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ConstValue, *src) != 0 {
		return false
	}
	return true
}

// 目标字段映射
type TargetFieldMapping struct {
	FromEvalSet []*FieldMapping `thrift:"from_eval_set,1,optional" frugal:"1,optional,list<FieldMapping>" form:"from_eval_set" json:"from_eval_set,omitempty" query:"from_eval_set"`
}

func NewTargetFieldMapping() *TargetFieldMapping {
	return &TargetFieldMapping{}
}

func (p *TargetFieldMapping) InitDefault() {
}

var TargetFieldMapping_FromEvalSet_DEFAULT []*FieldMapping

func (p *TargetFieldMapping) GetFromEvalSet() (v []*FieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetFromEvalSet() {
		return TargetFieldMapping_FromEvalSet_DEFAULT
	}
	return p.FromEvalSet
}
func (p *TargetFieldMapping) SetFromEvalSet(val []*FieldMapping) {
	p.FromEvalSet = val
}

var fieldIDToName_TargetFieldMapping = map[int16]string{
	1: "from_eval_set",
}

func (p *TargetFieldMapping) IsSetFromEvalSet() bool {
	return p.FromEvalSet != nil
}

func (p *TargetFieldMapping) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TargetFieldMapping[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TargetFieldMapping) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldMapping, 0, size)
	values := make([]FieldMapping, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FromEvalSet = _field
	return nil
}

func (p *TargetFieldMapping) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TargetFieldMapping"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TargetFieldMapping) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFromEvalSet() {
		if err = oprot.WriteFieldBegin("from_eval_set", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FromEvalSet)); err != nil {
			return err
		}
		for _, v := range p.FromEvalSet {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TargetFieldMapping) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TargetFieldMapping(%+v)", *p)

}

func (p *TargetFieldMapping) DeepEqual(ano *TargetFieldMapping) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FromEvalSet) {
		return false
	}
	return true
}

func (p *TargetFieldMapping) Field1DeepEqual(src []*FieldMapping) bool {

	if len(p.FromEvalSet) != len(src) {
		return false
	}
	for i, v := range p.FromEvalSet {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// 评估器字段映射
type EvaluatorFieldMapping struct {
	EvaluatorVersionID *string         `thrift:"evaluator_version_id,1,optional" frugal:"1,optional,string" form:"evaluator_version_id" json:"evaluator_version_id,omitempty" query:"evaluator_version_id"`
	FromEvalSet        []*FieldMapping `thrift:"from_eval_set,2,optional" frugal:"2,optional,list<FieldMapping>" form:"from_eval_set" json:"from_eval_set,omitempty" query:"from_eval_set"`
	FromTarget         []*FieldMapping `thrift:"from_target,3,optional" frugal:"3,optional,list<FieldMapping>" form:"from_target" json:"from_target,omitempty" query:"from_target"`
}

func NewEvaluatorFieldMapping() *EvaluatorFieldMapping {
	return &EvaluatorFieldMapping{}
}

func (p *EvaluatorFieldMapping) InitDefault() {
}

var EvaluatorFieldMapping_EvaluatorVersionID_DEFAULT string

func (p *EvaluatorFieldMapping) GetEvaluatorVersionID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorVersionID() {
		return EvaluatorFieldMapping_EvaluatorVersionID_DEFAULT
	}
	return *p.EvaluatorVersionID
}

var EvaluatorFieldMapping_FromEvalSet_DEFAULT []*FieldMapping

func (p *EvaluatorFieldMapping) GetFromEvalSet() (v []*FieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetFromEvalSet() {
		return EvaluatorFieldMapping_FromEvalSet_DEFAULT
	}
	return p.FromEvalSet
}

var EvaluatorFieldMapping_FromTarget_DEFAULT []*FieldMapping

func (p *EvaluatorFieldMapping) GetFromTarget() (v []*FieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetFromTarget() {
		return EvaluatorFieldMapping_FromTarget_DEFAULT
	}
	return p.FromTarget
}
func (p *EvaluatorFieldMapping) SetEvaluatorVersionID(val *string) {
	p.EvaluatorVersionID = val
}
func (p *EvaluatorFieldMapping) SetFromEvalSet(val []*FieldMapping) {
	p.FromEvalSet = val
}
func (p *EvaluatorFieldMapping) SetFromTarget(val []*FieldMapping) {
	p.FromTarget = val
}

var fieldIDToName_EvaluatorFieldMapping = map[int16]string{
	1: "evaluator_version_id",
	2: "from_eval_set",
	3: "from_target",
}

func (p *EvaluatorFieldMapping) IsSetEvaluatorVersionID() bool {
	return p.EvaluatorVersionID != nil
}

func (p *EvaluatorFieldMapping) IsSetFromEvalSet() bool {
	return p.FromEvalSet != nil
}

func (p *EvaluatorFieldMapping) IsSetFromTarget() bool {
	return p.FromTarget != nil
}

func (p *EvaluatorFieldMapping) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorFieldMapping[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorFieldMapping) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorVersionID = _field
	return nil
}
func (p *EvaluatorFieldMapping) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldMapping, 0, size)
	values := make([]FieldMapping, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FromEvalSet = _field
	return nil
}
func (p *EvaluatorFieldMapping) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldMapping, 0, size)
	values := make([]FieldMapping, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FromTarget = _field
	return nil
}

func (p *EvaluatorFieldMapping) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluatorFieldMapping"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorFieldMapping) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorVersionID() {
		if err = oprot.WriteFieldBegin("evaluator_version_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvaluatorVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluatorFieldMapping) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFromEvalSet() {
		if err = oprot.WriteFieldBegin("from_eval_set", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FromEvalSet)); err != nil {
			return err
		}
		for _, v := range p.FromEvalSet {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvaluatorFieldMapping) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFromTarget() {
		if err = oprot.WriteFieldBegin("from_target", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FromTarget)); err != nil {
			return err
		}
		for _, v := range p.FromTarget {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *EvaluatorFieldMapping) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorFieldMapping(%+v)", *p)

}

func (p *EvaluatorFieldMapping) DeepEqual(ano *EvaluatorFieldMapping) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorVersionID) {
		return false
	}
	if !p.Field2DeepEqual(ano.FromEvalSet) {
		return false
	}
	if !p.Field3DeepEqual(ano.FromTarget) {
		return false
	}
	return true
}

func (p *EvaluatorFieldMapping) Field1DeepEqual(src *string) bool {

	if p.EvaluatorVersionID == src {
		return true
	} else if p.EvaluatorVersionID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvaluatorVersionID, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluatorFieldMapping) Field2DeepEqual(src []*FieldMapping) bool {

	if len(p.FromEvalSet) != len(src) {
		return false
	}
	for i, v := range p.FromEvalSet {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *EvaluatorFieldMapping) Field3DeepEqual(src []*FieldMapping) bool {

	if len(p.FromTarget) != len(src) {
		return false
	}
	for i, v := range p.FromTarget {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// Token使用量
type TokenUsage struct {
	InputTokens  *string `thrift:"input_tokens,1,optional" frugal:"1,optional,string" form:"input_tokens" json:"input_tokens,omitempty" query:"input_tokens"`
	OutputTokens *string `thrift:"output_tokens,2,optional" frugal:"2,optional,string" form:"output_tokens" json:"output_tokens,omitempty" query:"output_tokens"`
}

func NewTokenUsage() *TokenUsage {
	return &TokenUsage{}
}

func (p *TokenUsage) InitDefault() {
}

var TokenUsage_InputTokens_DEFAULT string

func (p *TokenUsage) GetInputTokens() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetInputTokens() {
		return TokenUsage_InputTokens_DEFAULT
	}
	return *p.InputTokens
}

var TokenUsage_OutputTokens_DEFAULT string

func (p *TokenUsage) GetOutputTokens() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetOutputTokens() {
		return TokenUsage_OutputTokens_DEFAULT
	}
	return *p.OutputTokens
}
func (p *TokenUsage) SetInputTokens(val *string) {
	p.InputTokens = val
}
func (p *TokenUsage) SetOutputTokens(val *string) {
	p.OutputTokens = val
}

var fieldIDToName_TokenUsage = map[int16]string{
	1: "input_tokens",
	2: "output_tokens",
}

func (p *TokenUsage) IsSetInputTokens() bool {
	return p.InputTokens != nil
}

func (p *TokenUsage) IsSetOutputTokens() bool {
	return p.OutputTokens != nil
}

func (p *TokenUsage) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TokenUsage[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TokenUsage) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InputTokens = _field
	return nil
}
func (p *TokenUsage) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OutputTokens = _field
	return nil
}

func (p *TokenUsage) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TokenUsage"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TokenUsage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputTokens() {
		if err = oprot.WriteFieldBegin("input_tokens", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.InputTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *TokenUsage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputTokens() {
		if err = oprot.WriteFieldBegin("output_tokens", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OutputTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TokenUsage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TokenUsage(%+v)", *p)

}

func (p *TokenUsage) DeepEqual(ano *TokenUsage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.InputTokens) {
		return false
	}
	if !p.Field2DeepEqual(ano.OutputTokens) {
		return false
	}
	return true
}

func (p *TokenUsage) Field1DeepEqual(src *string) bool {

	if p.InputTokens == src {
		return true
	} else if p.InputTokens == nil || src == nil {
		return false
	}
	if strings.Compare(*p.InputTokens, *src) != 0 {
		return false
	}
	return true
}
func (p *TokenUsage) Field2DeepEqual(src *string) bool {

	if p.OutputTokens == src {
		return true
	} else if p.OutputTokens == nil || src == nil {
		return false
	}
	if strings.Compare(*p.OutputTokens, *src) != 0 {
		return false
	}
	return true
}

// 评估器聚合结果
type EvaluatorAggregateResult_ struct {
	EvaluatorVersionID *string  `thrift:"evaluator_version_id,1,optional" frugal:"1,optional,string" form:"evaluator_version_id" json:"evaluator_version_id,omitempty" query:"evaluator_version_id"`
	EvaluatorName      *string  `thrift:"evaluator_name,2,optional" frugal:"2,optional,string" form:"evaluator_name" json:"evaluator_name,omitempty" query:"evaluator_name"`
	AverageScore       *float64 `thrift:"average_score,3,optional" frugal:"3,optional,double" form:"average_score" json:"average_score,omitempty" query:"average_score"`
	MaxScore           *float64 `thrift:"max_score,4,optional" frugal:"4,optional,double" form:"max_score" json:"max_score,omitempty" query:"max_score"`
	MinScore           *float64 `thrift:"min_score,5,optional" frugal:"5,optional,double" form:"min_score" json:"min_score,omitempty" query:"min_score"`
	SuccessCount       *int32   `thrift:"success_count,6,optional" frugal:"6,optional,i32" form:"success_count" json:"success_count,omitempty" query:"success_count"`
	FailedCount        *int32   `thrift:"failed_count,7,optional" frugal:"7,optional,i32" form:"failed_count" json:"failed_count,omitempty" query:"failed_count"`
}

func NewEvaluatorAggregateResult_() *EvaluatorAggregateResult_ {
	return &EvaluatorAggregateResult_{}
}

func (p *EvaluatorAggregateResult_) InitDefault() {
}

var EvaluatorAggregateResult__EvaluatorVersionID_DEFAULT string

func (p *EvaluatorAggregateResult_) GetEvaluatorVersionID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorVersionID() {
		return EvaluatorAggregateResult__EvaluatorVersionID_DEFAULT
	}
	return *p.EvaluatorVersionID
}

var EvaluatorAggregateResult__EvaluatorName_DEFAULT string

func (p *EvaluatorAggregateResult_) GetEvaluatorName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorName() {
		return EvaluatorAggregateResult__EvaluatorName_DEFAULT
	}
	return *p.EvaluatorName
}

var EvaluatorAggregateResult__AverageScore_DEFAULT float64

func (p *EvaluatorAggregateResult_) GetAverageScore() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetAverageScore() {
		return EvaluatorAggregateResult__AverageScore_DEFAULT
	}
	return *p.AverageScore
}

var EvaluatorAggregateResult__MaxScore_DEFAULT float64

func (p *EvaluatorAggregateResult_) GetMaxScore() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxScore() {
		return EvaluatorAggregateResult__MaxScore_DEFAULT
	}
	return *p.MaxScore
}

var EvaluatorAggregateResult__MinScore_DEFAULT float64

func (p *EvaluatorAggregateResult_) GetMinScore() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetMinScore() {
		return EvaluatorAggregateResult__MinScore_DEFAULT
	}
	return *p.MinScore
}

var EvaluatorAggregateResult__SuccessCount_DEFAULT int32

func (p *EvaluatorAggregateResult_) GetSuccessCount() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetSuccessCount() {
		return EvaluatorAggregateResult__SuccessCount_DEFAULT
	}
	return *p.SuccessCount
}

var EvaluatorAggregateResult__FailedCount_DEFAULT int32

func (p *EvaluatorAggregateResult_) GetFailedCount() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetFailedCount() {
		return EvaluatorAggregateResult__FailedCount_DEFAULT
	}
	return *p.FailedCount
}
func (p *EvaluatorAggregateResult_) SetEvaluatorVersionID(val *string) {
	p.EvaluatorVersionID = val
}
func (p *EvaluatorAggregateResult_) SetEvaluatorName(val *string) {
	p.EvaluatorName = val
}
func (p *EvaluatorAggregateResult_) SetAverageScore(val *float64) {
	p.AverageScore = val
}
func (p *EvaluatorAggregateResult_) SetMaxScore(val *float64) {
	p.MaxScore = val
}
func (p *EvaluatorAggregateResult_) SetMinScore(val *float64) {
	p.MinScore = val
}
func (p *EvaluatorAggregateResult_) SetSuccessCount(val *int32) {
	p.SuccessCount = val
}
func (p *EvaluatorAggregateResult_) SetFailedCount(val *int32) {
	p.FailedCount = val
}

var fieldIDToName_EvaluatorAggregateResult_ = map[int16]string{
	1: "evaluator_version_id",
	2: "evaluator_name",
	3: "average_score",
	4: "max_score",
	5: "min_score",
	6: "success_count",
	7: "failed_count",
}

func (p *EvaluatorAggregateResult_) IsSetEvaluatorVersionID() bool {
	return p.EvaluatorVersionID != nil
}

func (p *EvaluatorAggregateResult_) IsSetEvaluatorName() bool {
	return p.EvaluatorName != nil
}

func (p *EvaluatorAggregateResult_) IsSetAverageScore() bool {
	return p.AverageScore != nil
}

func (p *EvaluatorAggregateResult_) IsSetMaxScore() bool {
	return p.MaxScore != nil
}

func (p *EvaluatorAggregateResult_) IsSetMinScore() bool {
	return p.MinScore != nil
}

func (p *EvaluatorAggregateResult_) IsSetSuccessCount() bool {
	return p.SuccessCount != nil
}

func (p *EvaluatorAggregateResult_) IsSetFailedCount() bool {
	return p.FailedCount != nil
}

func (p *EvaluatorAggregateResult_) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorAggregateResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorAggregateResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorVersionID = _field
	return nil
}
func (p *EvaluatorAggregateResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorName = _field
	return nil
}
func (p *EvaluatorAggregateResult_) ReadField3(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AverageScore = _field
	return nil
}
func (p *EvaluatorAggregateResult_) ReadField4(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxScore = _field
	return nil
}
func (p *EvaluatorAggregateResult_) ReadField5(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MinScore = _field
	return nil
}
func (p *EvaluatorAggregateResult_) ReadField6(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SuccessCount = _field
	return nil
}
func (p *EvaluatorAggregateResult_) ReadField7(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FailedCount = _field
	return nil
}

func (p *EvaluatorAggregateResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluatorAggregateResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorAggregateResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorVersionID() {
		if err = oprot.WriteFieldBegin("evaluator_version_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvaluatorVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluatorAggregateResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorName() {
		if err = oprot.WriteFieldBegin("evaluator_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvaluatorName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvaluatorAggregateResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAverageScore() {
		if err = oprot.WriteFieldBegin("average_score", thrift.DOUBLE, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.AverageScore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvaluatorAggregateResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxScore() {
		if err = oprot.WriteFieldBegin("max_score", thrift.DOUBLE, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.MaxScore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *EvaluatorAggregateResult_) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMinScore() {
		if err = oprot.WriteFieldBegin("min_score", thrift.DOUBLE, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.MinScore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *EvaluatorAggregateResult_) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccessCount() {
		if err = oprot.WriteFieldBegin("success_count", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SuccessCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *EvaluatorAggregateResult_) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetFailedCount() {
		if err = oprot.WriteFieldBegin("failed_count", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.FailedCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *EvaluatorAggregateResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorAggregateResult_(%+v)", *p)

}

func (p *EvaluatorAggregateResult_) DeepEqual(ano *EvaluatorAggregateResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorVersionID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorName) {
		return false
	}
	if !p.Field3DeepEqual(ano.AverageScore) {
		return false
	}
	if !p.Field4DeepEqual(ano.MaxScore) {
		return false
	}
	if !p.Field5DeepEqual(ano.MinScore) {
		return false
	}
	if !p.Field6DeepEqual(ano.SuccessCount) {
		return false
	}
	if !p.Field7DeepEqual(ano.FailedCount) {
		return false
	}
	return true
}

func (p *EvaluatorAggregateResult_) Field1DeepEqual(src *string) bool {

	if p.EvaluatorVersionID == src {
		return true
	} else if p.EvaluatorVersionID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvaluatorVersionID, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluatorAggregateResult_) Field2DeepEqual(src *string) bool {

	if p.EvaluatorName == src {
		return true
	} else if p.EvaluatorName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvaluatorName, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluatorAggregateResult_) Field3DeepEqual(src *float64) bool {

	if p.AverageScore == src {
		return true
	} else if p.AverageScore == nil || src == nil {
		return false
	}
	if *p.AverageScore != *src {
		return false
	}
	return true
}
func (p *EvaluatorAggregateResult_) Field4DeepEqual(src *float64) bool {

	if p.MaxScore == src {
		return true
	} else if p.MaxScore == nil || src == nil {
		return false
	}
	if *p.MaxScore != *src {
		return false
	}
	return true
}
func (p *EvaluatorAggregateResult_) Field5DeepEqual(src *float64) bool {

	if p.MinScore == src {
		return true
	} else if p.MinScore == nil || src == nil {
		return false
	}
	if *p.MinScore != *src {
		return false
	}
	return true
}
func (p *EvaluatorAggregateResult_) Field6DeepEqual(src *int32) bool {

	if p.SuccessCount == src {
		return true
	} else if p.SuccessCount == nil || src == nil {
		return false
	}
	if *p.SuccessCount != *src {
		return false
	}
	return true
}
func (p *EvaluatorAggregateResult_) Field7DeepEqual(src *int32) bool {

	if p.FailedCount == src {
		return true
	} else if p.FailedCount == nil || src == nil {
		return false
	}
	if *p.FailedCount != *src {
		return false
	}
	return true
}

// 实验统计
type ExperimentStatistics struct {
	EvaluatorAggregateResults []*EvaluatorAggregateResult_ `thrift:"evaluator_aggregate_results,1,optional" frugal:"1,optional,list<EvaluatorAggregateResult_>" form:"evaluator_aggregate_results" json:"evaluator_aggregate_results,omitempty" query:"evaluator_aggregate_results"`
	TokenUsage                *TokenUsage                  `thrift:"token_usage,2,optional" frugal:"2,optional,TokenUsage" form:"token_usage" json:"token_usage,omitempty" query:"token_usage"`
	CreditCost                *float64                     `thrift:"credit_cost,3,optional" frugal:"3,optional,double" form:"credit_cost" json:"credit_cost,omitempty" query:"credit_cost"`
	PendingTurnCount          *int32                       `thrift:"pending_turn_count,4,optional" frugal:"4,optional,i32" form:"pending_turn_count" json:"pending_turn_count,omitempty" query:"pending_turn_count"`
	SuccessTurnCount          *int32                       `thrift:"success_turn_count,5,optional" frugal:"5,optional,i32" form:"success_turn_count" json:"success_turn_count,omitempty" query:"success_turn_count"`
	FailedTurnCount           *int32                       `thrift:"failed_turn_count,6,optional" frugal:"6,optional,i32" form:"failed_turn_count" json:"failed_turn_count,omitempty" query:"failed_turn_count"`
	TerminatedTurnCount       *int32                       `thrift:"terminated_turn_count,7,optional" frugal:"7,optional,i32" form:"terminated_turn_count" json:"terminated_turn_count,omitempty" query:"terminated_turn_count"`
	ProcessingTurnCount       *int32                       `thrift:"processing_turn_count,8,optional" frugal:"8,optional,i32" form:"processing_turn_count" json:"processing_turn_count,omitempty" query:"processing_turn_count"`
}

func NewExperimentStatistics() *ExperimentStatistics {
	return &ExperimentStatistics{}
}

func (p *ExperimentStatistics) InitDefault() {
}

var ExperimentStatistics_EvaluatorAggregateResults_DEFAULT []*EvaluatorAggregateResult_

func (p *ExperimentStatistics) GetEvaluatorAggregateResults() (v []*EvaluatorAggregateResult_) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorAggregateResults() {
		return ExperimentStatistics_EvaluatorAggregateResults_DEFAULT
	}
	return p.EvaluatorAggregateResults
}

var ExperimentStatistics_TokenUsage_DEFAULT *TokenUsage

func (p *ExperimentStatistics) GetTokenUsage() (v *TokenUsage) {
	if p == nil {
		return
	}
	if !p.IsSetTokenUsage() {
		return ExperimentStatistics_TokenUsage_DEFAULT
	}
	return p.TokenUsage
}

var ExperimentStatistics_CreditCost_DEFAULT float64

func (p *ExperimentStatistics) GetCreditCost() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetCreditCost() {
		return ExperimentStatistics_CreditCost_DEFAULT
	}
	return *p.CreditCost
}

var ExperimentStatistics_PendingTurnCount_DEFAULT int32

func (p *ExperimentStatistics) GetPendingTurnCount() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPendingTurnCount() {
		return ExperimentStatistics_PendingTurnCount_DEFAULT
	}
	return *p.PendingTurnCount
}

var ExperimentStatistics_SuccessTurnCount_DEFAULT int32

func (p *ExperimentStatistics) GetSuccessTurnCount() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetSuccessTurnCount() {
		return ExperimentStatistics_SuccessTurnCount_DEFAULT
	}
	return *p.SuccessTurnCount
}

var ExperimentStatistics_FailedTurnCount_DEFAULT int32

func (p *ExperimentStatistics) GetFailedTurnCount() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetFailedTurnCount() {
		return ExperimentStatistics_FailedTurnCount_DEFAULT
	}
	return *p.FailedTurnCount
}

var ExperimentStatistics_TerminatedTurnCount_DEFAULT int32

func (p *ExperimentStatistics) GetTerminatedTurnCount() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetTerminatedTurnCount() {
		return ExperimentStatistics_TerminatedTurnCount_DEFAULT
	}
	return *p.TerminatedTurnCount
}

var ExperimentStatistics_ProcessingTurnCount_DEFAULT int32

func (p *ExperimentStatistics) GetProcessingTurnCount() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetProcessingTurnCount() {
		return ExperimentStatistics_ProcessingTurnCount_DEFAULT
	}
	return *p.ProcessingTurnCount
}
func (p *ExperimentStatistics) SetEvaluatorAggregateResults(val []*EvaluatorAggregateResult_) {
	p.EvaluatorAggregateResults = val
}
func (p *ExperimentStatistics) SetTokenUsage(val *TokenUsage) {
	p.TokenUsage = val
}
func (p *ExperimentStatistics) SetCreditCost(val *float64) {
	p.CreditCost = val
}
func (p *ExperimentStatistics) SetPendingTurnCount(val *int32) {
	p.PendingTurnCount = val
}
func (p *ExperimentStatistics) SetSuccessTurnCount(val *int32) {
	p.SuccessTurnCount = val
}
func (p *ExperimentStatistics) SetFailedTurnCount(val *int32) {
	p.FailedTurnCount = val
}
func (p *ExperimentStatistics) SetTerminatedTurnCount(val *int32) {
	p.TerminatedTurnCount = val
}
func (p *ExperimentStatistics) SetProcessingTurnCount(val *int32) {
	p.ProcessingTurnCount = val
}

var fieldIDToName_ExperimentStatistics = map[int16]string{
	1: "evaluator_aggregate_results",
	2: "token_usage",
	3: "credit_cost",
	4: "pending_turn_count",
	5: "success_turn_count",
	6: "failed_turn_count",
	7: "terminated_turn_count",
	8: "processing_turn_count",
}

func (p *ExperimentStatistics) IsSetEvaluatorAggregateResults() bool {
	return p.EvaluatorAggregateResults != nil
}

func (p *ExperimentStatistics) IsSetTokenUsage() bool {
	return p.TokenUsage != nil
}

func (p *ExperimentStatistics) IsSetCreditCost() bool {
	return p.CreditCost != nil
}

func (p *ExperimentStatistics) IsSetPendingTurnCount() bool {
	return p.PendingTurnCount != nil
}

func (p *ExperimentStatistics) IsSetSuccessTurnCount() bool {
	return p.SuccessTurnCount != nil
}

func (p *ExperimentStatistics) IsSetFailedTurnCount() bool {
	return p.FailedTurnCount != nil
}

func (p *ExperimentStatistics) IsSetTerminatedTurnCount() bool {
	return p.TerminatedTurnCount != nil
}

func (p *ExperimentStatistics) IsSetProcessingTurnCount() bool {
	return p.ProcessingTurnCount != nil
}

func (p *ExperimentStatistics) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentStatistics[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentStatistics) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*EvaluatorAggregateResult_, 0, size)
	values := make([]EvaluatorAggregateResult_, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorAggregateResults = _field
	return nil
}
func (p *ExperimentStatistics) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTokenUsage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TokenUsage = _field
	return nil
}
func (p *ExperimentStatistics) ReadField3(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreditCost = _field
	return nil
}
func (p *ExperimentStatistics) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PendingTurnCount = _field
	return nil
}
func (p *ExperimentStatistics) ReadField5(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SuccessTurnCount = _field
	return nil
}
func (p *ExperimentStatistics) ReadField6(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FailedTurnCount = _field
	return nil
}
func (p *ExperimentStatistics) ReadField7(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TerminatedTurnCount = _field
	return nil
}
func (p *ExperimentStatistics) ReadField8(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ProcessingTurnCount = _field
	return nil
}

func (p *ExperimentStatistics) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExperimentStatistics"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentStatistics) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorAggregateResults() {
		if err = oprot.WriteFieldBegin("evaluator_aggregate_results", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvaluatorAggregateResults)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorAggregateResults {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ExperimentStatistics) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTokenUsage() {
		if err = oprot.WriteFieldBegin("token_usage", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TokenUsage.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ExperimentStatistics) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreditCost() {
		if err = oprot.WriteFieldBegin("credit_cost", thrift.DOUBLE, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.CreditCost); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ExperimentStatistics) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPendingTurnCount() {
		if err = oprot.WriteFieldBegin("pending_turn_count", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PendingTurnCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ExperimentStatistics) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccessTurnCount() {
		if err = oprot.WriteFieldBegin("success_turn_count", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SuccessTurnCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ExperimentStatistics) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFailedTurnCount() {
		if err = oprot.WriteFieldBegin("failed_turn_count", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.FailedTurnCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *ExperimentStatistics) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTerminatedTurnCount() {
		if err = oprot.WriteFieldBegin("terminated_turn_count", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TerminatedTurnCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *ExperimentStatistics) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetProcessingTurnCount() {
		if err = oprot.WriteFieldBegin("processing_turn_count", thrift.I32, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ProcessingTurnCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ExperimentStatistics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentStatistics(%+v)", *p)

}

func (p *ExperimentStatistics) DeepEqual(ano *ExperimentStatistics) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorAggregateResults) {
		return false
	}
	if !p.Field2DeepEqual(ano.TokenUsage) {
		return false
	}
	if !p.Field3DeepEqual(ano.CreditCost) {
		return false
	}
	if !p.Field4DeepEqual(ano.PendingTurnCount) {
		return false
	}
	if !p.Field5DeepEqual(ano.SuccessTurnCount) {
		return false
	}
	if !p.Field6DeepEqual(ano.FailedTurnCount) {
		return false
	}
	if !p.Field7DeepEqual(ano.TerminatedTurnCount) {
		return false
	}
	if !p.Field8DeepEqual(ano.ProcessingTurnCount) {
		return false
	}
	return true
}

func (p *ExperimentStatistics) Field1DeepEqual(src []*EvaluatorAggregateResult_) bool {

	if len(p.EvaluatorAggregateResults) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorAggregateResults {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ExperimentStatistics) Field2DeepEqual(src *TokenUsage) bool {

	if !p.TokenUsage.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ExperimentStatistics) Field3DeepEqual(src *float64) bool {

	if p.CreditCost == src {
		return true
	} else if p.CreditCost == nil || src == nil {
		return false
	}
	if *p.CreditCost != *src {
		return false
	}
	return true
}
func (p *ExperimentStatistics) Field4DeepEqual(src *int32) bool {

	if p.PendingTurnCount == src {
		return true
	} else if p.PendingTurnCount == nil || src == nil {
		return false
	}
	if *p.PendingTurnCount != *src {
		return false
	}
	return true
}
func (p *ExperimentStatistics) Field5DeepEqual(src *int32) bool {

	if p.SuccessTurnCount == src {
		return true
	} else if p.SuccessTurnCount == nil || src == nil {
		return false
	}
	if *p.SuccessTurnCount != *src {
		return false
	}
	return true
}
func (p *ExperimentStatistics) Field6DeepEqual(src *int32) bool {

	if p.FailedTurnCount == src {
		return true
	} else if p.FailedTurnCount == nil || src == nil {
		return false
	}
	if *p.FailedTurnCount != *src {
		return false
	}
	return true
}
func (p *ExperimentStatistics) Field7DeepEqual(src *int32) bool {

	if p.TerminatedTurnCount == src {
		return true
	} else if p.TerminatedTurnCount == nil || src == nil {
		return false
	}
	if *p.TerminatedTurnCount != *src {
		return false
	}
	return true
}
func (p *ExperimentStatistics) Field8DeepEqual(src *int32) bool {

	if p.ProcessingTurnCount == src {
		return true
	} else if p.ProcessingTurnCount == nil || src == nil {
		return false
	}
	if *p.ProcessingTurnCount != *src {
		return false
	}
	return true
}

// 评测实验
type Experiment struct {
	ExperimentID  *string           `thrift:"experiment_id,1,optional" frugal:"1,optional,string" form:"experiment_id" json:"experiment_id,omitempty" query:"experiment_id"`
	Name          *string           `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Description   *string           `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty" query:"description"`
	Status        *ExperimentStatus `thrift:"status,4,optional" frugal:"4,optional,string" form:"status" json:"status,omitempty" query:"status"`
	StatusMessage *string           `thrift:"status_message,5,optional" frugal:"5,optional,string" form:"status_message" json:"status_message,omitempty" query:"status_message"`
	// ISO 8601格式
	StartTime *string `thrift:"start_time,6,optional" frugal:"6,optional,string" form:"start_time" json:"start_time,omitempty" query:"start_time"`
	// ISO 8601格式
	EndTime               *string                  `thrift:"end_time,7,optional" frugal:"7,optional,string" form:"end_time" json:"end_time,omitempty" query:"end_time"`
	EvalSetVersionID      *string                  `thrift:"eval_set_version_id,8,optional" frugal:"8,optional,string" form:"eval_set_version_id" json:"eval_set_version_id,omitempty" query:"eval_set_version_id"`
	TargetVersionID       *string                  `thrift:"target_version_id,9,optional" frugal:"9,optional,string" form:"target_version_id" json:"target_version_id,omitempty" query:"target_version_id"`
	EvaluatorVersionIds   []string                 `thrift:"evaluator_version_ids,10,optional" frugal:"10,optional,list<string>" form:"evaluator_version_ids" json:"evaluator_version_ids,omitempty" query:"evaluator_version_ids"`
	TargetFieldMapping    *TargetFieldMapping      `thrift:"target_field_mapping,11,optional" frugal:"11,optional,TargetFieldMapping" form:"target_field_mapping" json:"target_field_mapping,omitempty" query:"target_field_mapping"`
	EvaluatorFieldMapping []*EvaluatorFieldMapping `thrift:"evaluator_field_mapping,12,optional" frugal:"12,optional,list<EvaluatorFieldMapping>" form:"evaluator_field_mapping" json:"evaluator_field_mapping,omitempty" query:"evaluator_field_mapping"`
	ItemConcurNum         *int32                   `thrift:"item_concur_num,13,optional" frugal:"13,optional,i32" form:"item_concur_num" json:"item_concur_num,omitempty" query:"item_concur_num"`
	EvaluatorsConcurNum   *int32                   `thrift:"evaluators_concur_num,14,optional" frugal:"14,optional,i32" form:"evaluators_concur_num" json:"evaluators_concur_num,omitempty" query:"evaluators_concur_num"`
	ExperimentType        *ExperimentType          `thrift:"experiment_type,15,optional" frugal:"15,optional,string" form:"experiment_type" json:"experiment_type,omitempty" query:"experiment_type"`
	ExperimentStatistics  *ExperimentStatistics    `thrift:"experiment_statistics,16,optional" frugal:"16,optional,ExperimentStatistics" form:"experiment_statistics" json:"experiment_statistics,omitempty" query:"experiment_statistics"`
	BaseInfo              *common.BaseInfo         `thrift:"base_info,17,optional" frugal:"17,optional,common.BaseInfo" form:"base_info" json:"base_info,omitempty" query:"base_info"`
}

func NewExperiment() *Experiment {
	return &Experiment{}
}

func (p *Experiment) InitDefault() {
}

var Experiment_ExperimentID_DEFAULT string

func (p *Experiment) GetExperimentID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentID() {
		return Experiment_ExperimentID_DEFAULT
	}
	return *p.ExperimentID
}

var Experiment_Name_DEFAULT string

func (p *Experiment) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return Experiment_Name_DEFAULT
	}
	return *p.Name
}

var Experiment_Description_DEFAULT string

func (p *Experiment) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return Experiment_Description_DEFAULT
	}
	return *p.Description
}

var Experiment_Status_DEFAULT ExperimentStatus

func (p *Experiment) GetStatus() (v ExperimentStatus) {
	if p == nil {
		return
	}
	if !p.IsSetStatus() {
		return Experiment_Status_DEFAULT
	}
	return *p.Status
}

var Experiment_StatusMessage_DEFAULT string

func (p *Experiment) GetStatusMessage() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetStatusMessage() {
		return Experiment_StatusMessage_DEFAULT
	}
	return *p.StatusMessage
}

var Experiment_StartTime_DEFAULT string

func (p *Experiment) GetStartTime() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetStartTime() {
		return Experiment_StartTime_DEFAULT
	}
	return *p.StartTime
}

var Experiment_EndTime_DEFAULT string

func (p *Experiment) GetEndTime() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEndTime() {
		return Experiment_EndTime_DEFAULT
	}
	return *p.EndTime
}

var Experiment_EvalSetVersionID_DEFAULT string

func (p *Experiment) GetEvalSetVersionID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEvalSetVersionID() {
		return Experiment_EvalSetVersionID_DEFAULT
	}
	return *p.EvalSetVersionID
}

var Experiment_TargetVersionID_DEFAULT string

func (p *Experiment) GetTargetVersionID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTargetVersionID() {
		return Experiment_TargetVersionID_DEFAULT
	}
	return *p.TargetVersionID
}

var Experiment_EvaluatorVersionIds_DEFAULT []string

func (p *Experiment) GetEvaluatorVersionIds() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorVersionIds() {
		return Experiment_EvaluatorVersionIds_DEFAULT
	}
	return p.EvaluatorVersionIds
}

var Experiment_TargetFieldMapping_DEFAULT *TargetFieldMapping

func (p *Experiment) GetTargetFieldMapping() (v *TargetFieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetTargetFieldMapping() {
		return Experiment_TargetFieldMapping_DEFAULT
	}
	return p.TargetFieldMapping
}

var Experiment_EvaluatorFieldMapping_DEFAULT []*EvaluatorFieldMapping

func (p *Experiment) GetEvaluatorFieldMapping() (v []*EvaluatorFieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorFieldMapping() {
		return Experiment_EvaluatorFieldMapping_DEFAULT
	}
	return p.EvaluatorFieldMapping
}

var Experiment_ItemConcurNum_DEFAULT int32

func (p *Experiment) GetItemConcurNum() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetItemConcurNum() {
		return Experiment_ItemConcurNum_DEFAULT
	}
	return *p.ItemConcurNum
}

var Experiment_EvaluatorsConcurNum_DEFAULT int32

func (p *Experiment) GetEvaluatorsConcurNum() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorsConcurNum() {
		return Experiment_EvaluatorsConcurNum_DEFAULT
	}
	return *p.EvaluatorsConcurNum
}

var Experiment_ExperimentType_DEFAULT ExperimentType

func (p *Experiment) GetExperimentType() (v ExperimentType) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentType() {
		return Experiment_ExperimentType_DEFAULT
	}
	return *p.ExperimentType
}

var Experiment_ExperimentStatistics_DEFAULT *ExperimentStatistics

func (p *Experiment) GetExperimentStatistics() (v *ExperimentStatistics) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentStatistics() {
		return Experiment_ExperimentStatistics_DEFAULT
	}
	return p.ExperimentStatistics
}

var Experiment_BaseInfo_DEFAULT *common.BaseInfo

func (p *Experiment) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return Experiment_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *Experiment) SetExperimentID(val *string) {
	p.ExperimentID = val
}
func (p *Experiment) SetName(val *string) {
	p.Name = val
}
func (p *Experiment) SetDescription(val *string) {
	p.Description = val
}
func (p *Experiment) SetStatus(val *ExperimentStatus) {
	p.Status = val
}
func (p *Experiment) SetStatusMessage(val *string) {
	p.StatusMessage = val
}
func (p *Experiment) SetStartTime(val *string) {
	p.StartTime = val
}
func (p *Experiment) SetEndTime(val *string) {
	p.EndTime = val
}
func (p *Experiment) SetEvalSetVersionID(val *string) {
	p.EvalSetVersionID = val
}
func (p *Experiment) SetTargetVersionID(val *string) {
	p.TargetVersionID = val
}
func (p *Experiment) SetEvaluatorVersionIds(val []string) {
	p.EvaluatorVersionIds = val
}
func (p *Experiment) SetTargetFieldMapping(val *TargetFieldMapping) {
	p.TargetFieldMapping = val
}
func (p *Experiment) SetEvaluatorFieldMapping(val []*EvaluatorFieldMapping) {
	p.EvaluatorFieldMapping = val
}
func (p *Experiment) SetItemConcurNum(val *int32) {
	p.ItemConcurNum = val
}
func (p *Experiment) SetEvaluatorsConcurNum(val *int32) {
	p.EvaluatorsConcurNum = val
}
func (p *Experiment) SetExperimentType(val *ExperimentType) {
	p.ExperimentType = val
}
func (p *Experiment) SetExperimentStatistics(val *ExperimentStatistics) {
	p.ExperimentStatistics = val
}
func (p *Experiment) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_Experiment = map[int16]string{
	1:  "experiment_id",
	2:  "name",
	3:  "description",
	4:  "status",
	5:  "status_message",
	6:  "start_time",
	7:  "end_time",
	8:  "eval_set_version_id",
	9:  "target_version_id",
	10: "evaluator_version_ids",
	11: "target_field_mapping",
	12: "evaluator_field_mapping",
	13: "item_concur_num",
	14: "evaluators_concur_num",
	15: "experiment_type",
	16: "experiment_statistics",
	17: "base_info",
}

func (p *Experiment) IsSetExperimentID() bool {
	return p.ExperimentID != nil
}

func (p *Experiment) IsSetName() bool {
	return p.Name != nil
}

func (p *Experiment) IsSetDescription() bool {
	return p.Description != nil
}

func (p *Experiment) IsSetStatus() bool {
	return p.Status != nil
}

func (p *Experiment) IsSetStatusMessage() bool {
	return p.StatusMessage != nil
}

func (p *Experiment) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *Experiment) IsSetEndTime() bool {
	return p.EndTime != nil
}

func (p *Experiment) IsSetEvalSetVersionID() bool {
	return p.EvalSetVersionID != nil
}

func (p *Experiment) IsSetTargetVersionID() bool {
	return p.TargetVersionID != nil
}

func (p *Experiment) IsSetEvaluatorVersionIds() bool {
	return p.EvaluatorVersionIds != nil
}

func (p *Experiment) IsSetTargetFieldMapping() bool {
	return p.TargetFieldMapping != nil
}

func (p *Experiment) IsSetEvaluatorFieldMapping() bool {
	return p.EvaluatorFieldMapping != nil
}

func (p *Experiment) IsSetItemConcurNum() bool {
	return p.ItemConcurNum != nil
}

func (p *Experiment) IsSetEvaluatorsConcurNum() bool {
	return p.EvaluatorsConcurNum != nil
}

func (p *Experiment) IsSetExperimentType() bool {
	return p.ExperimentType != nil
}

func (p *Experiment) IsSetExperimentStatistics() bool {
	return p.ExperimentStatistics != nil
}

func (p *Experiment) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *Experiment) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Experiment[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Experiment) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExperimentID = _field
	return nil
}
func (p *Experiment) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *Experiment) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *Experiment) ReadField4(iprot thrift.TProtocol) error {

	var _field *ExperimentStatus
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}
func (p *Experiment) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StatusMessage = _field
	return nil
}
func (p *Experiment) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StartTime = _field
	return nil
}
func (p *Experiment) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EndTime = _field
	return nil
}
func (p *Experiment) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvalSetVersionID = _field
	return nil
}
func (p *Experiment) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TargetVersionID = _field
	return nil
}
func (p *Experiment) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorVersionIds = _field
	return nil
}
func (p *Experiment) ReadField11(iprot thrift.TProtocol) error {
	_field := NewTargetFieldMapping()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TargetFieldMapping = _field
	return nil
}
func (p *Experiment) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*EvaluatorFieldMapping, 0, size)
	values := make([]EvaluatorFieldMapping, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorFieldMapping = _field
	return nil
}
func (p *Experiment) ReadField13(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemConcurNum = _field
	return nil
}
func (p *Experiment) ReadField14(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorsConcurNum = _field
	return nil
}
func (p *Experiment) ReadField15(iprot thrift.TProtocol) error {

	var _field *ExperimentType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExperimentType = _field
	return nil
}
func (p *Experiment) ReadField16(iprot thrift.TProtocol) error {
	_field := NewExperimentStatistics()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ExperimentStatistics = _field
	return nil
}
func (p *Experiment) ReadField17(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *Experiment) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Experiment"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Experiment) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentID() {
		if err = oprot.WriteFieldBegin("experiment_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ExperimentID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Experiment) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Experiment) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *Experiment) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *Experiment) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatusMessage() {
		if err = oprot.WriteFieldBegin("status_message", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StatusMessage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *Experiment) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err = oprot.WriteFieldBegin("start_time", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StartTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *Experiment) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTime() {
		if err = oprot.WriteFieldBegin("end_time", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EndTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *Experiment) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalSetVersionID() {
		if err = oprot.WriteFieldBegin("eval_set_version_id", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvalSetVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *Experiment) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetVersionID() {
		if err = oprot.WriteFieldBegin("target_version_id", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TargetVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *Experiment) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorVersionIds() {
		if err = oprot.WriteFieldBegin("evaluator_version_ids", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.EvaluatorVersionIds)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorVersionIds {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *Experiment) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetFieldMapping() {
		if err = oprot.WriteFieldBegin("target_field_mapping", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TargetFieldMapping.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *Experiment) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorFieldMapping() {
		if err = oprot.WriteFieldBegin("evaluator_field_mapping", thrift.LIST, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvaluatorFieldMapping)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorFieldMapping {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *Experiment) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemConcurNum() {
		if err = oprot.WriteFieldBegin("item_concur_num", thrift.I32, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ItemConcurNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}
func (p *Experiment) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorsConcurNum() {
		if err = oprot.WriteFieldBegin("evaluators_concur_num", thrift.I32, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.EvaluatorsConcurNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}
func (p *Experiment) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentType() {
		if err = oprot.WriteFieldBegin("experiment_type", thrift.STRING, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ExperimentType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}
func (p *Experiment) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentStatistics() {
		if err = oprot.WriteFieldBegin("experiment_statistics", thrift.STRUCT, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ExperimentStatistics.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}
func (p *Experiment) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *Experiment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Experiment(%+v)", *p)

}

func (p *Experiment) DeepEqual(ano *Experiment) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ExperimentID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.Status) {
		return false
	}
	if !p.Field5DeepEqual(ano.StatusMessage) {
		return false
	}
	if !p.Field6DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field7DeepEqual(ano.EndTime) {
		return false
	}
	if !p.Field8DeepEqual(ano.EvalSetVersionID) {
		return false
	}
	if !p.Field9DeepEqual(ano.TargetVersionID) {
		return false
	}
	if !p.Field10DeepEqual(ano.EvaluatorVersionIds) {
		return false
	}
	if !p.Field11DeepEqual(ano.TargetFieldMapping) {
		return false
	}
	if !p.Field12DeepEqual(ano.EvaluatorFieldMapping) {
		return false
	}
	if !p.Field13DeepEqual(ano.ItemConcurNum) {
		return false
	}
	if !p.Field14DeepEqual(ano.EvaluatorsConcurNum) {
		return false
	}
	if !p.Field15DeepEqual(ano.ExperimentType) {
		return false
	}
	if !p.Field16DeepEqual(ano.ExperimentStatistics) {
		return false
	}
	if !p.Field17DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *Experiment) Field1DeepEqual(src *string) bool {

	if p.ExperimentID == src {
		return true
	} else if p.ExperimentID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ExperimentID, *src) != 0 {
		return false
	}
	return true
}
func (p *Experiment) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *Experiment) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *Experiment) Field4DeepEqual(src *ExperimentStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Status, *src) != 0 {
		return false
	}
	return true
}
func (p *Experiment) Field5DeepEqual(src *string) bool {

	if p.StatusMessage == src {
		return true
	} else if p.StatusMessage == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StatusMessage, *src) != 0 {
		return false
	}
	return true
}
func (p *Experiment) Field6DeepEqual(src *string) bool {

	if p.StartTime == src {
		return true
	} else if p.StartTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StartTime, *src) != 0 {
		return false
	}
	return true
}
func (p *Experiment) Field7DeepEqual(src *string) bool {

	if p.EndTime == src {
		return true
	} else if p.EndTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EndTime, *src) != 0 {
		return false
	}
	return true
}
func (p *Experiment) Field8DeepEqual(src *string) bool {

	if p.EvalSetVersionID == src {
		return true
	} else if p.EvalSetVersionID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvalSetVersionID, *src) != 0 {
		return false
	}
	return true
}
func (p *Experiment) Field9DeepEqual(src *string) bool {

	if p.TargetVersionID == src {
		return true
	} else if p.TargetVersionID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TargetVersionID, *src) != 0 {
		return false
	}
	return true
}
func (p *Experiment) Field10DeepEqual(src []string) bool {

	if len(p.EvaluatorVersionIds) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorVersionIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *Experiment) Field11DeepEqual(src *TargetFieldMapping) bool {

	if !p.TargetFieldMapping.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Experiment) Field12DeepEqual(src []*EvaluatorFieldMapping) bool {

	if len(p.EvaluatorFieldMapping) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorFieldMapping {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Experiment) Field13DeepEqual(src *int32) bool {

	if p.ItemConcurNum == src {
		return true
	} else if p.ItemConcurNum == nil || src == nil {
		return false
	}
	if *p.ItemConcurNum != *src {
		return false
	}
	return true
}
func (p *Experiment) Field14DeepEqual(src *int32) bool {

	if p.EvaluatorsConcurNum == src {
		return true
	} else if p.EvaluatorsConcurNum == nil || src == nil {
		return false
	}
	if *p.EvaluatorsConcurNum != *src {
		return false
	}
	return true
}
func (p *Experiment) Field15DeepEqual(src *ExperimentType) bool {

	if p.ExperimentType == src {
		return true
	} else if p.ExperimentType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ExperimentType, *src) != 0 {
		return false
	}
	return true
}
func (p *Experiment) Field16DeepEqual(src *ExperimentStatistics) bool {

	if !p.ExperimentStatistics.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Experiment) Field17DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

// 列定义 - 评测集字段
type ColumnEvalSetField struct {
	Key         *string             `thrift:"key,1,optional" frugal:"1,optional,string" form:"key" json:"key,omitempty" query:"key"`
	Name        *string             `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Description *string             `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty" query:"description"`
	ContentType *common.ContentType `thrift:"content_type,4,optional" frugal:"4,optional,string" form:"content_type" json:"content_type,omitempty" query:"content_type"`
}

func NewColumnEvalSetField() *ColumnEvalSetField {
	return &ColumnEvalSetField{}
}

func (p *ColumnEvalSetField) InitDefault() {
}

var ColumnEvalSetField_Key_DEFAULT string

func (p *ColumnEvalSetField) GetKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetKey() {
		return ColumnEvalSetField_Key_DEFAULT
	}
	return *p.Key
}

var ColumnEvalSetField_Name_DEFAULT string

func (p *ColumnEvalSetField) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return ColumnEvalSetField_Name_DEFAULT
	}
	return *p.Name
}

var ColumnEvalSetField_Description_DEFAULT string

func (p *ColumnEvalSetField) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return ColumnEvalSetField_Description_DEFAULT
	}
	return *p.Description
}

var ColumnEvalSetField_ContentType_DEFAULT common.ContentType

func (p *ColumnEvalSetField) GetContentType() (v common.ContentType) {
	if p == nil {
		return
	}
	if !p.IsSetContentType() {
		return ColumnEvalSetField_ContentType_DEFAULT
	}
	return *p.ContentType
}
func (p *ColumnEvalSetField) SetKey(val *string) {
	p.Key = val
}
func (p *ColumnEvalSetField) SetName(val *string) {
	p.Name = val
}
func (p *ColumnEvalSetField) SetDescription(val *string) {
	p.Description = val
}
func (p *ColumnEvalSetField) SetContentType(val *common.ContentType) {
	p.ContentType = val
}

var fieldIDToName_ColumnEvalSetField = map[int16]string{
	1: "key",
	2: "name",
	3: "description",
	4: "content_type",
}

func (p *ColumnEvalSetField) IsSetKey() bool {
	return p.Key != nil
}

func (p *ColumnEvalSetField) IsSetName() bool {
	return p.Name != nil
}

func (p *ColumnEvalSetField) IsSetDescription() bool {
	return p.Description != nil
}

func (p *ColumnEvalSetField) IsSetContentType() bool {
	return p.ContentType != nil
}

func (p *ColumnEvalSetField) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ColumnEvalSetField[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ColumnEvalSetField) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}
func (p *ColumnEvalSetField) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *ColumnEvalSetField) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *ColumnEvalSetField) ReadField4(iprot thrift.TProtocol) error {

	var _field *common.ContentType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ContentType = _field
	return nil
}

func (p *ColumnEvalSetField) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnEvalSetField"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ColumnEvalSetField) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ColumnEvalSetField) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ColumnEvalSetField) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ColumnEvalSetField) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentType() {
		if err = oprot.WriteFieldBegin("content_type", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ContentType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ColumnEvalSetField) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnEvalSetField(%+v)", *p)

}

func (p *ColumnEvalSetField) DeepEqual(ano *ColumnEvalSetField) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.ContentType) {
		return false
	}
	return true
}

func (p *ColumnEvalSetField) Field1DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}
func (p *ColumnEvalSetField) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ColumnEvalSetField) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *ColumnEvalSetField) Field4DeepEqual(src *common.ContentType) bool {

	if p.ContentType == src {
		return true
	} else if p.ContentType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ContentType, *src) != 0 {
		return false
	}
	return true
}

// 列定义 - 评估器
type ColumnEvaluator struct {
	EvaluatorVersionID *string                  `thrift:"evaluator_version_id,1,optional" frugal:"1,optional,string" form:"evaluator_version_id" json:"evaluator_version_id,omitempty" query:"evaluator_version_id"`
	EvaluatorID        *string                  `thrift:"evaluator_id,2,optional" frugal:"2,optional,string" form:"evaluator_id" json:"evaluator_id,omitempty" query:"evaluator_id"`
	EvaluatorType      *evaluator.EvaluatorType `thrift:"evaluator_type,3,optional" frugal:"3,optional,string" form:"evaluator_type" json:"evaluator_type,omitempty" query:"evaluator_type"`
	Name               *string                  `thrift:"name,4,optional" frugal:"4,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Version            *string                  `thrift:"version,5,optional" frugal:"5,optional,string" form:"version" json:"version,omitempty" query:"version"`
	Description        *string                  `thrift:"description,6,optional" frugal:"6,optional,string" form:"description" json:"description,omitempty" query:"description"`
}

func NewColumnEvaluator() *ColumnEvaluator {
	return &ColumnEvaluator{}
}

func (p *ColumnEvaluator) InitDefault() {
}

var ColumnEvaluator_EvaluatorVersionID_DEFAULT string

func (p *ColumnEvaluator) GetEvaluatorVersionID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorVersionID() {
		return ColumnEvaluator_EvaluatorVersionID_DEFAULT
	}
	return *p.EvaluatorVersionID
}

var ColumnEvaluator_EvaluatorID_DEFAULT string

func (p *ColumnEvaluator) GetEvaluatorID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorID() {
		return ColumnEvaluator_EvaluatorID_DEFAULT
	}
	return *p.EvaluatorID
}

var ColumnEvaluator_EvaluatorType_DEFAULT evaluator.EvaluatorType

func (p *ColumnEvaluator) GetEvaluatorType() (v evaluator.EvaluatorType) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorType() {
		return ColumnEvaluator_EvaluatorType_DEFAULT
	}
	return *p.EvaluatorType
}

var ColumnEvaluator_Name_DEFAULT string

func (p *ColumnEvaluator) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return ColumnEvaluator_Name_DEFAULT
	}
	return *p.Name
}

var ColumnEvaluator_Version_DEFAULT string

func (p *ColumnEvaluator) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return ColumnEvaluator_Version_DEFAULT
	}
	return *p.Version
}

var ColumnEvaluator_Description_DEFAULT string

func (p *ColumnEvaluator) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return ColumnEvaluator_Description_DEFAULT
	}
	return *p.Description
}
func (p *ColumnEvaluator) SetEvaluatorVersionID(val *string) {
	p.EvaluatorVersionID = val
}
func (p *ColumnEvaluator) SetEvaluatorID(val *string) {
	p.EvaluatorID = val
}
func (p *ColumnEvaluator) SetEvaluatorType(val *evaluator.EvaluatorType) {
	p.EvaluatorType = val
}
func (p *ColumnEvaluator) SetName(val *string) {
	p.Name = val
}
func (p *ColumnEvaluator) SetVersion(val *string) {
	p.Version = val
}
func (p *ColumnEvaluator) SetDescription(val *string) {
	p.Description = val
}

var fieldIDToName_ColumnEvaluator = map[int16]string{
	1: "evaluator_version_id",
	2: "evaluator_id",
	3: "evaluator_type",
	4: "name",
	5: "version",
	6: "description",
}

func (p *ColumnEvaluator) IsSetEvaluatorVersionID() bool {
	return p.EvaluatorVersionID != nil
}

func (p *ColumnEvaluator) IsSetEvaluatorID() bool {
	return p.EvaluatorID != nil
}

func (p *ColumnEvaluator) IsSetEvaluatorType() bool {
	return p.EvaluatorType != nil
}

func (p *ColumnEvaluator) IsSetName() bool {
	return p.Name != nil
}

func (p *ColumnEvaluator) IsSetVersion() bool {
	return p.Version != nil
}

func (p *ColumnEvaluator) IsSetDescription() bool {
	return p.Description != nil
}

func (p *ColumnEvaluator) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ColumnEvaluator[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ColumnEvaluator) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorVersionID = _field
	return nil
}
func (p *ColumnEvaluator) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *ColumnEvaluator) ReadField3(iprot thrift.TProtocol) error {

	var _field *evaluator.EvaluatorType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorType = _field
	return nil
}
func (p *ColumnEvaluator) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *ColumnEvaluator) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *ColumnEvaluator) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}

func (p *ColumnEvaluator) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnEvaluator"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ColumnEvaluator) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorVersionID() {
		if err = oprot.WriteFieldBegin("evaluator_version_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvaluatorVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ColumnEvaluator) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorID() {
		if err = oprot.WriteFieldBegin("evaluator_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvaluatorID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ColumnEvaluator) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorType() {
		if err = oprot.WriteFieldBegin("evaluator_type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvaluatorType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ColumnEvaluator) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ColumnEvaluator) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ColumnEvaluator) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ColumnEvaluator) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnEvaluator(%+v)", *p)

}

func (p *ColumnEvaluator) DeepEqual(ano *ColumnEvaluator) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorVersionID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.EvaluatorType) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.Version) {
		return false
	}
	if !p.Field6DeepEqual(ano.Description) {
		return false
	}
	return true
}

func (p *ColumnEvaluator) Field1DeepEqual(src *string) bool {

	if p.EvaluatorVersionID == src {
		return true
	} else if p.EvaluatorVersionID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvaluatorVersionID, *src) != 0 {
		return false
	}
	return true
}
func (p *ColumnEvaluator) Field2DeepEqual(src *string) bool {

	if p.EvaluatorID == src {
		return true
	} else if p.EvaluatorID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvaluatorID, *src) != 0 {
		return false
	}
	return true
}
func (p *ColumnEvaluator) Field3DeepEqual(src *evaluator.EvaluatorType) bool {

	if p.EvaluatorType == src {
		return true
	} else if p.EvaluatorType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvaluatorType, *src) != 0 {
		return false
	}
	return true
}
func (p *ColumnEvaluator) Field4DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ColumnEvaluator) Field5DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *ColumnEvaluator) Field6DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}

// 目标输出结果
type TargetOutput struct {
	TargetRecordID  *string                       `thrift:"target_record_id,1,optional" frugal:"1,optional,string" form:"target_record_id" json:"target_record_id,omitempty" query:"target_record_id"`
	Status          *evaluator.EvaluatorRunStatus `thrift:"status,2,optional" frugal:"2,optional,string" form:"status" json:"status,omitempty" query:"status"`
	OutputFields    map[string]*common.Content    `thrift:"output_fields,3,optional" frugal:"3,optional,map<string:common.Content>" form:"output_fields" json:"output_fields,omitempty" query:"output_fields"`
	TimeConsumingMs *string                       `thrift:"time_consuming_ms,4,optional" frugal:"4,optional,string" form:"time_consuming_ms" json:"time_consuming_ms,omitempty" query:"time_consuming_ms"`
	Error           *evaluator.EvaluatorRunError  `thrift:"error,5,optional" frugal:"5,optional,evaluator.EvaluatorRunError" form:"error" json:"error,omitempty" query:"error"`
}

func NewTargetOutput() *TargetOutput {
	return &TargetOutput{}
}

func (p *TargetOutput) InitDefault() {
}

var TargetOutput_TargetRecordID_DEFAULT string

func (p *TargetOutput) GetTargetRecordID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTargetRecordID() {
		return TargetOutput_TargetRecordID_DEFAULT
	}
	return *p.TargetRecordID
}

var TargetOutput_Status_DEFAULT evaluator.EvaluatorRunStatus

func (p *TargetOutput) GetStatus() (v evaluator.EvaluatorRunStatus) {
	if p == nil {
		return
	}
	if !p.IsSetStatus() {
		return TargetOutput_Status_DEFAULT
	}
	return *p.Status
}

var TargetOutput_OutputFields_DEFAULT map[string]*common.Content

func (p *TargetOutput) GetOutputFields() (v map[string]*common.Content) {
	if p == nil {
		return
	}
	if !p.IsSetOutputFields() {
		return TargetOutput_OutputFields_DEFAULT
	}
	return p.OutputFields
}

var TargetOutput_TimeConsumingMs_DEFAULT string

func (p *TargetOutput) GetTimeConsumingMs() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTimeConsumingMs() {
		return TargetOutput_TimeConsumingMs_DEFAULT
	}
	return *p.TimeConsumingMs
}

var TargetOutput_Error_DEFAULT *evaluator.EvaluatorRunError

func (p *TargetOutput) GetError() (v *evaluator.EvaluatorRunError) {
	if p == nil {
		return
	}
	if !p.IsSetError() {
		return TargetOutput_Error_DEFAULT
	}
	return p.Error
}
func (p *TargetOutput) SetTargetRecordID(val *string) {
	p.TargetRecordID = val
}
func (p *TargetOutput) SetStatus(val *evaluator.EvaluatorRunStatus) {
	p.Status = val
}
func (p *TargetOutput) SetOutputFields(val map[string]*common.Content) {
	p.OutputFields = val
}
func (p *TargetOutput) SetTimeConsumingMs(val *string) {
	p.TimeConsumingMs = val
}
func (p *TargetOutput) SetError(val *evaluator.EvaluatorRunError) {
	p.Error = val
}

var fieldIDToName_TargetOutput = map[int16]string{
	1: "target_record_id",
	2: "status",
	3: "output_fields",
	4: "time_consuming_ms",
	5: "error",
}

func (p *TargetOutput) IsSetTargetRecordID() bool {
	return p.TargetRecordID != nil
}

func (p *TargetOutput) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TargetOutput) IsSetOutputFields() bool {
	return p.OutputFields != nil
}

func (p *TargetOutput) IsSetTimeConsumingMs() bool {
	return p.TimeConsumingMs != nil
}

func (p *TargetOutput) IsSetError() bool {
	return p.Error != nil
}

func (p *TargetOutput) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TargetOutput[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TargetOutput) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TargetRecordID = _field
	return nil
}
func (p *TargetOutput) ReadField2(iprot thrift.TProtocol) error {

	var _field *evaluator.EvaluatorRunStatus
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}
func (p *TargetOutput) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]*common.Content, size)
	values := make([]common.Content, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.OutputFields = _field
	return nil
}
func (p *TargetOutput) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TimeConsumingMs = _field
	return nil
}
func (p *TargetOutput) ReadField5(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorRunError()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Error = _field
	return nil
}

func (p *TargetOutput) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TargetOutput"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TargetOutput) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetRecordID() {
		if err = oprot.WriteFieldBegin("target_record_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TargetRecordID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *TargetOutput) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *TargetOutput) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputFields() {
		if err = oprot.WriteFieldBegin("output_fields", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.OutputFields)); err != nil {
			return err
		}
		for k, v := range p.OutputFields {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *TargetOutput) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeConsumingMs() {
		if err = oprot.WriteFieldBegin("time_consuming_ms", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TimeConsumingMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *TargetOutput) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err = oprot.WriteFieldBegin("error", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Error.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *TargetOutput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TargetOutput(%+v)", *p)

}

func (p *TargetOutput) DeepEqual(ano *TargetOutput) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TargetRecordID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Status) {
		return false
	}
	if !p.Field3DeepEqual(ano.OutputFields) {
		return false
	}
	if !p.Field4DeepEqual(ano.TimeConsumingMs) {
		return false
	}
	if !p.Field5DeepEqual(ano.Error) {
		return false
	}
	return true
}

func (p *TargetOutput) Field1DeepEqual(src *string) bool {

	if p.TargetRecordID == src {
		return true
	} else if p.TargetRecordID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TargetRecordID, *src) != 0 {
		return false
	}
	return true
}
func (p *TargetOutput) Field2DeepEqual(src *evaluator.EvaluatorRunStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Status, *src) != 0 {
		return false
	}
	return true
}
func (p *TargetOutput) Field3DeepEqual(src map[string]*common.Content) bool {

	if len(p.OutputFields) != len(src) {
		return false
	}
	for k, v := range p.OutputFields {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TargetOutput) Field4DeepEqual(src *string) bool {

	if p.TimeConsumingMs == src {
		return true
	} else if p.TimeConsumingMs == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TimeConsumingMs, *src) != 0 {
		return false
	}
	return true
}
func (p *TargetOutput) Field5DeepEqual(src *evaluator.EvaluatorRunError) bool {

	if !p.Error.DeepEqual(src) {
		return false
	}
	return true
}

// 评估器输出结果
type EvaluatorOutput struct {
	// key为evaluator_version_id
	EvaluatorRecords map[string]*evaluator.EvaluatorRecord `thrift:"evaluator_records,1,optional" frugal:"1,optional,map<string:evaluator.EvaluatorRecord>" form:"evaluator_records" json:"evaluator_records,omitempty" query:"evaluator_records"`
}

func NewEvaluatorOutput() *EvaluatorOutput {
	return &EvaluatorOutput{}
}

func (p *EvaluatorOutput) InitDefault() {
}

var EvaluatorOutput_EvaluatorRecords_DEFAULT map[string]*evaluator.EvaluatorRecord

func (p *EvaluatorOutput) GetEvaluatorRecords() (v map[string]*evaluator.EvaluatorRecord) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorRecords() {
		return EvaluatorOutput_EvaluatorRecords_DEFAULT
	}
	return p.EvaluatorRecords
}
func (p *EvaluatorOutput) SetEvaluatorRecords(val map[string]*evaluator.EvaluatorRecord) {
	p.EvaluatorRecords = val
}

var fieldIDToName_EvaluatorOutput = map[int16]string{
	1: "evaluator_records",
}

func (p *EvaluatorOutput) IsSetEvaluatorRecords() bool {
	return p.EvaluatorRecords != nil
}

func (p *EvaluatorOutput) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorOutput[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorOutput) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]*evaluator.EvaluatorRecord, size)
	values := make([]evaluator.EvaluatorRecord, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.EvaluatorRecords = _field
	return nil
}

func (p *EvaluatorOutput) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluatorOutput"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorOutput) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorRecords() {
		if err = oprot.WriteFieldBegin("evaluator_records", thrift.MAP, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.EvaluatorRecords)); err != nil {
			return err
		}
		for k, v := range p.EvaluatorRecords {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorOutput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorOutput(%+v)", *p)

}

func (p *EvaluatorOutput) DeepEqual(ano *EvaluatorOutput) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorRecords) {
		return false
	}
	return true
}

func (p *EvaluatorOutput) Field1DeepEqual(src map[string]*evaluator.EvaluatorRecord) bool {

	if len(p.EvaluatorRecords) != len(src) {
		return false
	}
	for k, v := range p.EvaluatorRecords {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// 实验结果载荷
type ExperimentResultPayload struct {
	TurnID          *string          `thrift:"turn_id,1,optional" frugal:"1,optional,string" form:"turn_id" json:"turn_id,omitempty" query:"turn_id"`
	EvalSetTurn     *eval_set.Turn   `thrift:"eval_set_turn,2,optional" frugal:"2,optional,eval_set.Turn" form:"eval_set_turn" json:"eval_set_turn,omitempty" query:"eval_set_turn"`
	TargetOutput    *TargetOutput    `thrift:"target_output,3,optional" frugal:"3,optional,TargetOutput" form:"target_output" json:"target_output,omitempty" query:"target_output"`
	EvaluatorOutput *EvaluatorOutput `thrift:"evaluator_output,4,optional" frugal:"4,optional,EvaluatorOutput" form:"evaluator_output" json:"evaluator_output,omitempty" query:"evaluator_output"`
}

func NewExperimentResultPayload() *ExperimentResultPayload {
	return &ExperimentResultPayload{}
}

func (p *ExperimentResultPayload) InitDefault() {
}

var ExperimentResultPayload_TurnID_DEFAULT string

func (p *ExperimentResultPayload) GetTurnID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTurnID() {
		return ExperimentResultPayload_TurnID_DEFAULT
	}
	return *p.TurnID
}

var ExperimentResultPayload_EvalSetTurn_DEFAULT *eval_set.Turn

func (p *ExperimentResultPayload) GetEvalSetTurn() (v *eval_set.Turn) {
	if p == nil {
		return
	}
	if !p.IsSetEvalSetTurn() {
		return ExperimentResultPayload_EvalSetTurn_DEFAULT
	}
	return p.EvalSetTurn
}

var ExperimentResultPayload_TargetOutput_DEFAULT *TargetOutput

func (p *ExperimentResultPayload) GetTargetOutput() (v *TargetOutput) {
	if p == nil {
		return
	}
	if !p.IsSetTargetOutput() {
		return ExperimentResultPayload_TargetOutput_DEFAULT
	}
	return p.TargetOutput
}

var ExperimentResultPayload_EvaluatorOutput_DEFAULT *EvaluatorOutput

func (p *ExperimentResultPayload) GetEvaluatorOutput() (v *EvaluatorOutput) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorOutput() {
		return ExperimentResultPayload_EvaluatorOutput_DEFAULT
	}
	return p.EvaluatorOutput
}
func (p *ExperimentResultPayload) SetTurnID(val *string) {
	p.TurnID = val
}
func (p *ExperimentResultPayload) SetEvalSetTurn(val *eval_set.Turn) {
	p.EvalSetTurn = val
}
func (p *ExperimentResultPayload) SetTargetOutput(val *TargetOutput) {
	p.TargetOutput = val
}
func (p *ExperimentResultPayload) SetEvaluatorOutput(val *EvaluatorOutput) {
	p.EvaluatorOutput = val
}

var fieldIDToName_ExperimentResultPayload = map[int16]string{
	1: "turn_id",
	2: "eval_set_turn",
	3: "target_output",
	4: "evaluator_output",
}

func (p *ExperimentResultPayload) IsSetTurnID() bool {
	return p.TurnID != nil
}

func (p *ExperimentResultPayload) IsSetEvalSetTurn() bool {
	return p.EvalSetTurn != nil
}

func (p *ExperimentResultPayload) IsSetTargetOutput() bool {
	return p.TargetOutput != nil
}

func (p *ExperimentResultPayload) IsSetEvaluatorOutput() bool {
	return p.EvaluatorOutput != nil
}

func (p *ExperimentResultPayload) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentResultPayload[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentResultPayload) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TurnID = _field
	return nil
}
func (p *ExperimentResultPayload) ReadField2(iprot thrift.TProtocol) error {
	_field := eval_set.NewTurn()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalSetTurn = _field
	return nil
}
func (p *ExperimentResultPayload) ReadField3(iprot thrift.TProtocol) error {
	_field := NewTargetOutput()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TargetOutput = _field
	return nil
}
func (p *ExperimentResultPayload) ReadField4(iprot thrift.TProtocol) error {
	_field := NewEvaluatorOutput()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorOutput = _field
	return nil
}

func (p *ExperimentResultPayload) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExperimentResultPayload"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentResultPayload) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTurnID() {
		if err = oprot.WriteFieldBegin("turn_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TurnID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ExperimentResultPayload) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalSetTurn() {
		if err = oprot.WriteFieldBegin("eval_set_turn", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalSetTurn.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ExperimentResultPayload) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetOutput() {
		if err = oprot.WriteFieldBegin("target_output", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TargetOutput.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ExperimentResultPayload) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorOutput() {
		if err = oprot.WriteFieldBegin("evaluator_output", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluatorOutput.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ExperimentResultPayload) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentResultPayload(%+v)", *p)

}

func (p *ExperimentResultPayload) DeepEqual(ano *ExperimentResultPayload) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TurnID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvalSetTurn) {
		return false
	}
	if !p.Field3DeepEqual(ano.TargetOutput) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluatorOutput) {
		return false
	}
	return true
}

func (p *ExperimentResultPayload) Field1DeepEqual(src *string) bool {

	if p.TurnID == src {
		return true
	} else if p.TurnID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TurnID, *src) != 0 {
		return false
	}
	return true
}
func (p *ExperimentResultPayload) Field2DeepEqual(src *eval_set.Turn) bool {

	if !p.EvalSetTurn.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ExperimentResultPayload) Field3DeepEqual(src *TargetOutput) bool {

	if !p.TargetOutput.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ExperimentResultPayload) Field4DeepEqual(src *EvaluatorOutput) bool {

	if !p.EvaluatorOutput.DeepEqual(src) {
		return false
	}
	return true
}

// 轮次结果
type TurnResult_ struct {
	TurnID            *string              `thrift:"turn_id,1,optional" frugal:"1,optional,string" form:"turn_id" json:"turn_id,omitempty" query:"turn_id"`
	ExperimentResults []*ExperimentResult_ `thrift:"experiment_results,2,optional" frugal:"2,optional,list<ExperimentResult_>" form:"experiment_results" json:"experiment_results,omitempty" query:"experiment_results"`
}

func NewTurnResult_() *TurnResult_ {
	return &TurnResult_{}
}

func (p *TurnResult_) InitDefault() {
}

var TurnResult__TurnID_DEFAULT string

func (p *TurnResult_) GetTurnID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTurnID() {
		return TurnResult__TurnID_DEFAULT
	}
	return *p.TurnID
}

var TurnResult__ExperimentResults_DEFAULT []*ExperimentResult_

func (p *TurnResult_) GetExperimentResults() (v []*ExperimentResult_) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentResults() {
		return TurnResult__ExperimentResults_DEFAULT
	}
	return p.ExperimentResults
}
func (p *TurnResult_) SetTurnID(val *string) {
	p.TurnID = val
}
func (p *TurnResult_) SetExperimentResults(val []*ExperimentResult_) {
	p.ExperimentResults = val
}

var fieldIDToName_TurnResult_ = map[int16]string{
	1: "turn_id",
	2: "experiment_results",
}

func (p *TurnResult_) IsSetTurnID() bool {
	return p.TurnID != nil
}

func (p *TurnResult_) IsSetExperimentResults() bool {
	return p.ExperimentResults != nil
}

func (p *TurnResult_) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TurnResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TurnResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TurnID = _field
	return nil
}
func (p *TurnResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ExperimentResult_, 0, size)
	values := make([]ExperimentResult_, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ExperimentResults = _field
	return nil
}

func (p *TurnResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TurnResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TurnResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTurnID() {
		if err = oprot.WriteFieldBegin("turn_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TurnID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *TurnResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentResults() {
		if err = oprot.WriteFieldBegin("experiment_results", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExperimentResults)); err != nil {
			return err
		}
		for _, v := range p.ExperimentResults {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TurnResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TurnResult_(%+v)", *p)

}

func (p *TurnResult_) DeepEqual(ano *TurnResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TurnID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExperimentResults) {
		return false
	}
	return true
}

func (p *TurnResult_) Field1DeepEqual(src *string) bool {

	if p.TurnID == src {
		return true
	} else if p.TurnID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TurnID, *src) != 0 {
		return false
	}
	return true
}
func (p *TurnResult_) Field2DeepEqual(src []*ExperimentResult_) bool {

	if len(p.ExperimentResults) != len(src) {
		return false
	}
	for i, v := range p.ExperimentResults {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// 实验结果
type ExperimentResult_ struct {
	ExperimentID *string                  `thrift:"experiment_id,1,optional" frugal:"1,optional,string" form:"experiment_id" json:"experiment_id,omitempty" query:"experiment_id"`
	Payload      *ExperimentResultPayload `thrift:"payload,2,optional" frugal:"2,optional,ExperimentResultPayload" form:"payload" json:"payload,omitempty" query:"payload"`
}

func NewExperimentResult_() *ExperimentResult_ {
	return &ExperimentResult_{}
}

func (p *ExperimentResult_) InitDefault() {
}

var ExperimentResult__ExperimentID_DEFAULT string

func (p *ExperimentResult_) GetExperimentID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentID() {
		return ExperimentResult__ExperimentID_DEFAULT
	}
	return *p.ExperimentID
}

var ExperimentResult__Payload_DEFAULT *ExperimentResultPayload

func (p *ExperimentResult_) GetPayload() (v *ExperimentResultPayload) {
	if p == nil {
		return
	}
	if !p.IsSetPayload() {
		return ExperimentResult__Payload_DEFAULT
	}
	return p.Payload
}
func (p *ExperimentResult_) SetExperimentID(val *string) {
	p.ExperimentID = val
}
func (p *ExperimentResult_) SetPayload(val *ExperimentResultPayload) {
	p.Payload = val
}

var fieldIDToName_ExperimentResult_ = map[int16]string{
	1: "experiment_id",
	2: "payload",
}

func (p *ExperimentResult_) IsSetExperimentID() bool {
	return p.ExperimentID != nil
}

func (p *ExperimentResult_) IsSetPayload() bool {
	return p.Payload != nil
}

func (p *ExperimentResult_) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExperimentID = _field
	return nil
}
func (p *ExperimentResult_) ReadField2(iprot thrift.TProtocol) error {
	_field := NewExperimentResultPayload()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Payload = _field
	return nil
}

func (p *ExperimentResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExperimentResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentID() {
		if err = oprot.WriteFieldBegin("experiment_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ExperimentID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ExperimentResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPayload() {
		if err = oprot.WriteFieldBegin("payload", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Payload.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ExperimentResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentResult_(%+v)", *p)

}

func (p *ExperimentResult_) DeepEqual(ano *ExperimentResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ExperimentID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Payload) {
		return false
	}
	return true
}

func (p *ExperimentResult_) Field1DeepEqual(src *string) bool {

	if p.ExperimentID == src {
		return true
	} else if p.ExperimentID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ExperimentID, *src) != 0 {
		return false
	}
	return true
}
func (p *ExperimentResult_) Field2DeepEqual(src *ExperimentResultPayload) bool {

	if !p.Payload.DeepEqual(src) {
		return false
	}
	return true
}

// 数据项结果
type ItemResult_ struct {
	ItemID      *string        `thrift:"item_id,1,optional" frugal:"1,optional,string" form:"item_id" json:"item_id,omitempty" query:"item_id"`
	TurnResults []*TurnResult_ `thrift:"turn_results,2,optional" frugal:"2,optional,list<TurnResult_>" form:"turn_results" json:"turn_results,omitempty" query:"turn_results"`
}

func NewItemResult_() *ItemResult_ {
	return &ItemResult_{}
}

func (p *ItemResult_) InitDefault() {
}

var ItemResult__ItemID_DEFAULT string

func (p *ItemResult_) GetItemID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetItemID() {
		return ItemResult__ItemID_DEFAULT
	}
	return *p.ItemID
}

var ItemResult__TurnResults_DEFAULT []*TurnResult_

func (p *ItemResult_) GetTurnResults() (v []*TurnResult_) {
	if p == nil {
		return
	}
	if !p.IsSetTurnResults() {
		return ItemResult__TurnResults_DEFAULT
	}
	return p.TurnResults
}
func (p *ItemResult_) SetItemID(val *string) {
	p.ItemID = val
}
func (p *ItemResult_) SetTurnResults(val []*TurnResult_) {
	p.TurnResults = val
}

var fieldIDToName_ItemResult_ = map[int16]string{
	1: "item_id",
	2: "turn_results",
}

func (p *ItemResult_) IsSetItemID() bool {
	return p.ItemID != nil
}

func (p *ItemResult_) IsSetTurnResults() bool {
	return p.TurnResults != nil
}

func (p *ItemResult_) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItemResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItemResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemID = _field
	return nil
}
func (p *ItemResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TurnResult_, 0, size)
	values := make([]TurnResult_, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TurnResults = _field
	return nil
}

func (p *ItemResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ItemResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItemResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemID() {
		if err = oprot.WriteFieldBegin("item_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ItemID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ItemResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTurnResults() {
		if err = oprot.WriteFieldBegin("turn_results", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TurnResults)); err != nil {
			return err
		}
		for _, v := range p.TurnResults {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ItemResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemResult_(%+v)", *p)

}

func (p *ItemResult_) DeepEqual(ano *ItemResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ItemID) {
		return false
	}
	if !p.Field2DeepEqual(ano.TurnResults) {
		return false
	}
	return true
}

func (p *ItemResult_) Field1DeepEqual(src *string) bool {

	if p.ItemID == src {
		return true
	} else if p.ItemID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ItemID, *src) != 0 {
		return false
	}
	return true
}
func (p *ItemResult_) Field2DeepEqual(src []*TurnResult_) bool {

	if len(p.TurnResults) != len(src) {
		return false
	}
	for i, v := range p.TurnResults {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package eval_set

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain_openapi/common"
	"strings"
)

const (
	EvaluationSetStatusActive = "active"

	EvaluationSetStatusArchived = "archived"

	FieldDisplayFormatPlainText = "plain_text"

	FieldDisplayFormatMarkdown = "markdown"

	FieldDisplayFormatJSON = "json"

	FieldDisplayFormateYAML = "yaml"

	FieldDisplayFormateCode = "code"
)

// 评测集状态
type EvaluationSetStatus = string

type FieldDisplayFormat = string

// 字段Schema
type FieldSchema struct {
	Name        *string             `thrift:"name,1,optional" frugal:"1,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Description *string             `thrift:"description,2,optional" frugal:"2,optional,string" form:"description" json:"description,omitempty" query:"description"`
	ContentType *common.ContentType `thrift:"content_type,3,optional" frugal:"3,optional,string" form:"content_type" json:"content_type,omitempty" query:"content_type"`
	// 默认渲染格式，如 code, json, etc.mai
	DefaultDisplayFormat *FieldDisplayFormat `thrift:"default_display_format,4,optional" frugal:"4,optional,string" form:"default_display_format" json:"default_display_format,omitempty" query:"default_display_format"`
	IsRequired           *bool               `thrift:"is_required,5,optional" frugal:"5,optional,bool" form:"is_required" json:"is_required,omitempty" query:"is_required"`
	// JSON Schema字符串
	TextSchema *string `thrift:"text_schema,6,optional" frugal:"6,optional,string" form:"text_schema" json:"text_schema,omitempty" query:"text_schema"`
	// 唯一键，创建列时无需关注，更新列的时候携带即可
	Key *string `thrift:"key,10,optional" frugal:"10,optional,string" form:"key" json:"key,omitempty" query:"key"`
}

func NewFieldSchema() *FieldSchema {
	return &FieldSchema{}
}

func (p *FieldSchema) InitDefault() {
}

var FieldSchema_Name_DEFAULT string

func (p *FieldSchema) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return FieldSchema_Name_DEFAULT
	}
	return *p.Name
}

var FieldSchema_Description_DEFAULT string

func (p *FieldSchema) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return FieldSchema_Description_DEFAULT
	}
	return *p.Description
}

var FieldSchema_ContentType_DEFAULT common.ContentType

func (p *FieldSchema) GetContentType() (v common.ContentType) {
	if p == nil {
		return
	}
	if !p.IsSetContentType() {
		return FieldSchema_ContentType_DEFAULT
	}
	return *p.ContentType
}

var FieldSchema_DefaultDisplayFormat_DEFAULT FieldDisplayFormat

func (p *FieldSchema) GetDefaultDisplayFormat() (v FieldDisplayFormat) {
	if p == nil {
		return
	}
	if !p.IsSetDefaultDisplayFormat() {
		return FieldSchema_DefaultDisplayFormat_DEFAULT
	}
	return *p.DefaultDisplayFormat
}

var FieldSchema_IsRequired_DEFAULT bool

func (p *FieldSchema) GetIsRequired() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsRequired() {
		return FieldSchema_IsRequired_DEFAULT
	}
	return *p.IsRequired
}

var FieldSchema_TextSchema_DEFAULT string

func (p *FieldSchema) GetTextSchema() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTextSchema() {
		return FieldSchema_TextSchema_DEFAULT
	}
	return *p.TextSchema
}

var FieldSchema_Key_DEFAULT string

func (p *FieldSchema) GetKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetKey() {
		return FieldSchema_Key_DEFAULT
	}
	return *p.Key
}
func (p *FieldSchema) SetName(val *string) {
	p.Name = val
}
func (p *FieldSchema) SetDescription(val *string) {
	p.Description = val
}
func (p *FieldSchema) SetContentType(val *common.ContentType) {
	p.ContentType = val
}
func (p *FieldSchema) SetDefaultDisplayFormat(val *FieldDisplayFormat) {
	p.DefaultDisplayFormat = val
}
func (p *FieldSchema) SetIsRequired(val *bool) {
	p.IsRequired = val
}
func (p *FieldSchema) SetTextSchema(val *string) {
	p.TextSchema = val
}
func (p *FieldSchema) SetKey(val *string) {
	p.Key = val
}

var fieldIDToName_FieldSchema = map[int16]string{
	1:  "name",
	2:  "description",
	3:  "content_type",
	4:  "default_display_format",
	5:  "is_required",
	6:  "text_schema",
	10: "key",
}

func (p *FieldSchema) IsSetName() bool {
	return p.Name != nil
}

func (p *FieldSchema) IsSetDescription() bool {
	return p.Description != nil
}

func (p *FieldSchema) IsSetContentType() bool {
	return p.ContentType != nil
}

func (p *FieldSchema) IsSetDefaultDisplayFormat() bool {
	return p.DefaultDisplayFormat != nil
}

func (p *FieldSchema) IsSetIsRequired() bool {
	return p.IsRequired != nil
}

func (p *FieldSchema) IsSetTextSchema() bool {
	return p.TextSchema != nil
}

func (p *FieldSchema) IsSetKey() bool {
	return p.Key != nil
}

func (p *FieldSchema) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FieldSchema[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FieldSchema) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *FieldSchema) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *FieldSchema) ReadField3(iprot thrift.TProtocol) error {

	var _field *common.ContentType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ContentType = _field
	return nil
}
func (p *FieldSchema) ReadField4(iprot thrift.TProtocol) error {

	var _field *FieldDisplayFormat
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DefaultDisplayFormat = _field
	return nil
}
func (p *FieldSchema) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsRequired = _field
	return nil
}
func (p *FieldSchema) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TextSchema = _field
	return nil
}
func (p *FieldSchema) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}

func (p *FieldSchema) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FieldSchema"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FieldSchema) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FieldSchema) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *FieldSchema) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentType() {
		if err = oprot.WriteFieldBegin("content_type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ContentType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *FieldSchema) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultDisplayFormat() {
		if err = oprot.WriteFieldBegin("default_display_format", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DefaultDisplayFormat); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *FieldSchema) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsRequired() {
		if err = oprot.WriteFieldBegin("is_required", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsRequired); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *FieldSchema) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTextSchema() {
		if err = oprot.WriteFieldBegin("text_schema", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TextSchema); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *FieldSchema) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *FieldSchema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldSchema(%+v)", *p)

}

func (p *FieldSchema) DeepEqual(ano *FieldSchema) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Description) {
		return false
	}
	if !p.Field3DeepEqual(ano.ContentType) {
		return false
	}
	if !p.Field4DeepEqual(ano.DefaultDisplayFormat) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsRequired) {
		return false
	}
	if !p.Field6DeepEqual(ano.TextSchema) {
		return false
	}
	if !p.Field10DeepEqual(ano.Key) {
		return false
	}
	return true
}

func (p *FieldSchema) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field2DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field3DeepEqual(src *common.ContentType) bool {

	if p.ContentType == src {
		return true
	} else if p.ContentType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ContentType, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field4DeepEqual(src *FieldDisplayFormat) bool {

	if p.DefaultDisplayFormat == src {
		return true
	} else if p.DefaultDisplayFormat == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DefaultDisplayFormat, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field5DeepEqual(src *bool) bool {

	if p.IsRequired == src {
		return true
	} else if p.IsRequired == nil || src == nil {
		return false
	}
	if *p.IsRequired != *src {
		return false
	}
	return true
}
func (p *FieldSchema) Field6DeepEqual(src *string) bool {

	if p.TextSchema == src {
		return true
	} else if p.TextSchema == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TextSchema, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field10DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}

// 评测集Schema
type EvaluationSetSchema struct {
	FieldSchemas []*FieldSchema `thrift:"field_schemas,1,optional" frugal:"1,optional,list<FieldSchema>" form:"field_schemas" json:"field_schemas,omitempty" query:"field_schemas"`
}

func NewEvaluationSetSchema() *EvaluationSetSchema {
	return &EvaluationSetSchema{}
}

func (p *EvaluationSetSchema) InitDefault() {
}

var EvaluationSetSchema_FieldSchemas_DEFAULT []*FieldSchema

func (p *EvaluationSetSchema) GetFieldSchemas() (v []*FieldSchema) {
	if p == nil {
		return
	}
	if !p.IsSetFieldSchemas() {
		return EvaluationSetSchema_FieldSchemas_DEFAULT
	}
	return p.FieldSchemas
}
func (p *EvaluationSetSchema) SetFieldSchemas(val []*FieldSchema) {
	p.FieldSchemas = val
}

var fieldIDToName_EvaluationSetSchema = map[int16]string{
	1: "field_schemas",
}

func (p *EvaluationSetSchema) IsSetFieldSchemas() bool {
	return p.FieldSchemas != nil
}

func (p *EvaluationSetSchema) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetSchema[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetSchema) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldSchema, 0, size)
	values := make([]FieldSchema, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FieldSchemas = _field
	return nil
}

func (p *EvaluationSetSchema) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluationSetSchema"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetSchema) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldSchemas() {
		if err = oprot.WriteFieldBegin("field_schemas", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FieldSchemas)); err != nil {
			return err
		}
		for _, v := range p.FieldSchemas {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluationSetSchema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetSchema(%+v)", *p)

}

func (p *EvaluationSetSchema) DeepEqual(ano *EvaluationSetSchema) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FieldSchemas) {
		return false
	}
	return true
}

func (p *EvaluationSetSchema) Field1DeepEqual(src []*FieldSchema) bool {

	if len(p.FieldSchemas) != len(src) {
		return false
	}
	for i, v := range p.FieldSchemas {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// 评测集版本
type EvaluationSetVersion struct {
	ID                  *int64               `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	Version             *string              `thrift:"version,2,optional" frugal:"2,optional,string" form:"version" json:"version,omitempty" query:"version"`
	Description         *string              `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty" query:"description"`
	EvaluationSetSchema *EvaluationSetSchema `thrift:"evaluation_set_schema,4,optional" frugal:"4,optional,EvaluationSetSchema" form:"evaluation_set_schema" json:"evaluation_set_schema,omitempty" query:"evaluation_set_schema"`
	ItemCount           *int64               `thrift:"item_count,5,optional" frugal:"5,optional,i64" form:"item_count" json:"item_count,omitempty" query:"item_count"`
	BaseInfo            *common.BaseInfo     `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" form:"base_info" json:"base_info,omitempty" query:"base_info"`
}

func NewEvaluationSetVersion() *EvaluationSetVersion {
	return &EvaluationSetVersion{}
}

func (p *EvaluationSetVersion) InitDefault() {
}

var EvaluationSetVersion_ID_DEFAULT int64

func (p *EvaluationSetVersion) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return EvaluationSetVersion_ID_DEFAULT
	}
	return *p.ID
}

var EvaluationSetVersion_Version_DEFAULT string

func (p *EvaluationSetVersion) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return EvaluationSetVersion_Version_DEFAULT
	}
	return *p.Version
}

var EvaluationSetVersion_Description_DEFAULT string

func (p *EvaluationSetVersion) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return EvaluationSetVersion_Description_DEFAULT
	}
	return *p.Description
}

var EvaluationSetVersion_EvaluationSetSchema_DEFAULT *EvaluationSetSchema

func (p *EvaluationSetVersion) GetEvaluationSetSchema() (v *EvaluationSetSchema) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetSchema() {
		return EvaluationSetVersion_EvaluationSetSchema_DEFAULT
	}
	return p.EvaluationSetSchema
}

var EvaluationSetVersion_ItemCount_DEFAULT int64

func (p *EvaluationSetVersion) GetItemCount() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemCount() {
		return EvaluationSetVersion_ItemCount_DEFAULT
	}
	return *p.ItemCount
}

var EvaluationSetVersion_BaseInfo_DEFAULT *common.BaseInfo

func (p *EvaluationSetVersion) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return EvaluationSetVersion_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *EvaluationSetVersion) SetID(val *int64) {
	p.ID = val
}
func (p *EvaluationSetVersion) SetVersion(val *string) {
	p.Version = val
}
func (p *EvaluationSetVersion) SetDescription(val *string) {
	p.Description = val
}
func (p *EvaluationSetVersion) SetEvaluationSetSchema(val *EvaluationSetSchema) {
	p.EvaluationSetSchema = val
}
func (p *EvaluationSetVersion) SetItemCount(val *int64) {
	p.ItemCount = val
}
func (p *EvaluationSetVersion) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_EvaluationSetVersion = map[int16]string{
	1:   "id",
	2:   "version",
	3:   "description",
	4:   "evaluation_set_schema",
	5:   "item_count",
	100: "base_info",
}

func (p *EvaluationSetVersion) IsSetID() bool {
	return p.ID != nil
}

func (p *EvaluationSetVersion) IsSetVersion() bool {
	return p.Version != nil
}

func (p *EvaluationSetVersion) IsSetDescription() bool {
	return p.Description != nil
}

func (p *EvaluationSetVersion) IsSetEvaluationSetSchema() bool {
	return p.EvaluationSetSchema != nil
}

func (p *EvaluationSetVersion) IsSetItemCount() bool {
	return p.ItemCount != nil
}

func (p *EvaluationSetVersion) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *EvaluationSetVersion) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetVersion[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetVersion) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *EvaluationSetVersion) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *EvaluationSetVersion) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *EvaluationSetVersion) ReadField4(iprot thrift.TProtocol) error {
	_field := NewEvaluationSetSchema()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluationSetSchema = _field
	return nil
}
func (p *EvaluationSetVersion) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemCount = _field
	return nil
}
func (p *EvaluationSetVersion) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *EvaluationSetVersion) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluationSetVersion"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetVersion) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluationSetVersion) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvaluationSetVersion) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvaluationSetVersion) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetSchema() {
		if err = oprot.WriteFieldBegin("evaluation_set_schema", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluationSetSchema.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *EvaluationSetVersion) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemCount() {
		if err = oprot.WriteFieldBegin("item_count", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ItemCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *EvaluationSetVersion) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *EvaluationSetVersion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetVersion(%+v)", *p)

}

func (p *EvaluationSetVersion) DeepEqual(ano *EvaluationSetVersion) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Version) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluationSetSchema) {
		return false
	}
	if !p.Field5DeepEqual(ano.ItemCount) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *EvaluationSetVersion) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *EvaluationSetVersion) Field2DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluationSetVersion) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluationSetVersion) Field4DeepEqual(src *EvaluationSetSchema) bool {

	if !p.EvaluationSetSchema.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvaluationSetVersion) Field5DeepEqual(src *int64) bool {

	if p.ItemCount == src {
		return true
	} else if p.ItemCount == nil || src == nil {
		return false
	}
	if *p.ItemCount != *src {
		return false
	}
	return true
}
func (p *EvaluationSetVersion) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

// 评测集
type EvaluationSet struct {
	ID                  *int64                `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	Name                *string               `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Description         *string               `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty" query:"description"`
	Status              *EvaluationSetStatus  `thrift:"status,4,optional" frugal:"4,optional,string" form:"status" json:"status,omitempty" query:"status"`
	ItemCount           *int64                `thrift:"item_count,5,optional" frugal:"5,optional,i64" form:"item_count" json:"item_count,omitempty" query:"item_count"`
	LatestVersion       *string               `thrift:"latest_version,6,optional" frugal:"6,optional,string" form:"latest_version" json:"latest_version,omitempty" query:"latest_version"`
	IsChangeUncommitted *bool                 `thrift:"is_change_uncommitted,7,optional" frugal:"7,optional,bool" form:"is_change_uncommitted" json:"is_change_uncommitted,omitempty" query:"is_change_uncommitted"`
	CurrentVersion      *EvaluationSetVersion `thrift:"current_version,20,optional" frugal:"20,optional,EvaluationSetVersion" form:"current_version" json:"current_version,omitempty" query:"current_version"`
	BaseInfo            *common.BaseInfo      `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" form:"base_info" json:"base_info,omitempty" query:"base_info"`
}

func NewEvaluationSet() *EvaluationSet {
	return &EvaluationSet{}
}

func (p *EvaluationSet) InitDefault() {
}

var EvaluationSet_ID_DEFAULT int64

func (p *EvaluationSet) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return EvaluationSet_ID_DEFAULT
	}
	return *p.ID
}

var EvaluationSet_Name_DEFAULT string

func (p *EvaluationSet) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return EvaluationSet_Name_DEFAULT
	}
	return *p.Name
}

var EvaluationSet_Description_DEFAULT string

func (p *EvaluationSet) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return EvaluationSet_Description_DEFAULT
	}
	return *p.Description
}

var EvaluationSet_Status_DEFAULT EvaluationSetStatus

func (p *EvaluationSet) GetStatus() (v EvaluationSetStatus) {
	if p == nil {
		return
	}
	if !p.IsSetStatus() {
		return EvaluationSet_Status_DEFAULT
	}
	return *p.Status
}

var EvaluationSet_ItemCount_DEFAULT int64

func (p *EvaluationSet) GetItemCount() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemCount() {
		return EvaluationSet_ItemCount_DEFAULT
	}
	return *p.ItemCount
}

var EvaluationSet_LatestVersion_DEFAULT string

func (p *EvaluationSet) GetLatestVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetLatestVersion() {
		return EvaluationSet_LatestVersion_DEFAULT
	}
	return *p.LatestVersion
}

var EvaluationSet_IsChangeUncommitted_DEFAULT bool

func (p *EvaluationSet) GetIsChangeUncommitted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsChangeUncommitted() {
		return EvaluationSet_IsChangeUncommitted_DEFAULT
	}
	return *p.IsChangeUncommitted
}

var EvaluationSet_CurrentVersion_DEFAULT *EvaluationSetVersion

func (p *EvaluationSet) GetCurrentVersion() (v *EvaluationSetVersion) {
	if p == nil {
		return
	}
	if !p.IsSetCurrentVersion() {
		return EvaluationSet_CurrentVersion_DEFAULT
	}
	return p.CurrentVersion
}

var EvaluationSet_BaseInfo_DEFAULT *common.BaseInfo

func (p *EvaluationSet) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return EvaluationSet_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *EvaluationSet) SetID(val *int64) {
	p.ID = val
}
func (p *EvaluationSet) SetName(val *string) {
	p.Name = val
}
func (p *EvaluationSet) SetDescription(val *string) {
	p.Description = val
}
func (p *EvaluationSet) SetStatus(val *EvaluationSetStatus) {
	p.Status = val
}
func (p *EvaluationSet) SetItemCount(val *int64) {
	p.ItemCount = val
}
func (p *EvaluationSet) SetLatestVersion(val *string) {
	p.LatestVersion = val
}
func (p *EvaluationSet) SetIsChangeUncommitted(val *bool) {
	p.IsChangeUncommitted = val
}
func (p *EvaluationSet) SetCurrentVersion(val *EvaluationSetVersion) {
	p.CurrentVersion = val
}
func (p *EvaluationSet) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_EvaluationSet = map[int16]string{
	1:   "id",
	2:   "name",
	3:   "description",
	4:   "status",
	5:   "item_count",
	6:   "latest_version",
	7:   "is_change_uncommitted",
	20:  "current_version",
	100: "base_info",
}

func (p *EvaluationSet) IsSetID() bool {
	return p.ID != nil
}

func (p *EvaluationSet) IsSetName() bool {
	return p.Name != nil
}

func (p *EvaluationSet) IsSetDescription() bool {
	return p.Description != nil
}

func (p *EvaluationSet) IsSetStatus() bool {
	return p.Status != nil
}

func (p *EvaluationSet) IsSetItemCount() bool {
	return p.ItemCount != nil
}

func (p *EvaluationSet) IsSetLatestVersion() bool {
	return p.LatestVersion != nil
}

func (p *EvaluationSet) IsSetIsChangeUncommitted() bool {
	return p.IsChangeUncommitted != nil
}

func (p *EvaluationSet) IsSetCurrentVersion() bool {
	return p.CurrentVersion != nil
}

func (p *EvaluationSet) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *EvaluationSet) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSet[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSet) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *EvaluationSet) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *EvaluationSet) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *EvaluationSet) ReadField4(iprot thrift.TProtocol) error {

	var _field *EvaluationSetStatus
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}
func (p *EvaluationSet) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemCount = _field
	return nil
}
func (p *EvaluationSet) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LatestVersion = _field
	return nil
}
func (p *EvaluationSet) ReadField7(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsChangeUncommitted = _field
	return nil
}
func (p *EvaluationSet) ReadField20(iprot thrift.TProtocol) error {
	_field := NewEvaluationSetVersion()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CurrentVersion = _field
	return nil
}
func (p *EvaluationSet) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *EvaluationSet) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluationSet"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSet) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluationSet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvaluationSet) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvaluationSet) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *EvaluationSet) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemCount() {
		if err = oprot.WriteFieldBegin("item_count", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ItemCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *EvaluationSet) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetLatestVersion() {
		if err = oprot.WriteFieldBegin("latest_version", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LatestVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *EvaluationSet) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsChangeUncommitted() {
		if err = oprot.WriteFieldBegin("is_change_uncommitted", thrift.BOOL, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsChangeUncommitted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *EvaluationSet) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentVersion() {
		if err = oprot.WriteFieldBegin("current_version", thrift.STRUCT, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CurrentVersion.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *EvaluationSet) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *EvaluationSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSet(%+v)", *p)

}

func (p *EvaluationSet) DeepEqual(ano *EvaluationSet) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.Status) {
		return false
	}
	if !p.Field5DeepEqual(ano.ItemCount) {
		return false
	}
	if !p.Field6DeepEqual(ano.LatestVersion) {
		return false
	}
	if !p.Field7DeepEqual(ano.IsChangeUncommitted) {
		return false
	}
	if !p.Field20DeepEqual(ano.CurrentVersion) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *EvaluationSet) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *EvaluationSet) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluationSet) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluationSet) Field4DeepEqual(src *EvaluationSetStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Status, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluationSet) Field5DeepEqual(src *int64) bool {

	if p.ItemCount == src {
		return true
	} else if p.ItemCount == nil || src == nil {
		return false
	}
	if *p.ItemCount != *src {
		return false
	}
	return true
}
func (p *EvaluationSet) Field6DeepEqual(src *string) bool {

	if p.LatestVersion == src {
		return true
	} else if p.LatestVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LatestVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluationSet) Field7DeepEqual(src *bool) bool {

	if p.IsChangeUncommitted == src {
		return true
	} else if p.IsChangeUncommitted == nil || src == nil {
		return false
	}
	if *p.IsChangeUncommitted != *src {
		return false
	}
	return true
}
func (p *EvaluationSet) Field20DeepEqual(src *EvaluationSetVersion) bool {

	if !p.CurrentVersion.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvaluationSet) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

// 字段数据
type FieldData struct {
	Name    *string         `thrift:"name,1,optional" frugal:"1,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Content *common.Content `thrift:"content,2,optional" frugal:"2,optional,common.Content" form:"content" json:"content,omitempty" query:"content"`
}

func NewFieldData() *FieldData {
	return &FieldData{}
}

func (p *FieldData) InitDefault() {
}

var FieldData_Name_DEFAULT string

func (p *FieldData) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return FieldData_Name_DEFAULT
	}
	return *p.Name
}

var FieldData_Content_DEFAULT *common.Content

func (p *FieldData) GetContent() (v *common.Content) {
	if p == nil {
		return
	}
	if !p.IsSetContent() {
		return FieldData_Content_DEFAULT
	}
	return p.Content
}
func (p *FieldData) SetName(val *string) {
	p.Name = val
}
func (p *FieldData) SetContent(val *common.Content) {
	p.Content = val
}

var fieldIDToName_FieldData = map[int16]string{
	1: "name",
	2: "content",
}

func (p *FieldData) IsSetName() bool {
	return p.Name != nil
}

func (p *FieldData) IsSetContent() bool {
	return p.Content != nil
}

func (p *FieldData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FieldData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FieldData) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *FieldData) ReadField2(iprot thrift.TProtocol) error {
	_field := common.NewContent()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Content = _field
	return nil
}

func (p *FieldData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FieldData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FieldData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FieldData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Content.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *FieldData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldData(%+v)", *p)

}

func (p *FieldData) DeepEqual(ano *FieldData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Content) {
		return false
	}
	return true
}

func (p *FieldData) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldData) Field2DeepEqual(src *common.Content) bool {

	if !p.Content.DeepEqual(src) {
		return false
	}
	return true
}

// 轮次数据
type Turn struct {
	ID         *int64       `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	FieldDatas []*FieldData `thrift:"field_datas,2,optional" frugal:"2,optional,list<FieldData>" form:"field_datas" json:"field_datas,omitempty" query:"field_datas"`
}

func NewTurn() *Turn {
	return &Turn{}
}

func (p *Turn) InitDefault() {
}

var Turn_ID_DEFAULT int64

func (p *Turn) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return Turn_ID_DEFAULT
	}
	return *p.ID
}

var Turn_FieldDatas_DEFAULT []*FieldData

func (p *Turn) GetFieldDatas() (v []*FieldData) {
	if p == nil {
		return
	}
	if !p.IsSetFieldDatas() {
		return Turn_FieldDatas_DEFAULT
	}
	return p.FieldDatas
}
func (p *Turn) SetID(val *int64) {
	p.ID = val
}
func (p *Turn) SetFieldDatas(val []*FieldData) {
	p.FieldDatas = val
}

var fieldIDToName_Turn = map[int16]string{
	1: "id",
	2: "field_datas",
}

func (p *Turn) IsSetID() bool {
	return p.ID != nil
}

func (p *Turn) IsSetFieldDatas() bool {
	return p.FieldDatas != nil
}

func (p *Turn) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Turn[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Turn) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *Turn) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldData, 0, size)
	values := make([]FieldData, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FieldDatas = _field
	return nil
}

func (p *Turn) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Turn"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Turn) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Turn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldDatas() {
		if err = oprot.WriteFieldBegin("field_datas", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FieldDatas)); err != nil {
			return err
		}
		for _, v := range p.FieldDatas {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Turn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Turn(%+v)", *p)

}

func (p *Turn) DeepEqual(ano *Turn) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.FieldDatas) {
		return false
	}
	return true
}

func (p *Turn) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *Turn) Field2DeepEqual(src []*FieldData) bool {

	if len(p.FieldDatas) != len(src) {
		return false
	}
	for i, v := range p.FieldDatas {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// 评测集数据项
type EvaluationSetItem struct {
	ID       *int64           `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	ItemKey  *string          `thrift:"item_key,2,optional" frugal:"2,optional,string" form:"item_key" json:"item_key,omitempty" query:"item_key"`
	Turns    []*Turn          `thrift:"turns,3,optional" frugal:"3,optional,list<Turn>" form:"turns" json:"turns,omitempty" query:"turns"`
	BaseInfo *common.BaseInfo `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" form:"base_info" json:"base_info,omitempty" query:"base_info"`
}

func NewEvaluationSetItem() *EvaluationSetItem {
	return &EvaluationSetItem{}
}

func (p *EvaluationSetItem) InitDefault() {
}

var EvaluationSetItem_ID_DEFAULT int64

func (p *EvaluationSetItem) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return EvaluationSetItem_ID_DEFAULT
	}
	return *p.ID
}

var EvaluationSetItem_ItemKey_DEFAULT string

func (p *EvaluationSetItem) GetItemKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetItemKey() {
		return EvaluationSetItem_ItemKey_DEFAULT
	}
	return *p.ItemKey
}

var EvaluationSetItem_Turns_DEFAULT []*Turn

func (p *EvaluationSetItem) GetTurns() (v []*Turn) {
	if p == nil {
		return
	}
	if !p.IsSetTurns() {
		return EvaluationSetItem_Turns_DEFAULT
	}
	return p.Turns
}

var EvaluationSetItem_BaseInfo_DEFAULT *common.BaseInfo

func (p *EvaluationSetItem) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return EvaluationSetItem_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *EvaluationSetItem) SetID(val *int64) {
	p.ID = val
}
func (p *EvaluationSetItem) SetItemKey(val *string) {
	p.ItemKey = val
}
func (p *EvaluationSetItem) SetTurns(val []*Turn) {
	p.Turns = val
}
func (p *EvaluationSetItem) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_EvaluationSetItem = map[int16]string{
	1:   "id",
	2:   "item_key",
	3:   "turns",
	100: "base_info",
}

func (p *EvaluationSetItem) IsSetID() bool {
	return p.ID != nil
}

func (p *EvaluationSetItem) IsSetItemKey() bool {
	return p.ItemKey != nil
}

func (p *EvaluationSetItem) IsSetTurns() bool {
	return p.Turns != nil
}

func (p *EvaluationSetItem) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *EvaluationSetItem) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetItem) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *EvaluationSetItem) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemKey = _field
	return nil
}
func (p *EvaluationSetItem) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Turn, 0, size)
	values := make([]Turn, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Turns = _field
	return nil
}
func (p *EvaluationSetItem) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *EvaluationSetItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluationSetItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetItem) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluationSetItem) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemKey() {
		if err = oprot.WriteFieldBegin("item_key", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ItemKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvaluationSetItem) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTurns() {
		if err = oprot.WriteFieldBegin("turns", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Turns)); err != nil {
			return err
		}
		for _, v := range p.Turns {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvaluationSetItem) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *EvaluationSetItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetItem(%+v)", *p)

}

func (p *EvaluationSetItem) DeepEqual(ano *EvaluationSetItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ItemKey) {
		return false
	}
	if !p.Field3DeepEqual(ano.Turns) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *EvaluationSetItem) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *EvaluationSetItem) Field2DeepEqual(src *string) bool {

	if p.ItemKey == src {
		return true
	} else if p.ItemKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ItemKey, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluationSetItem) Field3DeepEqual(src []*Turn) bool {

	if len(p.Turns) != len(src) {
		return false
	}
	for i, v := range p.Turns {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *EvaluationSetItem) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

// 数据项错误信息
type ItemError struct {
	ItemKey      *string `thrift:"item_key,1,optional" frugal:"1,optional,string" form:"item_key" json:"item_key,omitempty" query:"item_key"`
	ErrorCode    *string `thrift:"error_code,2,optional" frugal:"2,optional,string" form:"error_code" json:"error_code,omitempty" query:"error_code"`
	ErrorMessage *string `thrift:"error_message,3,optional" frugal:"3,optional,string" form:"error_message" json:"error_message,omitempty" query:"error_message"`
}

func NewItemError() *ItemError {
	return &ItemError{}
}

func (p *ItemError) InitDefault() {
}

var ItemError_ItemKey_DEFAULT string

func (p *ItemError) GetItemKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetItemKey() {
		return ItemError_ItemKey_DEFAULT
	}
	return *p.ItemKey
}

var ItemError_ErrorCode_DEFAULT string

func (p *ItemError) GetErrorCode() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetErrorCode() {
		return ItemError_ErrorCode_DEFAULT
	}
	return *p.ErrorCode
}

var ItemError_ErrorMessage_DEFAULT string

func (p *ItemError) GetErrorMessage() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetErrorMessage() {
		return ItemError_ErrorMessage_DEFAULT
	}
	return *p.ErrorMessage
}
func (p *ItemError) SetItemKey(val *string) {
	p.ItemKey = val
}
func (p *ItemError) SetErrorCode(val *string) {
	p.ErrorCode = val
}
func (p *ItemError) SetErrorMessage(val *string) {
	p.ErrorMessage = val
}

var fieldIDToName_ItemError = map[int16]string{
	1: "item_key",
	2: "error_code",
	3: "error_message",
}

func (p *ItemError) IsSetItemKey() bool {
	return p.ItemKey != nil
}

func (p *ItemError) IsSetErrorCode() bool {
	return p.ErrorCode != nil
}

func (p *ItemError) IsSetErrorMessage() bool {
	return p.ErrorMessage != nil
}

func (p *ItemError) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItemError[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItemError) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemKey = _field
	return nil
}
func (p *ItemError) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ErrorCode = _field
	return nil
}
func (p *ItemError) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ErrorMessage = _field
	return nil
}

func (p *ItemError) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ItemError"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItemError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemKey() {
		if err = oprot.WriteFieldBegin("item_key", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ItemKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ItemError) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorCode() {
		if err = oprot.WriteFieldBegin("error_code", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ErrorCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ItemError) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMessage() {
		if err = oprot.WriteFieldBegin("error_message", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ErrorMessage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ItemError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemError(%+v)", *p)

}

func (p *ItemError) DeepEqual(ano *ItemError) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ItemKey) {
		return false
	}
	if !p.Field2DeepEqual(ano.ErrorCode) {
		return false
	}
	if !p.Field3DeepEqual(ano.ErrorMessage) {
		return false
	}
	return true
}

func (p *ItemError) Field1DeepEqual(src *string) bool {

	if p.ItemKey == src {
		return true
	} else if p.ItemKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ItemKey, *src) != 0 {
		return false
	}
	return true
}
func (p *ItemError) Field2DeepEqual(src *string) bool {

	if p.ErrorCode == src {
		return true
	} else if p.ErrorCode == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ErrorCode, *src) != 0 {
		return false
	}
	return true
}
func (p *ItemError) Field3DeepEqual(src *string) bool {

	if p.ErrorMessage == src {
		return true
	} else if p.ErrorMessage == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ErrorMessage, *src) != 0 {
		return false
	}
	return true
}

// 数据项错误分组信息
type ItemErrorGroup struct {
	ErrorCode    *int32  `thrift:"error_code,1,optional" frugal:"1,optional,i32" form:"error_code" json:"error_code,omitempty" query:"error_code"`
	ErrorMessage *string `thrift:"error_message,2,optional" frugal:"2,optional,string" form:"error_message" json:"error_message,omitempty" query:"error_message"`
	// 错误条数
	ErrorCount *int32 `thrift:"error_count,3,optional" frugal:"3,optional,i32" form:"error_count" json:"error_count,omitempty" query:"error_count"`
	// 错误详情
	Details []*ItemErrorDetail `thrift:"details,4,optional" frugal:"4,optional,list<ItemErrorDetail>" form:"details" json:"details,omitempty" query:"details"`
}

func NewItemErrorGroup() *ItemErrorGroup {
	return &ItemErrorGroup{}
}

func (p *ItemErrorGroup) InitDefault() {
}

var ItemErrorGroup_ErrorCode_DEFAULT int32

func (p *ItemErrorGroup) GetErrorCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetErrorCode() {
		return ItemErrorGroup_ErrorCode_DEFAULT
	}
	return *p.ErrorCode
}

var ItemErrorGroup_ErrorMessage_DEFAULT string

func (p *ItemErrorGroup) GetErrorMessage() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetErrorMessage() {
		return ItemErrorGroup_ErrorMessage_DEFAULT
	}
	return *p.ErrorMessage
}

var ItemErrorGroup_ErrorCount_DEFAULT int32

func (p *ItemErrorGroup) GetErrorCount() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetErrorCount() {
		return ItemErrorGroup_ErrorCount_DEFAULT
	}
	return *p.ErrorCount
}

var ItemErrorGroup_Details_DEFAULT []*ItemErrorDetail

func (p *ItemErrorGroup) GetDetails() (v []*ItemErrorDetail) {
	if p == nil {
		return
	}
	if !p.IsSetDetails() {
		return ItemErrorGroup_Details_DEFAULT
	}
	return p.Details
}
func (p *ItemErrorGroup) SetErrorCode(val *int32) {
	p.ErrorCode = val
}
func (p *ItemErrorGroup) SetErrorMessage(val *string) {
	p.ErrorMessage = val
}
func (p *ItemErrorGroup) SetErrorCount(val *int32) {
	p.ErrorCount = val
}
func (p *ItemErrorGroup) SetDetails(val []*ItemErrorDetail) {
	p.Details = val
}

var fieldIDToName_ItemErrorGroup = map[int16]string{
	1: "error_code",
	2: "error_message",
	3: "error_count",
	4: "details",
}

func (p *ItemErrorGroup) IsSetErrorCode() bool {
	return p.ErrorCode != nil
}

func (p *ItemErrorGroup) IsSetErrorMessage() bool {
	return p.ErrorMessage != nil
}

func (p *ItemErrorGroup) IsSetErrorCount() bool {
	return p.ErrorCount != nil
}

func (p *ItemErrorGroup) IsSetDetails() bool {
	return p.Details != nil
}

func (p *ItemErrorGroup) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItemErrorGroup[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItemErrorGroup) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ErrorCode = _field
	return nil
}
func (p *ItemErrorGroup) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ErrorMessage = _field
	return nil
}
func (p *ItemErrorGroup) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ErrorCount = _field
	return nil
}
func (p *ItemErrorGroup) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ItemErrorDetail, 0, size)
	values := make([]ItemErrorDetail, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Details = _field
	return nil
}

func (p *ItemErrorGroup) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ItemErrorGroup"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItemErrorGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorCode() {
		if err = oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ErrorCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ItemErrorGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMessage() {
		if err = oprot.WriteFieldBegin("error_message", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ErrorMessage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ItemErrorGroup) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorCount() {
		if err = oprot.WriteFieldBegin("error_count", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ErrorCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ItemErrorGroup) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetails() {
		if err = oprot.WriteFieldBegin("details", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Details)); err != nil {
			return err
		}
		for _, v := range p.Details {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ItemErrorGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemErrorGroup(%+v)", *p)

}

func (p *ItemErrorGroup) DeepEqual(ano *ItemErrorGroup) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ErrorCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.ErrorMessage) {
		return false
	}
	if !p.Field3DeepEqual(ano.ErrorCount) {
		return false
	}
	if !p.Field4DeepEqual(ano.Details) {
		return false
	}
	return true
}

func (p *ItemErrorGroup) Field1DeepEqual(src *int32) bool {

	if p.ErrorCode == src {
		return true
	} else if p.ErrorCode == nil || src == nil {
		return false
	}
	if *p.ErrorCode != *src {
		return false
	}
	return true
}
func (p *ItemErrorGroup) Field2DeepEqual(src *string) bool {

	if p.ErrorMessage == src {
		return true
	} else if p.ErrorMessage == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ErrorMessage, *src) != 0 {
		return false
	}
	return true
}
func (p *ItemErrorGroup) Field3DeepEqual(src *int32) bool {

	if p.ErrorCount == src {
		return true
	} else if p.ErrorCount == nil || src == nil {
		return false
	}
	if *p.ErrorCount != *src {
		return false
	}
	return true
}
func (p *ItemErrorGroup) Field4DeepEqual(src []*ItemErrorDetail) bool {

	if len(p.Details) != len(src) {
		return false
	}
	for i, v := range p.Details {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ItemErrorDetail struct {
	// 错误信息
	Message *string `thrift:"message,1,optional" frugal:"1,optional,string" form:"message" json:"message,omitempty" query:"message"`
	// 单条错误数据在输入数据中的索引。从 0 开始，下同
	Index *int32 `thrift:"index,2,optional" frugal:"2,optional,i32" form:"index" json:"index,omitempty" query:"index"`
	// [startIndex, endIndex] 表示区间错误范围, 如 ExceedDatasetCapacity 错误时
	StartIndex *int32 `thrift:"start_index,3,optional" frugal:"3,optional,i32" form:"start_index" json:"start_index,omitempty" query:"start_index"`
	EndIndex   *int32 `thrift:"end_index,4,optional" frugal:"4,optional,i32" form:"end_index" json:"end_index,omitempty" query:"end_index"`
}

func NewItemErrorDetail() *ItemErrorDetail {
	return &ItemErrorDetail{}
}

func (p *ItemErrorDetail) InitDefault() {
}

var ItemErrorDetail_Message_DEFAULT string

func (p *ItemErrorDetail) GetMessage() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMessage() {
		return ItemErrorDetail_Message_DEFAULT
	}
	return *p.Message
}

var ItemErrorDetail_Index_DEFAULT int32

func (p *ItemErrorDetail) GetIndex() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetIndex() {
		return ItemErrorDetail_Index_DEFAULT
	}
	return *p.Index
}

var ItemErrorDetail_StartIndex_DEFAULT int32

func (p *ItemErrorDetail) GetStartIndex() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetStartIndex() {
		return ItemErrorDetail_StartIndex_DEFAULT
	}
	return *p.StartIndex
}

var ItemErrorDetail_EndIndex_DEFAULT int32

func (p *ItemErrorDetail) GetEndIndex() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetEndIndex() {
		return ItemErrorDetail_EndIndex_DEFAULT
	}
	return *p.EndIndex
}
func (p *ItemErrorDetail) SetMessage(val *string) {
	p.Message = val
}
func (p *ItemErrorDetail) SetIndex(val *int32) {
	p.Index = val
}
func (p *ItemErrorDetail) SetStartIndex(val *int32) {
	p.StartIndex = val
}
func (p *ItemErrorDetail) SetEndIndex(val *int32) {
	p.EndIndex = val
}

var fieldIDToName_ItemErrorDetail = map[int16]string{
	1: "message",
	2: "index",
	3: "start_index",
	4: "end_index",
}

func (p *ItemErrorDetail) IsSetMessage() bool {
	return p.Message != nil
}

func (p *ItemErrorDetail) IsSetIndex() bool {
	return p.Index != nil
}

func (p *ItemErrorDetail) IsSetStartIndex() bool {
	return p.StartIndex != nil
}

func (p *ItemErrorDetail) IsSetEndIndex() bool {
	return p.EndIndex != nil
}

func (p *ItemErrorDetail) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItemErrorDetail[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItemErrorDetail) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Message = _field
	return nil
}
func (p *ItemErrorDetail) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Index = _field
	return nil
}
func (p *ItemErrorDetail) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StartIndex = _field
	return nil
}
func (p *ItemErrorDetail) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EndIndex = _field
	return nil
}

func (p *ItemErrorDetail) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ItemErrorDetail"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItemErrorDetail) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err = oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Message); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ItemErrorDetail) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndex() {
		if err = oprot.WriteFieldBegin("index", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Index); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ItemErrorDetail) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartIndex() {
		if err = oprot.WriteFieldBegin("start_index", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.StartIndex); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ItemErrorDetail) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndIndex() {
		if err = oprot.WriteFieldBegin("end_index", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.EndIndex); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ItemErrorDetail) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemErrorDetail(%+v)", *p)

}

func (p *ItemErrorDetail) DeepEqual(ano *ItemErrorDetail) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	if !p.Field2DeepEqual(ano.Index) {
		return false
	}
	if !p.Field3DeepEqual(ano.StartIndex) {
		return false
	}
	if !p.Field4DeepEqual(ano.EndIndex) {
		return false
	}
	return true
}

func (p *ItemErrorDetail) Field1DeepEqual(src *string) bool {

	if p.Message == src {
		return true
	} else if p.Message == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Message, *src) != 0 {
		return false
	}
	return true
}
func (p *ItemErrorDetail) Field2DeepEqual(src *int32) bool {

	if p.Index == src {
		return true
	} else if p.Index == nil || src == nil {
		return false
	}
	if *p.Index != *src {
		return false
	}
	return true
}
func (p *ItemErrorDetail) Field3DeepEqual(src *int32) bool {

	if p.StartIndex == src {
		return true
	} else if p.StartIndex == nil || src == nil {
		return false
	}
	if *p.StartIndex != *src {
		return false
	}
	return true
}
func (p *ItemErrorDetail) Field4DeepEqual(src *int32) bool {

	if p.EndIndex == src {
		return true
	} else if p.EndIndex == nil || src == nil {
		return false
	}
	if *p.EndIndex != *src {
		return false
	}
	return true
}

type DatasetItemOutput struct {
	// item 在 入参 中的索引
	ItemIndex *int32  `thrift:"item_index,1,optional" frugal:"1,optional,i32" form:"item_index" json:"item_index,omitempty" query:"item_index"`
	ItemKey   *string `thrift:"item_key,2,optional" frugal:"2,optional,string" form:"item_key" json:"item_key,omitempty" query:"item_key"`
	ItemID    *int64  `thrift:"item_id,3,optional" frugal:"3,optional,i64" json:"item_id" form:"item_id" query:"item_id"`
	// 是否是新的 Item。提供 itemKey 时，如果 itemKey 在数据集中已存在数据，则不算做「新 Item」，该字段为 false。
	IsNewItem *bool `thrift:"is_new_item,4,optional" frugal:"4,optional,bool" form:"is_new_item" json:"is_new_item,omitempty" query:"is_new_item"`
}

func NewDatasetItemOutput() *DatasetItemOutput {
	return &DatasetItemOutput{}
}

func (p *DatasetItemOutput) InitDefault() {
}

var DatasetItemOutput_ItemIndex_DEFAULT int32

func (p *DatasetItemOutput) GetItemIndex() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetItemIndex() {
		return DatasetItemOutput_ItemIndex_DEFAULT
	}
	return *p.ItemIndex
}

var DatasetItemOutput_ItemKey_DEFAULT string

func (p *DatasetItemOutput) GetItemKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetItemKey() {
		return DatasetItemOutput_ItemKey_DEFAULT
	}
	return *p.ItemKey
}

var DatasetItemOutput_ItemID_DEFAULT int64

func (p *DatasetItemOutput) GetItemID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemID() {
		return DatasetItemOutput_ItemID_DEFAULT
	}
	return *p.ItemID
}

var DatasetItemOutput_IsNewItem_DEFAULT bool

func (p *DatasetItemOutput) GetIsNewItem() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsNewItem() {
		return DatasetItemOutput_IsNewItem_DEFAULT
	}
	return *p.IsNewItem
}
func (p *DatasetItemOutput) SetItemIndex(val *int32) {
	p.ItemIndex = val
}
func (p *DatasetItemOutput) SetItemKey(val *string) {
	p.ItemKey = val
}
func (p *DatasetItemOutput) SetItemID(val *int64) {
	p.ItemID = val
}
func (p *DatasetItemOutput) SetIsNewItem(val *bool) {
	p.IsNewItem = val
}

var fieldIDToName_DatasetItemOutput = map[int16]string{
	1: "item_index",
	2: "item_key",
	3: "item_id",
	4: "is_new_item",
}

func (p *DatasetItemOutput) IsSetItemIndex() bool {
	return p.ItemIndex != nil
}

func (p *DatasetItemOutput) IsSetItemKey() bool {
	return p.ItemKey != nil
}

func (p *DatasetItemOutput) IsSetItemID() bool {
	return p.ItemID != nil
}

func (p *DatasetItemOutput) IsSetIsNewItem() bool {
	return p.IsNewItem != nil
}

func (p *DatasetItemOutput) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetItemOutput[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetItemOutput) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemIndex = _field
	return nil
}
func (p *DatasetItemOutput) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemKey = _field
	return nil
}
func (p *DatasetItemOutput) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemID = _field
	return nil
}
func (p *DatasetItemOutput) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsNewItem = _field
	return nil
}

func (p *DatasetItemOutput) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DatasetItemOutput"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetItemOutput) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemIndex() {
		if err = oprot.WriteFieldBegin("item_index", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ItemIndex); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DatasetItemOutput) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemKey() {
		if err = oprot.WriteFieldBegin("item_key", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ItemKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DatasetItemOutput) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemID() {
		if err = oprot.WriteFieldBegin("item_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ItemID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DatasetItemOutput) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsNewItem() {
		if err = oprot.WriteFieldBegin("is_new_item", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsNewItem); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *DatasetItemOutput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetItemOutput(%+v)", *p)

}

func (p *DatasetItemOutput) DeepEqual(ano *DatasetItemOutput) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ItemIndex) {
		return false
	}
	if !p.Field2DeepEqual(ano.ItemKey) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemID) {
		return false
	}
	if !p.Field4DeepEqual(ano.IsNewItem) {
		return false
	}
	return true
}

func (p *DatasetItemOutput) Field1DeepEqual(src *int32) bool {

	if p.ItemIndex == src {
		return true
	} else if p.ItemIndex == nil || src == nil {
		return false
	}
	if *p.ItemIndex != *src {
		return false
	}
	return true
}
func (p *DatasetItemOutput) Field2DeepEqual(src *string) bool {

	if p.ItemKey == src {
		return true
	} else if p.ItemKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ItemKey, *src) != 0 {
		return false
	}
	return true
}
func (p *DatasetItemOutput) Field3DeepEqual(src *int64) bool {

	if p.ItemID == src {
		return true
	} else if p.ItemID == nil || src == nil {
		return false
	}
	if *p.ItemID != *src {
		return false
	}
	return true
}
func (p *DatasetItemOutput) Field4DeepEqual(src *bool) bool {

	if p.IsNewItem == src {
		return true
	} else if p.IsNewItem == nil || src == nil {
		return false
	}
	if *p.IsNewItem != *src {
		return false
	}
	return true
}

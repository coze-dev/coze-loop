// Code generated by Validator v0.2.6. DO NOT EDIT.

package eval_set

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *FieldSchema) IsValid() error {
	return nil
}
func (p *EvaluationSetSchema) IsValid() error {
	return nil
}
func (p *EvaluationSetVersion) IsValid() error {
	if p.EvaluationSetSchema != nil {
		if err := p.EvaluationSetSchema.IsValid(); err != nil {
			return fmt.Errorf("field EvaluationSetSchema not valid, %w", err)
		}
	}
	if p.BaseInfo != nil {
		if err := p.BaseInfo.IsValid(); err != nil {
			return fmt.Errorf("field BaseInfo not valid, %w", err)
		}
	}
	return nil
}
func (p *EvaluationSet) IsValid() error {
	if p.CurrentVersion != nil {
		if err := p.CurrentVersion.IsValid(); err != nil {
			return fmt.Errorf("field CurrentVersion not valid, %w", err)
		}
	}
	if p.BaseInfo != nil {
		if err := p.BaseInfo.IsValid(); err != nil {
			return fmt.Errorf("field BaseInfo not valid, %w", err)
		}
	}
	return nil
}
func (p *FieldData) IsValid() error {
	if p.Content != nil {
		if err := p.Content.IsValid(); err != nil {
			return fmt.Errorf("field Content not valid, %w", err)
		}
	}
	return nil
}
func (p *Turn) IsValid() error {
	return nil
}
func (p *EvaluationSetItem) IsValid() error {
	if p.BaseInfo != nil {
		if err := p.BaseInfo.IsValid(); err != nil {
			return fmt.Errorf("field BaseInfo not valid, %w", err)
		}
	}
	return nil
}
func (p *ItemError) IsValid() error {
	return nil
}
func (p *ItemErrorGroup) IsValid() error {
	return nil
}
func (p *ItemErrorDetail) IsValid() error {
	return nil
}
func (p *DatasetItemOutput) IsValid() error {
	return nil
}

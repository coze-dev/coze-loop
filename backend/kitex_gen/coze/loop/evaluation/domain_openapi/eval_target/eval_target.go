// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package eval_target

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain_openapi/common"
	"strings"
)

const (
	EvalTargetTypeCozeBot = "coze_bot"

	EvalTargetTypeCozeLoopPrompt = "coze_loop_prompt"

	EvalTargetTypeTrace = "trace"

	EvalTargetTypeCozeWorkflow = "coze_workflow"

	EvalTargetTypeVolcengineAgent = "volcengine_agent"

	EvalTargetTypeCustomRPCServer = "custom_rpc_server"

	CozeBotInfoTypeDraftBot = "draft_bot"

	CozeBotInfoTypeProductBot = "product_bot"

	EvalTargetRunStatusSuccess = "success"

	EvalTargetRunStatusFail = "fail"
)

type EvalTargetType = string

type CozeBotInfoType = string

type EvalTargetRunStatus = string

type EvalTargetRecord struct {
	// 基础信息
	ID              *int64 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	TargetID        *int64 `thrift:"target_id,2,optional" frugal:"2,optional,i64" json:"target_id" form:"target_id" query:"target_id"`
	TargetVersionID *int64 `thrift:"target_version_id,3,optional" frugal:"3,optional,i64" json:"target_version_id" form:"target_version_id" query:"target_version_id"`
	// 评测集数据项ID
	ItemID *int64 `thrift:"item_id,4,optional" frugal:"4,optional,i64" json:"item_id" form:"item_id" query:"item_id"`
	// 评测集数据项轮次ID
	TurnID *int64 `thrift:"turn_id,5,optional" frugal:"5,optional,i64" json:"turn_id" form:"turn_id" query:"turn_id"`
	// 运行数据
	EvalTargetOutputData *EvalTargetOutputData `thrift:"eval_target_output_data,20,optional" frugal:"20,optional,EvalTargetOutputData" form:"eval_target_output_data" json:"eval_target_output_data,omitempty" query:"eval_target_output_data"`
	Status               *EvalTargetRunStatus  `thrift:"status,21,optional" frugal:"21,optional,string" form:"status" json:"status,omitempty" query:"status"`
	// 系统信息
	Logid    *string          `thrift:"logid,50,optional" frugal:"50,optional,string" form:"logid" json:"logid,omitempty" query:"logid"`
	TraceID  *string          `thrift:"trace_id,51,optional" frugal:"51,optional,string" form:"trace_id" json:"trace_id,omitempty" query:"trace_id"`
	BaseInfo *common.BaseInfo `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" form:"base_info" json:"base_info,omitempty" query:"base_info"`
}

func NewEvalTargetRecord() *EvalTargetRecord {
	return &EvalTargetRecord{}
}

func (p *EvalTargetRecord) InitDefault() {
}

var EvalTargetRecord_ID_DEFAULT int64

func (p *EvalTargetRecord) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return EvalTargetRecord_ID_DEFAULT
	}
	return *p.ID
}

var EvalTargetRecord_TargetID_DEFAULT int64

func (p *EvalTargetRecord) GetTargetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTargetID() {
		return EvalTargetRecord_TargetID_DEFAULT
	}
	return *p.TargetID
}

var EvalTargetRecord_TargetVersionID_DEFAULT int64

func (p *EvalTargetRecord) GetTargetVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTargetVersionID() {
		return EvalTargetRecord_TargetVersionID_DEFAULT
	}
	return *p.TargetVersionID
}

var EvalTargetRecord_ItemID_DEFAULT int64

func (p *EvalTargetRecord) GetItemID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemID() {
		return EvalTargetRecord_ItemID_DEFAULT
	}
	return *p.ItemID
}

var EvalTargetRecord_TurnID_DEFAULT int64

func (p *EvalTargetRecord) GetTurnID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTurnID() {
		return EvalTargetRecord_TurnID_DEFAULT
	}
	return *p.TurnID
}

var EvalTargetRecord_EvalTargetOutputData_DEFAULT *EvalTargetOutputData

func (p *EvalTargetRecord) GetEvalTargetOutputData() (v *EvalTargetOutputData) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetOutputData() {
		return EvalTargetRecord_EvalTargetOutputData_DEFAULT
	}
	return p.EvalTargetOutputData
}

var EvalTargetRecord_Status_DEFAULT EvalTargetRunStatus

func (p *EvalTargetRecord) GetStatus() (v EvalTargetRunStatus) {
	if p == nil {
		return
	}
	if !p.IsSetStatus() {
		return EvalTargetRecord_Status_DEFAULT
	}
	return *p.Status
}

var EvalTargetRecord_Logid_DEFAULT string

func (p *EvalTargetRecord) GetLogid() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetLogid() {
		return EvalTargetRecord_Logid_DEFAULT
	}
	return *p.Logid
}

var EvalTargetRecord_TraceID_DEFAULT string

func (p *EvalTargetRecord) GetTraceID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTraceID() {
		return EvalTargetRecord_TraceID_DEFAULT
	}
	return *p.TraceID
}

var EvalTargetRecord_BaseInfo_DEFAULT *common.BaseInfo

func (p *EvalTargetRecord) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return EvalTargetRecord_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *EvalTargetRecord) SetID(val *int64) {
	p.ID = val
}
func (p *EvalTargetRecord) SetTargetID(val *int64) {
	p.TargetID = val
}
func (p *EvalTargetRecord) SetTargetVersionID(val *int64) {
	p.TargetVersionID = val
}
func (p *EvalTargetRecord) SetItemID(val *int64) {
	p.ItemID = val
}
func (p *EvalTargetRecord) SetTurnID(val *int64) {
	p.TurnID = val
}
func (p *EvalTargetRecord) SetEvalTargetOutputData(val *EvalTargetOutputData) {
	p.EvalTargetOutputData = val
}
func (p *EvalTargetRecord) SetStatus(val *EvalTargetRunStatus) {
	p.Status = val
}
func (p *EvalTargetRecord) SetLogid(val *string) {
	p.Logid = val
}
func (p *EvalTargetRecord) SetTraceID(val *string) {
	p.TraceID = val
}
func (p *EvalTargetRecord) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_EvalTargetRecord = map[int16]string{
	1:   "id",
	2:   "target_id",
	3:   "target_version_id",
	4:   "item_id",
	5:   "turn_id",
	20:  "eval_target_output_data",
	21:  "status",
	50:  "logid",
	51:  "trace_id",
	100: "base_info",
}

func (p *EvalTargetRecord) IsSetID() bool {
	return p.ID != nil
}

func (p *EvalTargetRecord) IsSetTargetID() bool {
	return p.TargetID != nil
}

func (p *EvalTargetRecord) IsSetTargetVersionID() bool {
	return p.TargetVersionID != nil
}

func (p *EvalTargetRecord) IsSetItemID() bool {
	return p.ItemID != nil
}

func (p *EvalTargetRecord) IsSetTurnID() bool {
	return p.TurnID != nil
}

func (p *EvalTargetRecord) IsSetEvalTargetOutputData() bool {
	return p.EvalTargetOutputData != nil
}

func (p *EvalTargetRecord) IsSetStatus() bool {
	return p.Status != nil
}

func (p *EvalTargetRecord) IsSetLogid() bool {
	return p.Logid != nil
}

func (p *EvalTargetRecord) IsSetTraceID() bool {
	return p.TraceID != nil
}

func (p *EvalTargetRecord) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *EvalTargetRecord) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 50:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField50(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 51:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField51(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetRecord[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetRecord) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *EvalTargetRecord) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TargetID = _field
	return nil
}
func (p *EvalTargetRecord) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TargetVersionID = _field
	return nil
}
func (p *EvalTargetRecord) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemID = _field
	return nil
}
func (p *EvalTargetRecord) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TurnID = _field
	return nil
}
func (p *EvalTargetRecord) ReadField20(iprot thrift.TProtocol) error {
	_field := NewEvalTargetOutputData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalTargetOutputData = _field
	return nil
}
func (p *EvalTargetRecord) ReadField21(iprot thrift.TProtocol) error {

	var _field *EvalTargetRunStatus
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}
func (p *EvalTargetRecord) ReadField50(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Logid = _field
	return nil
}
func (p *EvalTargetRecord) ReadField51(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TraceID = _field
	return nil
}
func (p *EvalTargetRecord) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *EvalTargetRecord) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvalTargetRecord"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField50(oprot); err != nil {
			fieldId = 50
			goto WriteFieldError
		}
		if err = p.writeField51(oprot); err != nil {
			fieldId = 51
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetID() {
		if err = oprot.WriteFieldBegin("target_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TargetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetVersionID() {
		if err = oprot.WriteFieldBegin("target_version_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TargetVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemID() {
		if err = oprot.WriteFieldBegin("item_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ItemID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTurnID() {
		if err = oprot.WriteFieldBegin("turn_id", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TurnID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetOutputData() {
		if err = oprot.WriteFieldBegin("eval_target_output_data", thrift.STRUCT, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalTargetOutputData.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRING, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField50(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogid() {
		if err = oprot.WriteFieldBegin("logid", thrift.STRING, 50); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Logid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 50 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 50 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField51(oprot thrift.TProtocol) (err error) {
	if p.IsSetTraceID() {
		if err = oprot.WriteFieldBegin("trace_id", thrift.STRING, 51); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TraceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 51 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 51 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *EvalTargetRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetRecord(%+v)", *p)

}

func (p *EvalTargetRecord) DeepEqual(ano *EvalTargetRecord) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.TargetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.TargetVersionID) {
		return false
	}
	if !p.Field4DeepEqual(ano.ItemID) {
		return false
	}
	if !p.Field5DeepEqual(ano.TurnID) {
		return false
	}
	if !p.Field20DeepEqual(ano.EvalTargetOutputData) {
		return false
	}
	if !p.Field21DeepEqual(ano.Status) {
		return false
	}
	if !p.Field50DeepEqual(ano.Logid) {
		return false
	}
	if !p.Field51DeepEqual(ano.TraceID) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *EvalTargetRecord) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field2DeepEqual(src *int64) bool {

	if p.TargetID == src {
		return true
	} else if p.TargetID == nil || src == nil {
		return false
	}
	if *p.TargetID != *src {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field3DeepEqual(src *int64) bool {

	if p.TargetVersionID == src {
		return true
	} else if p.TargetVersionID == nil || src == nil {
		return false
	}
	if *p.TargetVersionID != *src {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field4DeepEqual(src *int64) bool {

	if p.ItemID == src {
		return true
	} else if p.ItemID == nil || src == nil {
		return false
	}
	if *p.ItemID != *src {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field5DeepEqual(src *int64) bool {

	if p.TurnID == src {
		return true
	} else if p.TurnID == nil || src == nil {
		return false
	}
	if *p.TurnID != *src {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field20DeepEqual(src *EvalTargetOutputData) bool {

	if !p.EvalTargetOutputData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field21DeepEqual(src *EvalTargetRunStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Status, *src) != 0 {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field50DeepEqual(src *string) bool {

	if p.Logid == src {
		return true
	} else if p.Logid == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Logid, *src) != 0 {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field51DeepEqual(src *string) bool {

	if p.TraceID == src {
		return true
	} else if p.TraceID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TraceID, *src) != 0 {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetOutputData struct {
	// 输出字段，目前key只支持actual_output
	OutputFields map[string]*common.Content `thrift:"output_fields,1,optional" frugal:"1,optional,map<string:common.Content>" form:"output_fields" json:"output_fields,omitempty" query:"output_fields"`
	// 运行消耗
	EvalTargetUsage *EvalTargetUsage `thrift:"eval_target_usage,2,optional" frugal:"2,optional,EvalTargetUsage" form:"eval_target_usage" json:"eval_target_usage,omitempty" query:"eval_target_usage"`
	// 运行报错
	EvalTargetRunError *EvalTargetRunError `thrift:"eval_target_run_error,3,optional" frugal:"3,optional,EvalTargetRunError" form:"eval_target_run_error" json:"eval_target_run_error,omitempty" query:"eval_target_run_error"`
	// 运行耗时
	TimeConsumingMs *int64 `thrift:"time_consuming_ms,4,optional" frugal:"4,optional,i64" json:"time_consuming_ms" form:"time_consuming_ms" query:"time_consuming_ms"`
}

func NewEvalTargetOutputData() *EvalTargetOutputData {
	return &EvalTargetOutputData{}
}

func (p *EvalTargetOutputData) InitDefault() {
}

var EvalTargetOutputData_OutputFields_DEFAULT map[string]*common.Content

func (p *EvalTargetOutputData) GetOutputFields() (v map[string]*common.Content) {
	if p == nil {
		return
	}
	if !p.IsSetOutputFields() {
		return EvalTargetOutputData_OutputFields_DEFAULT
	}
	return p.OutputFields
}

var EvalTargetOutputData_EvalTargetUsage_DEFAULT *EvalTargetUsage

func (p *EvalTargetOutputData) GetEvalTargetUsage() (v *EvalTargetUsage) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetUsage() {
		return EvalTargetOutputData_EvalTargetUsage_DEFAULT
	}
	return p.EvalTargetUsage
}

var EvalTargetOutputData_EvalTargetRunError_DEFAULT *EvalTargetRunError

func (p *EvalTargetOutputData) GetEvalTargetRunError() (v *EvalTargetRunError) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetRunError() {
		return EvalTargetOutputData_EvalTargetRunError_DEFAULT
	}
	return p.EvalTargetRunError
}

var EvalTargetOutputData_TimeConsumingMs_DEFAULT int64

func (p *EvalTargetOutputData) GetTimeConsumingMs() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTimeConsumingMs() {
		return EvalTargetOutputData_TimeConsumingMs_DEFAULT
	}
	return *p.TimeConsumingMs
}
func (p *EvalTargetOutputData) SetOutputFields(val map[string]*common.Content) {
	p.OutputFields = val
}
func (p *EvalTargetOutputData) SetEvalTargetUsage(val *EvalTargetUsage) {
	p.EvalTargetUsage = val
}
func (p *EvalTargetOutputData) SetEvalTargetRunError(val *EvalTargetRunError) {
	p.EvalTargetRunError = val
}
func (p *EvalTargetOutputData) SetTimeConsumingMs(val *int64) {
	p.TimeConsumingMs = val
}

var fieldIDToName_EvalTargetOutputData = map[int16]string{
	1: "output_fields",
	2: "eval_target_usage",
	3: "eval_target_run_error",
	4: "time_consuming_ms",
}

func (p *EvalTargetOutputData) IsSetOutputFields() bool {
	return p.OutputFields != nil
}

func (p *EvalTargetOutputData) IsSetEvalTargetUsage() bool {
	return p.EvalTargetUsage != nil
}

func (p *EvalTargetOutputData) IsSetEvalTargetRunError() bool {
	return p.EvalTargetRunError != nil
}

func (p *EvalTargetOutputData) IsSetTimeConsumingMs() bool {
	return p.TimeConsumingMs != nil
}

func (p *EvalTargetOutputData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetOutputData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetOutputData) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]*common.Content, size)
	values := make([]common.Content, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.OutputFields = _field
	return nil
}
func (p *EvalTargetOutputData) ReadField2(iprot thrift.TProtocol) error {
	_field := NewEvalTargetUsage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalTargetUsage = _field
	return nil
}
func (p *EvalTargetOutputData) ReadField3(iprot thrift.TProtocol) error {
	_field := NewEvalTargetRunError()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalTargetRunError = _field
	return nil
}
func (p *EvalTargetOutputData) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TimeConsumingMs = _field
	return nil
}

func (p *EvalTargetOutputData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvalTargetOutputData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetOutputData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputFields() {
		if err = oprot.WriteFieldBegin("output_fields", thrift.MAP, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.OutputFields)); err != nil {
			return err
		}
		for k, v := range p.OutputFields {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvalTargetOutputData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetUsage() {
		if err = oprot.WriteFieldBegin("eval_target_usage", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalTargetUsage.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvalTargetOutputData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetRunError() {
		if err = oprot.WriteFieldBegin("eval_target_run_error", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalTargetRunError.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvalTargetOutputData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeConsumingMs() {
		if err = oprot.WriteFieldBegin("time_consuming_ms", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TimeConsumingMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *EvalTargetOutputData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetOutputData(%+v)", *p)

}

func (p *EvalTargetOutputData) DeepEqual(ano *EvalTargetOutputData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OutputFields) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvalTargetUsage) {
		return false
	}
	if !p.Field3DeepEqual(ano.EvalTargetRunError) {
		return false
	}
	if !p.Field4DeepEqual(ano.TimeConsumingMs) {
		return false
	}
	return true
}

func (p *EvalTargetOutputData) Field1DeepEqual(src map[string]*common.Content) bool {

	if len(p.OutputFields) != len(src) {
		return false
	}
	for k, v := range p.OutputFields {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *EvalTargetOutputData) Field2DeepEqual(src *EvalTargetUsage) bool {

	if !p.EvalTargetUsage.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvalTargetOutputData) Field3DeepEqual(src *EvalTargetRunError) bool {

	if !p.EvalTargetRunError.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvalTargetOutputData) Field4DeepEqual(src *int64) bool {

	if p.TimeConsumingMs == src {
		return true
	} else if p.TimeConsumingMs == nil || src == nil {
		return false
	}
	if *p.TimeConsumingMs != *src {
		return false
	}
	return true
}

type EvalTargetUsage struct {
	InputTokens  int64 `thrift:"input_tokens,1" frugal:"1,default,i64" json:"input_tokens" form:"input_tokens" query:"input_tokens"`
	OutputTokens int64 `thrift:"output_tokens,2" frugal:"2,default,i64" json:"output_tokens" form:"output_tokens" query:"output_tokens"`
}

func NewEvalTargetUsage() *EvalTargetUsage {
	return &EvalTargetUsage{}
}

func (p *EvalTargetUsage) InitDefault() {
}

func (p *EvalTargetUsage) GetInputTokens() (v int64) {
	if p != nil {
		return p.InputTokens
	}
	return
}

func (p *EvalTargetUsage) GetOutputTokens() (v int64) {
	if p != nil {
		return p.OutputTokens
	}
	return
}
func (p *EvalTargetUsage) SetInputTokens(val int64) {
	p.InputTokens = val
}
func (p *EvalTargetUsage) SetOutputTokens(val int64) {
	p.OutputTokens = val
}

var fieldIDToName_EvalTargetUsage = map[int16]string{
	1: "input_tokens",
	2: "output_tokens",
}

func (p *EvalTargetUsage) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetUsage[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetUsage) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.InputTokens = _field
	return nil
}
func (p *EvalTargetUsage) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OutputTokens = _field
	return nil
}

func (p *EvalTargetUsage) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvalTargetUsage"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetUsage) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("input_tokens", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.InputTokens); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvalTargetUsage) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("output_tokens", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OutputTokens); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EvalTargetUsage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetUsage(%+v)", *p)

}

func (p *EvalTargetUsage) DeepEqual(ano *EvalTargetUsage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.InputTokens) {
		return false
	}
	if !p.Field2DeepEqual(ano.OutputTokens) {
		return false
	}
	return true
}

func (p *EvalTargetUsage) Field1DeepEqual(src int64) bool {

	if p.InputTokens != src {
		return false
	}
	return true
}
func (p *EvalTargetUsage) Field2DeepEqual(src int64) bool {

	if p.OutputTokens != src {
		return false
	}
	return true
}

type EvalTargetRunError struct {
	Code    *int32  `thrift:"code,1,optional" frugal:"1,optional,i32" json:"code" form:"code" query:"code"`
	Message *string `thrift:"message,2,optional" frugal:"2,optional,string" json:"message" form:"message" query:"message"`
}

func NewEvalTargetRunError() *EvalTargetRunError {
	return &EvalTargetRunError{}
}

func (p *EvalTargetRunError) InitDefault() {
}

var EvalTargetRunError_Code_DEFAULT int32

func (p *EvalTargetRunError) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return EvalTargetRunError_Code_DEFAULT
	}
	return *p.Code
}

var EvalTargetRunError_Message_DEFAULT string

func (p *EvalTargetRunError) GetMessage() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMessage() {
		return EvalTargetRunError_Message_DEFAULT
	}
	return *p.Message
}
func (p *EvalTargetRunError) SetCode(val *int32) {
	p.Code = val
}
func (p *EvalTargetRunError) SetMessage(val *string) {
	p.Message = val
}

var fieldIDToName_EvalTargetRunError = map[int16]string{
	1: "code",
	2: "message",
}

func (p *EvalTargetRunError) IsSetCode() bool {
	return p.Code != nil
}

func (p *EvalTargetRunError) IsSetMessage() bool {
	return p.Message != nil
}

func (p *EvalTargetRunError) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetRunError[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetRunError) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *EvalTargetRunError) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Message = _field
	return nil
}

func (p *EvalTargetRunError) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvalTargetRunError"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetRunError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvalTargetRunError) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Message); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EvalTargetRunError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetRunError(%+v)", *p)

}

func (p *EvalTargetRunError) DeepEqual(ano *EvalTargetRunError) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *EvalTargetRunError) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *EvalTargetRunError) Field2DeepEqual(src *string) bool {

	if p.Message == src {
		return true
	} else if p.Message == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Message, *src) != 0 {
		return false
	}
	return true
}

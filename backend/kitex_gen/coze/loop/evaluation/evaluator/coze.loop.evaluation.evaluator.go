// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package evaluator

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain/common"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain/evaluator"
	"strings"
)

type ListEvaluatorsRequest struct {
	WorkspaceID   int64                     `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	SearchName    *string                   `thrift:"search_name,2,optional" frugal:"2,optional,string" form:"search_name" json:"search_name,omitempty"`
	CreatorIds    []int64                   `thrift:"creator_ids,3,optional" frugal:"3,optional,list<i64>" json:"creator_ids" form:"creator_ids" `
	EvaluatorType []evaluator.EvaluatorType `thrift:"evaluator_type,4,optional" frugal:"4,optional,list<EvaluatorType>" form:"evaluator_type" json:"evaluator_type,omitempty"`
	WithVersion   *bool                     `thrift:"with_version,5,optional" frugal:"5,optional,bool" form:"with_version" json:"with_version,omitempty"`
	// 是否查询预置评估器
	Builtin *bool `thrift:"builtin,11,optional" frugal:"11,optional,bool" form:"builtin" json:"builtin,omitempty"`
	// 筛选器选项
	FilterOption *evaluator.EvaluatorFilterOption `thrift:"filter_option,12,optional" frugal:"12,optional,evaluator.EvaluatorFilterOption" json:"filter_option" form:"filter_option" `
	PageSize     *int32                           `thrift:"page_size,101,optional" frugal:"101,optional,i32" form:"page_size" json:"page_size,omitempty"`
	PageNumber   *int32                           `thrift:"page_number,102,optional" frugal:"102,optional,i32" form:"page_number" json:"page_number,omitempty"`
	OrderBys     []*common.OrderBy                `thrift:"order_bys,103,optional" frugal:"103,optional,list<common.OrderBy>" form:"order_bys" json:"order_bys,omitempty"`
	Base         *base.Base                       `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListEvaluatorsRequest() *ListEvaluatorsRequest {
	return &ListEvaluatorsRequest{}
}

func (p *ListEvaluatorsRequest) InitDefault() {
}

func (p *ListEvaluatorsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var ListEvaluatorsRequest_SearchName_DEFAULT string

func (p *ListEvaluatorsRequest) GetSearchName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSearchName() {
		return ListEvaluatorsRequest_SearchName_DEFAULT
	}
	return *p.SearchName
}

var ListEvaluatorsRequest_CreatorIds_DEFAULT []int64

func (p *ListEvaluatorsRequest) GetCreatorIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetCreatorIds() {
		return ListEvaluatorsRequest_CreatorIds_DEFAULT
	}
	return p.CreatorIds
}

var ListEvaluatorsRequest_EvaluatorType_DEFAULT []evaluator.EvaluatorType

func (p *ListEvaluatorsRequest) GetEvaluatorType() (v []evaluator.EvaluatorType) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorType() {
		return ListEvaluatorsRequest_EvaluatorType_DEFAULT
	}
	return p.EvaluatorType
}

var ListEvaluatorsRequest_WithVersion_DEFAULT bool

func (p *ListEvaluatorsRequest) GetWithVersion() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetWithVersion() {
		return ListEvaluatorsRequest_WithVersion_DEFAULT
	}
	return *p.WithVersion
}

var ListEvaluatorsRequest_Builtin_DEFAULT bool

func (p *ListEvaluatorsRequest) GetBuiltin() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetBuiltin() {
		return ListEvaluatorsRequest_Builtin_DEFAULT
	}
	return *p.Builtin
}

var ListEvaluatorsRequest_FilterOption_DEFAULT *evaluator.EvaluatorFilterOption

func (p *ListEvaluatorsRequest) GetFilterOption() (v *evaluator.EvaluatorFilterOption) {
	if p == nil {
		return
	}
	if !p.IsSetFilterOption() {
		return ListEvaluatorsRequest_FilterOption_DEFAULT
	}
	return p.FilterOption
}

var ListEvaluatorsRequest_PageSize_DEFAULT int32

func (p *ListEvaluatorsRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListEvaluatorsRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListEvaluatorsRequest_PageNumber_DEFAULT int32

func (p *ListEvaluatorsRequest) GetPageNumber() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNumber() {
		return ListEvaluatorsRequest_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var ListEvaluatorsRequest_OrderBys_DEFAULT []*common.OrderBy

func (p *ListEvaluatorsRequest) GetOrderBys() (v []*common.OrderBy) {
	if p == nil {
		return
	}
	if !p.IsSetOrderBys() {
		return ListEvaluatorsRequest_OrderBys_DEFAULT
	}
	return p.OrderBys
}

var ListEvaluatorsRequest_Base_DEFAULT *base.Base

func (p *ListEvaluatorsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListEvaluatorsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListEvaluatorsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ListEvaluatorsRequest) SetSearchName(val *string) {
	p.SearchName = val
}
func (p *ListEvaluatorsRequest) SetCreatorIds(val []int64) {
	p.CreatorIds = val
}
func (p *ListEvaluatorsRequest) SetEvaluatorType(val []evaluator.EvaluatorType) {
	p.EvaluatorType = val
}
func (p *ListEvaluatorsRequest) SetWithVersion(val *bool) {
	p.WithVersion = val
}
func (p *ListEvaluatorsRequest) SetBuiltin(val *bool) {
	p.Builtin = val
}
func (p *ListEvaluatorsRequest) SetFilterOption(val *evaluator.EvaluatorFilterOption) {
	p.FilterOption = val
}
func (p *ListEvaluatorsRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListEvaluatorsRequest) SetPageNumber(val *int32) {
	p.PageNumber = val
}
func (p *ListEvaluatorsRequest) SetOrderBys(val []*common.OrderBy) {
	p.OrderBys = val
}
func (p *ListEvaluatorsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListEvaluatorsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "search_name",
	3:   "creator_ids",
	4:   "evaluator_type",
	5:   "with_version",
	11:  "builtin",
	12:  "filter_option",
	101: "page_size",
	102: "page_number",
	103: "order_bys",
	255: "Base",
}

func (p *ListEvaluatorsRequest) IsSetSearchName() bool {
	return p.SearchName != nil
}

func (p *ListEvaluatorsRequest) IsSetCreatorIds() bool {
	return p.CreatorIds != nil
}

func (p *ListEvaluatorsRequest) IsSetEvaluatorType() bool {
	return p.EvaluatorType != nil
}

func (p *ListEvaluatorsRequest) IsSetWithVersion() bool {
	return p.WithVersion != nil
}

func (p *ListEvaluatorsRequest) IsSetBuiltin() bool {
	return p.Builtin != nil
}

func (p *ListEvaluatorsRequest) IsSetFilterOption() bool {
	return p.FilterOption != nil
}

func (p *ListEvaluatorsRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListEvaluatorsRequest) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *ListEvaluatorsRequest) IsSetOrderBys() bool {
	return p.OrderBys != nil
}

func (p *ListEvaluatorsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListEvaluatorsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluatorsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListEvaluatorsRequest[fieldId]))
}

func (p *ListEvaluatorsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListEvaluatorsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SearchName = _field
	return nil
}
func (p *ListEvaluatorsRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CreatorIds = _field
	return nil
}
func (p *ListEvaluatorsRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]evaluator.EvaluatorType, 0, size)
	for i := 0; i < size; i++ {

		var _elem evaluator.EvaluatorType
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_elem = evaluator.EvaluatorType(v)
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorType = _field
	return nil
}
func (p *ListEvaluatorsRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WithVersion = _field
	return nil
}
func (p *ListEvaluatorsRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Builtin = _field
	return nil
}
func (p *ListEvaluatorsRequest) ReadField12(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorFilterOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FilterOption = _field
	return nil
}
func (p *ListEvaluatorsRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListEvaluatorsRequest) ReadField102(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNumber = _field
	return nil
}
func (p *ListEvaluatorsRequest) ReadField103(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*common.OrderBy, 0, size)
	values := make([]common.OrderBy, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OrderBys = _field
	return nil
}
func (p *ListEvaluatorsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListEvaluatorsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluatorsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluatorsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluatorsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSearchName() {
		if err = oprot.WriteFieldBegin("search_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SearchName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluatorsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatorIds() {
		if err = oprot.WriteFieldBegin("creator_ids", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.CreatorIds)); err != nil {
			return err
		}
		for _, v := range p.CreatorIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluatorsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorType() {
		if err = oprot.WriteFieldBegin("evaluator_type", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.EvaluatorType)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorType {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ListEvaluatorsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetWithVersion() {
		if err = oprot.WriteFieldBegin("with_version", thrift.BOOL, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.WithVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ListEvaluatorsRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetBuiltin() {
		if err = oprot.WriteFieldBegin("builtin", thrift.BOOL, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Builtin); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *ListEvaluatorsRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterOption() {
		if err = oprot.WriteFieldBegin("filter_option", thrift.STRUCT, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FilterOption.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *ListEvaluatorsRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluatorsRequest) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("page_number", thrift.I32, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *ListEvaluatorsRequest) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBys() {
		if err = oprot.WriteFieldBegin("order_bys", thrift.LIST, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderBys)); err != nil {
			return err
		}
		for _, v := range p.OrderBys {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *ListEvaluatorsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluatorsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluatorsRequest(%+v)", *p)

}

func (p *ListEvaluatorsRequest) DeepEqual(ano *ListEvaluatorsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SearchName) {
		return false
	}
	if !p.Field3DeepEqual(ano.CreatorIds) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluatorType) {
		return false
	}
	if !p.Field5DeepEqual(ano.WithVersion) {
		return false
	}
	if !p.Field11DeepEqual(ano.Builtin) {
		return false
	}
	if !p.Field12DeepEqual(ano.FilterOption) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field102DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field103DeepEqual(ano.OrderBys) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListEvaluatorsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ListEvaluatorsRequest) Field2DeepEqual(src *string) bool {

	if p.SearchName == src {
		return true
	} else if p.SearchName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SearchName, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluatorsRequest) Field3DeepEqual(src []int64) bool {

	if len(p.CreatorIds) != len(src) {
		return false
	}
	for i, v := range p.CreatorIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ListEvaluatorsRequest) Field4DeepEqual(src []evaluator.EvaluatorType) bool {

	if len(p.EvaluatorType) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorType {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ListEvaluatorsRequest) Field5DeepEqual(src *bool) bool {

	if p.WithVersion == src {
		return true
	} else if p.WithVersion == nil || src == nil {
		return false
	}
	if *p.WithVersion != *src {
		return false
	}
	return true
}
func (p *ListEvaluatorsRequest) Field11DeepEqual(src *bool) bool {

	if p.Builtin == src {
		return true
	} else if p.Builtin == nil || src == nil {
		return false
	}
	if *p.Builtin != *src {
		return false
	}
	return true
}
func (p *ListEvaluatorsRequest) Field12DeepEqual(src *evaluator.EvaluatorFilterOption) bool {

	if !p.FilterOption.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListEvaluatorsRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListEvaluatorsRequest) Field102DeepEqual(src *int32) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if *p.PageNumber != *src {
		return false
	}
	return true
}
func (p *ListEvaluatorsRequest) Field103DeepEqual(src []*common.OrderBy) bool {

	if len(p.OrderBys) != len(src) {
		return false
	}
	for i, v := range p.OrderBys {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluatorsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluatorsResponse struct {
	Evaluators []*evaluator.Evaluator `thrift:"evaluators,1,optional" frugal:"1,optional,list<evaluator.Evaluator>" json:"evaluators" form:"evaluators" `
	Total      *int64                 `thrift:"total,10,optional" frugal:"10,optional,i64" json:"total" form:"total" `
	BaseResp   *base.BaseResp         `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListEvaluatorsResponse() *ListEvaluatorsResponse {
	return &ListEvaluatorsResponse{}
}

func (p *ListEvaluatorsResponse) InitDefault() {
}

var ListEvaluatorsResponse_Evaluators_DEFAULT []*evaluator.Evaluator

func (p *ListEvaluatorsResponse) GetEvaluators() (v []*evaluator.Evaluator) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluators() {
		return ListEvaluatorsResponse_Evaluators_DEFAULT
	}
	return p.Evaluators
}

var ListEvaluatorsResponse_Total_DEFAULT int64

func (p *ListEvaluatorsResponse) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListEvaluatorsResponse_Total_DEFAULT
	}
	return *p.Total
}

var ListEvaluatorsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListEvaluatorsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListEvaluatorsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListEvaluatorsResponse) SetEvaluators(val []*evaluator.Evaluator) {
	p.Evaluators = val
}
func (p *ListEvaluatorsResponse) SetTotal(val *int64) {
	p.Total = val
}
func (p *ListEvaluatorsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListEvaluatorsResponse = map[int16]string{
	1:   "evaluators",
	10:  "total",
	255: "BaseResp",
}

func (p *ListEvaluatorsResponse) IsSetEvaluators() bool {
	return p.Evaluators != nil
}

func (p *ListEvaluatorsResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListEvaluatorsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListEvaluatorsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluatorsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluatorsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*evaluator.Evaluator, 0, size)
	values := make([]evaluator.Evaluator, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Evaluators = _field
	return nil
}
func (p *ListEvaluatorsResponse) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *ListEvaluatorsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListEvaluatorsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluatorsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluatorsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluators() {
		if err = oprot.WriteFieldBegin("evaluators", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Evaluators)); err != nil {
			return err
		}
		for _, v := range p.Evaluators {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluatorsResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *ListEvaluatorsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluatorsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluatorsResponse(%+v)", *p)

}

func (p *ListEvaluatorsResponse) DeepEqual(ano *ListEvaluatorsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Evaluators) {
		return false
	}
	if !p.Field10DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListEvaluatorsResponse) Field1DeepEqual(src []*evaluator.Evaluator) bool {

	if len(p.Evaluators) != len(src) {
		return false
	}
	for i, v := range p.Evaluators {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluatorsResponse) Field10DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *ListEvaluatorsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetEvaluatorsRequest struct {
	WorkspaceID  int64   `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	EvaluatorIds []int64 `thrift:"evaluator_ids,2,optional" frugal:"2,optional,list<i64>" json:"evaluator_ids" form:"evaluator_ids" `
	// 是否查询已删除的评估器，默认不查询
	IncludeDeleted *bool      `thrift:"include_deleted,3,optional" frugal:"3,optional,bool" form:"include_deleted" json:"include_deleted,omitempty"`
	Base           *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetEvaluatorsRequest() *BatchGetEvaluatorsRequest {
	return &BatchGetEvaluatorsRequest{}
}

func (p *BatchGetEvaluatorsRequest) InitDefault() {
}

func (p *BatchGetEvaluatorsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var BatchGetEvaluatorsRequest_EvaluatorIds_DEFAULT []int64

func (p *BatchGetEvaluatorsRequest) GetEvaluatorIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorIds() {
		return BatchGetEvaluatorsRequest_EvaluatorIds_DEFAULT
	}
	return p.EvaluatorIds
}

var BatchGetEvaluatorsRequest_IncludeDeleted_DEFAULT bool

func (p *BatchGetEvaluatorsRequest) GetIncludeDeleted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIncludeDeleted() {
		return BatchGetEvaluatorsRequest_IncludeDeleted_DEFAULT
	}
	return *p.IncludeDeleted
}

var BatchGetEvaluatorsRequest_Base_DEFAULT *base.Base

func (p *BatchGetEvaluatorsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetEvaluatorsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetEvaluatorsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchGetEvaluatorsRequest) SetEvaluatorIds(val []int64) {
	p.EvaluatorIds = val
}
func (p *BatchGetEvaluatorsRequest) SetIncludeDeleted(val *bool) {
	p.IncludeDeleted = val
}
func (p *BatchGetEvaluatorsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetEvaluatorsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_ids",
	3:   "include_deleted",
	255: "Base",
}

func (p *BatchGetEvaluatorsRequest) IsSetEvaluatorIds() bool {
	return p.EvaluatorIds != nil
}

func (p *BatchGetEvaluatorsRequest) IsSetIncludeDeleted() bool {
	return p.IncludeDeleted != nil
}

func (p *BatchGetEvaluatorsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetEvaluatorsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetEvaluatorsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetEvaluatorsRequest[fieldId]))
}

func (p *BatchGetEvaluatorsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetEvaluatorsRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorIds = _field
	return nil
}
func (p *BatchGetEvaluatorsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IncludeDeleted = _field
	return nil
}
func (p *BatchGetEvaluatorsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetEvaluatorsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluatorsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetEvaluatorsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetEvaluatorsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorIds() {
		if err = oprot.WriteFieldBegin("evaluator_ids", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.EvaluatorIds)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetEvaluatorsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeDeleted() {
		if err = oprot.WriteFieldBegin("include_deleted", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IncludeDeleted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchGetEvaluatorsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetEvaluatorsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetEvaluatorsRequest(%+v)", *p)

}

func (p *BatchGetEvaluatorsRequest) DeepEqual(ano *BatchGetEvaluatorsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorIds) {
		return false
	}
	if !p.Field3DeepEqual(ano.IncludeDeleted) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetEvaluatorsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchGetEvaluatorsRequest) Field2DeepEqual(src []int64) bool {

	if len(p.EvaluatorIds) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchGetEvaluatorsRequest) Field3DeepEqual(src *bool) bool {

	if p.IncludeDeleted == src {
		return true
	} else if p.IncludeDeleted == nil || src == nil {
		return false
	}
	if *p.IncludeDeleted != *src {
		return false
	}
	return true
}
func (p *BatchGetEvaluatorsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetEvaluatorsResponse struct {
	Evaluators []*evaluator.Evaluator `thrift:"evaluators,1,optional" frugal:"1,optional,list<evaluator.Evaluator>" form:"evaluators" json:"evaluators,omitempty"`
	BaseResp   *base.BaseResp         `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchGetEvaluatorsResponse() *BatchGetEvaluatorsResponse {
	return &BatchGetEvaluatorsResponse{}
}

func (p *BatchGetEvaluatorsResponse) InitDefault() {
}

var BatchGetEvaluatorsResponse_Evaluators_DEFAULT []*evaluator.Evaluator

func (p *BatchGetEvaluatorsResponse) GetEvaluators() (v []*evaluator.Evaluator) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluators() {
		return BatchGetEvaluatorsResponse_Evaluators_DEFAULT
	}
	return p.Evaluators
}

var BatchGetEvaluatorsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetEvaluatorsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetEvaluatorsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetEvaluatorsResponse) SetEvaluators(val []*evaluator.Evaluator) {
	p.Evaluators = val
}
func (p *BatchGetEvaluatorsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetEvaluatorsResponse = map[int16]string{
	1:   "evaluators",
	255: "BaseResp",
}

func (p *BatchGetEvaluatorsResponse) IsSetEvaluators() bool {
	return p.Evaluators != nil
}

func (p *BatchGetEvaluatorsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetEvaluatorsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetEvaluatorsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetEvaluatorsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*evaluator.Evaluator, 0, size)
	values := make([]evaluator.Evaluator, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Evaluators = _field
	return nil
}
func (p *BatchGetEvaluatorsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetEvaluatorsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluatorsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetEvaluatorsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluators() {
		if err = oprot.WriteFieldBegin("evaluators", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Evaluators)); err != nil {
			return err
		}
		for _, v := range p.Evaluators {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetEvaluatorsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetEvaluatorsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetEvaluatorsResponse(%+v)", *p)

}

func (p *BatchGetEvaluatorsResponse) DeepEqual(ano *BatchGetEvaluatorsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Evaluators) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetEvaluatorsResponse) Field1DeepEqual(src []*evaluator.Evaluator) bool {

	if len(p.Evaluators) != len(src) {
		return false
	}
	for i, v := range p.Evaluators {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetEvaluatorsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluatorRequest struct {
	WorkspaceID int64  `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" query:"workspace_id,required" `
	EvaluatorID *int64 `thrift:"evaluator_id,2,optional" frugal:"2,optional,i64" json:"evaluator_id" path:"evaluator_id" `
	// 是否查询已删除的评估器，默认不查询
	IncludeDeleted *bool      `thrift:"include_deleted,3,optional" frugal:"3,optional,bool" json:"include_deleted,omitempty" query:"include_deleted"`
	Base           *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetEvaluatorRequest() *GetEvaluatorRequest {
	return &GetEvaluatorRequest{}
}

func (p *GetEvaluatorRequest) InitDefault() {
}

func (p *GetEvaluatorRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var GetEvaluatorRequest_EvaluatorID_DEFAULT int64

func (p *GetEvaluatorRequest) GetEvaluatorID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorID() {
		return GetEvaluatorRequest_EvaluatorID_DEFAULT
	}
	return *p.EvaluatorID
}

var GetEvaluatorRequest_IncludeDeleted_DEFAULT bool

func (p *GetEvaluatorRequest) GetIncludeDeleted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIncludeDeleted() {
		return GetEvaluatorRequest_IncludeDeleted_DEFAULT
	}
	return *p.IncludeDeleted
}

var GetEvaluatorRequest_Base_DEFAULT *base.Base

func (p *GetEvaluatorRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetEvaluatorRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetEvaluatorRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *GetEvaluatorRequest) SetEvaluatorID(val *int64) {
	p.EvaluatorID = val
}
func (p *GetEvaluatorRequest) SetIncludeDeleted(val *bool) {
	p.IncludeDeleted = val
}
func (p *GetEvaluatorRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetEvaluatorRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_id",
	3:   "include_deleted",
	255: "Base",
}

func (p *GetEvaluatorRequest) IsSetEvaluatorID() bool {
	return p.EvaluatorID != nil
}

func (p *GetEvaluatorRequest) IsSetIncludeDeleted() bool {
	return p.IncludeDeleted != nil
}

func (p *GetEvaluatorRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetEvaluatorRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetEvaluatorRequest[fieldId]))
}

func (p *GetEvaluatorRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetEvaluatorRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *GetEvaluatorRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IncludeDeleted = _field
	return nil
}
func (p *GetEvaluatorRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetEvaluatorRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluatorRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorID() {
		if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluatorID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluatorRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeDeleted() {
		if err = oprot.WriteFieldBegin("include_deleted", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IncludeDeleted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetEvaluatorRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluatorRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorRequest(%+v)", *p)

}

func (p *GetEvaluatorRequest) DeepEqual(ano *GetEvaluatorRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.IncludeDeleted) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetEvaluatorRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *GetEvaluatorRequest) Field2DeepEqual(src *int64) bool {

	if p.EvaluatorID == src {
		return true
	} else if p.EvaluatorID == nil || src == nil {
		return false
	}
	if *p.EvaluatorID != *src {
		return false
	}
	return true
}
func (p *GetEvaluatorRequest) Field3DeepEqual(src *bool) bool {

	if p.IncludeDeleted == src {
		return true
	} else if p.IncludeDeleted == nil || src == nil {
		return false
	}
	if *p.IncludeDeleted != *src {
		return false
	}
	return true
}
func (p *GetEvaluatorRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluatorResponse struct {
	Evaluator *evaluator.Evaluator `thrift:"evaluator,1,optional" frugal:"1,optional,evaluator.Evaluator" form:"evaluator" json:"evaluator,omitempty"`
	BaseResp  *base.BaseResp       `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetEvaluatorResponse() *GetEvaluatorResponse {
	return &GetEvaluatorResponse{}
}

func (p *GetEvaluatorResponse) InitDefault() {
}

var GetEvaluatorResponse_Evaluator_DEFAULT *evaluator.Evaluator

func (p *GetEvaluatorResponse) GetEvaluator() (v *evaluator.Evaluator) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluator() {
		return GetEvaluatorResponse_Evaluator_DEFAULT
	}
	return p.Evaluator
}

var GetEvaluatorResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetEvaluatorResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetEvaluatorResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetEvaluatorResponse) SetEvaluator(val *evaluator.Evaluator) {
	p.Evaluator = val
}
func (p *GetEvaluatorResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetEvaluatorResponse = map[int16]string{
	1:   "evaluator",
	255: "BaseResp",
}

func (p *GetEvaluatorResponse) IsSetEvaluator() bool {
	return p.Evaluator != nil
}

func (p *GetEvaluatorResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetEvaluatorResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluatorResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluator()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Evaluator = _field
	return nil
}
func (p *GetEvaluatorResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetEvaluatorResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluator() {
		if err = oprot.WriteFieldBegin("evaluator", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Evaluator.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluatorResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluatorResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorResponse(%+v)", *p)

}

func (p *GetEvaluatorResponse) DeepEqual(ano *GetEvaluatorResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Evaluator) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetEvaluatorResponse) Field1DeepEqual(src *evaluator.Evaluator) bool {

	if !p.Evaluator.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetEvaluatorResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluatorRequest struct {
	Evaluator *evaluator.Evaluator `thrift:"evaluator,1,required" frugal:"1,required,evaluator.Evaluator" form:"evaluator,required" json:"evaluator,required"`
	Cid       *string              `thrift:"cid,100,optional" frugal:"100,optional,string" form:"cid" json:"cid,omitempty"`
	Base      *base.Base           `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateEvaluatorRequest() *CreateEvaluatorRequest {
	return &CreateEvaluatorRequest{}
}

func (p *CreateEvaluatorRequest) InitDefault() {
}

var CreateEvaluatorRequest_Evaluator_DEFAULT *evaluator.Evaluator

func (p *CreateEvaluatorRequest) GetEvaluator() (v *evaluator.Evaluator) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluator() {
		return CreateEvaluatorRequest_Evaluator_DEFAULT
	}
	return p.Evaluator
}

var CreateEvaluatorRequest_Cid_DEFAULT string

func (p *CreateEvaluatorRequest) GetCid() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCid() {
		return CreateEvaluatorRequest_Cid_DEFAULT
	}
	return *p.Cid
}

var CreateEvaluatorRequest_Base_DEFAULT *base.Base

func (p *CreateEvaluatorRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateEvaluatorRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateEvaluatorRequest) SetEvaluator(val *evaluator.Evaluator) {
	p.Evaluator = val
}
func (p *CreateEvaluatorRequest) SetCid(val *string) {
	p.Cid = val
}
func (p *CreateEvaluatorRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateEvaluatorRequest = map[int16]string{
	1:   "evaluator",
	100: "cid",
	255: "Base",
}

func (p *CreateEvaluatorRequest) IsSetEvaluator() bool {
	return p.Evaluator != nil
}

func (p *CreateEvaluatorRequest) IsSetCid() bool {
	return p.Cid != nil
}

func (p *CreateEvaluatorRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateEvaluatorRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluator bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluator = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluator {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluatorRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEvaluatorRequest[fieldId]))
}

func (p *CreateEvaluatorRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluator()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Evaluator = _field
	return nil
}
func (p *CreateEvaluatorRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cid = _field
	return nil
}
func (p *CreateEvaluatorRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateEvaluatorRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluatorRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluatorRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Evaluator.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluatorRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetCid() {
		if err = oprot.WriteFieldBegin("cid", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *CreateEvaluatorRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluatorRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluatorRequest(%+v)", *p)

}

func (p *CreateEvaluatorRequest) DeepEqual(ano *CreateEvaluatorRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Evaluator) {
		return false
	}
	if !p.Field100DeepEqual(ano.Cid) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateEvaluatorRequest) Field1DeepEqual(src *evaluator.Evaluator) bool {

	if !p.Evaluator.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluatorRequest) Field100DeepEqual(src *string) bool {

	if p.Cid == src {
		return true
	} else if p.Cid == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cid, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvaluatorRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluatorResponse struct {
	EvaluatorID *int64         `thrift:"evaluator_id,1,optional" frugal:"1,optional,i64" json:"evaluator_id" form:"evaluator_id" `
	BaseResp    *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateEvaluatorResponse() *CreateEvaluatorResponse {
	return &CreateEvaluatorResponse{}
}

func (p *CreateEvaluatorResponse) InitDefault() {
}

var CreateEvaluatorResponse_EvaluatorID_DEFAULT int64

func (p *CreateEvaluatorResponse) GetEvaluatorID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorID() {
		return CreateEvaluatorResponse_EvaluatorID_DEFAULT
	}
	return *p.EvaluatorID
}

var CreateEvaluatorResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateEvaluatorResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateEvaluatorResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateEvaluatorResponse) SetEvaluatorID(val *int64) {
	p.EvaluatorID = val
}
func (p *CreateEvaluatorResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateEvaluatorResponse = map[int16]string{
	1:   "evaluator_id",
	255: "BaseResp",
}

func (p *CreateEvaluatorResponse) IsSetEvaluatorID() bool {
	return p.EvaluatorID != nil
}

func (p *CreateEvaluatorResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateEvaluatorResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluatorResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvaluatorResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *CreateEvaluatorResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateEvaluatorResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluatorResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluatorResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorID() {
		if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluatorID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluatorResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluatorResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluatorResponse(%+v)", *p)

}

func (p *CreateEvaluatorResponse) DeepEqual(ano *CreateEvaluatorResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateEvaluatorResponse) Field1DeepEqual(src *int64) bool {

	if p.EvaluatorID == src {
		return true
	} else if p.EvaluatorID == nil || src == nil {
		return false
	}
	if *p.EvaluatorID != *src {
		return false
	}
	return true
}
func (p *CreateEvaluatorResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateEvaluatorDraftRequest struct {
	// 评估器 id
	EvaluatorID int64 `thrift:"evaluator_id,1,required" frugal:"1,required,i64" json:"evaluator_id" path:"evaluator_id,required" `
	// 空间 id
	WorkspaceID      int64                       `thrift:"workspace_id,2,required" frugal:"2,required,i64" json:"workspace_id" form:"workspace_id,required" `
	EvaluatorContent *evaluator.EvaluatorContent `thrift:"evaluator_content,3,required" frugal:"3,required,evaluator.EvaluatorContent" json:"evaluator_content" form:"evaluator_content,required" `
	EvaluatorType    evaluator.EvaluatorType     `thrift:"evaluator_type,4,required" frugal:"4,required,EvaluatorType" json:"evaluator_type" form:"evaluator_type,required" `
	Base             *base.Base                  `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdateEvaluatorDraftRequest() *UpdateEvaluatorDraftRequest {
	return &UpdateEvaluatorDraftRequest{}
}

func (p *UpdateEvaluatorDraftRequest) InitDefault() {
}

func (p *UpdateEvaluatorDraftRequest) GetEvaluatorID() (v int64) {
	if p != nil {
		return p.EvaluatorID
	}
	return
}

func (p *UpdateEvaluatorDraftRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var UpdateEvaluatorDraftRequest_EvaluatorContent_DEFAULT *evaluator.EvaluatorContent

func (p *UpdateEvaluatorDraftRequest) GetEvaluatorContent() (v *evaluator.EvaluatorContent) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorContent() {
		return UpdateEvaluatorDraftRequest_EvaluatorContent_DEFAULT
	}
	return p.EvaluatorContent
}

func (p *UpdateEvaluatorDraftRequest) GetEvaluatorType() (v evaluator.EvaluatorType) {
	if p != nil {
		return p.EvaluatorType
	}
	return
}

var UpdateEvaluatorDraftRequest_Base_DEFAULT *base.Base

func (p *UpdateEvaluatorDraftRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdateEvaluatorDraftRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateEvaluatorDraftRequest) SetEvaluatorID(val int64) {
	p.EvaluatorID = val
}
func (p *UpdateEvaluatorDraftRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *UpdateEvaluatorDraftRequest) SetEvaluatorContent(val *evaluator.EvaluatorContent) {
	p.EvaluatorContent = val
}
func (p *UpdateEvaluatorDraftRequest) SetEvaluatorType(val evaluator.EvaluatorType) {
	p.EvaluatorType = val
}
func (p *UpdateEvaluatorDraftRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateEvaluatorDraftRequest = map[int16]string{
	1:   "evaluator_id",
	2:   "workspace_id",
	3:   "evaluator_content",
	4:   "evaluator_type",
	255: "Base",
}

func (p *UpdateEvaluatorDraftRequest) IsSetEvaluatorContent() bool {
	return p.EvaluatorContent != nil
}

func (p *UpdateEvaluatorDraftRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateEvaluatorDraftRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluatorID bool = false
	var issetWorkspaceID bool = false
	var issetEvaluatorContent bool = false
	var issetEvaluatorType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorContent = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluatorID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetWorkspaceID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorContent {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorType {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEvaluatorDraftRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateEvaluatorDraftRequest[fieldId]))
}

func (p *UpdateEvaluatorDraftRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *UpdateEvaluatorDraftRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *UpdateEvaluatorDraftRequest) ReadField3(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorContent()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorContent = _field
	return nil
}
func (p *UpdateEvaluatorDraftRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field evaluator.EvaluatorType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = evaluator.EvaluatorType(v)
	}
	p.EvaluatorType = _field
	return nil
}
func (p *UpdateEvaluatorDraftRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdateEvaluatorDraftRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluatorDraftRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEvaluatorDraftRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateEvaluatorDraftRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdateEvaluatorDraftRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_content", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.EvaluatorContent.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UpdateEvaluatorDraftRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_type", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.EvaluatorType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *UpdateEvaluatorDraftRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateEvaluatorDraftRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEvaluatorDraftRequest(%+v)", *p)

}

func (p *UpdateEvaluatorDraftRequest) DeepEqual(ano *UpdateEvaluatorDraftRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.EvaluatorContent) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluatorType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateEvaluatorDraftRequest) Field1DeepEqual(src int64) bool {

	if p.EvaluatorID != src {
		return false
	}
	return true
}
func (p *UpdateEvaluatorDraftRequest) Field2DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *UpdateEvaluatorDraftRequest) Field3DeepEqual(src *evaluator.EvaluatorContent) bool {

	if !p.EvaluatorContent.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateEvaluatorDraftRequest) Field4DeepEqual(src evaluator.EvaluatorType) bool {

	if p.EvaluatorType != src {
		return false
	}
	return true
}
func (p *UpdateEvaluatorDraftRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateEvaluatorDraftResponse struct {
	Evaluator *evaluator.Evaluator `thrift:"evaluator,1,optional" frugal:"1,optional,evaluator.Evaluator" form:"evaluator" json:"evaluator,omitempty"`
	BaseResp  *base.BaseResp       `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewUpdateEvaluatorDraftResponse() *UpdateEvaluatorDraftResponse {
	return &UpdateEvaluatorDraftResponse{}
}

func (p *UpdateEvaluatorDraftResponse) InitDefault() {
}

var UpdateEvaluatorDraftResponse_Evaluator_DEFAULT *evaluator.Evaluator

func (p *UpdateEvaluatorDraftResponse) GetEvaluator() (v *evaluator.Evaluator) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluator() {
		return UpdateEvaluatorDraftResponse_Evaluator_DEFAULT
	}
	return p.Evaluator
}

var UpdateEvaluatorDraftResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateEvaluatorDraftResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdateEvaluatorDraftResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateEvaluatorDraftResponse) SetEvaluator(val *evaluator.Evaluator) {
	p.Evaluator = val
}
func (p *UpdateEvaluatorDraftResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateEvaluatorDraftResponse = map[int16]string{
	1:   "evaluator",
	255: "BaseResp",
}

func (p *UpdateEvaluatorDraftResponse) IsSetEvaluator() bool {
	return p.Evaluator != nil
}

func (p *UpdateEvaluatorDraftResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateEvaluatorDraftResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEvaluatorDraftResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateEvaluatorDraftResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluator()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Evaluator = _field
	return nil
}
func (p *UpdateEvaluatorDraftResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdateEvaluatorDraftResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluatorDraftResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEvaluatorDraftResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluator() {
		if err = oprot.WriteFieldBegin("evaluator", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Evaluator.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateEvaluatorDraftResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateEvaluatorDraftResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEvaluatorDraftResponse(%+v)", *p)

}

func (p *UpdateEvaluatorDraftResponse) DeepEqual(ano *UpdateEvaluatorDraftResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Evaluator) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateEvaluatorDraftResponse) Field1DeepEqual(src *evaluator.Evaluator) bool {

	if !p.Evaluator.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateEvaluatorDraftResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateEvaluatorRequest struct {
	// 评估器 id
	EvaluatorID int64 `thrift:"evaluator_id,1,required" frugal:"1,required,i64" json:"evaluator_id" path:"evaluator_id,required" `
	// 空间 id
	WorkspaceID   int64                   `thrift:"workspace_id,2,required" frugal:"2,required,i64" json:"workspace_id" form:"workspace_id,required" `
	EvaluatorType evaluator.EvaluatorType `thrift:"evaluator_type,3,required" frugal:"3,required,EvaluatorType" json:"evaluator_type" form:"evaluator_type,required" `
	// 展示用名称
	Name *string `thrift:"name,4,optional" frugal:"4,optional,string" json:"name" form:"name" `
	// 描述
	Description *string `thrift:"description,5,optional" frugal:"5,optional,string" json:"description" form:"description" `
	// 是否预置评估器
	Builtin   *bool      `thrift:"builtin,11,optional" frugal:"11,optional,bool" json:"builtin" form:"builtin" `
	Benchmark *string    `thrift:"benchmark,12,optional" frugal:"12,optional,string" json:"benchmark" form:"benchmark" `
	Vendor    *string    `thrift:"vendor,13,optional" frugal:"13,optional,string" json:"vendor" form:"vendor" `
	Base      *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdateEvaluatorRequest() *UpdateEvaluatorRequest {
	return &UpdateEvaluatorRequest{}
}

func (p *UpdateEvaluatorRequest) InitDefault() {
}

func (p *UpdateEvaluatorRequest) GetEvaluatorID() (v int64) {
	if p != nil {
		return p.EvaluatorID
	}
	return
}

func (p *UpdateEvaluatorRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *UpdateEvaluatorRequest) GetEvaluatorType() (v evaluator.EvaluatorType) {
	if p != nil {
		return p.EvaluatorType
	}
	return
}

var UpdateEvaluatorRequest_Name_DEFAULT string

func (p *UpdateEvaluatorRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return UpdateEvaluatorRequest_Name_DEFAULT
	}
	return *p.Name
}

var UpdateEvaluatorRequest_Description_DEFAULT string

func (p *UpdateEvaluatorRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return UpdateEvaluatorRequest_Description_DEFAULT
	}
	return *p.Description
}

var UpdateEvaluatorRequest_Builtin_DEFAULT bool

func (p *UpdateEvaluatorRequest) GetBuiltin() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetBuiltin() {
		return UpdateEvaluatorRequest_Builtin_DEFAULT
	}
	return *p.Builtin
}

var UpdateEvaluatorRequest_Benchmark_DEFAULT string

func (p *UpdateEvaluatorRequest) GetBenchmark() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetBenchmark() {
		return UpdateEvaluatorRequest_Benchmark_DEFAULT
	}
	return *p.Benchmark
}

var UpdateEvaluatorRequest_Vendor_DEFAULT string

func (p *UpdateEvaluatorRequest) GetVendor() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVendor() {
		return UpdateEvaluatorRequest_Vendor_DEFAULT
	}
	return *p.Vendor
}

var UpdateEvaluatorRequest_Base_DEFAULT *base.Base

func (p *UpdateEvaluatorRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdateEvaluatorRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateEvaluatorRequest) SetEvaluatorID(val int64) {
	p.EvaluatorID = val
}
func (p *UpdateEvaluatorRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *UpdateEvaluatorRequest) SetEvaluatorType(val evaluator.EvaluatorType) {
	p.EvaluatorType = val
}
func (p *UpdateEvaluatorRequest) SetName(val *string) {
	p.Name = val
}
func (p *UpdateEvaluatorRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *UpdateEvaluatorRequest) SetBuiltin(val *bool) {
	p.Builtin = val
}
func (p *UpdateEvaluatorRequest) SetBenchmark(val *string) {
	p.Benchmark = val
}
func (p *UpdateEvaluatorRequest) SetVendor(val *string) {
	p.Vendor = val
}
func (p *UpdateEvaluatorRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateEvaluatorRequest = map[int16]string{
	1:   "evaluator_id",
	2:   "workspace_id",
	3:   "evaluator_type",
	4:   "name",
	5:   "description",
	11:  "builtin",
	12:  "benchmark",
	13:  "vendor",
	255: "Base",
}

func (p *UpdateEvaluatorRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *UpdateEvaluatorRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *UpdateEvaluatorRequest) IsSetBuiltin() bool {
	return p.Builtin != nil
}

func (p *UpdateEvaluatorRequest) IsSetBenchmark() bool {
	return p.Benchmark != nil
}

func (p *UpdateEvaluatorRequest) IsSetVendor() bool {
	return p.Vendor != nil
}

func (p *UpdateEvaluatorRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateEvaluatorRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluatorID bool = false
	var issetWorkspaceID bool = false
	var issetEvaluatorType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluatorID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetWorkspaceID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEvaluatorRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateEvaluatorRequest[fieldId]))
}

func (p *UpdateEvaluatorRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *UpdateEvaluatorRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *UpdateEvaluatorRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field evaluator.EvaluatorType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = evaluator.EvaluatorType(v)
	}
	p.EvaluatorType = _field
	return nil
}
func (p *UpdateEvaluatorRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *UpdateEvaluatorRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *UpdateEvaluatorRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Builtin = _field
	return nil
}
func (p *UpdateEvaluatorRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Benchmark = _field
	return nil
}
func (p *UpdateEvaluatorRequest) ReadField13(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Vendor = _field
	return nil
}
func (p *UpdateEvaluatorRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdateEvaluatorRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluatorRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEvaluatorRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateEvaluatorRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdateEvaluatorRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_type", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.EvaluatorType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UpdateEvaluatorRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *UpdateEvaluatorRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *UpdateEvaluatorRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetBuiltin() {
		if err = oprot.WriteFieldBegin("builtin", thrift.BOOL, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Builtin); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *UpdateEvaluatorRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetBenchmark() {
		if err = oprot.WriteFieldBegin("benchmark", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Benchmark); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *UpdateEvaluatorRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetVendor() {
		if err = oprot.WriteFieldBegin("vendor", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Vendor); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}
func (p *UpdateEvaluatorRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateEvaluatorRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEvaluatorRequest(%+v)", *p)

}

func (p *UpdateEvaluatorRequest) DeepEqual(ano *UpdateEvaluatorRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.EvaluatorType) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field11DeepEqual(ano.Builtin) {
		return false
	}
	if !p.Field12DeepEqual(ano.Benchmark) {
		return false
	}
	if !p.Field13DeepEqual(ano.Vendor) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateEvaluatorRequest) Field1DeepEqual(src int64) bool {

	if p.EvaluatorID != src {
		return false
	}
	return true
}
func (p *UpdateEvaluatorRequest) Field2DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *UpdateEvaluatorRequest) Field3DeepEqual(src evaluator.EvaluatorType) bool {

	if p.EvaluatorType != src {
		return false
	}
	return true
}
func (p *UpdateEvaluatorRequest) Field4DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateEvaluatorRequest) Field5DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateEvaluatorRequest) Field11DeepEqual(src *bool) bool {

	if p.Builtin == src {
		return true
	} else if p.Builtin == nil || src == nil {
		return false
	}
	if *p.Builtin != *src {
		return false
	}
	return true
}
func (p *UpdateEvaluatorRequest) Field12DeepEqual(src *string) bool {

	if p.Benchmark == src {
		return true
	} else if p.Benchmark == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Benchmark, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateEvaluatorRequest) Field13DeepEqual(src *string) bool {

	if p.Vendor == src {
		return true
	} else if p.Vendor == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Vendor, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateEvaluatorRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateEvaluatorResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewUpdateEvaluatorResponse() *UpdateEvaluatorResponse {
	return &UpdateEvaluatorResponse{}
}

func (p *UpdateEvaluatorResponse) InitDefault() {
}

var UpdateEvaluatorResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateEvaluatorResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdateEvaluatorResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateEvaluatorResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateEvaluatorResponse = map[int16]string{
	255: "BaseResp",
}

func (p *UpdateEvaluatorResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateEvaluatorResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEvaluatorResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateEvaluatorResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdateEvaluatorResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluatorResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEvaluatorResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateEvaluatorResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEvaluatorResponse(%+v)", *p)

}

func (p *UpdateEvaluatorResponse) DeepEqual(ano *UpdateEvaluatorResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateEvaluatorResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CloneEvaluatorRequest struct {
	WorkspaceID int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	EvaluatorID int64      `thrift:"evaluator_id,2,required" frugal:"2,required,i64" json:"evaluator_id" path:"evaluator_id,required" `
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCloneEvaluatorRequest() *CloneEvaluatorRequest {
	return &CloneEvaluatorRequest{}
}

func (p *CloneEvaluatorRequest) InitDefault() {
}

func (p *CloneEvaluatorRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *CloneEvaluatorRequest) GetEvaluatorID() (v int64) {
	if p != nil {
		return p.EvaluatorID
	}
	return
}

var CloneEvaluatorRequest_Base_DEFAULT *base.Base

func (p *CloneEvaluatorRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CloneEvaluatorRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CloneEvaluatorRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *CloneEvaluatorRequest) SetEvaluatorID(val int64) {
	p.EvaluatorID = val
}
func (p *CloneEvaluatorRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CloneEvaluatorRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_id",
	255: "Base",
}

func (p *CloneEvaluatorRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CloneEvaluatorRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluatorID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CloneEvaluatorRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CloneEvaluatorRequest[fieldId]))
}

func (p *CloneEvaluatorRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CloneEvaluatorRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *CloneEvaluatorRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CloneEvaluatorRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CloneEvaluatorRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CloneEvaluatorRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CloneEvaluatorRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CloneEvaluatorRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CloneEvaluatorRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloneEvaluatorRequest(%+v)", *p)

}

func (p *CloneEvaluatorRequest) DeepEqual(ano *CloneEvaluatorRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CloneEvaluatorRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *CloneEvaluatorRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluatorID != src {
		return false
	}
	return true
}
func (p *CloneEvaluatorRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CloneEvaluatorResponse struct {
	EvaluatorID *int64         `thrift:"evaluator_id,1,optional" frugal:"1,optional,i64" json:"evaluator_id" form:"evaluator_id" `
	BaseResp    *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCloneEvaluatorResponse() *CloneEvaluatorResponse {
	return &CloneEvaluatorResponse{}
}

func (p *CloneEvaluatorResponse) InitDefault() {
}

var CloneEvaluatorResponse_EvaluatorID_DEFAULT int64

func (p *CloneEvaluatorResponse) GetEvaluatorID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorID() {
		return CloneEvaluatorResponse_EvaluatorID_DEFAULT
	}
	return *p.EvaluatorID
}

var CloneEvaluatorResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CloneEvaluatorResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CloneEvaluatorResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CloneEvaluatorResponse) SetEvaluatorID(val *int64) {
	p.EvaluatorID = val
}
func (p *CloneEvaluatorResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CloneEvaluatorResponse = map[int16]string{
	1:   "evaluator_id",
	255: "BaseResp",
}

func (p *CloneEvaluatorResponse) IsSetEvaluatorID() bool {
	return p.EvaluatorID != nil
}

func (p *CloneEvaluatorResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CloneEvaluatorResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CloneEvaluatorResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CloneEvaluatorResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *CloneEvaluatorResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CloneEvaluatorResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CloneEvaluatorResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CloneEvaluatorResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorID() {
		if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluatorID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CloneEvaluatorResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CloneEvaluatorResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloneEvaluatorResponse(%+v)", *p)

}

func (p *CloneEvaluatorResponse) DeepEqual(ano *CloneEvaluatorResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CloneEvaluatorResponse) Field1DeepEqual(src *int64) bool {

	if p.EvaluatorID == src {
		return true
	} else if p.EvaluatorID == nil || src == nil {
		return false
	}
	if *p.EvaluatorID != *src {
		return false
	}
	return true
}
func (p *CloneEvaluatorResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluatorVersionsRequest struct {
	WorkspaceID   int64             `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	EvaluatorID   *int64            `thrift:"evaluator_id,2,optional" frugal:"2,optional,i64" json:"evaluator_id" path:"evaluator_id" `
	QueryVersions []string          `thrift:"query_versions,3,optional" frugal:"3,optional,list<string>" form:"query_versions" json:"query_versions,omitempty"`
	PageSize      *int32            `thrift:"page_size,101,optional" frugal:"101,optional,i32" form:"page_size" json:"page_size,omitempty"`
	PageNumber    *int32            `thrift:"page_number,102,optional" frugal:"102,optional,i32" form:"page_number" json:"page_number,omitempty"`
	OrderBys      []*common.OrderBy `thrift:"order_bys,103,optional" frugal:"103,optional,list<common.OrderBy>" form:"order_bys" json:"order_bys,omitempty"`
	Base          *base.Base        `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListEvaluatorVersionsRequest() *ListEvaluatorVersionsRequest {
	return &ListEvaluatorVersionsRequest{}
}

func (p *ListEvaluatorVersionsRequest) InitDefault() {
}

func (p *ListEvaluatorVersionsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var ListEvaluatorVersionsRequest_EvaluatorID_DEFAULT int64

func (p *ListEvaluatorVersionsRequest) GetEvaluatorID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorID() {
		return ListEvaluatorVersionsRequest_EvaluatorID_DEFAULT
	}
	return *p.EvaluatorID
}

var ListEvaluatorVersionsRequest_QueryVersions_DEFAULT []string

func (p *ListEvaluatorVersionsRequest) GetQueryVersions() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetQueryVersions() {
		return ListEvaluatorVersionsRequest_QueryVersions_DEFAULT
	}
	return p.QueryVersions
}

var ListEvaluatorVersionsRequest_PageSize_DEFAULT int32

func (p *ListEvaluatorVersionsRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListEvaluatorVersionsRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListEvaluatorVersionsRequest_PageNumber_DEFAULT int32

func (p *ListEvaluatorVersionsRequest) GetPageNumber() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNumber() {
		return ListEvaluatorVersionsRequest_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var ListEvaluatorVersionsRequest_OrderBys_DEFAULT []*common.OrderBy

func (p *ListEvaluatorVersionsRequest) GetOrderBys() (v []*common.OrderBy) {
	if p == nil {
		return
	}
	if !p.IsSetOrderBys() {
		return ListEvaluatorVersionsRequest_OrderBys_DEFAULT
	}
	return p.OrderBys
}

var ListEvaluatorVersionsRequest_Base_DEFAULT *base.Base

func (p *ListEvaluatorVersionsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListEvaluatorVersionsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListEvaluatorVersionsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ListEvaluatorVersionsRequest) SetEvaluatorID(val *int64) {
	p.EvaluatorID = val
}
func (p *ListEvaluatorVersionsRequest) SetQueryVersions(val []string) {
	p.QueryVersions = val
}
func (p *ListEvaluatorVersionsRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListEvaluatorVersionsRequest) SetPageNumber(val *int32) {
	p.PageNumber = val
}
func (p *ListEvaluatorVersionsRequest) SetOrderBys(val []*common.OrderBy) {
	p.OrderBys = val
}
func (p *ListEvaluatorVersionsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListEvaluatorVersionsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_id",
	3:   "query_versions",
	101: "page_size",
	102: "page_number",
	103: "order_bys",
	255: "Base",
}

func (p *ListEvaluatorVersionsRequest) IsSetEvaluatorID() bool {
	return p.EvaluatorID != nil
}

func (p *ListEvaluatorVersionsRequest) IsSetQueryVersions() bool {
	return p.QueryVersions != nil
}

func (p *ListEvaluatorVersionsRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListEvaluatorVersionsRequest) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *ListEvaluatorVersionsRequest) IsSetOrderBys() bool {
	return p.OrderBys != nil
}

func (p *ListEvaluatorVersionsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListEvaluatorVersionsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluatorVersionsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListEvaluatorVersionsRequest[fieldId]))
}

func (p *ListEvaluatorVersionsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListEvaluatorVersionsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *ListEvaluatorVersionsRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.QueryVersions = _field
	return nil
}
func (p *ListEvaluatorVersionsRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListEvaluatorVersionsRequest) ReadField102(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNumber = _field
	return nil
}
func (p *ListEvaluatorVersionsRequest) ReadField103(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*common.OrderBy, 0, size)
	values := make([]common.OrderBy, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OrderBys = _field
	return nil
}
func (p *ListEvaluatorVersionsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListEvaluatorVersionsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluatorVersionsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluatorVersionsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluatorVersionsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorID() {
		if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluatorID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluatorVersionsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueryVersions() {
		if err = oprot.WriteFieldBegin("query_versions", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.QueryVersions)); err != nil {
			return err
		}
		for _, v := range p.QueryVersions {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluatorVersionsRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluatorVersionsRequest) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("page_number", thrift.I32, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *ListEvaluatorVersionsRequest) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBys() {
		if err = oprot.WriteFieldBegin("order_bys", thrift.LIST, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderBys)); err != nil {
			return err
		}
		for _, v := range p.OrderBys {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *ListEvaluatorVersionsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluatorVersionsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluatorVersionsRequest(%+v)", *p)

}

func (p *ListEvaluatorVersionsRequest) DeepEqual(ano *ListEvaluatorVersionsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.QueryVersions) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field102DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field103DeepEqual(ano.OrderBys) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListEvaluatorVersionsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ListEvaluatorVersionsRequest) Field2DeepEqual(src *int64) bool {

	if p.EvaluatorID == src {
		return true
	} else if p.EvaluatorID == nil || src == nil {
		return false
	}
	if *p.EvaluatorID != *src {
		return false
	}
	return true
}
func (p *ListEvaluatorVersionsRequest) Field3DeepEqual(src []string) bool {

	if len(p.QueryVersions) != len(src) {
		return false
	}
	for i, v := range p.QueryVersions {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListEvaluatorVersionsRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListEvaluatorVersionsRequest) Field102DeepEqual(src *int32) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if *p.PageNumber != *src {
		return false
	}
	return true
}
func (p *ListEvaluatorVersionsRequest) Field103DeepEqual(src []*common.OrderBy) bool {

	if len(p.OrderBys) != len(src) {
		return false
	}
	for i, v := range p.OrderBys {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluatorVersionsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluatorVersionsResponse struct {
	EvaluatorVersions []*evaluator.EvaluatorVersion `thrift:"evaluator_versions,1,optional" frugal:"1,optional,list<evaluator.EvaluatorVersion>" form:"evaluator_versions" json:"evaluator_versions,omitempty"`
	Total             *int64                        `thrift:"total,10,optional" frugal:"10,optional,i64" json:"total" form:"total" `
	BaseResp          *base.BaseResp                `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListEvaluatorVersionsResponse() *ListEvaluatorVersionsResponse {
	return &ListEvaluatorVersionsResponse{}
}

func (p *ListEvaluatorVersionsResponse) InitDefault() {
}

var ListEvaluatorVersionsResponse_EvaluatorVersions_DEFAULT []*evaluator.EvaluatorVersion

func (p *ListEvaluatorVersionsResponse) GetEvaluatorVersions() (v []*evaluator.EvaluatorVersion) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorVersions() {
		return ListEvaluatorVersionsResponse_EvaluatorVersions_DEFAULT
	}
	return p.EvaluatorVersions
}

var ListEvaluatorVersionsResponse_Total_DEFAULT int64

func (p *ListEvaluatorVersionsResponse) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListEvaluatorVersionsResponse_Total_DEFAULT
	}
	return *p.Total
}

var ListEvaluatorVersionsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListEvaluatorVersionsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListEvaluatorVersionsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListEvaluatorVersionsResponse) SetEvaluatorVersions(val []*evaluator.EvaluatorVersion) {
	p.EvaluatorVersions = val
}
func (p *ListEvaluatorVersionsResponse) SetTotal(val *int64) {
	p.Total = val
}
func (p *ListEvaluatorVersionsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListEvaluatorVersionsResponse = map[int16]string{
	1:   "evaluator_versions",
	10:  "total",
	255: "BaseResp",
}

func (p *ListEvaluatorVersionsResponse) IsSetEvaluatorVersions() bool {
	return p.EvaluatorVersions != nil
}

func (p *ListEvaluatorVersionsResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListEvaluatorVersionsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListEvaluatorVersionsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluatorVersionsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluatorVersionsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*evaluator.EvaluatorVersion, 0, size)
	values := make([]evaluator.EvaluatorVersion, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorVersions = _field
	return nil
}
func (p *ListEvaluatorVersionsResponse) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *ListEvaluatorVersionsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListEvaluatorVersionsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluatorVersionsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluatorVersionsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorVersions() {
		if err = oprot.WriteFieldBegin("evaluator_versions", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvaluatorVersions)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorVersions {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluatorVersionsResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *ListEvaluatorVersionsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluatorVersionsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluatorVersionsResponse(%+v)", *p)

}

func (p *ListEvaluatorVersionsResponse) DeepEqual(ano *ListEvaluatorVersionsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorVersions) {
		return false
	}
	if !p.Field10DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListEvaluatorVersionsResponse) Field1DeepEqual(src []*evaluator.EvaluatorVersion) bool {

	if len(p.EvaluatorVersions) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorVersions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluatorVersionsResponse) Field10DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *ListEvaluatorVersionsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluatorVersionRequest struct {
	WorkspaceID        int64 `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" query:"workspace_id,required" `
	EvaluatorVersionID int64 `thrift:"evaluator_version_id,2,required" frugal:"2,required,i64" json:"evaluator_version_id" path:"evaluator_version_id,required" `
	// 是否查询已删除的评估器，默认不查询
	IncludeDeleted *bool `thrift:"include_deleted,3,optional" frugal:"3,optional,bool" json:"include_deleted,omitempty" query:"include_deleted"`
	// 是否预置评估器
	Builtin *bool      `thrift:"builtin,4,optional" frugal:"4,optional,bool" json:"builtin" query:"builtin" `
	Base    *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetEvaluatorVersionRequest() *GetEvaluatorVersionRequest {
	return &GetEvaluatorVersionRequest{}
}

func (p *GetEvaluatorVersionRequest) InitDefault() {
}

func (p *GetEvaluatorVersionRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *GetEvaluatorVersionRequest) GetEvaluatorVersionID() (v int64) {
	if p != nil {
		return p.EvaluatorVersionID
	}
	return
}

var GetEvaluatorVersionRequest_IncludeDeleted_DEFAULT bool

func (p *GetEvaluatorVersionRequest) GetIncludeDeleted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIncludeDeleted() {
		return GetEvaluatorVersionRequest_IncludeDeleted_DEFAULT
	}
	return *p.IncludeDeleted
}

var GetEvaluatorVersionRequest_Builtin_DEFAULT bool

func (p *GetEvaluatorVersionRequest) GetBuiltin() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetBuiltin() {
		return GetEvaluatorVersionRequest_Builtin_DEFAULT
	}
	return *p.Builtin
}

var GetEvaluatorVersionRequest_Base_DEFAULT *base.Base

func (p *GetEvaluatorVersionRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetEvaluatorVersionRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetEvaluatorVersionRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *GetEvaluatorVersionRequest) SetEvaluatorVersionID(val int64) {
	p.EvaluatorVersionID = val
}
func (p *GetEvaluatorVersionRequest) SetIncludeDeleted(val *bool) {
	p.IncludeDeleted = val
}
func (p *GetEvaluatorVersionRequest) SetBuiltin(val *bool) {
	p.Builtin = val
}
func (p *GetEvaluatorVersionRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetEvaluatorVersionRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_version_id",
	3:   "include_deleted",
	4:   "builtin",
	255: "Base",
}

func (p *GetEvaluatorVersionRequest) IsSetIncludeDeleted() bool {
	return p.IncludeDeleted != nil
}

func (p *GetEvaluatorVersionRequest) IsSetBuiltin() bool {
	return p.Builtin != nil
}

func (p *GetEvaluatorVersionRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetEvaluatorVersionRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluatorVersionID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorVersionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorVersionID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorVersionRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetEvaluatorVersionRequest[fieldId]))
}

func (p *GetEvaluatorVersionRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetEvaluatorVersionRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorVersionID = _field
	return nil
}
func (p *GetEvaluatorVersionRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IncludeDeleted = _field
	return nil
}
func (p *GetEvaluatorVersionRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Builtin = _field
	return nil
}
func (p *GetEvaluatorVersionRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetEvaluatorVersionRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorVersionRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorVersionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluatorVersionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_version_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorVersionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluatorVersionRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeDeleted() {
		if err = oprot.WriteFieldBegin("include_deleted", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IncludeDeleted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetEvaluatorVersionRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBuiltin() {
		if err = oprot.WriteFieldBegin("builtin", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Builtin); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *GetEvaluatorVersionRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluatorVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorVersionRequest(%+v)", *p)

}

func (p *GetEvaluatorVersionRequest) DeepEqual(ano *GetEvaluatorVersionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorVersionID) {
		return false
	}
	if !p.Field3DeepEqual(ano.IncludeDeleted) {
		return false
	}
	if !p.Field4DeepEqual(ano.Builtin) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetEvaluatorVersionRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *GetEvaluatorVersionRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluatorVersionID != src {
		return false
	}
	return true
}
func (p *GetEvaluatorVersionRequest) Field3DeepEqual(src *bool) bool {

	if p.IncludeDeleted == src {
		return true
	} else if p.IncludeDeleted == nil || src == nil {
		return false
	}
	if *p.IncludeDeleted != *src {
		return false
	}
	return true
}
func (p *GetEvaluatorVersionRequest) Field4DeepEqual(src *bool) bool {

	if p.Builtin == src {
		return true
	} else if p.Builtin == nil || src == nil {
		return false
	}
	if *p.Builtin != *src {
		return false
	}
	return true
}
func (p *GetEvaluatorVersionRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluatorVersionResponse struct {
	Evaluator *evaluator.Evaluator `thrift:"evaluator,1,optional" frugal:"1,optional,evaluator.Evaluator" form:"evaluator" json:"evaluator,omitempty"`
	BaseResp  *base.BaseResp       `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetEvaluatorVersionResponse() *GetEvaluatorVersionResponse {
	return &GetEvaluatorVersionResponse{}
}

func (p *GetEvaluatorVersionResponse) InitDefault() {
}

var GetEvaluatorVersionResponse_Evaluator_DEFAULT *evaluator.Evaluator

func (p *GetEvaluatorVersionResponse) GetEvaluator() (v *evaluator.Evaluator) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluator() {
		return GetEvaluatorVersionResponse_Evaluator_DEFAULT
	}
	return p.Evaluator
}

var GetEvaluatorVersionResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetEvaluatorVersionResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetEvaluatorVersionResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetEvaluatorVersionResponse) SetEvaluator(val *evaluator.Evaluator) {
	p.Evaluator = val
}
func (p *GetEvaluatorVersionResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetEvaluatorVersionResponse = map[int16]string{
	1:   "evaluator",
	255: "BaseResp",
}

func (p *GetEvaluatorVersionResponse) IsSetEvaluator() bool {
	return p.Evaluator != nil
}

func (p *GetEvaluatorVersionResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetEvaluatorVersionResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorVersionResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvaluatorVersionResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluator()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Evaluator = _field
	return nil
}
func (p *GetEvaluatorVersionResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetEvaluatorVersionResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorVersionResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorVersionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluator() {
		if err = oprot.WriteFieldBegin("evaluator", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Evaluator.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluatorVersionResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluatorVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorVersionResponse(%+v)", *p)

}

func (p *GetEvaluatorVersionResponse) DeepEqual(ano *GetEvaluatorVersionResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Evaluator) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetEvaluatorVersionResponse) Field1DeepEqual(src *evaluator.Evaluator) bool {

	if !p.Evaluator.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetEvaluatorVersionResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetEvaluatorVersionsRequest struct {
	WorkspaceID         int64   `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	EvaluatorVersionIds []int64 `thrift:"evaluator_version_ids,2,optional" frugal:"2,optional,list<i64>" json:"evaluator_version_ids" form:"evaluator_version_ids" `
	// 是否查询已删除的评估器，默认不查询
	IncludeDeleted *bool      `thrift:"include_deleted,3,optional" frugal:"3,optional,bool" form:"include_deleted" json:"include_deleted,omitempty"`
	Base           *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetEvaluatorVersionsRequest() *BatchGetEvaluatorVersionsRequest {
	return &BatchGetEvaluatorVersionsRequest{}
}

func (p *BatchGetEvaluatorVersionsRequest) InitDefault() {
}

func (p *BatchGetEvaluatorVersionsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var BatchGetEvaluatorVersionsRequest_EvaluatorVersionIds_DEFAULT []int64

func (p *BatchGetEvaluatorVersionsRequest) GetEvaluatorVersionIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorVersionIds() {
		return BatchGetEvaluatorVersionsRequest_EvaluatorVersionIds_DEFAULT
	}
	return p.EvaluatorVersionIds
}

var BatchGetEvaluatorVersionsRequest_IncludeDeleted_DEFAULT bool

func (p *BatchGetEvaluatorVersionsRequest) GetIncludeDeleted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIncludeDeleted() {
		return BatchGetEvaluatorVersionsRequest_IncludeDeleted_DEFAULT
	}
	return *p.IncludeDeleted
}

var BatchGetEvaluatorVersionsRequest_Base_DEFAULT *base.Base

func (p *BatchGetEvaluatorVersionsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetEvaluatorVersionsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetEvaluatorVersionsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchGetEvaluatorVersionsRequest) SetEvaluatorVersionIds(val []int64) {
	p.EvaluatorVersionIds = val
}
func (p *BatchGetEvaluatorVersionsRequest) SetIncludeDeleted(val *bool) {
	p.IncludeDeleted = val
}
func (p *BatchGetEvaluatorVersionsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetEvaluatorVersionsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_version_ids",
	3:   "include_deleted",
	255: "Base",
}

func (p *BatchGetEvaluatorVersionsRequest) IsSetEvaluatorVersionIds() bool {
	return p.EvaluatorVersionIds != nil
}

func (p *BatchGetEvaluatorVersionsRequest) IsSetIncludeDeleted() bool {
	return p.IncludeDeleted != nil
}

func (p *BatchGetEvaluatorVersionsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetEvaluatorVersionsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetEvaluatorVersionsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetEvaluatorVersionsRequest[fieldId]))
}

func (p *BatchGetEvaluatorVersionsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetEvaluatorVersionsRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorVersionIds = _field
	return nil
}
func (p *BatchGetEvaluatorVersionsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IncludeDeleted = _field
	return nil
}
func (p *BatchGetEvaluatorVersionsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetEvaluatorVersionsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluatorVersionsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetEvaluatorVersionsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetEvaluatorVersionsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorVersionIds() {
		if err = oprot.WriteFieldBegin("evaluator_version_ids", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.EvaluatorVersionIds)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorVersionIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetEvaluatorVersionsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeDeleted() {
		if err = oprot.WriteFieldBegin("include_deleted", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IncludeDeleted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchGetEvaluatorVersionsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetEvaluatorVersionsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetEvaluatorVersionsRequest(%+v)", *p)

}

func (p *BatchGetEvaluatorVersionsRequest) DeepEqual(ano *BatchGetEvaluatorVersionsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorVersionIds) {
		return false
	}
	if !p.Field3DeepEqual(ano.IncludeDeleted) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetEvaluatorVersionsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchGetEvaluatorVersionsRequest) Field2DeepEqual(src []int64) bool {

	if len(p.EvaluatorVersionIds) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorVersionIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchGetEvaluatorVersionsRequest) Field3DeepEqual(src *bool) bool {

	if p.IncludeDeleted == src {
		return true
	} else if p.IncludeDeleted == nil || src == nil {
		return false
	}
	if *p.IncludeDeleted != *src {
		return false
	}
	return true
}
func (p *BatchGetEvaluatorVersionsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetEvaluatorVersionsResponse struct {
	Evaluators []*evaluator.Evaluator `thrift:"evaluators,1,optional" frugal:"1,optional,list<evaluator.Evaluator>" form:"evaluators" json:"evaluators,omitempty"`
	BaseResp   *base.BaseResp         `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchGetEvaluatorVersionsResponse() *BatchGetEvaluatorVersionsResponse {
	return &BatchGetEvaluatorVersionsResponse{}
}

func (p *BatchGetEvaluatorVersionsResponse) InitDefault() {
}

var BatchGetEvaluatorVersionsResponse_Evaluators_DEFAULT []*evaluator.Evaluator

func (p *BatchGetEvaluatorVersionsResponse) GetEvaluators() (v []*evaluator.Evaluator) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluators() {
		return BatchGetEvaluatorVersionsResponse_Evaluators_DEFAULT
	}
	return p.Evaluators
}

var BatchGetEvaluatorVersionsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetEvaluatorVersionsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetEvaluatorVersionsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetEvaluatorVersionsResponse) SetEvaluators(val []*evaluator.Evaluator) {
	p.Evaluators = val
}
func (p *BatchGetEvaluatorVersionsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetEvaluatorVersionsResponse = map[int16]string{
	1:   "evaluators",
	255: "BaseResp",
}

func (p *BatchGetEvaluatorVersionsResponse) IsSetEvaluators() bool {
	return p.Evaluators != nil
}

func (p *BatchGetEvaluatorVersionsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetEvaluatorVersionsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetEvaluatorVersionsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetEvaluatorVersionsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*evaluator.Evaluator, 0, size)
	values := make([]evaluator.Evaluator, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Evaluators = _field
	return nil
}
func (p *BatchGetEvaluatorVersionsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetEvaluatorVersionsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluatorVersionsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetEvaluatorVersionsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluators() {
		if err = oprot.WriteFieldBegin("evaluators", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Evaluators)); err != nil {
			return err
		}
		for _, v := range p.Evaluators {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetEvaluatorVersionsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetEvaluatorVersionsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetEvaluatorVersionsResponse(%+v)", *p)

}

func (p *BatchGetEvaluatorVersionsResponse) DeepEqual(ano *BatchGetEvaluatorVersionsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Evaluators) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetEvaluatorVersionsResponse) Field1DeepEqual(src []*evaluator.Evaluator) bool {

	if len(p.Evaluators) != len(src) {
		return false
	}
	for i, v := range p.Evaluators {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetEvaluatorVersionsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type SubmitEvaluatorVersionRequest struct {
	WorkspaceID int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	EvaluatorID int64      `thrift:"evaluator_id,2,required" frugal:"2,required,i64" json:"evaluator_id" path:"evaluator_id,required" `
	Version     string     `thrift:"version,3,required" frugal:"3,required,string" form:"version,required" json:"version,required"`
	Description *string    `thrift:"description,4,optional" frugal:"4,optional,string" form:"description" json:"description,omitempty"`
	Cid         *string    `thrift:"cid,100,optional" frugal:"100,optional,string" form:"cid" json:"cid,omitempty"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewSubmitEvaluatorVersionRequest() *SubmitEvaluatorVersionRequest {
	return &SubmitEvaluatorVersionRequest{}
}

func (p *SubmitEvaluatorVersionRequest) InitDefault() {
}

func (p *SubmitEvaluatorVersionRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *SubmitEvaluatorVersionRequest) GetEvaluatorID() (v int64) {
	if p != nil {
		return p.EvaluatorID
	}
	return
}

func (p *SubmitEvaluatorVersionRequest) GetVersion() (v string) {
	if p != nil {
		return p.Version
	}
	return
}

var SubmitEvaluatorVersionRequest_Description_DEFAULT string

func (p *SubmitEvaluatorVersionRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return SubmitEvaluatorVersionRequest_Description_DEFAULT
	}
	return *p.Description
}

var SubmitEvaluatorVersionRequest_Cid_DEFAULT string

func (p *SubmitEvaluatorVersionRequest) GetCid() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCid() {
		return SubmitEvaluatorVersionRequest_Cid_DEFAULT
	}
	return *p.Cid
}

var SubmitEvaluatorVersionRequest_Base_DEFAULT *base.Base

func (p *SubmitEvaluatorVersionRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return SubmitEvaluatorVersionRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *SubmitEvaluatorVersionRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *SubmitEvaluatorVersionRequest) SetEvaluatorID(val int64) {
	p.EvaluatorID = val
}
func (p *SubmitEvaluatorVersionRequest) SetVersion(val string) {
	p.Version = val
}
func (p *SubmitEvaluatorVersionRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *SubmitEvaluatorVersionRequest) SetCid(val *string) {
	p.Cid = val
}
func (p *SubmitEvaluatorVersionRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_SubmitEvaluatorVersionRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_id",
	3:   "version",
	4:   "description",
	100: "cid",
	255: "Base",
}

func (p *SubmitEvaluatorVersionRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *SubmitEvaluatorVersionRequest) IsSetCid() bool {
	return p.Cid != nil
}

func (p *SubmitEvaluatorVersionRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *SubmitEvaluatorVersionRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluatorID bool = false
	var issetVersion bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubmitEvaluatorVersionRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SubmitEvaluatorVersionRequest[fieldId]))
}

func (p *SubmitEvaluatorVersionRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *SubmitEvaluatorVersionRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *SubmitEvaluatorVersionRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Version = _field
	return nil
}
func (p *SubmitEvaluatorVersionRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *SubmitEvaluatorVersionRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cid = _field
	return nil
}
func (p *SubmitEvaluatorVersionRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *SubmitEvaluatorVersionRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitEvaluatorVersionRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubmitEvaluatorVersionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Version); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetCid() {
		if err = oprot.WriteFieldBegin("cid", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SubmitEvaluatorVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitEvaluatorVersionRequest(%+v)", *p)

}

func (p *SubmitEvaluatorVersionRequest) DeepEqual(ano *SubmitEvaluatorVersionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field100DeepEqual(ano.Cid) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *SubmitEvaluatorVersionRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluatorID != src {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Version, src) != 0 {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionRequest) Field4DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionRequest) Field100DeepEqual(src *string) bool {

	if p.Cid == src {
		return true
	} else if p.Cid == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cid, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type SubmitEvaluatorVersionResponse struct {
	Evaluator *evaluator.Evaluator `thrift:"evaluator,1,optional" frugal:"1,optional,evaluator.Evaluator" form:"evaluator" json:"evaluator,omitempty"`
	BaseResp  *base.BaseResp       `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewSubmitEvaluatorVersionResponse() *SubmitEvaluatorVersionResponse {
	return &SubmitEvaluatorVersionResponse{}
}

func (p *SubmitEvaluatorVersionResponse) InitDefault() {
}

var SubmitEvaluatorVersionResponse_Evaluator_DEFAULT *evaluator.Evaluator

func (p *SubmitEvaluatorVersionResponse) GetEvaluator() (v *evaluator.Evaluator) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluator() {
		return SubmitEvaluatorVersionResponse_Evaluator_DEFAULT
	}
	return p.Evaluator
}

var SubmitEvaluatorVersionResponse_BaseResp_DEFAULT *base.BaseResp

func (p *SubmitEvaluatorVersionResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return SubmitEvaluatorVersionResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *SubmitEvaluatorVersionResponse) SetEvaluator(val *evaluator.Evaluator) {
	p.Evaluator = val
}
func (p *SubmitEvaluatorVersionResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_SubmitEvaluatorVersionResponse = map[int16]string{
	1:   "evaluator",
	255: "BaseResp",
}

func (p *SubmitEvaluatorVersionResponse) IsSetEvaluator() bool {
	return p.Evaluator != nil
}

func (p *SubmitEvaluatorVersionResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *SubmitEvaluatorVersionResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubmitEvaluatorVersionResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubmitEvaluatorVersionResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluator()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Evaluator = _field
	return nil
}
func (p *SubmitEvaluatorVersionResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *SubmitEvaluatorVersionResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitEvaluatorVersionResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubmitEvaluatorVersionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluator() {
		if err = oprot.WriteFieldBegin("evaluator", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Evaluator.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SubmitEvaluatorVersionResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SubmitEvaluatorVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitEvaluatorVersionResponse(%+v)", *p)

}

func (p *SubmitEvaluatorVersionResponse) DeepEqual(ano *SubmitEvaluatorVersionResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Evaluator) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *SubmitEvaluatorVersionResponse) Field1DeepEqual(src *evaluator.Evaluator) bool {

	if !p.Evaluator.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SubmitEvaluatorVersionResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListTemplatesRequest struct {
	BuiltinTemplateType evaluator.TemplateType `thrift:"builtin_template_type,1,required" frugal:"1,required,TemplateType" json:"builtin_template_type,required" query:"builtin_template_type,required"`
	Base                *base.Base             `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListTemplatesRequest() *ListTemplatesRequest {
	return &ListTemplatesRequest{}
}

func (p *ListTemplatesRequest) InitDefault() {
}

func (p *ListTemplatesRequest) GetBuiltinTemplateType() (v evaluator.TemplateType) {
	if p != nil {
		return p.BuiltinTemplateType
	}
	return
}

var ListTemplatesRequest_Base_DEFAULT *base.Base

func (p *ListTemplatesRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListTemplatesRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListTemplatesRequest) SetBuiltinTemplateType(val evaluator.TemplateType) {
	p.BuiltinTemplateType = val
}
func (p *ListTemplatesRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListTemplatesRequest = map[int16]string{
	1:   "builtin_template_type",
	255: "Base",
}

func (p *ListTemplatesRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListTemplatesRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBuiltinTemplateType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBuiltinTemplateType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBuiltinTemplateType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListTemplatesRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListTemplatesRequest[fieldId]))
}

func (p *ListTemplatesRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field evaluator.TemplateType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = evaluator.TemplateType(v)
	}
	p.BuiltinTemplateType = _field
	return nil
}
func (p *ListTemplatesRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListTemplatesRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListTemplatesRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListTemplatesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("builtin_template_type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.BuiltinTemplateType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListTemplatesRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListTemplatesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTemplatesRequest(%+v)", *p)

}

func (p *ListTemplatesRequest) DeepEqual(ano *ListTemplatesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BuiltinTemplateType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListTemplatesRequest) Field1DeepEqual(src evaluator.TemplateType) bool {

	if p.BuiltinTemplateType != src {
		return false
	}
	return true
}
func (p *ListTemplatesRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListTemplatesResponse struct {
	BuiltinTemplateKeys []*evaluator.EvaluatorContent `thrift:"builtin_template_keys,1,optional" frugal:"1,optional,list<evaluator.EvaluatorContent>" form:"builtin_template_keys" json:"builtin_template_keys,omitempty"`
	BaseResp            *base.BaseResp                `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListTemplatesResponse() *ListTemplatesResponse {
	return &ListTemplatesResponse{}
}

func (p *ListTemplatesResponse) InitDefault() {
}

var ListTemplatesResponse_BuiltinTemplateKeys_DEFAULT []*evaluator.EvaluatorContent

func (p *ListTemplatesResponse) GetBuiltinTemplateKeys() (v []*evaluator.EvaluatorContent) {
	if p == nil {
		return
	}
	if !p.IsSetBuiltinTemplateKeys() {
		return ListTemplatesResponse_BuiltinTemplateKeys_DEFAULT
	}
	return p.BuiltinTemplateKeys
}

var ListTemplatesResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListTemplatesResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListTemplatesResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListTemplatesResponse) SetBuiltinTemplateKeys(val []*evaluator.EvaluatorContent) {
	p.BuiltinTemplateKeys = val
}
func (p *ListTemplatesResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListTemplatesResponse = map[int16]string{
	1:   "builtin_template_keys",
	255: "BaseResp",
}

func (p *ListTemplatesResponse) IsSetBuiltinTemplateKeys() bool {
	return p.BuiltinTemplateKeys != nil
}

func (p *ListTemplatesResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListTemplatesResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListTemplatesResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListTemplatesResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*evaluator.EvaluatorContent, 0, size)
	values := make([]evaluator.EvaluatorContent, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.BuiltinTemplateKeys = _field
	return nil
}
func (p *ListTemplatesResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListTemplatesResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListTemplatesResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListTemplatesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBuiltinTemplateKeys() {
		if err = oprot.WriteFieldBegin("builtin_template_keys", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.BuiltinTemplateKeys)); err != nil {
			return err
		}
		for _, v := range p.BuiltinTemplateKeys {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListTemplatesResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListTemplatesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTemplatesResponse(%+v)", *p)

}

func (p *ListTemplatesResponse) DeepEqual(ano *ListTemplatesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BuiltinTemplateKeys) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListTemplatesResponse) Field1DeepEqual(src []*evaluator.EvaluatorContent) bool {

	if len(p.BuiltinTemplateKeys) != len(src) {
		return false
	}
	for i, v := range p.BuiltinTemplateKeys {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListTemplatesResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetTemplateInfoRequest struct {
	BuiltinTemplateType evaluator.TemplateType `thrift:"builtin_template_type,1,required" frugal:"1,required,TemplateType" json:"builtin_template_type,required" query:"builtin_template_type,required"`
	BuiltinTemplateKey  string                 `thrift:"builtin_template_key,2,required" frugal:"2,required,string" json:"builtin_template_key,required" query:"builtin_template_key,required"`
	// code评估器默认python
	LanguageType *evaluator.LanguageType `thrift:"language_type,3,optional" frugal:"3,optional,string" json:"language_type,omitempty" query:"language_type"`
	Base         *base.Base              `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetTemplateInfoRequest() *GetTemplateInfoRequest {
	return &GetTemplateInfoRequest{}
}

func (p *GetTemplateInfoRequest) InitDefault() {
}

func (p *GetTemplateInfoRequest) GetBuiltinTemplateType() (v evaluator.TemplateType) {
	if p != nil {
		return p.BuiltinTemplateType
	}
	return
}

func (p *GetTemplateInfoRequest) GetBuiltinTemplateKey() (v string) {
	if p != nil {
		return p.BuiltinTemplateKey
	}
	return
}

var GetTemplateInfoRequest_LanguageType_DEFAULT evaluator.LanguageType

func (p *GetTemplateInfoRequest) GetLanguageType() (v evaluator.LanguageType) {
	if p == nil {
		return
	}
	if !p.IsSetLanguageType() {
		return GetTemplateInfoRequest_LanguageType_DEFAULT
	}
	return *p.LanguageType
}

var GetTemplateInfoRequest_Base_DEFAULT *base.Base

func (p *GetTemplateInfoRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetTemplateInfoRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetTemplateInfoRequest) SetBuiltinTemplateType(val evaluator.TemplateType) {
	p.BuiltinTemplateType = val
}
func (p *GetTemplateInfoRequest) SetBuiltinTemplateKey(val string) {
	p.BuiltinTemplateKey = val
}
func (p *GetTemplateInfoRequest) SetLanguageType(val *evaluator.LanguageType) {
	p.LanguageType = val
}
func (p *GetTemplateInfoRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetTemplateInfoRequest = map[int16]string{
	1:   "builtin_template_type",
	2:   "builtin_template_key",
	3:   "language_type",
	255: "Base",
}

func (p *GetTemplateInfoRequest) IsSetLanguageType() bool {
	return p.LanguageType != nil
}

func (p *GetTemplateInfoRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetTemplateInfoRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBuiltinTemplateType bool = false
	var issetBuiltinTemplateKey bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBuiltinTemplateType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetBuiltinTemplateKey = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBuiltinTemplateType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetBuiltinTemplateKey {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTemplateInfoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetTemplateInfoRequest[fieldId]))
}

func (p *GetTemplateInfoRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field evaluator.TemplateType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = evaluator.TemplateType(v)
	}
	p.BuiltinTemplateType = _field
	return nil
}
func (p *GetTemplateInfoRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BuiltinTemplateKey = _field
	return nil
}
func (p *GetTemplateInfoRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *evaluator.LanguageType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LanguageType = _field
	return nil
}
func (p *GetTemplateInfoRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetTemplateInfoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTemplateInfoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTemplateInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("builtin_template_type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.BuiltinTemplateType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetTemplateInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("builtin_template_key", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BuiltinTemplateKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetTemplateInfoRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLanguageType() {
		if err = oprot.WriteFieldBegin("language_type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LanguageType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetTemplateInfoRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetTemplateInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTemplateInfoRequest(%+v)", *p)

}

func (p *GetTemplateInfoRequest) DeepEqual(ano *GetTemplateInfoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BuiltinTemplateType) {
		return false
	}
	if !p.Field2DeepEqual(ano.BuiltinTemplateKey) {
		return false
	}
	if !p.Field3DeepEqual(ano.LanguageType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetTemplateInfoRequest) Field1DeepEqual(src evaluator.TemplateType) bool {

	if p.BuiltinTemplateType != src {
		return false
	}
	return true
}
func (p *GetTemplateInfoRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.BuiltinTemplateKey, src) != 0 {
		return false
	}
	return true
}
func (p *GetTemplateInfoRequest) Field3DeepEqual(src *evaluator.LanguageType) bool {

	if p.LanguageType == src {
		return true
	} else if p.LanguageType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LanguageType, *src) != 0 {
		return false
	}
	return true
}
func (p *GetTemplateInfoRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetTemplateInfoResponse struct {
	EvaluatorContent *evaluator.EvaluatorContent `thrift:"evaluator_content,1,optional" frugal:"1,optional,evaluator.EvaluatorContent" form:"builtin_template" json:"builtin_template,omitempty"`
	BaseResp         *base.BaseResp              `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetTemplateInfoResponse() *GetTemplateInfoResponse {
	return &GetTemplateInfoResponse{}
}

func (p *GetTemplateInfoResponse) InitDefault() {
}

var GetTemplateInfoResponse_EvaluatorContent_DEFAULT *evaluator.EvaluatorContent

func (p *GetTemplateInfoResponse) GetEvaluatorContent() (v *evaluator.EvaluatorContent) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorContent() {
		return GetTemplateInfoResponse_EvaluatorContent_DEFAULT
	}
	return p.EvaluatorContent
}

var GetTemplateInfoResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetTemplateInfoResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetTemplateInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetTemplateInfoResponse) SetEvaluatorContent(val *evaluator.EvaluatorContent) {
	p.EvaluatorContent = val
}
func (p *GetTemplateInfoResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetTemplateInfoResponse = map[int16]string{
	1:   "evaluator_content",
	255: "BaseResp",
}

func (p *GetTemplateInfoResponse) IsSetEvaluatorContent() bool {
	return p.EvaluatorContent != nil
}

func (p *GetTemplateInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetTemplateInfoResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTemplateInfoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTemplateInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorContent()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorContent = _field
	return nil
}
func (p *GetTemplateInfoResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetTemplateInfoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTemplateInfoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTemplateInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorContent() {
		if err = oprot.WriteFieldBegin("evaluator_content", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluatorContent.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetTemplateInfoResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetTemplateInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTemplateInfoResponse(%+v)", *p)

}

func (p *GetTemplateInfoResponse) DeepEqual(ano *GetTemplateInfoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorContent) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetTemplateInfoResponse) Field1DeepEqual(src *evaluator.EvaluatorContent) bool {

	if !p.EvaluatorContent.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetTemplateInfoResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type RunEvaluatorRequest struct {
	// 空间 id
	WorkspaceID int64 `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	// 评测规则 id
	EvaluatorVersionID int64 `thrift:"evaluator_version_id,2,required" frugal:"2,required,i64" json:"evaluator_version_id" path:"evaluator_version_id,required" `
	// 评测数据输入: 数据集行内容 + 评测目标输出内容与历史记录 + 评测目标的 trace
	InputData *evaluator.EvaluatorInputData `thrift:"input_data,3,required" frugal:"3,required,evaluator.EvaluatorInputData" form:"input_data,required" json:"input_data,required"`
	// experiment id
	ExperimentID *int64 `thrift:"experiment_id,4,optional" frugal:"4,optional,i64" json:"experiment_id" form:"experiment_id" `
	// experiment run id
	ExperimentRunID *int64            `thrift:"experiment_run_id,5,optional" frugal:"5,optional,i64" json:"experiment_run_id" form:"experiment_run_id" `
	ItemID          *int64            `thrift:"item_id,6,optional" frugal:"6,optional,i64" json:"item_id" form:"item_id" `
	TurnID          *int64            `thrift:"turn_id,7,optional" frugal:"7,optional,i64" json:"turn_id" form:"turn_id" `
	Ext             map[string]string `thrift:"ext,100,optional" frugal:"100,optional,map<string:string>" form:"ext" json:"ext,omitempty"`
	Base            *base.Base        `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewRunEvaluatorRequest() *RunEvaluatorRequest {
	return &RunEvaluatorRequest{}
}

func (p *RunEvaluatorRequest) InitDefault() {
}

func (p *RunEvaluatorRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *RunEvaluatorRequest) GetEvaluatorVersionID() (v int64) {
	if p != nil {
		return p.EvaluatorVersionID
	}
	return
}

var RunEvaluatorRequest_InputData_DEFAULT *evaluator.EvaluatorInputData

func (p *RunEvaluatorRequest) GetInputData() (v *evaluator.EvaluatorInputData) {
	if p == nil {
		return
	}
	if !p.IsSetInputData() {
		return RunEvaluatorRequest_InputData_DEFAULT
	}
	return p.InputData
}

var RunEvaluatorRequest_ExperimentID_DEFAULT int64

func (p *RunEvaluatorRequest) GetExperimentID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentID() {
		return RunEvaluatorRequest_ExperimentID_DEFAULT
	}
	return *p.ExperimentID
}

var RunEvaluatorRequest_ExperimentRunID_DEFAULT int64

func (p *RunEvaluatorRequest) GetExperimentRunID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentRunID() {
		return RunEvaluatorRequest_ExperimentRunID_DEFAULT
	}
	return *p.ExperimentRunID
}

var RunEvaluatorRequest_ItemID_DEFAULT int64

func (p *RunEvaluatorRequest) GetItemID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemID() {
		return RunEvaluatorRequest_ItemID_DEFAULT
	}
	return *p.ItemID
}

var RunEvaluatorRequest_TurnID_DEFAULT int64

func (p *RunEvaluatorRequest) GetTurnID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTurnID() {
		return RunEvaluatorRequest_TurnID_DEFAULT
	}
	return *p.TurnID
}

var RunEvaluatorRequest_Ext_DEFAULT map[string]string

func (p *RunEvaluatorRequest) GetExt() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetExt() {
		return RunEvaluatorRequest_Ext_DEFAULT
	}
	return p.Ext
}

var RunEvaluatorRequest_Base_DEFAULT *base.Base

func (p *RunEvaluatorRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return RunEvaluatorRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *RunEvaluatorRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *RunEvaluatorRequest) SetEvaluatorVersionID(val int64) {
	p.EvaluatorVersionID = val
}
func (p *RunEvaluatorRequest) SetInputData(val *evaluator.EvaluatorInputData) {
	p.InputData = val
}
func (p *RunEvaluatorRequest) SetExperimentID(val *int64) {
	p.ExperimentID = val
}
func (p *RunEvaluatorRequest) SetExperimentRunID(val *int64) {
	p.ExperimentRunID = val
}
func (p *RunEvaluatorRequest) SetItemID(val *int64) {
	p.ItemID = val
}
func (p *RunEvaluatorRequest) SetTurnID(val *int64) {
	p.TurnID = val
}
func (p *RunEvaluatorRequest) SetExt(val map[string]string) {
	p.Ext = val
}
func (p *RunEvaluatorRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_RunEvaluatorRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_version_id",
	3:   "input_data",
	4:   "experiment_id",
	5:   "experiment_run_id",
	6:   "item_id",
	7:   "turn_id",
	100: "ext",
	255: "Base",
}

func (p *RunEvaluatorRequest) IsSetInputData() bool {
	return p.InputData != nil
}

func (p *RunEvaluatorRequest) IsSetExperimentID() bool {
	return p.ExperimentID != nil
}

func (p *RunEvaluatorRequest) IsSetExperimentRunID() bool {
	return p.ExperimentRunID != nil
}

func (p *RunEvaluatorRequest) IsSetItemID() bool {
	return p.ItemID != nil
}

func (p *RunEvaluatorRequest) IsSetTurnID() bool {
	return p.TurnID != nil
}

func (p *RunEvaluatorRequest) IsSetExt() bool {
	return p.Ext != nil
}

func (p *RunEvaluatorRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *RunEvaluatorRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluatorVersionID bool = false
	var issetInputData bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorVersionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetInputData = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorVersionID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetInputData {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RunEvaluatorRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RunEvaluatorRequest[fieldId]))
}

func (p *RunEvaluatorRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *RunEvaluatorRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorVersionID = _field
	return nil
}
func (p *RunEvaluatorRequest) ReadField3(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorInputData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.InputData = _field
	return nil
}
func (p *RunEvaluatorRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExperimentID = _field
	return nil
}
func (p *RunEvaluatorRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExperimentRunID = _field
	return nil
}
func (p *RunEvaluatorRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemID = _field
	return nil
}
func (p *RunEvaluatorRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TurnID = _field
	return nil
}
func (p *RunEvaluatorRequest) ReadField100(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Ext = _field
	return nil
}
func (p *RunEvaluatorRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *RunEvaluatorRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunEvaluatorRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RunEvaluatorRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RunEvaluatorRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_version_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorVersionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *RunEvaluatorRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("input_data", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.InputData.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *RunEvaluatorRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentID() {
		if err = oprot.WriteFieldBegin("experiment_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExperimentID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *RunEvaluatorRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentRunID() {
		if err = oprot.WriteFieldBegin("experiment_run_id", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExperimentRunID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *RunEvaluatorRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemID() {
		if err = oprot.WriteFieldBegin("item_id", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ItemID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *RunEvaluatorRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTurnID() {
		if err = oprot.WriteFieldBegin("turn_id", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TurnID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *RunEvaluatorRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetExt() {
		if err = oprot.WriteFieldBegin("ext", thrift.MAP, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Ext)); err != nil {
			return err
		}
		for k, v := range p.Ext {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *RunEvaluatorRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RunEvaluatorRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RunEvaluatorRequest(%+v)", *p)

}

func (p *RunEvaluatorRequest) DeepEqual(ano *RunEvaluatorRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorVersionID) {
		return false
	}
	if !p.Field3DeepEqual(ano.InputData) {
		return false
	}
	if !p.Field4DeepEqual(ano.ExperimentID) {
		return false
	}
	if !p.Field5DeepEqual(ano.ExperimentRunID) {
		return false
	}
	if !p.Field6DeepEqual(ano.ItemID) {
		return false
	}
	if !p.Field7DeepEqual(ano.TurnID) {
		return false
	}
	if !p.Field100DeepEqual(ano.Ext) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *RunEvaluatorRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *RunEvaluatorRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluatorVersionID != src {
		return false
	}
	return true
}
func (p *RunEvaluatorRequest) Field3DeepEqual(src *evaluator.EvaluatorInputData) bool {

	if !p.InputData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RunEvaluatorRequest) Field4DeepEqual(src *int64) bool {

	if p.ExperimentID == src {
		return true
	} else if p.ExperimentID == nil || src == nil {
		return false
	}
	if *p.ExperimentID != *src {
		return false
	}
	return true
}
func (p *RunEvaluatorRequest) Field5DeepEqual(src *int64) bool {

	if p.ExperimentRunID == src {
		return true
	} else if p.ExperimentRunID == nil || src == nil {
		return false
	}
	if *p.ExperimentRunID != *src {
		return false
	}
	return true
}
func (p *RunEvaluatorRequest) Field6DeepEqual(src *int64) bool {

	if p.ItemID == src {
		return true
	} else if p.ItemID == nil || src == nil {
		return false
	}
	if *p.ItemID != *src {
		return false
	}
	return true
}
func (p *RunEvaluatorRequest) Field7DeepEqual(src *int64) bool {

	if p.TurnID == src {
		return true
	} else if p.TurnID == nil || src == nil {
		return false
	}
	if *p.TurnID != *src {
		return false
	}
	return true
}
func (p *RunEvaluatorRequest) Field100DeepEqual(src map[string]string) bool {

	if len(p.Ext) != len(src) {
		return false
	}
	for k, v := range p.Ext {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *RunEvaluatorRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type RunEvaluatorResponse struct {
	Record   *evaluator.EvaluatorRecord `thrift:"record,1,required" frugal:"1,required,evaluator.EvaluatorRecord" form:"record,required" json:"record,required"`
	BaseResp *base.BaseResp             `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewRunEvaluatorResponse() *RunEvaluatorResponse {
	return &RunEvaluatorResponse{}
}

func (p *RunEvaluatorResponse) InitDefault() {
}

var RunEvaluatorResponse_Record_DEFAULT *evaluator.EvaluatorRecord

func (p *RunEvaluatorResponse) GetRecord() (v *evaluator.EvaluatorRecord) {
	if p == nil {
		return
	}
	if !p.IsSetRecord() {
		return RunEvaluatorResponse_Record_DEFAULT
	}
	return p.Record
}

var RunEvaluatorResponse_BaseResp_DEFAULT *base.BaseResp

func (p *RunEvaluatorResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return RunEvaluatorResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *RunEvaluatorResponse) SetRecord(val *evaluator.EvaluatorRecord) {
	p.Record = val
}
func (p *RunEvaluatorResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_RunEvaluatorResponse = map[int16]string{
	1:   "record",
	255: "BaseResp",
}

func (p *RunEvaluatorResponse) IsSetRecord() bool {
	return p.Record != nil
}

func (p *RunEvaluatorResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *RunEvaluatorResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRecord bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRecord = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRecord {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RunEvaluatorResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RunEvaluatorResponse[fieldId]))
}

func (p *RunEvaluatorResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorRecord()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Record = _field
	return nil
}
func (p *RunEvaluatorResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *RunEvaluatorResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunEvaluatorResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RunEvaluatorResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("record", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Record.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RunEvaluatorResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RunEvaluatorResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RunEvaluatorResponse(%+v)", *p)

}

func (p *RunEvaluatorResponse) DeepEqual(ano *RunEvaluatorResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Record) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *RunEvaluatorResponse) Field1DeepEqual(src *evaluator.EvaluatorRecord) bool {

	if !p.Record.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RunEvaluatorResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type DebugEvaluatorRequest struct {
	// 空间 id
	WorkspaceID int64 `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	// 待调试评估器内容
	EvaluatorContent *evaluator.EvaluatorContent `thrift:"evaluator_content,2,required" frugal:"2,required,evaluator.EvaluatorContent" form:"evaluator_content,required" json:"evaluator_content,required"`
	// 评测数据输入: 数据集行内容 + 评测目标输出内容与历史记录 + 评测目标的 trace
	InputData     *evaluator.EvaluatorInputData `thrift:"input_data,3,required" frugal:"3,required,evaluator.EvaluatorInputData" form:"input_data,required" json:"input_data,required"`
	EvaluatorType evaluator.EvaluatorType       `thrift:"evaluator_type,4,required" frugal:"4,required,EvaluatorType" json:"evaluator_type" form:"evaluator_type,required" `
	Base          *base.Base                    `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewDebugEvaluatorRequest() *DebugEvaluatorRequest {
	return &DebugEvaluatorRequest{}
}

func (p *DebugEvaluatorRequest) InitDefault() {
}

func (p *DebugEvaluatorRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var DebugEvaluatorRequest_EvaluatorContent_DEFAULT *evaluator.EvaluatorContent

func (p *DebugEvaluatorRequest) GetEvaluatorContent() (v *evaluator.EvaluatorContent) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorContent() {
		return DebugEvaluatorRequest_EvaluatorContent_DEFAULT
	}
	return p.EvaluatorContent
}

var DebugEvaluatorRequest_InputData_DEFAULT *evaluator.EvaluatorInputData

func (p *DebugEvaluatorRequest) GetInputData() (v *evaluator.EvaluatorInputData) {
	if p == nil {
		return
	}
	if !p.IsSetInputData() {
		return DebugEvaluatorRequest_InputData_DEFAULT
	}
	return p.InputData
}

func (p *DebugEvaluatorRequest) GetEvaluatorType() (v evaluator.EvaluatorType) {
	if p != nil {
		return p.EvaluatorType
	}
	return
}

var DebugEvaluatorRequest_Base_DEFAULT *base.Base

func (p *DebugEvaluatorRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return DebugEvaluatorRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DebugEvaluatorRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *DebugEvaluatorRequest) SetEvaluatorContent(val *evaluator.EvaluatorContent) {
	p.EvaluatorContent = val
}
func (p *DebugEvaluatorRequest) SetInputData(val *evaluator.EvaluatorInputData) {
	p.InputData = val
}
func (p *DebugEvaluatorRequest) SetEvaluatorType(val evaluator.EvaluatorType) {
	p.EvaluatorType = val
}
func (p *DebugEvaluatorRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DebugEvaluatorRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_content",
	3:   "input_data",
	4:   "evaluator_type",
	255: "Base",
}

func (p *DebugEvaluatorRequest) IsSetEvaluatorContent() bool {
	return p.EvaluatorContent != nil
}

func (p *DebugEvaluatorRequest) IsSetInputData() bool {
	return p.InputData != nil
}

func (p *DebugEvaluatorRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DebugEvaluatorRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluatorContent bool = false
	var issetInputData bool = false
	var issetEvaluatorType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorContent = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetInputData = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorContent {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetInputData {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorType {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DebugEvaluatorRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DebugEvaluatorRequest[fieldId]))
}

func (p *DebugEvaluatorRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *DebugEvaluatorRequest) ReadField2(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorContent()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorContent = _field
	return nil
}
func (p *DebugEvaluatorRequest) ReadField3(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorInputData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.InputData = _field
	return nil
}
func (p *DebugEvaluatorRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field evaluator.EvaluatorType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = evaluator.EvaluatorType(v)
	}
	p.EvaluatorType = _field
	return nil
}
func (p *DebugEvaluatorRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *DebugEvaluatorRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugEvaluatorRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DebugEvaluatorRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DebugEvaluatorRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_content", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.EvaluatorContent.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DebugEvaluatorRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("input_data", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.InputData.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DebugEvaluatorRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_type", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.EvaluatorType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *DebugEvaluatorRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DebugEvaluatorRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DebugEvaluatorRequest(%+v)", *p)

}

func (p *DebugEvaluatorRequest) DeepEqual(ano *DebugEvaluatorRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorContent) {
		return false
	}
	if !p.Field3DeepEqual(ano.InputData) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluatorType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DebugEvaluatorRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *DebugEvaluatorRequest) Field2DeepEqual(src *evaluator.EvaluatorContent) bool {

	if !p.EvaluatorContent.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DebugEvaluatorRequest) Field3DeepEqual(src *evaluator.EvaluatorInputData) bool {

	if !p.InputData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DebugEvaluatorRequest) Field4DeepEqual(src evaluator.EvaluatorType) bool {

	if p.EvaluatorType != src {
		return false
	}
	return true
}
func (p *DebugEvaluatorRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DebugEvaluatorResponse struct {
	// 输出数据
	EvaluatorOutputData *evaluator.EvaluatorOutputData `thrift:"evaluator_output_data,1,optional" frugal:"1,optional,evaluator.EvaluatorOutputData" form:"evaluator_output_data" json:"evaluator_output_data,omitempty"`
	BaseResp            *base.BaseResp                 `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewDebugEvaluatorResponse() *DebugEvaluatorResponse {
	return &DebugEvaluatorResponse{}
}

func (p *DebugEvaluatorResponse) InitDefault() {
}

var DebugEvaluatorResponse_EvaluatorOutputData_DEFAULT *evaluator.EvaluatorOutputData

func (p *DebugEvaluatorResponse) GetEvaluatorOutputData() (v *evaluator.EvaluatorOutputData) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorOutputData() {
		return DebugEvaluatorResponse_EvaluatorOutputData_DEFAULT
	}
	return p.EvaluatorOutputData
}

var DebugEvaluatorResponse_BaseResp_DEFAULT *base.BaseResp

func (p *DebugEvaluatorResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return DebugEvaluatorResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DebugEvaluatorResponse) SetEvaluatorOutputData(val *evaluator.EvaluatorOutputData) {
	p.EvaluatorOutputData = val
}
func (p *DebugEvaluatorResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_DebugEvaluatorResponse = map[int16]string{
	1:   "evaluator_output_data",
	255: "BaseResp",
}

func (p *DebugEvaluatorResponse) IsSetEvaluatorOutputData() bool {
	return p.EvaluatorOutputData != nil
}

func (p *DebugEvaluatorResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DebugEvaluatorResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DebugEvaluatorResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DebugEvaluatorResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorOutputData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorOutputData = _field
	return nil
}
func (p *DebugEvaluatorResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *DebugEvaluatorResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugEvaluatorResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DebugEvaluatorResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorOutputData() {
		if err = oprot.WriteFieldBegin("evaluator_output_data", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluatorOutputData.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DebugEvaluatorResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DebugEvaluatorResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DebugEvaluatorResponse(%+v)", *p)

}

func (p *DebugEvaluatorResponse) DeepEqual(ano *DebugEvaluatorResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorOutputData) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *DebugEvaluatorResponse) Field1DeepEqual(src *evaluator.EvaluatorOutputData) bool {

	if !p.EvaluatorOutputData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DebugEvaluatorResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchDebugEvaluatorRequest struct {
	// 空间 id
	WorkspaceID int64 `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	// 待调试评估器内容
	EvaluatorContent *evaluator.EvaluatorContent `thrift:"evaluator_content,2,required" frugal:"2,required,evaluator.EvaluatorContent" form:"evaluator_content,required" json:"evaluator_content,required"`
	// 评测数据输入: 数据集行内容 + 评测目标输出内容与历史记录 + 评测目标的 trace
	InputData     []*evaluator.EvaluatorInputData `thrift:"input_data,3,required" frugal:"3,required,list<evaluator.EvaluatorInputData>" form:"input_data,required" json:"input_data,required"`
	EvaluatorType evaluator.EvaluatorType         `thrift:"evaluator_type,4,required" frugal:"4,required,EvaluatorType" json:"evaluator_type" form:"evaluator_type,required" `
	Base          *base.Base                      `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchDebugEvaluatorRequest() *BatchDebugEvaluatorRequest {
	return &BatchDebugEvaluatorRequest{}
}

func (p *BatchDebugEvaluatorRequest) InitDefault() {
}

func (p *BatchDebugEvaluatorRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var BatchDebugEvaluatorRequest_EvaluatorContent_DEFAULT *evaluator.EvaluatorContent

func (p *BatchDebugEvaluatorRequest) GetEvaluatorContent() (v *evaluator.EvaluatorContent) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorContent() {
		return BatchDebugEvaluatorRequest_EvaluatorContent_DEFAULT
	}
	return p.EvaluatorContent
}

func (p *BatchDebugEvaluatorRequest) GetInputData() (v []*evaluator.EvaluatorInputData) {
	if p != nil {
		return p.InputData
	}
	return
}

func (p *BatchDebugEvaluatorRequest) GetEvaluatorType() (v evaluator.EvaluatorType) {
	if p != nil {
		return p.EvaluatorType
	}
	return
}

var BatchDebugEvaluatorRequest_Base_DEFAULT *base.Base

func (p *BatchDebugEvaluatorRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchDebugEvaluatorRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchDebugEvaluatorRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchDebugEvaluatorRequest) SetEvaluatorContent(val *evaluator.EvaluatorContent) {
	p.EvaluatorContent = val
}
func (p *BatchDebugEvaluatorRequest) SetInputData(val []*evaluator.EvaluatorInputData) {
	p.InputData = val
}
func (p *BatchDebugEvaluatorRequest) SetEvaluatorType(val evaluator.EvaluatorType) {
	p.EvaluatorType = val
}
func (p *BatchDebugEvaluatorRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchDebugEvaluatorRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_content",
	3:   "input_data",
	4:   "evaluator_type",
	255: "Base",
}

func (p *BatchDebugEvaluatorRequest) IsSetEvaluatorContent() bool {
	return p.EvaluatorContent != nil
}

func (p *BatchDebugEvaluatorRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchDebugEvaluatorRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluatorContent bool = false
	var issetInputData bool = false
	var issetEvaluatorType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorContent = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetInputData = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorContent {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetInputData {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorType {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchDebugEvaluatorRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchDebugEvaluatorRequest[fieldId]))
}

func (p *BatchDebugEvaluatorRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchDebugEvaluatorRequest) ReadField2(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorContent()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorContent = _field
	return nil
}
func (p *BatchDebugEvaluatorRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*evaluator.EvaluatorInputData, 0, size)
	values := make([]evaluator.EvaluatorInputData, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.InputData = _field
	return nil
}
func (p *BatchDebugEvaluatorRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field evaluator.EvaluatorType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = evaluator.EvaluatorType(v)
	}
	p.EvaluatorType = _field
	return nil
}
func (p *BatchDebugEvaluatorRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchDebugEvaluatorRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDebugEvaluatorRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchDebugEvaluatorRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchDebugEvaluatorRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_content", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.EvaluatorContent.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchDebugEvaluatorRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("input_data", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InputData)); err != nil {
		return err
	}
	for _, v := range p.InputData {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchDebugEvaluatorRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_type", thrift.I32, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.EvaluatorType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *BatchDebugEvaluatorRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchDebugEvaluatorRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchDebugEvaluatorRequest(%+v)", *p)

}

func (p *BatchDebugEvaluatorRequest) DeepEqual(ano *BatchDebugEvaluatorRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorContent) {
		return false
	}
	if !p.Field3DeepEqual(ano.InputData) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluatorType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchDebugEvaluatorRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchDebugEvaluatorRequest) Field2DeepEqual(src *evaluator.EvaluatorContent) bool {

	if !p.EvaluatorContent.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BatchDebugEvaluatorRequest) Field3DeepEqual(src []*evaluator.EvaluatorInputData) bool {

	if len(p.InputData) != len(src) {
		return false
	}
	for i, v := range p.InputData {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchDebugEvaluatorRequest) Field4DeepEqual(src evaluator.EvaluatorType) bool {

	if p.EvaluatorType != src {
		return false
	}
	return true
}
func (p *BatchDebugEvaluatorRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchDebugEvaluatorResponse struct {
	// 输出数据
	EvaluatorOutputData []*evaluator.EvaluatorOutputData `thrift:"evaluator_output_data,1,optional" frugal:"1,optional,list<evaluator.EvaluatorOutputData>" form:"evaluator_output_data" json:"evaluator_output_data,omitempty"`
	BaseResp            *base.BaseResp                   `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchDebugEvaluatorResponse() *BatchDebugEvaluatorResponse {
	return &BatchDebugEvaluatorResponse{}
}

func (p *BatchDebugEvaluatorResponse) InitDefault() {
}

var BatchDebugEvaluatorResponse_EvaluatorOutputData_DEFAULT []*evaluator.EvaluatorOutputData

func (p *BatchDebugEvaluatorResponse) GetEvaluatorOutputData() (v []*evaluator.EvaluatorOutputData) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorOutputData() {
		return BatchDebugEvaluatorResponse_EvaluatorOutputData_DEFAULT
	}
	return p.EvaluatorOutputData
}

var BatchDebugEvaluatorResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchDebugEvaluatorResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchDebugEvaluatorResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchDebugEvaluatorResponse) SetEvaluatorOutputData(val []*evaluator.EvaluatorOutputData) {
	p.EvaluatorOutputData = val
}
func (p *BatchDebugEvaluatorResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchDebugEvaluatorResponse = map[int16]string{
	1:   "evaluator_output_data",
	255: "BaseResp",
}

func (p *BatchDebugEvaluatorResponse) IsSetEvaluatorOutputData() bool {
	return p.EvaluatorOutputData != nil
}

func (p *BatchDebugEvaluatorResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchDebugEvaluatorResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchDebugEvaluatorResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchDebugEvaluatorResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*evaluator.EvaluatorOutputData, 0, size)
	values := make([]evaluator.EvaluatorOutputData, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorOutputData = _field
	return nil
}
func (p *BatchDebugEvaluatorResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchDebugEvaluatorResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDebugEvaluatorResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchDebugEvaluatorResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorOutputData() {
		if err = oprot.WriteFieldBegin("evaluator_output_data", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvaluatorOutputData)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorOutputData {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchDebugEvaluatorResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchDebugEvaluatorResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchDebugEvaluatorResponse(%+v)", *p)

}

func (p *BatchDebugEvaluatorResponse) DeepEqual(ano *BatchDebugEvaluatorResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorOutputData) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchDebugEvaluatorResponse) Field1DeepEqual(src []*evaluator.EvaluatorOutputData) bool {

	if len(p.EvaluatorOutputData) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorOutputData {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchDebugEvaluatorResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteEvaluatorRequest struct {
	EvaluatorID *int64     `thrift:"evaluator_id,1,optional" frugal:"1,optional,i64" json:"evaluator_id" path:"evaluator_id" `
	WorkspaceID int64      `thrift:"workspace_id,2,required" frugal:"2,required,i64" json:"workspace_id" query:"workspace_id,required" `
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewDeleteEvaluatorRequest() *DeleteEvaluatorRequest {
	return &DeleteEvaluatorRequest{}
}

func (p *DeleteEvaluatorRequest) InitDefault() {
}

var DeleteEvaluatorRequest_EvaluatorID_DEFAULT int64

func (p *DeleteEvaluatorRequest) GetEvaluatorID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorID() {
		return DeleteEvaluatorRequest_EvaluatorID_DEFAULT
	}
	return *p.EvaluatorID
}

func (p *DeleteEvaluatorRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var DeleteEvaluatorRequest_Base_DEFAULT *base.Base

func (p *DeleteEvaluatorRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return DeleteEvaluatorRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteEvaluatorRequest) SetEvaluatorID(val *int64) {
	p.EvaluatorID = val
}
func (p *DeleteEvaluatorRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *DeleteEvaluatorRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DeleteEvaluatorRequest = map[int16]string{
	1:   "evaluator_id",
	2:   "workspace_id",
	255: "Base",
}

func (p *DeleteEvaluatorRequest) IsSetEvaluatorID() bool {
	return p.EvaluatorID != nil
}

func (p *DeleteEvaluatorRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteEvaluatorRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteEvaluatorRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeleteEvaluatorRequest[fieldId]))
}

func (p *DeleteEvaluatorRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *DeleteEvaluatorRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *DeleteEvaluatorRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *DeleteEvaluatorRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEvaluatorRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteEvaluatorRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorID() {
		if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluatorID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DeleteEvaluatorRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DeleteEvaluatorRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteEvaluatorRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteEvaluatorRequest(%+v)", *p)

}

func (p *DeleteEvaluatorRequest) DeepEqual(ano *DeleteEvaluatorRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteEvaluatorRequest) Field1DeepEqual(src *int64) bool {

	if p.EvaluatorID == src {
		return true
	} else if p.EvaluatorID == nil || src == nil {
		return false
	}
	if *p.EvaluatorID != *src {
		return false
	}
	return true
}
func (p *DeleteEvaluatorRequest) Field2DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *DeleteEvaluatorRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteEvaluatorResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewDeleteEvaluatorResponse() *DeleteEvaluatorResponse {
	return &DeleteEvaluatorResponse{}
}

func (p *DeleteEvaluatorResponse) InitDefault() {
}

var DeleteEvaluatorResponse_BaseResp_DEFAULT *base.BaseResp

func (p *DeleteEvaluatorResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return DeleteEvaluatorResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DeleteEvaluatorResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_DeleteEvaluatorResponse = map[int16]string{
	255: "BaseResp",
}

func (p *DeleteEvaluatorResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DeleteEvaluatorResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteEvaluatorResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteEvaluatorResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *DeleteEvaluatorResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEvaluatorResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteEvaluatorResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteEvaluatorResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteEvaluatorResponse(%+v)", *p)

}

func (p *DeleteEvaluatorResponse) DeepEqual(ano *DeleteEvaluatorResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *DeleteEvaluatorResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CheckEvaluatorNameRequest struct {
	WorkspaceID int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	Name        string     `thrift:"name,2,required" frugal:"2,required,string" form:"name,required" json:"name,required"`
	EvaluatorID *int64     `thrift:"evaluator_id,3,optional" frugal:"3,optional,i64" json:"evaluator_id" form:"evaluator_id" `
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCheckEvaluatorNameRequest() *CheckEvaluatorNameRequest {
	return &CheckEvaluatorNameRequest{}
}

func (p *CheckEvaluatorNameRequest) InitDefault() {
}

func (p *CheckEvaluatorNameRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *CheckEvaluatorNameRequest) GetName() (v string) {
	if p != nil {
		return p.Name
	}
	return
}

var CheckEvaluatorNameRequest_EvaluatorID_DEFAULT int64

func (p *CheckEvaluatorNameRequest) GetEvaluatorID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorID() {
		return CheckEvaluatorNameRequest_EvaluatorID_DEFAULT
	}
	return *p.EvaluatorID
}

var CheckEvaluatorNameRequest_Base_DEFAULT *base.Base

func (p *CheckEvaluatorNameRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CheckEvaluatorNameRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CheckEvaluatorNameRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *CheckEvaluatorNameRequest) SetName(val string) {
	p.Name = val
}
func (p *CheckEvaluatorNameRequest) SetEvaluatorID(val *int64) {
	p.EvaluatorID = val
}
func (p *CheckEvaluatorNameRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CheckEvaluatorNameRequest = map[int16]string{
	1:   "workspace_id",
	2:   "name",
	3:   "evaluator_id",
	255: "Base",
}

func (p *CheckEvaluatorNameRequest) IsSetEvaluatorID() bool {
	return p.EvaluatorID != nil
}

func (p *CheckEvaluatorNameRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CheckEvaluatorNameRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckEvaluatorNameRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CheckEvaluatorNameRequest[fieldId]))
}

func (p *CheckEvaluatorNameRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CheckEvaluatorNameRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *CheckEvaluatorNameRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *CheckEvaluatorNameRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CheckEvaluatorNameRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckEvaluatorNameRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckEvaluatorNameRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CheckEvaluatorNameRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CheckEvaluatorNameRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorID() {
		if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluatorID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CheckEvaluatorNameRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CheckEvaluatorNameRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckEvaluatorNameRequest(%+v)", *p)

}

func (p *CheckEvaluatorNameRequest) DeepEqual(ano *CheckEvaluatorNameRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CheckEvaluatorNameRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *CheckEvaluatorNameRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *CheckEvaluatorNameRequest) Field3DeepEqual(src *int64) bool {

	if p.EvaluatorID == src {
		return true
	} else if p.EvaluatorID == nil || src == nil {
		return false
	}
	if *p.EvaluatorID != *src {
		return false
	}
	return true
}
func (p *CheckEvaluatorNameRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CheckEvaluatorNameResponse struct {
	Pass     *bool          `thrift:"pass,1,optional" frugal:"1,optional,bool" form:"pass" json:"pass,omitempty"`
	Message  *string        `thrift:"message,2,optional" frugal:"2,optional,string" form:"message" json:"message,omitempty"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCheckEvaluatorNameResponse() *CheckEvaluatorNameResponse {
	return &CheckEvaluatorNameResponse{}
}

func (p *CheckEvaluatorNameResponse) InitDefault() {
}

var CheckEvaluatorNameResponse_Pass_DEFAULT bool

func (p *CheckEvaluatorNameResponse) GetPass() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetPass() {
		return CheckEvaluatorNameResponse_Pass_DEFAULT
	}
	return *p.Pass
}

var CheckEvaluatorNameResponse_Message_DEFAULT string

func (p *CheckEvaluatorNameResponse) GetMessage() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMessage() {
		return CheckEvaluatorNameResponse_Message_DEFAULT
	}
	return *p.Message
}

var CheckEvaluatorNameResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CheckEvaluatorNameResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CheckEvaluatorNameResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CheckEvaluatorNameResponse) SetPass(val *bool) {
	p.Pass = val
}
func (p *CheckEvaluatorNameResponse) SetMessage(val *string) {
	p.Message = val
}
func (p *CheckEvaluatorNameResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CheckEvaluatorNameResponse = map[int16]string{
	1:   "pass",
	2:   "message",
	255: "BaseResp",
}

func (p *CheckEvaluatorNameResponse) IsSetPass() bool {
	return p.Pass != nil
}

func (p *CheckEvaluatorNameResponse) IsSetMessage() bool {
	return p.Message != nil
}

func (p *CheckEvaluatorNameResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CheckEvaluatorNameResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckEvaluatorNameResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckEvaluatorNameResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Pass = _field
	return nil
}
func (p *CheckEvaluatorNameResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Message = _field
	return nil
}
func (p *CheckEvaluatorNameResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CheckEvaluatorNameResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckEvaluatorNameResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckEvaluatorNameResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPass() {
		if err = oprot.WriteFieldBegin("pass", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Pass); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CheckEvaluatorNameResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Message); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CheckEvaluatorNameResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CheckEvaluatorNameResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckEvaluatorNameResponse(%+v)", *p)

}

func (p *CheckEvaluatorNameResponse) DeepEqual(ano *CheckEvaluatorNameResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Pass) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CheckEvaluatorNameResponse) Field1DeepEqual(src *bool) bool {

	if p.Pass == src {
		return true
	} else if p.Pass == nil || src == nil {
		return false
	}
	if *p.Pass != *src {
		return false
	}
	return true
}
func (p *CheckEvaluatorNameResponse) Field2DeepEqual(src *string) bool {

	if p.Message == src {
		return true
	} else if p.Message == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Message, *src) != 0 {
		return false
	}
	return true
}
func (p *CheckEvaluatorNameResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluatorRecordRequest struct {
	WorkspaceID      int64   `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	EvaluatorID      int64   `thrift:"evaluator_id,2,required" frugal:"2,required,i64" json:"evaluator_id" form:"evaluator_id,required" `
	ExperimentRunIds []int64 `thrift:"experiment_run_ids,3,optional" frugal:"3,optional,list<i64>" json:"experiment_run_ids" form:"experiment_run_ids" `
	// 分页大小 (0, 200]，默认为 20
	PageSize  *int32     `thrift:"page_size,101,optional" frugal:"101,optional,i32" form:"page_size" json:"page_size,omitempty"`
	PageToken *string    `thrift:"page_token,102,optional" frugal:"102,optional,string" form:"page_token" json:"page_token,omitempty"`
	Base      *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListEvaluatorRecordRequest() *ListEvaluatorRecordRequest {
	return &ListEvaluatorRecordRequest{}
}

func (p *ListEvaluatorRecordRequest) InitDefault() {
}

func (p *ListEvaluatorRecordRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *ListEvaluatorRecordRequest) GetEvaluatorID() (v int64) {
	if p != nil {
		return p.EvaluatorID
	}
	return
}

var ListEvaluatorRecordRequest_ExperimentRunIds_DEFAULT []int64

func (p *ListEvaluatorRecordRequest) GetExperimentRunIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentRunIds() {
		return ListEvaluatorRecordRequest_ExperimentRunIds_DEFAULT
	}
	return p.ExperimentRunIds
}

var ListEvaluatorRecordRequest_PageSize_DEFAULT int32

func (p *ListEvaluatorRecordRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListEvaluatorRecordRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListEvaluatorRecordRequest_PageToken_DEFAULT string

func (p *ListEvaluatorRecordRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListEvaluatorRecordRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListEvaluatorRecordRequest_Base_DEFAULT *base.Base

func (p *ListEvaluatorRecordRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListEvaluatorRecordRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListEvaluatorRecordRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ListEvaluatorRecordRequest) SetEvaluatorID(val int64) {
	p.EvaluatorID = val
}
func (p *ListEvaluatorRecordRequest) SetExperimentRunIds(val []int64) {
	p.ExperimentRunIds = val
}
func (p *ListEvaluatorRecordRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListEvaluatorRecordRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListEvaluatorRecordRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListEvaluatorRecordRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_id",
	3:   "experiment_run_ids",
	101: "page_size",
	102: "page_token",
	255: "Base",
}

func (p *ListEvaluatorRecordRequest) IsSetExperimentRunIds() bool {
	return p.ExperimentRunIds != nil
}

func (p *ListEvaluatorRecordRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListEvaluatorRecordRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListEvaluatorRecordRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListEvaluatorRecordRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluatorID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluatorRecordRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListEvaluatorRecordRequest[fieldId]))
}

func (p *ListEvaluatorRecordRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListEvaluatorRecordRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *ListEvaluatorRecordRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ExperimentRunIds = _field
	return nil
}
func (p *ListEvaluatorRecordRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListEvaluatorRecordRequest) ReadField102(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListEvaluatorRecordRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListEvaluatorRecordRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluatorRecordRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluatorRecordRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluatorRecordRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvaluatorRecordRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentRunIds() {
		if err = oprot.WriteFieldBegin("experiment_run_ids", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ExperimentRunIds)); err != nil {
			return err
		}
		for _, v := range p.ExperimentRunIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvaluatorRecordRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListEvaluatorRecordRequest) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *ListEvaluatorRecordRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluatorRecordRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluatorRecordRequest(%+v)", *p)

}

func (p *ListEvaluatorRecordRequest) DeepEqual(ano *ListEvaluatorRecordRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ExperimentRunIds) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field102DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListEvaluatorRecordRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ListEvaluatorRecordRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluatorID != src {
		return false
	}
	return true
}
func (p *ListEvaluatorRecordRequest) Field3DeepEqual(src []int64) bool {

	if len(p.ExperimentRunIds) != len(src) {
		return false
	}
	for i, v := range p.ExperimentRunIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ListEvaluatorRecordRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListEvaluatorRecordRequest) Field102DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListEvaluatorRecordRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluatorRecordResponse struct {
	Records  []*evaluator.EvaluatorRecord `thrift:"records,1,required" frugal:"1,required,list<evaluator.EvaluatorRecord>" form:"records,required" json:"records,required"`
	BaseResp *base.BaseResp               `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListEvaluatorRecordResponse() *ListEvaluatorRecordResponse {
	return &ListEvaluatorRecordResponse{}
}

func (p *ListEvaluatorRecordResponse) InitDefault() {
}

func (p *ListEvaluatorRecordResponse) GetRecords() (v []*evaluator.EvaluatorRecord) {
	if p != nil {
		return p.Records
	}
	return
}

var ListEvaluatorRecordResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListEvaluatorRecordResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListEvaluatorRecordResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListEvaluatorRecordResponse) SetRecords(val []*evaluator.EvaluatorRecord) {
	p.Records = val
}
func (p *ListEvaluatorRecordResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListEvaluatorRecordResponse = map[int16]string{
	1:   "records",
	255: "BaseResp",
}

func (p *ListEvaluatorRecordResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListEvaluatorRecordResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRecords bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRecords = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRecords {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluatorRecordResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListEvaluatorRecordResponse[fieldId]))
}

func (p *ListEvaluatorRecordResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*evaluator.EvaluatorRecord, 0, size)
	values := make([]evaluator.EvaluatorRecord, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Records = _field
	return nil
}
func (p *ListEvaluatorRecordResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListEvaluatorRecordResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluatorRecordResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluatorRecordResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("records", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Records)); err != nil {
		return err
	}
	for _, v := range p.Records {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluatorRecordResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluatorRecordResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluatorRecordResponse(%+v)", *p)

}

func (p *ListEvaluatorRecordResponse) DeepEqual(ano *ListEvaluatorRecordResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Records) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListEvaluatorRecordResponse) Field1DeepEqual(src []*evaluator.EvaluatorRecord) bool {

	if len(p.Records) != len(src) {
		return false
	}
	for i, v := range p.Records {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvaluatorRecordResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluatorRecordRequest struct {
	WorkspaceID       int64 `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" query:"workspace_id,required" `
	EvaluatorRecordID int64 `thrift:"evaluator_record_id,2,required" frugal:"2,required,i64" json:"evaluator_record_id" path:"evaluator_record_id,required" `
	// 是否查询已删除的，默认不查询
	IncludeDeleted *bool      `thrift:"include_deleted,3,optional" frugal:"3,optional,bool" json:"include_deleted,omitempty" query:"include_deleted"`
	Base           *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetEvaluatorRecordRequest() *GetEvaluatorRecordRequest {
	return &GetEvaluatorRecordRequest{}
}

func (p *GetEvaluatorRecordRequest) InitDefault() {
}

func (p *GetEvaluatorRecordRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *GetEvaluatorRecordRequest) GetEvaluatorRecordID() (v int64) {
	if p != nil {
		return p.EvaluatorRecordID
	}
	return
}

var GetEvaluatorRecordRequest_IncludeDeleted_DEFAULT bool

func (p *GetEvaluatorRecordRequest) GetIncludeDeleted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIncludeDeleted() {
		return GetEvaluatorRecordRequest_IncludeDeleted_DEFAULT
	}
	return *p.IncludeDeleted
}

var GetEvaluatorRecordRequest_Base_DEFAULT *base.Base

func (p *GetEvaluatorRecordRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetEvaluatorRecordRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetEvaluatorRecordRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *GetEvaluatorRecordRequest) SetEvaluatorRecordID(val int64) {
	p.EvaluatorRecordID = val
}
func (p *GetEvaluatorRecordRequest) SetIncludeDeleted(val *bool) {
	p.IncludeDeleted = val
}
func (p *GetEvaluatorRecordRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetEvaluatorRecordRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_record_id",
	3:   "include_deleted",
	255: "Base",
}

func (p *GetEvaluatorRecordRequest) IsSetIncludeDeleted() bool {
	return p.IncludeDeleted != nil
}

func (p *GetEvaluatorRecordRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetEvaluatorRecordRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluatorRecordID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorRecordID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorRecordID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorRecordRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetEvaluatorRecordRequest[fieldId]))
}

func (p *GetEvaluatorRecordRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetEvaluatorRecordRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorRecordID = _field
	return nil
}
func (p *GetEvaluatorRecordRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IncludeDeleted = _field
	return nil
}
func (p *GetEvaluatorRecordRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetEvaluatorRecordRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorRecordRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorRecordRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluatorRecordRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_record_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorRecordID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvaluatorRecordRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeDeleted() {
		if err = oprot.WriteFieldBegin("include_deleted", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IncludeDeleted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetEvaluatorRecordRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluatorRecordRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorRecordRequest(%+v)", *p)

}

func (p *GetEvaluatorRecordRequest) DeepEqual(ano *GetEvaluatorRecordRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorRecordID) {
		return false
	}
	if !p.Field3DeepEqual(ano.IncludeDeleted) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetEvaluatorRecordRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *GetEvaluatorRecordRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluatorRecordID != src {
		return false
	}
	return true
}
func (p *GetEvaluatorRecordRequest) Field3DeepEqual(src *bool) bool {

	if p.IncludeDeleted == src {
		return true
	} else if p.IncludeDeleted == nil || src == nil {
		return false
	}
	if *p.IncludeDeleted != *src {
		return false
	}
	return true
}
func (p *GetEvaluatorRecordRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvaluatorRecordResponse struct {
	Record   *evaluator.EvaluatorRecord `thrift:"record,1,required" frugal:"1,required,evaluator.EvaluatorRecord" form:"record,required" json:"record,required"`
	BaseResp *base.BaseResp             `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetEvaluatorRecordResponse() *GetEvaluatorRecordResponse {
	return &GetEvaluatorRecordResponse{}
}

func (p *GetEvaluatorRecordResponse) InitDefault() {
}

var GetEvaluatorRecordResponse_Record_DEFAULT *evaluator.EvaluatorRecord

func (p *GetEvaluatorRecordResponse) GetRecord() (v *evaluator.EvaluatorRecord) {
	if p == nil {
		return
	}
	if !p.IsSetRecord() {
		return GetEvaluatorRecordResponse_Record_DEFAULT
	}
	return p.Record
}

var GetEvaluatorRecordResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetEvaluatorRecordResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetEvaluatorRecordResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetEvaluatorRecordResponse) SetRecord(val *evaluator.EvaluatorRecord) {
	p.Record = val
}
func (p *GetEvaluatorRecordResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetEvaluatorRecordResponse = map[int16]string{
	1:   "record",
	255: "BaseResp",
}

func (p *GetEvaluatorRecordResponse) IsSetRecord() bool {
	return p.Record != nil
}

func (p *GetEvaluatorRecordResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetEvaluatorRecordResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRecord bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRecord = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRecord {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvaluatorRecordResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetEvaluatorRecordResponse[fieldId]))
}

func (p *GetEvaluatorRecordResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorRecord()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Record = _field
	return nil
}
func (p *GetEvaluatorRecordResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetEvaluatorRecordResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorRecordResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvaluatorRecordResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("record", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Record.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvaluatorRecordResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvaluatorRecordResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvaluatorRecordResponse(%+v)", *p)

}

func (p *GetEvaluatorRecordResponse) DeepEqual(ano *GetEvaluatorRecordResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Record) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetEvaluatorRecordResponse) Field1DeepEqual(src *evaluator.EvaluatorRecord) bool {

	if !p.Record.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetEvaluatorRecordResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetEvaluatorRecordsRequest struct {
	WorkspaceID        int64   `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	EvaluatorRecordIds []int64 `thrift:"evaluator_record_ids,2,optional" frugal:"2,optional,list<i64>" json:"evaluator_record_ids" form:"evaluator_record_ids" `
	// 是否查询已删除的，默认不查询
	IncludeDeleted *bool      `thrift:"include_deleted,3,optional" frugal:"3,optional,bool" form:"include_deleted" json:"include_deleted,omitempty"`
	Base           *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetEvaluatorRecordsRequest() *BatchGetEvaluatorRecordsRequest {
	return &BatchGetEvaluatorRecordsRequest{}
}

func (p *BatchGetEvaluatorRecordsRequest) InitDefault() {
}

func (p *BatchGetEvaluatorRecordsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var BatchGetEvaluatorRecordsRequest_EvaluatorRecordIds_DEFAULT []int64

func (p *BatchGetEvaluatorRecordsRequest) GetEvaluatorRecordIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorRecordIds() {
		return BatchGetEvaluatorRecordsRequest_EvaluatorRecordIds_DEFAULT
	}
	return p.EvaluatorRecordIds
}

var BatchGetEvaluatorRecordsRequest_IncludeDeleted_DEFAULT bool

func (p *BatchGetEvaluatorRecordsRequest) GetIncludeDeleted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIncludeDeleted() {
		return BatchGetEvaluatorRecordsRequest_IncludeDeleted_DEFAULT
	}
	return *p.IncludeDeleted
}

var BatchGetEvaluatorRecordsRequest_Base_DEFAULT *base.Base

func (p *BatchGetEvaluatorRecordsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetEvaluatorRecordsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetEvaluatorRecordsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchGetEvaluatorRecordsRequest) SetEvaluatorRecordIds(val []int64) {
	p.EvaluatorRecordIds = val
}
func (p *BatchGetEvaluatorRecordsRequest) SetIncludeDeleted(val *bool) {
	p.IncludeDeleted = val
}
func (p *BatchGetEvaluatorRecordsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetEvaluatorRecordsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_record_ids",
	3:   "include_deleted",
	255: "Base",
}

func (p *BatchGetEvaluatorRecordsRequest) IsSetEvaluatorRecordIds() bool {
	return p.EvaluatorRecordIds != nil
}

func (p *BatchGetEvaluatorRecordsRequest) IsSetIncludeDeleted() bool {
	return p.IncludeDeleted != nil
}

func (p *BatchGetEvaluatorRecordsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetEvaluatorRecordsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetEvaluatorRecordsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetEvaluatorRecordsRequest[fieldId]))
}

func (p *BatchGetEvaluatorRecordsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetEvaluatorRecordsRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorRecordIds = _field
	return nil
}
func (p *BatchGetEvaluatorRecordsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IncludeDeleted = _field
	return nil
}
func (p *BatchGetEvaluatorRecordsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetEvaluatorRecordsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluatorRecordsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetEvaluatorRecordsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetEvaluatorRecordsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorRecordIds() {
		if err = oprot.WriteFieldBegin("evaluator_record_ids", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.EvaluatorRecordIds)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorRecordIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetEvaluatorRecordsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIncludeDeleted() {
		if err = oprot.WriteFieldBegin("include_deleted", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IncludeDeleted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchGetEvaluatorRecordsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetEvaluatorRecordsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetEvaluatorRecordsRequest(%+v)", *p)

}

func (p *BatchGetEvaluatorRecordsRequest) DeepEqual(ano *BatchGetEvaluatorRecordsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorRecordIds) {
		return false
	}
	if !p.Field3DeepEqual(ano.IncludeDeleted) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetEvaluatorRecordsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchGetEvaluatorRecordsRequest) Field2DeepEqual(src []int64) bool {

	if len(p.EvaluatorRecordIds) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorRecordIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchGetEvaluatorRecordsRequest) Field3DeepEqual(src *bool) bool {

	if p.IncludeDeleted == src {
		return true
	} else if p.IncludeDeleted == nil || src == nil {
		return false
	}
	if *p.IncludeDeleted != *src {
		return false
	}
	return true
}
func (p *BatchGetEvaluatorRecordsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetEvaluatorRecordsResponse struct {
	Records  []*evaluator.EvaluatorRecord `thrift:"records,1,required" frugal:"1,required,list<evaluator.EvaluatorRecord>" form:"records,required" json:"records,required"`
	BaseResp *base.BaseResp               `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchGetEvaluatorRecordsResponse() *BatchGetEvaluatorRecordsResponse {
	return &BatchGetEvaluatorRecordsResponse{}
}

func (p *BatchGetEvaluatorRecordsResponse) InitDefault() {
}

func (p *BatchGetEvaluatorRecordsResponse) GetRecords() (v []*evaluator.EvaluatorRecord) {
	if p != nil {
		return p.Records
	}
	return
}

var BatchGetEvaluatorRecordsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetEvaluatorRecordsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetEvaluatorRecordsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetEvaluatorRecordsResponse) SetRecords(val []*evaluator.EvaluatorRecord) {
	p.Records = val
}
func (p *BatchGetEvaluatorRecordsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetEvaluatorRecordsResponse = map[int16]string{
	1:   "records",
	255: "BaseResp",
}

func (p *BatchGetEvaluatorRecordsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetEvaluatorRecordsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRecords bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRecords = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRecords {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetEvaluatorRecordsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetEvaluatorRecordsResponse[fieldId]))
}

func (p *BatchGetEvaluatorRecordsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*evaluator.EvaluatorRecord, 0, size)
	values := make([]evaluator.EvaluatorRecord, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Records = _field
	return nil
}
func (p *BatchGetEvaluatorRecordsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetEvaluatorRecordsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluatorRecordsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetEvaluatorRecordsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("records", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Records)); err != nil {
		return err
	}
	for _, v := range p.Records {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetEvaluatorRecordsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetEvaluatorRecordsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetEvaluatorRecordsResponse(%+v)", *p)

}

func (p *BatchGetEvaluatorRecordsResponse) DeepEqual(ano *BatchGetEvaluatorRecordsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Records) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetEvaluatorRecordsResponse) Field1DeepEqual(src []*evaluator.EvaluatorRecord) bool {

	if len(p.Records) != len(src) {
		return false
	}
	for i, v := range p.Records {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetEvaluatorRecordsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateEvaluatorRecordRequest struct {
	WorkspaceID       int64                 `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	EvaluatorRecordID int64                 `thrift:"evaluator_record_id,2,required" frugal:"2,required,i64" json:"evaluator_record_id" path:"evaluator_record_id,required" `
	Correction        *evaluator.Correction `thrift:"correction,3,required" frugal:"3,required,evaluator.Correction" form:"correction,required" json:"correction,required"`
	Base              *base.Base            `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdateEvaluatorRecordRequest() *UpdateEvaluatorRecordRequest {
	return &UpdateEvaluatorRecordRequest{}
}

func (p *UpdateEvaluatorRecordRequest) InitDefault() {
}

func (p *UpdateEvaluatorRecordRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *UpdateEvaluatorRecordRequest) GetEvaluatorRecordID() (v int64) {
	if p != nil {
		return p.EvaluatorRecordID
	}
	return
}

var UpdateEvaluatorRecordRequest_Correction_DEFAULT *evaluator.Correction

func (p *UpdateEvaluatorRecordRequest) GetCorrection() (v *evaluator.Correction) {
	if p == nil {
		return
	}
	if !p.IsSetCorrection() {
		return UpdateEvaluatorRecordRequest_Correction_DEFAULT
	}
	return p.Correction
}

var UpdateEvaluatorRecordRequest_Base_DEFAULT *base.Base

func (p *UpdateEvaluatorRecordRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdateEvaluatorRecordRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateEvaluatorRecordRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *UpdateEvaluatorRecordRequest) SetEvaluatorRecordID(val int64) {
	p.EvaluatorRecordID = val
}
func (p *UpdateEvaluatorRecordRequest) SetCorrection(val *evaluator.Correction) {
	p.Correction = val
}
func (p *UpdateEvaluatorRecordRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateEvaluatorRecordRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_record_id",
	3:   "correction",
	255: "Base",
}

func (p *UpdateEvaluatorRecordRequest) IsSetCorrection() bool {
	return p.Correction != nil
}

func (p *UpdateEvaluatorRecordRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateEvaluatorRecordRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluatorRecordID bool = false
	var issetCorrection bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorRecordID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetCorrection = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorRecordID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetCorrection {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEvaluatorRecordRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateEvaluatorRecordRequest[fieldId]))
}

func (p *UpdateEvaluatorRecordRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *UpdateEvaluatorRecordRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorRecordID = _field
	return nil
}
func (p *UpdateEvaluatorRecordRequest) ReadField3(iprot thrift.TProtocol) error {
	_field := evaluator.NewCorrection()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Correction = _field
	return nil
}
func (p *UpdateEvaluatorRecordRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdateEvaluatorRecordRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluatorRecordRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEvaluatorRecordRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateEvaluatorRecordRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_record_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorRecordID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdateEvaluatorRecordRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("correction", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Correction.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UpdateEvaluatorRecordRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateEvaluatorRecordRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEvaluatorRecordRequest(%+v)", *p)

}

func (p *UpdateEvaluatorRecordRequest) DeepEqual(ano *UpdateEvaluatorRecordRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorRecordID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Correction) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateEvaluatorRecordRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *UpdateEvaluatorRecordRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluatorRecordID != src {
		return false
	}
	return true
}
func (p *UpdateEvaluatorRecordRequest) Field3DeepEqual(src *evaluator.Correction) bool {

	if !p.Correction.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateEvaluatorRecordRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateEvaluatorRecordResponse struct {
	Record   *evaluator.EvaluatorRecord `thrift:"record,1,required" frugal:"1,required,evaluator.EvaluatorRecord" form:"record,required" json:"record,required"`
	BaseResp *base.BaseResp             `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewUpdateEvaluatorRecordResponse() *UpdateEvaluatorRecordResponse {
	return &UpdateEvaluatorRecordResponse{}
}

func (p *UpdateEvaluatorRecordResponse) InitDefault() {
}

var UpdateEvaluatorRecordResponse_Record_DEFAULT *evaluator.EvaluatorRecord

func (p *UpdateEvaluatorRecordResponse) GetRecord() (v *evaluator.EvaluatorRecord) {
	if p == nil {
		return
	}
	if !p.IsSetRecord() {
		return UpdateEvaluatorRecordResponse_Record_DEFAULT
	}
	return p.Record
}

var UpdateEvaluatorRecordResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateEvaluatorRecordResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdateEvaluatorRecordResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateEvaluatorRecordResponse) SetRecord(val *evaluator.EvaluatorRecord) {
	p.Record = val
}
func (p *UpdateEvaluatorRecordResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateEvaluatorRecordResponse = map[int16]string{
	1:   "record",
	255: "BaseResp",
}

func (p *UpdateEvaluatorRecordResponse) IsSetRecord() bool {
	return p.Record != nil
}

func (p *UpdateEvaluatorRecordResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateEvaluatorRecordResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRecord bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRecord = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRecord {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEvaluatorRecordResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateEvaluatorRecordResponse[fieldId]))
}

func (p *UpdateEvaluatorRecordResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorRecord()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Record = _field
	return nil
}
func (p *UpdateEvaluatorRecordResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdateEvaluatorRecordResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluatorRecordResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEvaluatorRecordResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("record", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Record.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateEvaluatorRecordResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateEvaluatorRecordResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEvaluatorRecordResponse(%+v)", *p)

}

func (p *UpdateEvaluatorRecordResponse) DeepEqual(ano *UpdateEvaluatorRecordResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Record) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateEvaluatorRecordResponse) Field1DeepEqual(src *evaluator.EvaluatorRecord) bool {

	if !p.Record.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateEvaluatorRecordResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetDefaultPromptEvaluatorToolsRequest struct {
	Base *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetDefaultPromptEvaluatorToolsRequest() *GetDefaultPromptEvaluatorToolsRequest {
	return &GetDefaultPromptEvaluatorToolsRequest{}
}

func (p *GetDefaultPromptEvaluatorToolsRequest) InitDefault() {
}

var GetDefaultPromptEvaluatorToolsRequest_Base_DEFAULT *base.Base

func (p *GetDefaultPromptEvaluatorToolsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetDefaultPromptEvaluatorToolsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetDefaultPromptEvaluatorToolsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetDefaultPromptEvaluatorToolsRequest = map[int16]string{
	255: "Base",
}

func (p *GetDefaultPromptEvaluatorToolsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetDefaultPromptEvaluatorToolsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDefaultPromptEvaluatorToolsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDefaultPromptEvaluatorToolsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetDefaultPromptEvaluatorToolsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDefaultPromptEvaluatorToolsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDefaultPromptEvaluatorToolsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetDefaultPromptEvaluatorToolsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDefaultPromptEvaluatorToolsRequest(%+v)", *p)

}

func (p *GetDefaultPromptEvaluatorToolsRequest) DeepEqual(ano *GetDefaultPromptEvaluatorToolsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetDefaultPromptEvaluatorToolsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetDefaultPromptEvaluatorToolsResponse struct {
	Tools    []*evaluator.Tool `thrift:"tools,1,required" frugal:"1,required,list<evaluator.Tool>" form:"tools,required" json:"tools,required"`
	BaseResp *base.BaseResp    `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetDefaultPromptEvaluatorToolsResponse() *GetDefaultPromptEvaluatorToolsResponse {
	return &GetDefaultPromptEvaluatorToolsResponse{}
}

func (p *GetDefaultPromptEvaluatorToolsResponse) InitDefault() {
}

func (p *GetDefaultPromptEvaluatorToolsResponse) GetTools() (v []*evaluator.Tool) {
	if p != nil {
		return p.Tools
	}
	return
}

var GetDefaultPromptEvaluatorToolsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetDefaultPromptEvaluatorToolsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetDefaultPromptEvaluatorToolsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetDefaultPromptEvaluatorToolsResponse) SetTools(val []*evaluator.Tool) {
	p.Tools = val
}
func (p *GetDefaultPromptEvaluatorToolsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetDefaultPromptEvaluatorToolsResponse = map[int16]string{
	1:   "tools",
	255: "BaseResp",
}

func (p *GetDefaultPromptEvaluatorToolsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetDefaultPromptEvaluatorToolsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTools bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTools = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTools {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDefaultPromptEvaluatorToolsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetDefaultPromptEvaluatorToolsResponse[fieldId]))
}

func (p *GetDefaultPromptEvaluatorToolsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*evaluator.Tool, 0, size)
	values := make([]evaluator.Tool, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tools = _field
	return nil
}
func (p *GetDefaultPromptEvaluatorToolsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetDefaultPromptEvaluatorToolsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDefaultPromptEvaluatorToolsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDefaultPromptEvaluatorToolsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tools", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tools)); err != nil {
		return err
	}
	for _, v := range p.Tools {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetDefaultPromptEvaluatorToolsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetDefaultPromptEvaluatorToolsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDefaultPromptEvaluatorToolsResponse(%+v)", *p)

}

func (p *GetDefaultPromptEvaluatorToolsResponse) DeepEqual(ano *GetDefaultPromptEvaluatorToolsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Tools) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetDefaultPromptEvaluatorToolsResponse) Field1DeepEqual(src []*evaluator.Tool) bool {

	if len(p.Tools) != len(src) {
		return false
	}
	for i, v := range p.Tools {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetDefaultPromptEvaluatorToolsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ValidateEvaluatorRequest struct {
	WorkspaceID      int64                         `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	EvaluatorContent *evaluator.EvaluatorContent   `thrift:"evaluator_content,2,required" frugal:"2,required,evaluator.EvaluatorContent" form:"evaluator_content,required" json:"evaluator_content,required"`
	EvaluatorType    evaluator.EvaluatorType       `thrift:"evaluator_type,3,required" frugal:"3,required,EvaluatorType" json:"evaluator_type" form:"evaluator_type,required" `
	InputData        *evaluator.EvaluatorInputData `thrift:"input_data,4,optional" frugal:"4,optional,evaluator.EvaluatorInputData" form:"input_data" json:"input_data,omitempty"`
	Base             *base.Base                    `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewValidateEvaluatorRequest() *ValidateEvaluatorRequest {
	return &ValidateEvaluatorRequest{}
}

func (p *ValidateEvaluatorRequest) InitDefault() {
}

func (p *ValidateEvaluatorRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var ValidateEvaluatorRequest_EvaluatorContent_DEFAULT *evaluator.EvaluatorContent

func (p *ValidateEvaluatorRequest) GetEvaluatorContent() (v *evaluator.EvaluatorContent) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorContent() {
		return ValidateEvaluatorRequest_EvaluatorContent_DEFAULT
	}
	return p.EvaluatorContent
}

func (p *ValidateEvaluatorRequest) GetEvaluatorType() (v evaluator.EvaluatorType) {
	if p != nil {
		return p.EvaluatorType
	}
	return
}

var ValidateEvaluatorRequest_InputData_DEFAULT *evaluator.EvaluatorInputData

func (p *ValidateEvaluatorRequest) GetInputData() (v *evaluator.EvaluatorInputData) {
	if p == nil {
		return
	}
	if !p.IsSetInputData() {
		return ValidateEvaluatorRequest_InputData_DEFAULT
	}
	return p.InputData
}

var ValidateEvaluatorRequest_Base_DEFAULT *base.Base

func (p *ValidateEvaluatorRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ValidateEvaluatorRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ValidateEvaluatorRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ValidateEvaluatorRequest) SetEvaluatorContent(val *evaluator.EvaluatorContent) {
	p.EvaluatorContent = val
}
func (p *ValidateEvaluatorRequest) SetEvaluatorType(val evaluator.EvaluatorType) {
	p.EvaluatorType = val
}
func (p *ValidateEvaluatorRequest) SetInputData(val *evaluator.EvaluatorInputData) {
	p.InputData = val
}
func (p *ValidateEvaluatorRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ValidateEvaluatorRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluator_content",
	3:   "evaluator_type",
	4:   "input_data",
	255: "Base",
}

func (p *ValidateEvaluatorRequest) IsSetEvaluatorContent() bool {
	return p.EvaluatorContent != nil
}

func (p *ValidateEvaluatorRequest) IsSetInputData() bool {
	return p.InputData != nil
}

func (p *ValidateEvaluatorRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ValidateEvaluatorRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluatorContent bool = false
	var issetEvaluatorType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorContent = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorContent {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ValidateEvaluatorRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ValidateEvaluatorRequest[fieldId]))
}

func (p *ValidateEvaluatorRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ValidateEvaluatorRequest) ReadField2(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorContent()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorContent = _field
	return nil
}
func (p *ValidateEvaluatorRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field evaluator.EvaluatorType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = evaluator.EvaluatorType(v)
	}
	p.EvaluatorType = _field
	return nil
}
func (p *ValidateEvaluatorRequest) ReadField4(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorInputData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.InputData = _field
	return nil
}
func (p *ValidateEvaluatorRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ValidateEvaluatorRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ValidateEvaluatorRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ValidateEvaluatorRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ValidateEvaluatorRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_content", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.EvaluatorContent.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ValidateEvaluatorRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_type", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.EvaluatorType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ValidateEvaluatorRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputData() {
		if err = oprot.WriteFieldBegin("input_data", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.InputData.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ValidateEvaluatorRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ValidateEvaluatorRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ValidateEvaluatorRequest(%+v)", *p)

}

func (p *ValidateEvaluatorRequest) DeepEqual(ano *ValidateEvaluatorRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorContent) {
		return false
	}
	if !p.Field3DeepEqual(ano.EvaluatorType) {
		return false
	}
	if !p.Field4DeepEqual(ano.InputData) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ValidateEvaluatorRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ValidateEvaluatorRequest) Field2DeepEqual(src *evaluator.EvaluatorContent) bool {

	if !p.EvaluatorContent.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ValidateEvaluatorRequest) Field3DeepEqual(src evaluator.EvaluatorType) bool {

	if p.EvaluatorType != src {
		return false
	}
	return true
}
func (p *ValidateEvaluatorRequest) Field4DeepEqual(src *evaluator.EvaluatorInputData) bool {

	if !p.InputData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ValidateEvaluatorRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ValidateEvaluatorResponse struct {
	Valid               *bool                          `thrift:"valid,1,optional" frugal:"1,optional,bool" form:"valid" json:"valid,omitempty"`
	ErrorMessage        *string                        `thrift:"error_message,2,optional" frugal:"2,optional,string" form:"error_message" json:"error_message,omitempty"`
	EvaluatorOutputData *evaluator.EvaluatorOutputData `thrift:"evaluator_output_data,3,optional" frugal:"3,optional,evaluator.EvaluatorOutputData" form:"evaluator_output_data" json:"evaluator_output_data,omitempty"`
	BaseResp            *base.BaseResp                 `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewValidateEvaluatorResponse() *ValidateEvaluatorResponse {
	return &ValidateEvaluatorResponse{}
}

func (p *ValidateEvaluatorResponse) InitDefault() {
}

var ValidateEvaluatorResponse_Valid_DEFAULT bool

func (p *ValidateEvaluatorResponse) GetValid() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetValid() {
		return ValidateEvaluatorResponse_Valid_DEFAULT
	}
	return *p.Valid
}

var ValidateEvaluatorResponse_ErrorMessage_DEFAULT string

func (p *ValidateEvaluatorResponse) GetErrorMessage() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetErrorMessage() {
		return ValidateEvaluatorResponse_ErrorMessage_DEFAULT
	}
	return *p.ErrorMessage
}

var ValidateEvaluatorResponse_EvaluatorOutputData_DEFAULT *evaluator.EvaluatorOutputData

func (p *ValidateEvaluatorResponse) GetEvaluatorOutputData() (v *evaluator.EvaluatorOutputData) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorOutputData() {
		return ValidateEvaluatorResponse_EvaluatorOutputData_DEFAULT
	}
	return p.EvaluatorOutputData
}

var ValidateEvaluatorResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ValidateEvaluatorResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ValidateEvaluatorResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ValidateEvaluatorResponse) SetValid(val *bool) {
	p.Valid = val
}
func (p *ValidateEvaluatorResponse) SetErrorMessage(val *string) {
	p.ErrorMessage = val
}
func (p *ValidateEvaluatorResponse) SetEvaluatorOutputData(val *evaluator.EvaluatorOutputData) {
	p.EvaluatorOutputData = val
}
func (p *ValidateEvaluatorResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ValidateEvaluatorResponse = map[int16]string{
	1:   "valid",
	2:   "error_message",
	3:   "evaluator_output_data",
	255: "BaseResp",
}

func (p *ValidateEvaluatorResponse) IsSetValid() bool {
	return p.Valid != nil
}

func (p *ValidateEvaluatorResponse) IsSetErrorMessage() bool {
	return p.ErrorMessage != nil
}

func (p *ValidateEvaluatorResponse) IsSetEvaluatorOutputData() bool {
	return p.EvaluatorOutputData != nil
}

func (p *ValidateEvaluatorResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ValidateEvaluatorResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ValidateEvaluatorResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ValidateEvaluatorResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Valid = _field
	return nil
}
func (p *ValidateEvaluatorResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ErrorMessage = _field
	return nil
}
func (p *ValidateEvaluatorResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorOutputData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorOutputData = _field
	return nil
}
func (p *ValidateEvaluatorResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ValidateEvaluatorResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ValidateEvaluatorResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ValidateEvaluatorResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetValid() {
		if err = oprot.WriteFieldBegin("valid", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Valid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ValidateEvaluatorResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorMessage() {
		if err = oprot.WriteFieldBegin("error_message", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ErrorMessage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ValidateEvaluatorResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorOutputData() {
		if err = oprot.WriteFieldBegin("evaluator_output_data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluatorOutputData.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ValidateEvaluatorResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ValidateEvaluatorResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ValidateEvaluatorResponse(%+v)", *p)

}

func (p *ValidateEvaluatorResponse) DeepEqual(ano *ValidateEvaluatorResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Valid) {
		return false
	}
	if !p.Field2DeepEqual(ano.ErrorMessage) {
		return false
	}
	if !p.Field3DeepEqual(ano.EvaluatorOutputData) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ValidateEvaluatorResponse) Field1DeepEqual(src *bool) bool {

	if p.Valid == src {
		return true
	} else if p.Valid == nil || src == nil {
		return false
	}
	if *p.Valid != *src {
		return false
	}
	return true
}
func (p *ValidateEvaluatorResponse) Field2DeepEqual(src *string) bool {

	if p.ErrorMessage == src {
		return true
	} else if p.ErrorMessage == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ErrorMessage, *src) != 0 {
		return false
	}
	return true
}
func (p *ValidateEvaluatorResponse) Field3DeepEqual(src *evaluator.EvaluatorOutputData) bool {

	if !p.EvaluatorOutputData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ValidateEvaluatorResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListTemplatesV2Request struct {
	// 筛选器选项
	FilterOption *evaluator.EvaluatorFilterOption `thrift:"filter_option,1,optional" frugal:"1,optional,evaluator.EvaluatorFilterOption" json:"filter_option" form:"filter_option" `
	PageSize     *int32                           `thrift:"page_size,101,optional" frugal:"101,optional,i32" form:"page_size" json:"page_size,omitempty"`
	PageNumber   *int32                           `thrift:"page_number,102,optional" frugal:"102,optional,i32" form:"page_number" json:"page_number,omitempty"`
	OrderBys     []*common.OrderBy                `thrift:"order_bys,103,optional" frugal:"103,optional,list<common.OrderBy>" form:"order_bys" json:"order_bys,omitempty"`
	Base         *base.Base                       `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListTemplatesV2Request() *ListTemplatesV2Request {
	return &ListTemplatesV2Request{}
}

func (p *ListTemplatesV2Request) InitDefault() {
}

var ListTemplatesV2Request_FilterOption_DEFAULT *evaluator.EvaluatorFilterOption

func (p *ListTemplatesV2Request) GetFilterOption() (v *evaluator.EvaluatorFilterOption) {
	if p == nil {
		return
	}
	if !p.IsSetFilterOption() {
		return ListTemplatesV2Request_FilterOption_DEFAULT
	}
	return p.FilterOption
}

var ListTemplatesV2Request_PageSize_DEFAULT int32

func (p *ListTemplatesV2Request) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListTemplatesV2Request_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListTemplatesV2Request_PageNumber_DEFAULT int32

func (p *ListTemplatesV2Request) GetPageNumber() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNumber() {
		return ListTemplatesV2Request_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var ListTemplatesV2Request_OrderBys_DEFAULT []*common.OrderBy

func (p *ListTemplatesV2Request) GetOrderBys() (v []*common.OrderBy) {
	if p == nil {
		return
	}
	if !p.IsSetOrderBys() {
		return ListTemplatesV2Request_OrderBys_DEFAULT
	}
	return p.OrderBys
}

var ListTemplatesV2Request_Base_DEFAULT *base.Base

func (p *ListTemplatesV2Request) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListTemplatesV2Request_Base_DEFAULT
	}
	return p.Base
}
func (p *ListTemplatesV2Request) SetFilterOption(val *evaluator.EvaluatorFilterOption) {
	p.FilterOption = val
}
func (p *ListTemplatesV2Request) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListTemplatesV2Request) SetPageNumber(val *int32) {
	p.PageNumber = val
}
func (p *ListTemplatesV2Request) SetOrderBys(val []*common.OrderBy) {
	p.OrderBys = val
}
func (p *ListTemplatesV2Request) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListTemplatesV2Request = map[int16]string{
	1:   "filter_option",
	101: "page_size",
	102: "page_number",
	103: "order_bys",
	255: "Base",
}

func (p *ListTemplatesV2Request) IsSetFilterOption() bool {
	return p.FilterOption != nil
}

func (p *ListTemplatesV2Request) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListTemplatesV2Request) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *ListTemplatesV2Request) IsSetOrderBys() bool {
	return p.OrderBys != nil
}

func (p *ListTemplatesV2Request) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListTemplatesV2Request) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListTemplatesV2Request[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListTemplatesV2Request) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorFilterOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FilterOption = _field
	return nil
}
func (p *ListTemplatesV2Request) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListTemplatesV2Request) ReadField102(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNumber = _field
	return nil
}
func (p *ListTemplatesV2Request) ReadField103(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*common.OrderBy, 0, size)
	values := make([]common.OrderBy, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OrderBys = _field
	return nil
}
func (p *ListTemplatesV2Request) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListTemplatesV2Request) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListTemplatesV2Request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListTemplatesV2Request) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterOption() {
		if err = oprot.WriteFieldBegin("filter_option", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FilterOption.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListTemplatesV2Request) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListTemplatesV2Request) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("page_number", thrift.I32, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *ListTemplatesV2Request) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBys() {
		if err = oprot.WriteFieldBegin("order_bys", thrift.LIST, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderBys)); err != nil {
			return err
		}
		for _, v := range p.OrderBys {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *ListTemplatesV2Request) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListTemplatesV2Request) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTemplatesV2Request(%+v)", *p)

}

func (p *ListTemplatesV2Request) DeepEqual(ano *ListTemplatesV2Request) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FilterOption) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field102DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field103DeepEqual(ano.OrderBys) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListTemplatesV2Request) Field1DeepEqual(src *evaluator.EvaluatorFilterOption) bool {

	if !p.FilterOption.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListTemplatesV2Request) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListTemplatesV2Request) Field102DeepEqual(src *int32) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if *p.PageNumber != *src {
		return false
	}
	return true
}
func (p *ListTemplatesV2Request) Field103DeepEqual(src []*common.OrderBy) bool {

	if len(p.OrderBys) != len(src) {
		return false
	}
	for i, v := range p.OrderBys {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListTemplatesV2Request) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListTemplatesV2Response struct {
	EvaluatorTemplates []*evaluator.EvaluatorTemplate `thrift:"evaluator_templates,1,optional" frugal:"1,optional,list<evaluator.EvaluatorTemplate>" form:"evaluator_templates" json:"evaluator_templates,omitempty"`
	Total              *int64                         `thrift:"total,10,optional" frugal:"10,optional,i64" json:"total" form:"total" `
	BaseResp           *base.BaseResp                 `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListTemplatesV2Response() *ListTemplatesV2Response {
	return &ListTemplatesV2Response{}
}

func (p *ListTemplatesV2Response) InitDefault() {
}

var ListTemplatesV2Response_EvaluatorTemplates_DEFAULT []*evaluator.EvaluatorTemplate

func (p *ListTemplatesV2Response) GetEvaluatorTemplates() (v []*evaluator.EvaluatorTemplate) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorTemplates() {
		return ListTemplatesV2Response_EvaluatorTemplates_DEFAULT
	}
	return p.EvaluatorTemplates
}

var ListTemplatesV2Response_Total_DEFAULT int64

func (p *ListTemplatesV2Response) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListTemplatesV2Response_Total_DEFAULT
	}
	return *p.Total
}

var ListTemplatesV2Response_BaseResp_DEFAULT *base.BaseResp

func (p *ListTemplatesV2Response) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListTemplatesV2Response_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListTemplatesV2Response) SetEvaluatorTemplates(val []*evaluator.EvaluatorTemplate) {
	p.EvaluatorTemplates = val
}
func (p *ListTemplatesV2Response) SetTotal(val *int64) {
	p.Total = val
}
func (p *ListTemplatesV2Response) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListTemplatesV2Response = map[int16]string{
	1:   "evaluator_templates",
	10:  "total",
	255: "BaseResp",
}

func (p *ListTemplatesV2Response) IsSetEvaluatorTemplates() bool {
	return p.EvaluatorTemplates != nil
}

func (p *ListTemplatesV2Response) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListTemplatesV2Response) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListTemplatesV2Response) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListTemplatesV2Response[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListTemplatesV2Response) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*evaluator.EvaluatorTemplate, 0, size)
	values := make([]evaluator.EvaluatorTemplate, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorTemplates = _field
	return nil
}
func (p *ListTemplatesV2Response) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *ListTemplatesV2Response) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListTemplatesV2Response) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListTemplatesV2Response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListTemplatesV2Response) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorTemplates() {
		if err = oprot.WriteFieldBegin("evaluator_templates", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvaluatorTemplates)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorTemplates {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListTemplatesV2Response) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *ListTemplatesV2Response) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListTemplatesV2Response) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListTemplatesV2Response(%+v)", *p)

}

func (p *ListTemplatesV2Response) DeepEqual(ano *ListTemplatesV2Response) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorTemplates) {
		return false
	}
	if !p.Field10DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListTemplatesV2Response) Field1DeepEqual(src []*evaluator.EvaluatorTemplate) bool {

	if len(p.EvaluatorTemplates) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorTemplates {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListTemplatesV2Response) Field10DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *ListTemplatesV2Response) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetTemplateInfoV2Request struct {
	EvaluatorTemplateID int64      `thrift:"evaluator_template_id,1,required" frugal:"1,required,i64" json:"evaluator_template_id" form:"evaluator_template_id,required" `
	Base                *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetTemplateInfoV2Request() *GetTemplateInfoV2Request {
	return &GetTemplateInfoV2Request{}
}

func (p *GetTemplateInfoV2Request) InitDefault() {
}

func (p *GetTemplateInfoV2Request) GetEvaluatorTemplateID() (v int64) {
	if p != nil {
		return p.EvaluatorTemplateID
	}
	return
}

var GetTemplateInfoV2Request_Base_DEFAULT *base.Base

func (p *GetTemplateInfoV2Request) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetTemplateInfoV2Request_Base_DEFAULT
	}
	return p.Base
}
func (p *GetTemplateInfoV2Request) SetEvaluatorTemplateID(val int64) {
	p.EvaluatorTemplateID = val
}
func (p *GetTemplateInfoV2Request) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetTemplateInfoV2Request = map[int16]string{
	1:   "evaluator_template_id",
	255: "Base",
}

func (p *GetTemplateInfoV2Request) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetTemplateInfoV2Request) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluatorTemplateID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorTemplateID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluatorTemplateID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTemplateInfoV2Request[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetTemplateInfoV2Request[fieldId]))
}

func (p *GetTemplateInfoV2Request) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorTemplateID = _field
	return nil
}
func (p *GetTemplateInfoV2Request) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetTemplateInfoV2Request) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTemplateInfoV2Request"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTemplateInfoV2Request) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_template_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorTemplateID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetTemplateInfoV2Request) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetTemplateInfoV2Request) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTemplateInfoV2Request(%+v)", *p)

}

func (p *GetTemplateInfoV2Request) DeepEqual(ano *GetTemplateInfoV2Request) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorTemplateID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetTemplateInfoV2Request) Field1DeepEqual(src int64) bool {

	if p.EvaluatorTemplateID != src {
		return false
	}
	return true
}
func (p *GetTemplateInfoV2Request) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetTemplateInfoV2Response struct {
	EvaluatorTemplate *evaluator.EvaluatorTemplate `thrift:"evaluator_template,1,optional" frugal:"1,optional,evaluator.EvaluatorTemplate" form:"evaluator_template" json:"evaluator_template,omitempty"`
	BaseResp          *base.BaseResp               `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetTemplateInfoV2Response() *GetTemplateInfoV2Response {
	return &GetTemplateInfoV2Response{}
}

func (p *GetTemplateInfoV2Response) InitDefault() {
}

var GetTemplateInfoV2Response_EvaluatorTemplate_DEFAULT *evaluator.EvaluatorTemplate

func (p *GetTemplateInfoV2Response) GetEvaluatorTemplate() (v *evaluator.EvaluatorTemplate) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorTemplate() {
		return GetTemplateInfoV2Response_EvaluatorTemplate_DEFAULT
	}
	return p.EvaluatorTemplate
}

var GetTemplateInfoV2Response_BaseResp_DEFAULT *base.BaseResp

func (p *GetTemplateInfoV2Response) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetTemplateInfoV2Response_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetTemplateInfoV2Response) SetEvaluatorTemplate(val *evaluator.EvaluatorTemplate) {
	p.EvaluatorTemplate = val
}
func (p *GetTemplateInfoV2Response) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetTemplateInfoV2Response = map[int16]string{
	1:   "evaluator_template",
	255: "BaseResp",
}

func (p *GetTemplateInfoV2Response) IsSetEvaluatorTemplate() bool {
	return p.EvaluatorTemplate != nil
}

func (p *GetTemplateInfoV2Response) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetTemplateInfoV2Response) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTemplateInfoV2Response[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTemplateInfoV2Response) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorTemplate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorTemplate = _field
	return nil
}
func (p *GetTemplateInfoV2Response) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetTemplateInfoV2Response) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTemplateInfoV2Response"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTemplateInfoV2Response) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorTemplate() {
		if err = oprot.WriteFieldBegin("evaluator_template", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluatorTemplate.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetTemplateInfoV2Response) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetTemplateInfoV2Response) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTemplateInfoV2Response(%+v)", *p)

}

func (p *GetTemplateInfoV2Response) DeepEqual(ano *GetTemplateInfoV2Response) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorTemplate) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetTemplateInfoV2Response) Field1DeepEqual(src *evaluator.EvaluatorTemplate) bool {

	if !p.EvaluatorTemplate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetTemplateInfoV2Response) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetLatestEvaluatorVersionRequest struct {
	EvaluatorID int64  `thrift:"evaluator_id,1,required" frugal:"1,required,i64" json:"evaluator_id" path:"evaluator_id,required" `
	WorkspaceID *int64 `thrift:"workspace_id,2,optional" frugal:"2,optional,i64" json:"workspace_id" query:"workspace_id" `
	// 是否预置评估器
	Builtin *bool      `thrift:"builtin,3,optional" frugal:"3,optional,bool" json:"builtin,omitempty" query:"builtin"`
	Base    *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetLatestEvaluatorVersionRequest() *GetLatestEvaluatorVersionRequest {
	return &GetLatestEvaluatorVersionRequest{}
}

func (p *GetLatestEvaluatorVersionRequest) InitDefault() {
}

func (p *GetLatestEvaluatorVersionRequest) GetEvaluatorID() (v int64) {
	if p != nil {
		return p.EvaluatorID
	}
	return
}

var GetLatestEvaluatorVersionRequest_WorkspaceID_DEFAULT int64

func (p *GetLatestEvaluatorVersionRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return GetLatestEvaluatorVersionRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var GetLatestEvaluatorVersionRequest_Builtin_DEFAULT bool

func (p *GetLatestEvaluatorVersionRequest) GetBuiltin() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetBuiltin() {
		return GetLatestEvaluatorVersionRequest_Builtin_DEFAULT
	}
	return *p.Builtin
}

var GetLatestEvaluatorVersionRequest_Base_DEFAULT *base.Base

func (p *GetLatestEvaluatorVersionRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetLatestEvaluatorVersionRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetLatestEvaluatorVersionRequest) SetEvaluatorID(val int64) {
	p.EvaluatorID = val
}
func (p *GetLatestEvaluatorVersionRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *GetLatestEvaluatorVersionRequest) SetBuiltin(val *bool) {
	p.Builtin = val
}
func (p *GetLatestEvaluatorVersionRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetLatestEvaluatorVersionRequest = map[int16]string{
	1:   "evaluator_id",
	2:   "workspace_id",
	3:   "builtin",
	255: "Base",
}

func (p *GetLatestEvaluatorVersionRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *GetLatestEvaluatorVersionRequest) IsSetBuiltin() bool {
	return p.Builtin != nil
}

func (p *GetLatestEvaluatorVersionRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetLatestEvaluatorVersionRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluatorID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluatorID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLatestEvaluatorVersionRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetLatestEvaluatorVersionRequest[fieldId]))
}

func (p *GetLatestEvaluatorVersionRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *GetLatestEvaluatorVersionRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetLatestEvaluatorVersionRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Builtin = _field
	return nil
}
func (p *GetLatestEvaluatorVersionRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetLatestEvaluatorVersionRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLatestEvaluatorVersionRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLatestEvaluatorVersionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetLatestEvaluatorVersionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetLatestEvaluatorVersionRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBuiltin() {
		if err = oprot.WriteFieldBegin("builtin", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Builtin); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetLatestEvaluatorVersionRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetLatestEvaluatorVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLatestEvaluatorVersionRequest(%+v)", *p)

}

func (p *GetLatestEvaluatorVersionRequest) DeepEqual(ano *GetLatestEvaluatorVersionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Builtin) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetLatestEvaluatorVersionRequest) Field1DeepEqual(src int64) bool {

	if p.EvaluatorID != src {
		return false
	}
	return true
}
func (p *GetLatestEvaluatorVersionRequest) Field2DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *GetLatestEvaluatorVersionRequest) Field3DeepEqual(src *bool) bool {

	if p.Builtin == src {
		return true
	} else if p.Builtin == nil || src == nil {
		return false
	}
	if *p.Builtin != *src {
		return false
	}
	return true
}
func (p *GetLatestEvaluatorVersionRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetLatestEvaluatorVersionResponse struct {
	Version  *evaluator.EvaluatorVersion `thrift:"version,1,required" frugal:"1,required,evaluator.EvaluatorVersion" form:"version,required" json:"version,required"`
	BaseResp *base.BaseResp              `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetLatestEvaluatorVersionResponse() *GetLatestEvaluatorVersionResponse {
	return &GetLatestEvaluatorVersionResponse{}
}

func (p *GetLatestEvaluatorVersionResponse) InitDefault() {
}

var GetLatestEvaluatorVersionResponse_Version_DEFAULT *evaluator.EvaluatorVersion

func (p *GetLatestEvaluatorVersionResponse) GetVersion() (v *evaluator.EvaluatorVersion) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return GetLatestEvaluatorVersionResponse_Version_DEFAULT
	}
	return p.Version
}

var GetLatestEvaluatorVersionResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetLatestEvaluatorVersionResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetLatestEvaluatorVersionResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetLatestEvaluatorVersionResponse) SetVersion(val *evaluator.EvaluatorVersion) {
	p.Version = val
}
func (p *GetLatestEvaluatorVersionResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetLatestEvaluatorVersionResponse = map[int16]string{
	1:   "version",
	255: "BaseResp",
}

func (p *GetLatestEvaluatorVersionResponse) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetLatestEvaluatorVersionResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetLatestEvaluatorVersionResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetVersion bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetVersion {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLatestEvaluatorVersionResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetLatestEvaluatorVersionResponse[fieldId]))
}

func (p *GetLatestEvaluatorVersionResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorVersion()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Version = _field
	return nil
}
func (p *GetLatestEvaluatorVersionResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetLatestEvaluatorVersionResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLatestEvaluatorVersionResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLatestEvaluatorVersionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("version", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Version.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetLatestEvaluatorVersionResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetLatestEvaluatorVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLatestEvaluatorVersionResponse(%+v)", *p)

}

func (p *GetLatestEvaluatorVersionResponse) DeepEqual(ano *GetLatestEvaluatorVersionResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Version) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetLatestEvaluatorVersionResponse) Field1DeepEqual(src *evaluator.EvaluatorVersion) bool {

	if !p.Version.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetLatestEvaluatorVersionResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type DebugBuiltinEvaluatorRequest struct {
	EvaluatorID int64                         `thrift:"evaluator_id,1,required" frugal:"1,required,i64" json:"evaluator_id" form:"evaluator_id,required" `
	InputData   *evaluator.EvaluatorInputData `thrift:"input_data,2,required" frugal:"2,required,evaluator.EvaluatorInputData" form:"input_data,required" json:"input_data,required"`
	Base        *base.Base                    `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewDebugBuiltinEvaluatorRequest() *DebugBuiltinEvaluatorRequest {
	return &DebugBuiltinEvaluatorRequest{}
}

func (p *DebugBuiltinEvaluatorRequest) InitDefault() {
}

func (p *DebugBuiltinEvaluatorRequest) GetEvaluatorID() (v int64) {
	if p != nil {
		return p.EvaluatorID
	}
	return
}

var DebugBuiltinEvaluatorRequest_InputData_DEFAULT *evaluator.EvaluatorInputData

func (p *DebugBuiltinEvaluatorRequest) GetInputData() (v *evaluator.EvaluatorInputData) {
	if p == nil {
		return
	}
	if !p.IsSetInputData() {
		return DebugBuiltinEvaluatorRequest_InputData_DEFAULT
	}
	return p.InputData
}

var DebugBuiltinEvaluatorRequest_Base_DEFAULT *base.Base

func (p *DebugBuiltinEvaluatorRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return DebugBuiltinEvaluatorRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DebugBuiltinEvaluatorRequest) SetEvaluatorID(val int64) {
	p.EvaluatorID = val
}
func (p *DebugBuiltinEvaluatorRequest) SetInputData(val *evaluator.EvaluatorInputData) {
	p.InputData = val
}
func (p *DebugBuiltinEvaluatorRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DebugBuiltinEvaluatorRequest = map[int16]string{
	1:   "evaluator_id",
	2:   "input_data",
	255: "Base",
}

func (p *DebugBuiltinEvaluatorRequest) IsSetInputData() bool {
	return p.InputData != nil
}

func (p *DebugBuiltinEvaluatorRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DebugBuiltinEvaluatorRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluatorID bool = false
	var issetInputData bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetInputData = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluatorID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetInputData {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DebugBuiltinEvaluatorRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DebugBuiltinEvaluatorRequest[fieldId]))
}

func (p *DebugBuiltinEvaluatorRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *DebugBuiltinEvaluatorRequest) ReadField2(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorInputData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.InputData = _field
	return nil
}
func (p *DebugBuiltinEvaluatorRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *DebugBuiltinEvaluatorRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugBuiltinEvaluatorRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DebugBuiltinEvaluatorRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DebugBuiltinEvaluatorRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("input_data", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.InputData.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DebugBuiltinEvaluatorRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DebugBuiltinEvaluatorRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DebugBuiltinEvaluatorRequest(%+v)", *p)

}

func (p *DebugBuiltinEvaluatorRequest) DeepEqual(ano *DebugBuiltinEvaluatorRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field2DeepEqual(ano.InputData) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DebugBuiltinEvaluatorRequest) Field1DeepEqual(src int64) bool {

	if p.EvaluatorID != src {
		return false
	}
	return true
}
func (p *DebugBuiltinEvaluatorRequest) Field2DeepEqual(src *evaluator.EvaluatorInputData) bool {

	if !p.InputData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DebugBuiltinEvaluatorRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DebugBuiltinEvaluatorResponse struct {
	OutputData *evaluator.EvaluatorOutputData `thrift:"output_data,1,required" frugal:"1,required,evaluator.EvaluatorOutputData" form:"output_data,required" json:"output_data,required"`
	BaseResp   *base.BaseResp                 `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewDebugBuiltinEvaluatorResponse() *DebugBuiltinEvaluatorResponse {
	return &DebugBuiltinEvaluatorResponse{}
}

func (p *DebugBuiltinEvaluatorResponse) InitDefault() {
}

var DebugBuiltinEvaluatorResponse_OutputData_DEFAULT *evaluator.EvaluatorOutputData

func (p *DebugBuiltinEvaluatorResponse) GetOutputData() (v *evaluator.EvaluatorOutputData) {
	if p == nil {
		return
	}
	if !p.IsSetOutputData() {
		return DebugBuiltinEvaluatorResponse_OutputData_DEFAULT
	}
	return p.OutputData
}

var DebugBuiltinEvaluatorResponse_BaseResp_DEFAULT *base.BaseResp

func (p *DebugBuiltinEvaluatorResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return DebugBuiltinEvaluatorResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DebugBuiltinEvaluatorResponse) SetOutputData(val *evaluator.EvaluatorOutputData) {
	p.OutputData = val
}
func (p *DebugBuiltinEvaluatorResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_DebugBuiltinEvaluatorResponse = map[int16]string{
	1:   "output_data",
	255: "BaseResp",
}

func (p *DebugBuiltinEvaluatorResponse) IsSetOutputData() bool {
	return p.OutputData != nil
}

func (p *DebugBuiltinEvaluatorResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DebugBuiltinEvaluatorResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetOutputData bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetOutputData = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetOutputData {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DebugBuiltinEvaluatorResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DebugBuiltinEvaluatorResponse[fieldId]))
}

func (p *DebugBuiltinEvaluatorResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorOutputData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.OutputData = _field
	return nil
}
func (p *DebugBuiltinEvaluatorResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *DebugBuiltinEvaluatorResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugBuiltinEvaluatorResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DebugBuiltinEvaluatorResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("output_data", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.OutputData.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DebugBuiltinEvaluatorResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DebugBuiltinEvaluatorResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DebugBuiltinEvaluatorResponse(%+v)", *p)

}

func (p *DebugBuiltinEvaluatorResponse) DeepEqual(ano *DebugBuiltinEvaluatorResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OutputData) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *DebugBuiltinEvaluatorResponse) Field1DeepEqual(src *evaluator.EvaluatorOutputData) bool {

	if !p.OutputData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DebugBuiltinEvaluatorResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateBuiltinEvaluatorTagsRequest struct {
	EvaluatorID int64  `thrift:"evaluator_id,1,required" frugal:"1,required,i64" json:"evaluator_id" path:"evaluator_id,required" `
	WorkspaceID *int64 `thrift:"workspace_id,2,optional" frugal:"2,optional,i64" json:"workspace_id" form:"workspace_id" `
	// 评估器标签
	Tags map[evaluator.EvaluatorTagKey][]string `thrift:"tags,3,optional" frugal:"3,optional,map<string:list<string>>" json:"tags" form:"tags" `
	Base *base.Base                             `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdateBuiltinEvaluatorTagsRequest() *UpdateBuiltinEvaluatorTagsRequest {
	return &UpdateBuiltinEvaluatorTagsRequest{}
}

func (p *UpdateBuiltinEvaluatorTagsRequest) InitDefault() {
}

func (p *UpdateBuiltinEvaluatorTagsRequest) GetEvaluatorID() (v int64) {
	if p != nil {
		return p.EvaluatorID
	}
	return
}

var UpdateBuiltinEvaluatorTagsRequest_WorkspaceID_DEFAULT int64

func (p *UpdateBuiltinEvaluatorTagsRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return UpdateBuiltinEvaluatorTagsRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var UpdateBuiltinEvaluatorTagsRequest_Tags_DEFAULT map[evaluator.EvaluatorTagKey][]string

func (p *UpdateBuiltinEvaluatorTagsRequest) GetTags() (v map[evaluator.EvaluatorTagKey][]string) {
	if p == nil {
		return
	}
	if !p.IsSetTags() {
		return UpdateBuiltinEvaluatorTagsRequest_Tags_DEFAULT
	}
	return p.Tags
}

var UpdateBuiltinEvaluatorTagsRequest_Base_DEFAULT *base.Base

func (p *UpdateBuiltinEvaluatorTagsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdateBuiltinEvaluatorTagsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateBuiltinEvaluatorTagsRequest) SetEvaluatorID(val int64) {
	p.EvaluatorID = val
}
func (p *UpdateBuiltinEvaluatorTagsRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *UpdateBuiltinEvaluatorTagsRequest) SetTags(val map[evaluator.EvaluatorTagKey][]string) {
	p.Tags = val
}
func (p *UpdateBuiltinEvaluatorTagsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateBuiltinEvaluatorTagsRequest = map[int16]string{
	1:   "evaluator_id",
	2:   "workspace_id",
	3:   "tags",
	255: "Base",
}

func (p *UpdateBuiltinEvaluatorTagsRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *UpdateBuiltinEvaluatorTagsRequest) IsSetTags() bool {
	return p.Tags != nil
}

func (p *UpdateBuiltinEvaluatorTagsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateBuiltinEvaluatorTagsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluatorID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluatorID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateBuiltinEvaluatorTagsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateBuiltinEvaluatorTagsRequest[fieldId]))
}

func (p *UpdateBuiltinEvaluatorTagsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *UpdateBuiltinEvaluatorTagsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *UpdateBuiltinEvaluatorTagsRequest) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[evaluator.EvaluatorTagKey][]string, size)
	for i := 0; i < size; i++ {
		var _key evaluator.EvaluatorTagKey
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {

			var _elem string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Tags = _field
	return nil
}
func (p *UpdateBuiltinEvaluatorTagsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdateBuiltinEvaluatorTagsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateBuiltinEvaluatorTagsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateBuiltinEvaluatorTagsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateBuiltinEvaluatorTagsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdateBuiltinEvaluatorTagsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTags() {
		if err = oprot.WriteFieldBegin("tags", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Tags)); err != nil {
			return err
		}
		for k, v := range p.Tags {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := oprot.WriteString(v); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UpdateBuiltinEvaluatorTagsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateBuiltinEvaluatorTagsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateBuiltinEvaluatorTagsRequest(%+v)", *p)

}

func (p *UpdateBuiltinEvaluatorTagsRequest) DeepEqual(ano *UpdateBuiltinEvaluatorTagsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Tags) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateBuiltinEvaluatorTagsRequest) Field1DeepEqual(src int64) bool {

	if p.EvaluatorID != src {
		return false
	}
	return true
}
func (p *UpdateBuiltinEvaluatorTagsRequest) Field2DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *UpdateBuiltinEvaluatorTagsRequest) Field3DeepEqual(src map[evaluator.EvaluatorTagKey][]string) bool {

	if len(p.Tags) != len(src) {
		return false
	}
	for k, v := range p.Tags {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if strings.Compare(v, _src1) != 0 {
				return false
			}
		}
	}
	return true
}
func (p *UpdateBuiltinEvaluatorTagsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateBuiltinEvaluatorTagsResponse struct {
	Evaluator *evaluator.Evaluator `thrift:"evaluator,1,required" frugal:"1,required,evaluator.Evaluator" form:"evaluator,required" json:"evaluator,required"`
	BaseResp  *base.BaseResp       `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewUpdateBuiltinEvaluatorTagsResponse() *UpdateBuiltinEvaluatorTagsResponse {
	return &UpdateBuiltinEvaluatorTagsResponse{}
}

func (p *UpdateBuiltinEvaluatorTagsResponse) InitDefault() {
}

var UpdateBuiltinEvaluatorTagsResponse_Evaluator_DEFAULT *evaluator.Evaluator

func (p *UpdateBuiltinEvaluatorTagsResponse) GetEvaluator() (v *evaluator.Evaluator) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluator() {
		return UpdateBuiltinEvaluatorTagsResponse_Evaluator_DEFAULT
	}
	return p.Evaluator
}

var UpdateBuiltinEvaluatorTagsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateBuiltinEvaluatorTagsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdateBuiltinEvaluatorTagsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateBuiltinEvaluatorTagsResponse) SetEvaluator(val *evaluator.Evaluator) {
	p.Evaluator = val
}
func (p *UpdateBuiltinEvaluatorTagsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateBuiltinEvaluatorTagsResponse = map[int16]string{
	1:   "evaluator",
	255: "BaseResp",
}

func (p *UpdateBuiltinEvaluatorTagsResponse) IsSetEvaluator() bool {
	return p.Evaluator != nil
}

func (p *UpdateBuiltinEvaluatorTagsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateBuiltinEvaluatorTagsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluator bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluator = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluator {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateBuiltinEvaluatorTagsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateBuiltinEvaluatorTagsResponse[fieldId]))
}

func (p *UpdateBuiltinEvaluatorTagsResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluator()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Evaluator = _field
	return nil
}
func (p *UpdateBuiltinEvaluatorTagsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdateBuiltinEvaluatorTagsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateBuiltinEvaluatorTagsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateBuiltinEvaluatorTagsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Evaluator.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateBuiltinEvaluatorTagsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateBuiltinEvaluatorTagsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateBuiltinEvaluatorTagsResponse(%+v)", *p)

}

func (p *UpdateBuiltinEvaluatorTagsResponse) DeepEqual(ano *UpdateBuiltinEvaluatorTagsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Evaluator) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateBuiltinEvaluatorTagsResponse) Field1DeepEqual(src *evaluator.Evaluator) bool {

	if !p.Evaluator.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateBuiltinEvaluatorTagsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluatorTemplateRequest struct {
	EvaluatorTemplate *evaluator.EvaluatorTemplate `thrift:"evaluator_template,1,required" frugal:"1,required,evaluator.EvaluatorTemplate" form:"evaluator_template,required" json:"evaluator_template,required"`
	Base              *base.Base                   `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateEvaluatorTemplateRequest() *CreateEvaluatorTemplateRequest {
	return &CreateEvaluatorTemplateRequest{}
}

func (p *CreateEvaluatorTemplateRequest) InitDefault() {
}

var CreateEvaluatorTemplateRequest_EvaluatorTemplate_DEFAULT *evaluator.EvaluatorTemplate

func (p *CreateEvaluatorTemplateRequest) GetEvaluatorTemplate() (v *evaluator.EvaluatorTemplate) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorTemplate() {
		return CreateEvaluatorTemplateRequest_EvaluatorTemplate_DEFAULT
	}
	return p.EvaluatorTemplate
}

var CreateEvaluatorTemplateRequest_Base_DEFAULT *base.Base

func (p *CreateEvaluatorTemplateRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateEvaluatorTemplateRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateEvaluatorTemplateRequest) SetEvaluatorTemplate(val *evaluator.EvaluatorTemplate) {
	p.EvaluatorTemplate = val
}
func (p *CreateEvaluatorTemplateRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateEvaluatorTemplateRequest = map[int16]string{
	1:   "evaluator_template",
	255: "Base",
}

func (p *CreateEvaluatorTemplateRequest) IsSetEvaluatorTemplate() bool {
	return p.EvaluatorTemplate != nil
}

func (p *CreateEvaluatorTemplateRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateEvaluatorTemplateRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluatorTemplate bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorTemplate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluatorTemplate {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluatorTemplateRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEvaluatorTemplateRequest[fieldId]))
}

func (p *CreateEvaluatorTemplateRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorTemplate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorTemplate = _field
	return nil
}
func (p *CreateEvaluatorTemplateRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateEvaluatorTemplateRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluatorTemplateRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluatorTemplateRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_template", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.EvaluatorTemplate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluatorTemplateRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluatorTemplateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluatorTemplateRequest(%+v)", *p)

}

func (p *CreateEvaluatorTemplateRequest) DeepEqual(ano *CreateEvaluatorTemplateRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorTemplate) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateEvaluatorTemplateRequest) Field1DeepEqual(src *evaluator.EvaluatorTemplate) bool {

	if !p.EvaluatorTemplate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluatorTemplateRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvaluatorTemplateResponse struct {
	EvaluatorTemplate *evaluator.EvaluatorTemplate `thrift:"evaluator_template,1,required" frugal:"1,required,evaluator.EvaluatorTemplate" form:"evaluator_template,required" json:"evaluator_template,required"`
	BaseResp          *base.BaseResp               `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateEvaluatorTemplateResponse() *CreateEvaluatorTemplateResponse {
	return &CreateEvaluatorTemplateResponse{}
}

func (p *CreateEvaluatorTemplateResponse) InitDefault() {
}

var CreateEvaluatorTemplateResponse_EvaluatorTemplate_DEFAULT *evaluator.EvaluatorTemplate

func (p *CreateEvaluatorTemplateResponse) GetEvaluatorTemplate() (v *evaluator.EvaluatorTemplate) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorTemplate() {
		return CreateEvaluatorTemplateResponse_EvaluatorTemplate_DEFAULT
	}
	return p.EvaluatorTemplate
}

var CreateEvaluatorTemplateResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateEvaluatorTemplateResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateEvaluatorTemplateResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateEvaluatorTemplateResponse) SetEvaluatorTemplate(val *evaluator.EvaluatorTemplate) {
	p.EvaluatorTemplate = val
}
func (p *CreateEvaluatorTemplateResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateEvaluatorTemplateResponse = map[int16]string{
	1:   "evaluator_template",
	255: "BaseResp",
}

func (p *CreateEvaluatorTemplateResponse) IsSetEvaluatorTemplate() bool {
	return p.EvaluatorTemplate != nil
}

func (p *CreateEvaluatorTemplateResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateEvaluatorTemplateResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluatorTemplate bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorTemplate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluatorTemplate {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvaluatorTemplateResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEvaluatorTemplateResponse[fieldId]))
}

func (p *CreateEvaluatorTemplateResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorTemplate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorTemplate = _field
	return nil
}
func (p *CreateEvaluatorTemplateResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateEvaluatorTemplateResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluatorTemplateResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvaluatorTemplateResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_template", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.EvaluatorTemplate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvaluatorTemplateResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvaluatorTemplateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvaluatorTemplateResponse(%+v)", *p)

}

func (p *CreateEvaluatorTemplateResponse) DeepEqual(ano *CreateEvaluatorTemplateResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorTemplate) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateEvaluatorTemplateResponse) Field1DeepEqual(src *evaluator.EvaluatorTemplate) bool {

	if !p.EvaluatorTemplate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvaluatorTemplateResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateEvaluatorTemplateRequest struct {
	EvaluatorTemplateID int64                        `thrift:"evaluator_template_id,1,required" frugal:"1,required,i64" json:"evaluator_template_id" path:"evaluator_template_id,required" `
	EvaluatorTemplate   *evaluator.EvaluatorTemplate `thrift:"evaluator_template,2,required" frugal:"2,required,evaluator.EvaluatorTemplate" form:"evaluator_template,required" json:"evaluator_template,required"`
	Base                *base.Base                   `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdateEvaluatorTemplateRequest() *UpdateEvaluatorTemplateRequest {
	return &UpdateEvaluatorTemplateRequest{}
}

func (p *UpdateEvaluatorTemplateRequest) InitDefault() {
}

func (p *UpdateEvaluatorTemplateRequest) GetEvaluatorTemplateID() (v int64) {
	if p != nil {
		return p.EvaluatorTemplateID
	}
	return
}

var UpdateEvaluatorTemplateRequest_EvaluatorTemplate_DEFAULT *evaluator.EvaluatorTemplate

func (p *UpdateEvaluatorTemplateRequest) GetEvaluatorTemplate() (v *evaluator.EvaluatorTemplate) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorTemplate() {
		return UpdateEvaluatorTemplateRequest_EvaluatorTemplate_DEFAULT
	}
	return p.EvaluatorTemplate
}

var UpdateEvaluatorTemplateRequest_Base_DEFAULT *base.Base

func (p *UpdateEvaluatorTemplateRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdateEvaluatorTemplateRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateEvaluatorTemplateRequest) SetEvaluatorTemplateID(val int64) {
	p.EvaluatorTemplateID = val
}
func (p *UpdateEvaluatorTemplateRequest) SetEvaluatorTemplate(val *evaluator.EvaluatorTemplate) {
	p.EvaluatorTemplate = val
}
func (p *UpdateEvaluatorTemplateRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateEvaluatorTemplateRequest = map[int16]string{
	1:   "evaluator_template_id",
	2:   "evaluator_template",
	255: "Base",
}

func (p *UpdateEvaluatorTemplateRequest) IsSetEvaluatorTemplate() bool {
	return p.EvaluatorTemplate != nil
}

func (p *UpdateEvaluatorTemplateRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateEvaluatorTemplateRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluatorTemplateID bool = false
	var issetEvaluatorTemplate bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorTemplateID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorTemplate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluatorTemplateID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorTemplate {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEvaluatorTemplateRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateEvaluatorTemplateRequest[fieldId]))
}

func (p *UpdateEvaluatorTemplateRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorTemplateID = _field
	return nil
}
func (p *UpdateEvaluatorTemplateRequest) ReadField2(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorTemplate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorTemplate = _field
	return nil
}
func (p *UpdateEvaluatorTemplateRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdateEvaluatorTemplateRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluatorTemplateRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEvaluatorTemplateRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_template_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorTemplateID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateEvaluatorTemplateRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_template", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.EvaluatorTemplate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdateEvaluatorTemplateRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateEvaluatorTemplateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEvaluatorTemplateRequest(%+v)", *p)

}

func (p *UpdateEvaluatorTemplateRequest) DeepEqual(ano *UpdateEvaluatorTemplateRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorTemplateID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorTemplate) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateEvaluatorTemplateRequest) Field1DeepEqual(src int64) bool {

	if p.EvaluatorTemplateID != src {
		return false
	}
	return true
}
func (p *UpdateEvaluatorTemplateRequest) Field2DeepEqual(src *evaluator.EvaluatorTemplate) bool {

	if !p.EvaluatorTemplate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateEvaluatorTemplateRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateEvaluatorTemplateResponse struct {
	EvaluatorTemplate *evaluator.EvaluatorTemplate `thrift:"evaluator_template,1,required" frugal:"1,required,evaluator.EvaluatorTemplate" form:"evaluator_template,required" json:"evaluator_template,required"`
	BaseResp          *base.BaseResp               `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewUpdateEvaluatorTemplateResponse() *UpdateEvaluatorTemplateResponse {
	return &UpdateEvaluatorTemplateResponse{}
}

func (p *UpdateEvaluatorTemplateResponse) InitDefault() {
}

var UpdateEvaluatorTemplateResponse_EvaluatorTemplate_DEFAULT *evaluator.EvaluatorTemplate

func (p *UpdateEvaluatorTemplateResponse) GetEvaluatorTemplate() (v *evaluator.EvaluatorTemplate) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorTemplate() {
		return UpdateEvaluatorTemplateResponse_EvaluatorTemplate_DEFAULT
	}
	return p.EvaluatorTemplate
}

var UpdateEvaluatorTemplateResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateEvaluatorTemplateResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdateEvaluatorTemplateResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateEvaluatorTemplateResponse) SetEvaluatorTemplate(val *evaluator.EvaluatorTemplate) {
	p.EvaluatorTemplate = val
}
func (p *UpdateEvaluatorTemplateResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateEvaluatorTemplateResponse = map[int16]string{
	1:   "evaluator_template",
	255: "BaseResp",
}

func (p *UpdateEvaluatorTemplateResponse) IsSetEvaluatorTemplate() bool {
	return p.EvaluatorTemplate != nil
}

func (p *UpdateEvaluatorTemplateResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateEvaluatorTemplateResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluatorTemplate bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorTemplate = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluatorTemplate {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateEvaluatorTemplateResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateEvaluatorTemplateResponse[fieldId]))
}

func (p *UpdateEvaluatorTemplateResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := evaluator.NewEvaluatorTemplate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorTemplate = _field
	return nil
}
func (p *UpdateEvaluatorTemplateResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdateEvaluatorTemplateResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluatorTemplateResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateEvaluatorTemplateResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_template", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.EvaluatorTemplate.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateEvaluatorTemplateResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateEvaluatorTemplateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateEvaluatorTemplateResponse(%+v)", *p)

}

func (p *UpdateEvaluatorTemplateResponse) DeepEqual(ano *UpdateEvaluatorTemplateResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorTemplate) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateEvaluatorTemplateResponse) Field1DeepEqual(src *evaluator.EvaluatorTemplate) bool {

	if !p.EvaluatorTemplate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateEvaluatorTemplateResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteEvaluatorTemplateRequest struct {
	EvaluatorTemplateID int64      `thrift:"evaluator_template_id,1,required" frugal:"1,required,i64" json:"evaluator_template_id" path:"evaluator_template_id,required" `
	Base                *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewDeleteEvaluatorTemplateRequest() *DeleteEvaluatorTemplateRequest {
	return &DeleteEvaluatorTemplateRequest{}
}

func (p *DeleteEvaluatorTemplateRequest) InitDefault() {
}

func (p *DeleteEvaluatorTemplateRequest) GetEvaluatorTemplateID() (v int64) {
	if p != nil {
		return p.EvaluatorTemplateID
	}
	return
}

var DeleteEvaluatorTemplateRequest_Base_DEFAULT *base.Base

func (p *DeleteEvaluatorTemplateRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return DeleteEvaluatorTemplateRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteEvaluatorTemplateRequest) SetEvaluatorTemplateID(val int64) {
	p.EvaluatorTemplateID = val
}
func (p *DeleteEvaluatorTemplateRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DeleteEvaluatorTemplateRequest = map[int16]string{
	1:   "evaluator_template_id",
	255: "Base",
}

func (p *DeleteEvaluatorTemplateRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteEvaluatorTemplateRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluatorTemplateID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorTemplateID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluatorTemplateID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteEvaluatorTemplateRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeleteEvaluatorTemplateRequest[fieldId]))
}

func (p *DeleteEvaluatorTemplateRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorTemplateID = _field
	return nil
}
func (p *DeleteEvaluatorTemplateRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *DeleteEvaluatorTemplateRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEvaluatorTemplateRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteEvaluatorTemplateRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_template_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorTemplateID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DeleteEvaluatorTemplateRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteEvaluatorTemplateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteEvaluatorTemplateRequest(%+v)", *p)

}

func (p *DeleteEvaluatorTemplateRequest) DeepEqual(ano *DeleteEvaluatorTemplateRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorTemplateID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteEvaluatorTemplateRequest) Field1DeepEqual(src int64) bool {

	if p.EvaluatorTemplateID != src {
		return false
	}
	return true
}
func (p *DeleteEvaluatorTemplateRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteEvaluatorTemplateResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewDeleteEvaluatorTemplateResponse() *DeleteEvaluatorTemplateResponse {
	return &DeleteEvaluatorTemplateResponse{}
}

func (p *DeleteEvaluatorTemplateResponse) InitDefault() {
}

var DeleteEvaluatorTemplateResponse_BaseResp_DEFAULT *base.BaseResp

func (p *DeleteEvaluatorTemplateResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return DeleteEvaluatorTemplateResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DeleteEvaluatorTemplateResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_DeleteEvaluatorTemplateResponse = map[int16]string{
	255: "BaseResp",
}

func (p *DeleteEvaluatorTemplateResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DeleteEvaluatorTemplateResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteEvaluatorTemplateResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteEvaluatorTemplateResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *DeleteEvaluatorTemplateResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEvaluatorTemplateResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteEvaluatorTemplateResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteEvaluatorTemplateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteEvaluatorTemplateResponse(%+v)", *p)

}

func (p *DeleteEvaluatorTemplateResponse) DeepEqual(ano *DeleteEvaluatorTemplateResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *DeleteEvaluatorTemplateResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluatorTagsRequest struct {
	Base *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListEvaluatorTagsRequest() *ListEvaluatorTagsRequest {
	return &ListEvaluatorTagsRequest{}
}

func (p *ListEvaluatorTagsRequest) InitDefault() {
}

var ListEvaluatorTagsRequest_Base_DEFAULT *base.Base

func (p *ListEvaluatorTagsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListEvaluatorTagsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListEvaluatorTagsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListEvaluatorTagsRequest = map[int16]string{
	255: "Base",
}

func (p *ListEvaluatorTagsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListEvaluatorTagsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluatorTagsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluatorTagsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListEvaluatorTagsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluatorTagsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluatorTagsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluatorTagsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluatorTagsRequest(%+v)", *p)

}

func (p *ListEvaluatorTagsRequest) DeepEqual(ano *ListEvaluatorTagsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListEvaluatorTagsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvaluatorTagsResponse struct {
	// 筛选器选项
	Tags     map[evaluator.EvaluatorTagKey][]string `thrift:"tags,1,optional" frugal:"1,optional,map<string:list<string>>" form:"tags" json:"tags,omitempty"`
	BaseResp *base.BaseResp                         `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListEvaluatorTagsResponse() *ListEvaluatorTagsResponse {
	return &ListEvaluatorTagsResponse{}
}

func (p *ListEvaluatorTagsResponse) InitDefault() {
}

var ListEvaluatorTagsResponse_Tags_DEFAULT map[evaluator.EvaluatorTagKey][]string

func (p *ListEvaluatorTagsResponse) GetTags() (v map[evaluator.EvaluatorTagKey][]string) {
	if p == nil {
		return
	}
	if !p.IsSetTags() {
		return ListEvaluatorTagsResponse_Tags_DEFAULT
	}
	return p.Tags
}

var ListEvaluatorTagsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListEvaluatorTagsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListEvaluatorTagsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListEvaluatorTagsResponse) SetTags(val map[evaluator.EvaluatorTagKey][]string) {
	p.Tags = val
}
func (p *ListEvaluatorTagsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListEvaluatorTagsResponse = map[int16]string{
	1:   "tags",
	255: "BaseResp",
}

func (p *ListEvaluatorTagsResponse) IsSetTags() bool {
	return p.Tags != nil
}

func (p *ListEvaluatorTagsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListEvaluatorTagsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvaluatorTagsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListEvaluatorTagsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[evaluator.EvaluatorTagKey][]string, size)
	for i := 0; i < size; i++ {
		var _key evaluator.EvaluatorTagKey
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]string, 0, size)
		for i := 0; i < size; i++ {

			var _elem string
			if v, err := iprot.ReadString(); err != nil {
				return err
			} else {
				_elem = v
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Tags = _field
	return nil
}
func (p *ListEvaluatorTagsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListEvaluatorTagsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluatorTagsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvaluatorTagsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTags() {
		if err = oprot.WriteFieldBegin("tags", thrift.MAP, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Tags)); err != nil {
			return err
		}
		for k, v := range p.Tags {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := oprot.WriteString(v); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvaluatorTagsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvaluatorTagsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvaluatorTagsResponse(%+v)", *p)

}

func (p *ListEvaluatorTagsResponse) DeepEqual(ano *ListEvaluatorTagsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Tags) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListEvaluatorTagsResponse) Field1DeepEqual(src map[evaluator.EvaluatorTagKey][]string) bool {

	if len(p.Tags) != len(src) {
		return false
	}
	for k, v := range p.Tags {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if strings.Compare(v, _src1) != 0 {
				return false
			}
		}
	}
	return true
}
func (p *ListEvaluatorTagsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorService interface {
	// 评估器
	ListEvaluators(ctx context.Context, request *ListEvaluatorsRequest) (r *ListEvaluatorsResponse, err error)

	BatchGetEvaluators(ctx context.Context, request *BatchGetEvaluatorsRequest) (r *BatchGetEvaluatorsResponse, err error)

	GetEvaluator(ctx context.Context, request *GetEvaluatorRequest) (r *GetEvaluatorResponse, err error)

	CreateEvaluator(ctx context.Context, request *CreateEvaluatorRequest) (r *CreateEvaluatorResponse, err error)

	UpdateEvaluator(ctx context.Context, request *UpdateEvaluatorRequest) (r *UpdateEvaluatorResponse, err error)

	UpdateEvaluatorDraft(ctx context.Context, request *UpdateEvaluatorDraftRequest) (r *UpdateEvaluatorDraftResponse, err error)

	DeleteEvaluator(ctx context.Context, request *DeleteEvaluatorRequest) (r *DeleteEvaluatorResponse, err error)

	CheckEvaluatorName(ctx context.Context, request *CheckEvaluatorNameRequest) (r *CheckEvaluatorNameResponse, err error)
	// 评估器版本
	ListEvaluatorVersions(ctx context.Context, request *ListEvaluatorVersionsRequest) (r *ListEvaluatorVersionsResponse, err error)

	GetEvaluatorVersion(ctx context.Context, request *GetEvaluatorVersionRequest) (r *GetEvaluatorVersionResponse, err error)

	BatchGetEvaluatorVersions(ctx context.Context, request *BatchGetEvaluatorVersionsRequest) (r *BatchGetEvaluatorVersionsResponse, err error)

	SubmitEvaluatorVersion(ctx context.Context, request *SubmitEvaluatorVersionRequest) (r *SubmitEvaluatorVersionResponse, err error)
	// 评估器预置模版
	ListTemplates(ctx context.Context, request *ListTemplatesRequest) (r *ListTemplatesResponse, err error)

	GetTemplateInfo(ctx context.Context, request *GetTemplateInfoRequest) (r *GetTemplateInfoResponse, err error)

	GetDefaultPromptEvaluatorTools(ctx context.Context, req *GetDefaultPromptEvaluatorToolsRequest) (r *GetDefaultPromptEvaluatorToolsResponse, err error)
	// 评估器执行
	RunEvaluator(ctx context.Context, req *RunEvaluatorRequest) (r *RunEvaluatorResponse, err error)

	DebugEvaluator(ctx context.Context, req *DebugEvaluatorRequest) (r *DebugEvaluatorResponse, err error)

	BatchDebugEvaluator(ctx context.Context, req *BatchDebugEvaluatorRequest) (r *BatchDebugEvaluatorResponse, err error)
	// 评估器执行结果
	UpdateEvaluatorRecord(ctx context.Context, req *UpdateEvaluatorRecordRequest) (r *UpdateEvaluatorRecordResponse, err error)

	GetEvaluatorRecord(ctx context.Context, req *GetEvaluatorRecordRequest) (r *GetEvaluatorRecordResponse, err error)

	BatchGetEvaluatorRecords(ctx context.Context, req *BatchGetEvaluatorRecordsRequest) (r *BatchGetEvaluatorRecordsResponse, err error)
	// 评估器验证
	ValidateEvaluator(ctx context.Context, request *ValidateEvaluatorRequest) (r *ValidateEvaluatorResponse, err error)
	// 查询评估器模板
	ListTemplatesV2(ctx context.Context, request *ListTemplatesV2Request) (r *ListTemplatesV2Response, err error)
	// 创建评估器模板
	CreateEvaluatorTemplate(ctx context.Context, request *CreateEvaluatorTemplateRequest) (r *CreateEvaluatorTemplateResponse, err error)
	// 更新评估器模板
	UpdateEvaluatorTemplate(ctx context.Context, request *UpdateEvaluatorTemplateRequest) (r *UpdateEvaluatorTemplateResponse, err error)
	// 删除
	DeleteEvaluatorTemplate(ctx context.Context, request *DeleteEvaluatorTemplateRequest) (r *DeleteEvaluatorTemplateResponse, err error)
	// 调试预置评估器
	DebugBuiltinEvaluator(ctx context.Context, req *DebugBuiltinEvaluatorRequest) (r *DebugBuiltinEvaluatorResponse, err error)
	// 更新预置评估器tag
	UpdateBuiltinEvaluatorTags(ctx context.Context, req *UpdateBuiltinEvaluatorTagsRequest) (r *UpdateBuiltinEvaluatorTagsResponse, err error)
	// 查询Tag
	ListEvaluatorTags(ctx context.Context, req *ListEvaluatorTagsRequest) (r *ListEvaluatorTagsResponse, err error)
}

type EvaluatorServiceClient struct {
	c thrift.TClient
}

func NewEvaluatorServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EvaluatorServiceClient {
	return &EvaluatorServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewEvaluatorServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EvaluatorServiceClient {
	return &EvaluatorServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewEvaluatorServiceClient(c thrift.TClient) *EvaluatorServiceClient {
	return &EvaluatorServiceClient{
		c: c,
	}
}

func (p *EvaluatorServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *EvaluatorServiceClient) ListEvaluators(ctx context.Context, request *ListEvaluatorsRequest) (r *ListEvaluatorsResponse, err error) {
	var _args EvaluatorServiceListEvaluatorsArgs
	_args.Request = request
	var _result EvaluatorServiceListEvaluatorsResult
	if err = p.Client_().Call(ctx, "ListEvaluators", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) BatchGetEvaluators(ctx context.Context, request *BatchGetEvaluatorsRequest) (r *BatchGetEvaluatorsResponse, err error) {
	var _args EvaluatorServiceBatchGetEvaluatorsArgs
	_args.Request = request
	var _result EvaluatorServiceBatchGetEvaluatorsResult
	if err = p.Client_().Call(ctx, "BatchGetEvaluators", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) GetEvaluator(ctx context.Context, request *GetEvaluatorRequest) (r *GetEvaluatorResponse, err error) {
	var _args EvaluatorServiceGetEvaluatorArgs
	_args.Request = request
	var _result EvaluatorServiceGetEvaluatorResult
	if err = p.Client_().Call(ctx, "GetEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) CreateEvaluator(ctx context.Context, request *CreateEvaluatorRequest) (r *CreateEvaluatorResponse, err error) {
	var _args EvaluatorServiceCreateEvaluatorArgs
	_args.Request = request
	var _result EvaluatorServiceCreateEvaluatorResult
	if err = p.Client_().Call(ctx, "CreateEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) UpdateEvaluator(ctx context.Context, request *UpdateEvaluatorRequest) (r *UpdateEvaluatorResponse, err error) {
	var _args EvaluatorServiceUpdateEvaluatorArgs
	_args.Request = request
	var _result EvaluatorServiceUpdateEvaluatorResult
	if err = p.Client_().Call(ctx, "UpdateEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) UpdateEvaluatorDraft(ctx context.Context, request *UpdateEvaluatorDraftRequest) (r *UpdateEvaluatorDraftResponse, err error) {
	var _args EvaluatorServiceUpdateEvaluatorDraftArgs
	_args.Request = request
	var _result EvaluatorServiceUpdateEvaluatorDraftResult
	if err = p.Client_().Call(ctx, "UpdateEvaluatorDraft", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) DeleteEvaluator(ctx context.Context, request *DeleteEvaluatorRequest) (r *DeleteEvaluatorResponse, err error) {
	var _args EvaluatorServiceDeleteEvaluatorArgs
	_args.Request = request
	var _result EvaluatorServiceDeleteEvaluatorResult
	if err = p.Client_().Call(ctx, "DeleteEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) CheckEvaluatorName(ctx context.Context, request *CheckEvaluatorNameRequest) (r *CheckEvaluatorNameResponse, err error) {
	var _args EvaluatorServiceCheckEvaluatorNameArgs
	_args.Request = request
	var _result EvaluatorServiceCheckEvaluatorNameResult
	if err = p.Client_().Call(ctx, "CheckEvaluatorName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) ListEvaluatorVersions(ctx context.Context, request *ListEvaluatorVersionsRequest) (r *ListEvaluatorVersionsResponse, err error) {
	var _args EvaluatorServiceListEvaluatorVersionsArgs
	_args.Request = request
	var _result EvaluatorServiceListEvaluatorVersionsResult
	if err = p.Client_().Call(ctx, "ListEvaluatorVersions", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) GetEvaluatorVersion(ctx context.Context, request *GetEvaluatorVersionRequest) (r *GetEvaluatorVersionResponse, err error) {
	var _args EvaluatorServiceGetEvaluatorVersionArgs
	_args.Request = request
	var _result EvaluatorServiceGetEvaluatorVersionResult
	if err = p.Client_().Call(ctx, "GetEvaluatorVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) BatchGetEvaluatorVersions(ctx context.Context, request *BatchGetEvaluatorVersionsRequest) (r *BatchGetEvaluatorVersionsResponse, err error) {
	var _args EvaluatorServiceBatchGetEvaluatorVersionsArgs
	_args.Request = request
	var _result EvaluatorServiceBatchGetEvaluatorVersionsResult
	if err = p.Client_().Call(ctx, "BatchGetEvaluatorVersions", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) SubmitEvaluatorVersion(ctx context.Context, request *SubmitEvaluatorVersionRequest) (r *SubmitEvaluatorVersionResponse, err error) {
	var _args EvaluatorServiceSubmitEvaluatorVersionArgs
	_args.Request = request
	var _result EvaluatorServiceSubmitEvaluatorVersionResult
	if err = p.Client_().Call(ctx, "SubmitEvaluatorVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) ListTemplates(ctx context.Context, request *ListTemplatesRequest) (r *ListTemplatesResponse, err error) {
	var _args EvaluatorServiceListTemplatesArgs
	_args.Request = request
	var _result EvaluatorServiceListTemplatesResult
	if err = p.Client_().Call(ctx, "ListTemplates", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) GetTemplateInfo(ctx context.Context, request *GetTemplateInfoRequest) (r *GetTemplateInfoResponse, err error) {
	var _args EvaluatorServiceGetTemplateInfoArgs
	_args.Request = request
	var _result EvaluatorServiceGetTemplateInfoResult
	if err = p.Client_().Call(ctx, "GetTemplateInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) GetDefaultPromptEvaluatorTools(ctx context.Context, req *GetDefaultPromptEvaluatorToolsRequest) (r *GetDefaultPromptEvaluatorToolsResponse, err error) {
	var _args EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs
	_args.Req = req
	var _result EvaluatorServiceGetDefaultPromptEvaluatorToolsResult
	if err = p.Client_().Call(ctx, "GetDefaultPromptEvaluatorTools", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) RunEvaluator(ctx context.Context, req *RunEvaluatorRequest) (r *RunEvaluatorResponse, err error) {
	var _args EvaluatorServiceRunEvaluatorArgs
	_args.Req = req
	var _result EvaluatorServiceRunEvaluatorResult
	if err = p.Client_().Call(ctx, "RunEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) DebugEvaluator(ctx context.Context, req *DebugEvaluatorRequest) (r *DebugEvaluatorResponse, err error) {
	var _args EvaluatorServiceDebugEvaluatorArgs
	_args.Req = req
	var _result EvaluatorServiceDebugEvaluatorResult
	if err = p.Client_().Call(ctx, "DebugEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) BatchDebugEvaluator(ctx context.Context, req *BatchDebugEvaluatorRequest) (r *BatchDebugEvaluatorResponse, err error) {
	var _args EvaluatorServiceBatchDebugEvaluatorArgs
	_args.Req = req
	var _result EvaluatorServiceBatchDebugEvaluatorResult
	if err = p.Client_().Call(ctx, "BatchDebugEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) UpdateEvaluatorRecord(ctx context.Context, req *UpdateEvaluatorRecordRequest) (r *UpdateEvaluatorRecordResponse, err error) {
	var _args EvaluatorServiceUpdateEvaluatorRecordArgs
	_args.Req = req
	var _result EvaluatorServiceUpdateEvaluatorRecordResult
	if err = p.Client_().Call(ctx, "UpdateEvaluatorRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) GetEvaluatorRecord(ctx context.Context, req *GetEvaluatorRecordRequest) (r *GetEvaluatorRecordResponse, err error) {
	var _args EvaluatorServiceGetEvaluatorRecordArgs
	_args.Req = req
	var _result EvaluatorServiceGetEvaluatorRecordResult
	if err = p.Client_().Call(ctx, "GetEvaluatorRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) BatchGetEvaluatorRecords(ctx context.Context, req *BatchGetEvaluatorRecordsRequest) (r *BatchGetEvaluatorRecordsResponse, err error) {
	var _args EvaluatorServiceBatchGetEvaluatorRecordsArgs
	_args.Req = req
	var _result EvaluatorServiceBatchGetEvaluatorRecordsResult
	if err = p.Client_().Call(ctx, "BatchGetEvaluatorRecords", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) ValidateEvaluator(ctx context.Context, request *ValidateEvaluatorRequest) (r *ValidateEvaluatorResponse, err error) {
	var _args EvaluatorServiceValidateEvaluatorArgs
	_args.Request = request
	var _result EvaluatorServiceValidateEvaluatorResult
	if err = p.Client_().Call(ctx, "ValidateEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) ListTemplatesV2(ctx context.Context, request *ListTemplatesV2Request) (r *ListTemplatesV2Response, err error) {
	var _args EvaluatorServiceListTemplatesV2Args
	_args.Request = request
	var _result EvaluatorServiceListTemplatesV2Result
	if err = p.Client_().Call(ctx, "ListTemplatesV2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) CreateEvaluatorTemplate(ctx context.Context, request *CreateEvaluatorTemplateRequest) (r *CreateEvaluatorTemplateResponse, err error) {
	var _args EvaluatorServiceCreateEvaluatorTemplateArgs
	_args.Request = request
	var _result EvaluatorServiceCreateEvaluatorTemplateResult
	if err = p.Client_().Call(ctx, "CreateEvaluatorTemplate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) UpdateEvaluatorTemplate(ctx context.Context, request *UpdateEvaluatorTemplateRequest) (r *UpdateEvaluatorTemplateResponse, err error) {
	var _args EvaluatorServiceUpdateEvaluatorTemplateArgs
	_args.Request = request
	var _result EvaluatorServiceUpdateEvaluatorTemplateResult
	if err = p.Client_().Call(ctx, "UpdateEvaluatorTemplate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) DeleteEvaluatorTemplate(ctx context.Context, request *DeleteEvaluatorTemplateRequest) (r *DeleteEvaluatorTemplateResponse, err error) {
	var _args EvaluatorServiceDeleteEvaluatorTemplateArgs
	_args.Request = request
	var _result EvaluatorServiceDeleteEvaluatorTemplateResult
	if err = p.Client_().Call(ctx, "DeleteEvaluatorTemplate", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) DebugBuiltinEvaluator(ctx context.Context, req *DebugBuiltinEvaluatorRequest) (r *DebugBuiltinEvaluatorResponse, err error) {
	var _args EvaluatorServiceDebugBuiltinEvaluatorArgs
	_args.Req = req
	var _result EvaluatorServiceDebugBuiltinEvaluatorResult
	if err = p.Client_().Call(ctx, "DebugBuiltinEvaluator", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) UpdateBuiltinEvaluatorTags(ctx context.Context, req *UpdateBuiltinEvaluatorTagsRequest) (r *UpdateBuiltinEvaluatorTagsResponse, err error) {
	var _args EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs
	_args.Req = req
	var _result EvaluatorServiceUpdateBuiltinEvaluatorTagsResult
	if err = p.Client_().Call(ctx, "UpdateBuiltinEvaluatorTags", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvaluatorServiceClient) ListEvaluatorTags(ctx context.Context, req *ListEvaluatorTagsRequest) (r *ListEvaluatorTagsResponse, err error) {
	var _args EvaluatorServiceListEvaluatorTagsArgs
	_args.Req = req
	var _result EvaluatorServiceListEvaluatorTagsResult
	if err = p.Client_().Call(ctx, "ListEvaluatorTags", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type EvaluatorServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      EvaluatorService
}

func (p *EvaluatorServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *EvaluatorServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *EvaluatorServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewEvaluatorServiceProcessor(handler EvaluatorService) *EvaluatorServiceProcessor {
	self := &EvaluatorServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("ListEvaluators", &evaluatorServiceProcessorListEvaluators{handler: handler})
	self.AddToProcessorMap("BatchGetEvaluators", &evaluatorServiceProcessorBatchGetEvaluators{handler: handler})
	self.AddToProcessorMap("GetEvaluator", &evaluatorServiceProcessorGetEvaluator{handler: handler})
	self.AddToProcessorMap("CreateEvaluator", &evaluatorServiceProcessorCreateEvaluator{handler: handler})
	self.AddToProcessorMap("UpdateEvaluator", &evaluatorServiceProcessorUpdateEvaluator{handler: handler})
	self.AddToProcessorMap("UpdateEvaluatorDraft", &evaluatorServiceProcessorUpdateEvaluatorDraft{handler: handler})
	self.AddToProcessorMap("DeleteEvaluator", &evaluatorServiceProcessorDeleteEvaluator{handler: handler})
	self.AddToProcessorMap("CheckEvaluatorName", &evaluatorServiceProcessorCheckEvaluatorName{handler: handler})
	self.AddToProcessorMap("ListEvaluatorVersions", &evaluatorServiceProcessorListEvaluatorVersions{handler: handler})
	self.AddToProcessorMap("GetEvaluatorVersion", &evaluatorServiceProcessorGetEvaluatorVersion{handler: handler})
	self.AddToProcessorMap("BatchGetEvaluatorVersions", &evaluatorServiceProcessorBatchGetEvaluatorVersions{handler: handler})
	self.AddToProcessorMap("SubmitEvaluatorVersion", &evaluatorServiceProcessorSubmitEvaluatorVersion{handler: handler})
	self.AddToProcessorMap("ListTemplates", &evaluatorServiceProcessorListTemplates{handler: handler})
	self.AddToProcessorMap("GetTemplateInfo", &evaluatorServiceProcessorGetTemplateInfo{handler: handler})
	self.AddToProcessorMap("GetDefaultPromptEvaluatorTools", &evaluatorServiceProcessorGetDefaultPromptEvaluatorTools{handler: handler})
	self.AddToProcessorMap("RunEvaluator", &evaluatorServiceProcessorRunEvaluator{handler: handler})
	self.AddToProcessorMap("DebugEvaluator", &evaluatorServiceProcessorDebugEvaluator{handler: handler})
	self.AddToProcessorMap("BatchDebugEvaluator", &evaluatorServiceProcessorBatchDebugEvaluator{handler: handler})
	self.AddToProcessorMap("UpdateEvaluatorRecord", &evaluatorServiceProcessorUpdateEvaluatorRecord{handler: handler})
	self.AddToProcessorMap("GetEvaluatorRecord", &evaluatorServiceProcessorGetEvaluatorRecord{handler: handler})
	self.AddToProcessorMap("BatchGetEvaluatorRecords", &evaluatorServiceProcessorBatchGetEvaluatorRecords{handler: handler})
	self.AddToProcessorMap("ValidateEvaluator", &evaluatorServiceProcessorValidateEvaluator{handler: handler})
	self.AddToProcessorMap("ListTemplatesV2", &evaluatorServiceProcessorListTemplatesV2{handler: handler})
	self.AddToProcessorMap("CreateEvaluatorTemplate", &evaluatorServiceProcessorCreateEvaluatorTemplate{handler: handler})
	self.AddToProcessorMap("UpdateEvaluatorTemplate", &evaluatorServiceProcessorUpdateEvaluatorTemplate{handler: handler})
	self.AddToProcessorMap("DeleteEvaluatorTemplate", &evaluatorServiceProcessorDeleteEvaluatorTemplate{handler: handler})
	self.AddToProcessorMap("DebugBuiltinEvaluator", &evaluatorServiceProcessorDebugBuiltinEvaluator{handler: handler})
	self.AddToProcessorMap("UpdateBuiltinEvaluatorTags", &evaluatorServiceProcessorUpdateBuiltinEvaluatorTags{handler: handler})
	self.AddToProcessorMap("ListEvaluatorTags", &evaluatorServiceProcessorListEvaluatorTags{handler: handler})
	return self
}
func (p *EvaluatorServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type evaluatorServiceProcessorListEvaluators struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorListEvaluators) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceListEvaluatorsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListEvaluators", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceListEvaluatorsResult{}
	var retval *ListEvaluatorsResponse
	if retval, err2 = p.handler.ListEvaluators(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEvaluators: "+err2.Error())
		oprot.WriteMessageBegin("ListEvaluators", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListEvaluators", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorBatchGetEvaluators struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorBatchGetEvaluators) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceBatchGetEvaluatorsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetEvaluators", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceBatchGetEvaluatorsResult{}
	var retval *BatchGetEvaluatorsResponse
	if retval, err2 = p.handler.BatchGetEvaluators(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetEvaluators: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetEvaluators", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetEvaluators", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorGetEvaluator struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorGetEvaluator) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceGetEvaluatorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceGetEvaluatorResult{}
	var retval *GetEvaluatorResponse
	if retval, err2 = p.handler.GetEvaluator(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEvaluator: "+err2.Error())
		oprot.WriteMessageBegin("GetEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEvaluator", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorCreateEvaluator struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorCreateEvaluator) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceCreateEvaluatorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceCreateEvaluatorResult{}
	var retval *CreateEvaluatorResponse
	if retval, err2 = p.handler.CreateEvaluator(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEvaluator: "+err2.Error())
		oprot.WriteMessageBegin("CreateEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEvaluator", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorUpdateEvaluator struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorUpdateEvaluator) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceUpdateEvaluatorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceUpdateEvaluatorResult{}
	var retval *UpdateEvaluatorResponse
	if retval, err2 = p.handler.UpdateEvaluator(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateEvaluator: "+err2.Error())
		oprot.WriteMessageBegin("UpdateEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateEvaluator", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorUpdateEvaluatorDraft struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorUpdateEvaluatorDraft) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceUpdateEvaluatorDraftArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateEvaluatorDraft", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceUpdateEvaluatorDraftResult{}
	var retval *UpdateEvaluatorDraftResponse
	if retval, err2 = p.handler.UpdateEvaluatorDraft(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateEvaluatorDraft: "+err2.Error())
		oprot.WriteMessageBegin("UpdateEvaluatorDraft", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateEvaluatorDraft", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorDeleteEvaluator struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorDeleteEvaluator) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceDeleteEvaluatorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceDeleteEvaluatorResult{}
	var retval *DeleteEvaluatorResponse
	if retval, err2 = p.handler.DeleteEvaluator(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteEvaluator: "+err2.Error())
		oprot.WriteMessageBegin("DeleteEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteEvaluator", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorCheckEvaluatorName struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorCheckEvaluatorName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceCheckEvaluatorNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CheckEvaluatorName", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceCheckEvaluatorNameResult{}
	var retval *CheckEvaluatorNameResponse
	if retval, err2 = p.handler.CheckEvaluatorName(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CheckEvaluatorName: "+err2.Error())
		oprot.WriteMessageBegin("CheckEvaluatorName", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CheckEvaluatorName", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorListEvaluatorVersions struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorListEvaluatorVersions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceListEvaluatorVersionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListEvaluatorVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceListEvaluatorVersionsResult{}
	var retval *ListEvaluatorVersionsResponse
	if retval, err2 = p.handler.ListEvaluatorVersions(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEvaluatorVersions: "+err2.Error())
		oprot.WriteMessageBegin("ListEvaluatorVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListEvaluatorVersions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorGetEvaluatorVersion struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorGetEvaluatorVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceGetEvaluatorVersionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEvaluatorVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceGetEvaluatorVersionResult{}
	var retval *GetEvaluatorVersionResponse
	if retval, err2 = p.handler.GetEvaluatorVersion(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEvaluatorVersion: "+err2.Error())
		oprot.WriteMessageBegin("GetEvaluatorVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEvaluatorVersion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorBatchGetEvaluatorVersions struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorBatchGetEvaluatorVersions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceBatchGetEvaluatorVersionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetEvaluatorVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceBatchGetEvaluatorVersionsResult{}
	var retval *BatchGetEvaluatorVersionsResponse
	if retval, err2 = p.handler.BatchGetEvaluatorVersions(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetEvaluatorVersions: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetEvaluatorVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetEvaluatorVersions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorSubmitEvaluatorVersion struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorSubmitEvaluatorVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceSubmitEvaluatorVersionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SubmitEvaluatorVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceSubmitEvaluatorVersionResult{}
	var retval *SubmitEvaluatorVersionResponse
	if retval, err2 = p.handler.SubmitEvaluatorVersion(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SubmitEvaluatorVersion: "+err2.Error())
		oprot.WriteMessageBegin("SubmitEvaluatorVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SubmitEvaluatorVersion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorListTemplates struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorListTemplates) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceListTemplatesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListTemplates", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceListTemplatesResult{}
	var retval *ListTemplatesResponse
	if retval, err2 = p.handler.ListTemplates(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListTemplates: "+err2.Error())
		oprot.WriteMessageBegin("ListTemplates", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListTemplates", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorGetTemplateInfo struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorGetTemplateInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceGetTemplateInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetTemplateInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceGetTemplateInfoResult{}
	var retval *GetTemplateInfoResponse
	if retval, err2 = p.handler.GetTemplateInfo(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTemplateInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetTemplateInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetTemplateInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorGetDefaultPromptEvaluatorTools struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorGetDefaultPromptEvaluatorTools) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDefaultPromptEvaluatorTools", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceGetDefaultPromptEvaluatorToolsResult{}
	var retval *GetDefaultPromptEvaluatorToolsResponse
	if retval, err2 = p.handler.GetDefaultPromptEvaluatorTools(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDefaultPromptEvaluatorTools: "+err2.Error())
		oprot.WriteMessageBegin("GetDefaultPromptEvaluatorTools", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDefaultPromptEvaluatorTools", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorRunEvaluator struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorRunEvaluator) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceRunEvaluatorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RunEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceRunEvaluatorResult{}
	var retval *RunEvaluatorResponse
	if retval, err2 = p.handler.RunEvaluator(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RunEvaluator: "+err2.Error())
		oprot.WriteMessageBegin("RunEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RunEvaluator", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorDebugEvaluator struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorDebugEvaluator) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceDebugEvaluatorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DebugEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceDebugEvaluatorResult{}
	var retval *DebugEvaluatorResponse
	if retval, err2 = p.handler.DebugEvaluator(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DebugEvaluator: "+err2.Error())
		oprot.WriteMessageBegin("DebugEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DebugEvaluator", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorBatchDebugEvaluator struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorBatchDebugEvaluator) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceBatchDebugEvaluatorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchDebugEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceBatchDebugEvaluatorResult{}
	var retval *BatchDebugEvaluatorResponse
	if retval, err2 = p.handler.BatchDebugEvaluator(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchDebugEvaluator: "+err2.Error())
		oprot.WriteMessageBegin("BatchDebugEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchDebugEvaluator", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorUpdateEvaluatorRecord struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorUpdateEvaluatorRecord) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceUpdateEvaluatorRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateEvaluatorRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceUpdateEvaluatorRecordResult{}
	var retval *UpdateEvaluatorRecordResponse
	if retval, err2 = p.handler.UpdateEvaluatorRecord(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateEvaluatorRecord: "+err2.Error())
		oprot.WriteMessageBegin("UpdateEvaluatorRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateEvaluatorRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorGetEvaluatorRecord struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorGetEvaluatorRecord) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceGetEvaluatorRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEvaluatorRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceGetEvaluatorRecordResult{}
	var retval *GetEvaluatorRecordResponse
	if retval, err2 = p.handler.GetEvaluatorRecord(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEvaluatorRecord: "+err2.Error())
		oprot.WriteMessageBegin("GetEvaluatorRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEvaluatorRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorBatchGetEvaluatorRecords struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorBatchGetEvaluatorRecords) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceBatchGetEvaluatorRecordsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetEvaluatorRecords", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceBatchGetEvaluatorRecordsResult{}
	var retval *BatchGetEvaluatorRecordsResponse
	if retval, err2 = p.handler.BatchGetEvaluatorRecords(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetEvaluatorRecords: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetEvaluatorRecords", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetEvaluatorRecords", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorValidateEvaluator struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorValidateEvaluator) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceValidateEvaluatorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ValidateEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceValidateEvaluatorResult{}
	var retval *ValidateEvaluatorResponse
	if retval, err2 = p.handler.ValidateEvaluator(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ValidateEvaluator: "+err2.Error())
		oprot.WriteMessageBegin("ValidateEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ValidateEvaluator", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorListTemplatesV2 struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorListTemplatesV2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceListTemplatesV2Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListTemplatesV2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceListTemplatesV2Result{}
	var retval *ListTemplatesV2Response
	if retval, err2 = p.handler.ListTemplatesV2(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListTemplatesV2: "+err2.Error())
		oprot.WriteMessageBegin("ListTemplatesV2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListTemplatesV2", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorCreateEvaluatorTemplate struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorCreateEvaluatorTemplate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceCreateEvaluatorTemplateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEvaluatorTemplate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceCreateEvaluatorTemplateResult{}
	var retval *CreateEvaluatorTemplateResponse
	if retval, err2 = p.handler.CreateEvaluatorTemplate(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEvaluatorTemplate: "+err2.Error())
		oprot.WriteMessageBegin("CreateEvaluatorTemplate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEvaluatorTemplate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorUpdateEvaluatorTemplate struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorUpdateEvaluatorTemplate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceUpdateEvaluatorTemplateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateEvaluatorTemplate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceUpdateEvaluatorTemplateResult{}
	var retval *UpdateEvaluatorTemplateResponse
	if retval, err2 = p.handler.UpdateEvaluatorTemplate(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateEvaluatorTemplate: "+err2.Error())
		oprot.WriteMessageBegin("UpdateEvaluatorTemplate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateEvaluatorTemplate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorDeleteEvaluatorTemplate struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorDeleteEvaluatorTemplate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceDeleteEvaluatorTemplateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteEvaluatorTemplate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceDeleteEvaluatorTemplateResult{}
	var retval *DeleteEvaluatorTemplateResponse
	if retval, err2 = p.handler.DeleteEvaluatorTemplate(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteEvaluatorTemplate: "+err2.Error())
		oprot.WriteMessageBegin("DeleteEvaluatorTemplate", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteEvaluatorTemplate", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorDebugBuiltinEvaluator struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorDebugBuiltinEvaluator) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceDebugBuiltinEvaluatorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DebugBuiltinEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceDebugBuiltinEvaluatorResult{}
	var retval *DebugBuiltinEvaluatorResponse
	if retval, err2 = p.handler.DebugBuiltinEvaluator(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DebugBuiltinEvaluator: "+err2.Error())
		oprot.WriteMessageBegin("DebugBuiltinEvaluator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DebugBuiltinEvaluator", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorUpdateBuiltinEvaluatorTags struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorUpdateBuiltinEvaluatorTags) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateBuiltinEvaluatorTags", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceUpdateBuiltinEvaluatorTagsResult{}
	var retval *UpdateBuiltinEvaluatorTagsResponse
	if retval, err2 = p.handler.UpdateBuiltinEvaluatorTags(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateBuiltinEvaluatorTags: "+err2.Error())
		oprot.WriteMessageBegin("UpdateBuiltinEvaluatorTags", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateBuiltinEvaluatorTags", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evaluatorServiceProcessorListEvaluatorTags struct {
	handler EvaluatorService
}

func (p *evaluatorServiceProcessorListEvaluatorTags) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvaluatorServiceListEvaluatorTagsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListEvaluatorTags", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvaluatorServiceListEvaluatorTagsResult{}
	var retval *ListEvaluatorTagsResponse
	if retval, err2 = p.handler.ListEvaluatorTags(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListEvaluatorTags: "+err2.Error())
		oprot.WriteMessageBegin("ListEvaluatorTags", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListEvaluatorTags", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type EvaluatorServiceListEvaluatorsArgs struct {
	Request *ListEvaluatorsRequest `thrift:"request,1" frugal:"1,default,ListEvaluatorsRequest"`
}

func NewEvaluatorServiceListEvaluatorsArgs() *EvaluatorServiceListEvaluatorsArgs {
	return &EvaluatorServiceListEvaluatorsArgs{}
}

func (p *EvaluatorServiceListEvaluatorsArgs) InitDefault() {
}

var EvaluatorServiceListEvaluatorsArgs_Request_DEFAULT *ListEvaluatorsRequest

func (p *EvaluatorServiceListEvaluatorsArgs) GetRequest() (v *ListEvaluatorsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceListEvaluatorsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceListEvaluatorsArgs) SetRequest(val *ListEvaluatorsRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceListEvaluatorsArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceListEvaluatorsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceListEvaluatorsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceListEvaluatorsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListEvaluatorsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceListEvaluatorsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluators_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceListEvaluatorsArgs(%+v)", *p)

}

func (p *EvaluatorServiceListEvaluatorsArgs) DeepEqual(ano *EvaluatorServiceListEvaluatorsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceListEvaluatorsArgs) Field1DeepEqual(src *ListEvaluatorsRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceListEvaluatorsResult struct {
	Success *ListEvaluatorsResponse `thrift:"success,0,optional" frugal:"0,optional,ListEvaluatorsResponse"`
}

func NewEvaluatorServiceListEvaluatorsResult() *EvaluatorServiceListEvaluatorsResult {
	return &EvaluatorServiceListEvaluatorsResult{}
}

func (p *EvaluatorServiceListEvaluatorsResult) InitDefault() {
}

var EvaluatorServiceListEvaluatorsResult_Success_DEFAULT *ListEvaluatorsResponse

func (p *EvaluatorServiceListEvaluatorsResult) GetSuccess() (v *ListEvaluatorsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceListEvaluatorsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceListEvaluatorsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListEvaluatorsResponse)
}

var fieldIDToName_EvaluatorServiceListEvaluatorsResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceListEvaluatorsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceListEvaluatorsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceListEvaluatorsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListEvaluatorsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceListEvaluatorsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluators_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceListEvaluatorsResult(%+v)", *p)

}

func (p *EvaluatorServiceListEvaluatorsResult) DeepEqual(ano *EvaluatorServiceListEvaluatorsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceListEvaluatorsResult) Field0DeepEqual(src *ListEvaluatorsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceBatchGetEvaluatorsArgs struct {
	Request *BatchGetEvaluatorsRequest `thrift:"request,1" frugal:"1,default,BatchGetEvaluatorsRequest"`
}

func NewEvaluatorServiceBatchGetEvaluatorsArgs() *EvaluatorServiceBatchGetEvaluatorsArgs {
	return &EvaluatorServiceBatchGetEvaluatorsArgs{}
}

func (p *EvaluatorServiceBatchGetEvaluatorsArgs) InitDefault() {
}

var EvaluatorServiceBatchGetEvaluatorsArgs_Request_DEFAULT *BatchGetEvaluatorsRequest

func (p *EvaluatorServiceBatchGetEvaluatorsArgs) GetRequest() (v *BatchGetEvaluatorsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceBatchGetEvaluatorsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceBatchGetEvaluatorsArgs) SetRequest(val *BatchGetEvaluatorsRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceBatchGetEvaluatorsArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceBatchGetEvaluatorsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceBatchGetEvaluatorsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceBatchGetEvaluatorsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetEvaluatorsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceBatchGetEvaluatorsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluators_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceBatchGetEvaluatorsArgs(%+v)", *p)

}

func (p *EvaluatorServiceBatchGetEvaluatorsArgs) DeepEqual(ano *EvaluatorServiceBatchGetEvaluatorsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceBatchGetEvaluatorsArgs) Field1DeepEqual(src *BatchGetEvaluatorsRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceBatchGetEvaluatorsResult struct {
	Success *BatchGetEvaluatorsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetEvaluatorsResponse"`
}

func NewEvaluatorServiceBatchGetEvaluatorsResult() *EvaluatorServiceBatchGetEvaluatorsResult {
	return &EvaluatorServiceBatchGetEvaluatorsResult{}
}

func (p *EvaluatorServiceBatchGetEvaluatorsResult) InitDefault() {
}

var EvaluatorServiceBatchGetEvaluatorsResult_Success_DEFAULT *BatchGetEvaluatorsResponse

func (p *EvaluatorServiceBatchGetEvaluatorsResult) GetSuccess() (v *BatchGetEvaluatorsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceBatchGetEvaluatorsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceBatchGetEvaluatorsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetEvaluatorsResponse)
}

var fieldIDToName_EvaluatorServiceBatchGetEvaluatorsResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceBatchGetEvaluatorsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceBatchGetEvaluatorsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceBatchGetEvaluatorsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetEvaluatorsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceBatchGetEvaluatorsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluators_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceBatchGetEvaluatorsResult(%+v)", *p)

}

func (p *EvaluatorServiceBatchGetEvaluatorsResult) DeepEqual(ano *EvaluatorServiceBatchGetEvaluatorsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceBatchGetEvaluatorsResult) Field0DeepEqual(src *BatchGetEvaluatorsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceGetEvaluatorArgs struct {
	Request *GetEvaluatorRequest `thrift:"request,1" frugal:"1,default,GetEvaluatorRequest"`
}

func NewEvaluatorServiceGetEvaluatorArgs() *EvaluatorServiceGetEvaluatorArgs {
	return &EvaluatorServiceGetEvaluatorArgs{}
}

func (p *EvaluatorServiceGetEvaluatorArgs) InitDefault() {
}

var EvaluatorServiceGetEvaluatorArgs_Request_DEFAULT *GetEvaluatorRequest

func (p *EvaluatorServiceGetEvaluatorArgs) GetRequest() (v *GetEvaluatorRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceGetEvaluatorArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceGetEvaluatorArgs) SetRequest(val *GetEvaluatorRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceGetEvaluatorArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceGetEvaluatorArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceGetEvaluatorArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceGetEvaluatorArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceGetEvaluatorArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluator_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceGetEvaluatorArgs(%+v)", *p)

}

func (p *EvaluatorServiceGetEvaluatorArgs) DeepEqual(ano *EvaluatorServiceGetEvaluatorArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceGetEvaluatorArgs) Field1DeepEqual(src *GetEvaluatorRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceGetEvaluatorResult struct {
	Success *GetEvaluatorResponse `thrift:"success,0,optional" frugal:"0,optional,GetEvaluatorResponse"`
}

func NewEvaluatorServiceGetEvaluatorResult() *EvaluatorServiceGetEvaluatorResult {
	return &EvaluatorServiceGetEvaluatorResult{}
}

func (p *EvaluatorServiceGetEvaluatorResult) InitDefault() {
}

var EvaluatorServiceGetEvaluatorResult_Success_DEFAULT *GetEvaluatorResponse

func (p *EvaluatorServiceGetEvaluatorResult) GetSuccess() (v *GetEvaluatorResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceGetEvaluatorResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceGetEvaluatorResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetEvaluatorResponse)
}

var fieldIDToName_EvaluatorServiceGetEvaluatorResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceGetEvaluatorResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceGetEvaluatorResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceGetEvaluatorResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceGetEvaluatorResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluator_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceGetEvaluatorResult(%+v)", *p)

}

func (p *EvaluatorServiceGetEvaluatorResult) DeepEqual(ano *EvaluatorServiceGetEvaluatorResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceGetEvaluatorResult) Field0DeepEqual(src *GetEvaluatorResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceCreateEvaluatorArgs struct {
	Request *CreateEvaluatorRequest `thrift:"request,1" frugal:"1,default,CreateEvaluatorRequest"`
}

func NewEvaluatorServiceCreateEvaluatorArgs() *EvaluatorServiceCreateEvaluatorArgs {
	return &EvaluatorServiceCreateEvaluatorArgs{}
}

func (p *EvaluatorServiceCreateEvaluatorArgs) InitDefault() {
}

var EvaluatorServiceCreateEvaluatorArgs_Request_DEFAULT *CreateEvaluatorRequest

func (p *EvaluatorServiceCreateEvaluatorArgs) GetRequest() (v *CreateEvaluatorRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceCreateEvaluatorArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceCreateEvaluatorArgs) SetRequest(val *CreateEvaluatorRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceCreateEvaluatorArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceCreateEvaluatorArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceCreateEvaluatorArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceCreateEvaluatorArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceCreateEvaluatorArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluatorRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceCreateEvaluatorArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluator_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceCreateEvaluatorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceCreateEvaluatorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceCreateEvaluatorArgs(%+v)", *p)

}

func (p *EvaluatorServiceCreateEvaluatorArgs) DeepEqual(ano *EvaluatorServiceCreateEvaluatorArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceCreateEvaluatorArgs) Field1DeepEqual(src *CreateEvaluatorRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceCreateEvaluatorResult struct {
	Success *CreateEvaluatorResponse `thrift:"success,0,optional" frugal:"0,optional,CreateEvaluatorResponse"`
}

func NewEvaluatorServiceCreateEvaluatorResult() *EvaluatorServiceCreateEvaluatorResult {
	return &EvaluatorServiceCreateEvaluatorResult{}
}

func (p *EvaluatorServiceCreateEvaluatorResult) InitDefault() {
}

var EvaluatorServiceCreateEvaluatorResult_Success_DEFAULT *CreateEvaluatorResponse

func (p *EvaluatorServiceCreateEvaluatorResult) GetSuccess() (v *CreateEvaluatorResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceCreateEvaluatorResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceCreateEvaluatorResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEvaluatorResponse)
}

var fieldIDToName_EvaluatorServiceCreateEvaluatorResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceCreateEvaluatorResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceCreateEvaluatorResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceCreateEvaluatorResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceCreateEvaluatorResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluatorResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceCreateEvaluatorResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluator_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceCreateEvaluatorResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceCreateEvaluatorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceCreateEvaluatorResult(%+v)", *p)

}

func (p *EvaluatorServiceCreateEvaluatorResult) DeepEqual(ano *EvaluatorServiceCreateEvaluatorResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceCreateEvaluatorResult) Field0DeepEqual(src *CreateEvaluatorResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceUpdateEvaluatorArgs struct {
	Request *UpdateEvaluatorRequest `thrift:"request,1" frugal:"1,default,UpdateEvaluatorRequest"`
}

func NewEvaluatorServiceUpdateEvaluatorArgs() *EvaluatorServiceUpdateEvaluatorArgs {
	return &EvaluatorServiceUpdateEvaluatorArgs{}
}

func (p *EvaluatorServiceUpdateEvaluatorArgs) InitDefault() {
}

var EvaluatorServiceUpdateEvaluatorArgs_Request_DEFAULT *UpdateEvaluatorRequest

func (p *EvaluatorServiceUpdateEvaluatorArgs) GetRequest() (v *UpdateEvaluatorRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceUpdateEvaluatorArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceUpdateEvaluatorArgs) SetRequest(val *UpdateEvaluatorRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceUpdateEvaluatorArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceUpdateEvaluatorArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceUpdateEvaluatorArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceUpdateEvaluatorArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateEvaluatorRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceUpdateEvaluatorArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluator_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceUpdateEvaluatorArgs(%+v)", *p)

}

func (p *EvaluatorServiceUpdateEvaluatorArgs) DeepEqual(ano *EvaluatorServiceUpdateEvaluatorArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceUpdateEvaluatorArgs) Field1DeepEqual(src *UpdateEvaluatorRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceUpdateEvaluatorResult struct {
	Success *UpdateEvaluatorResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateEvaluatorResponse"`
}

func NewEvaluatorServiceUpdateEvaluatorResult() *EvaluatorServiceUpdateEvaluatorResult {
	return &EvaluatorServiceUpdateEvaluatorResult{}
}

func (p *EvaluatorServiceUpdateEvaluatorResult) InitDefault() {
}

var EvaluatorServiceUpdateEvaluatorResult_Success_DEFAULT *UpdateEvaluatorResponse

func (p *EvaluatorServiceUpdateEvaluatorResult) GetSuccess() (v *UpdateEvaluatorResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceUpdateEvaluatorResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceUpdateEvaluatorResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateEvaluatorResponse)
}

var fieldIDToName_EvaluatorServiceUpdateEvaluatorResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceUpdateEvaluatorResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceUpdateEvaluatorResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceUpdateEvaluatorResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateEvaluatorResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceUpdateEvaluatorResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluator_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceUpdateEvaluatorResult(%+v)", *p)

}

func (p *EvaluatorServiceUpdateEvaluatorResult) DeepEqual(ano *EvaluatorServiceUpdateEvaluatorResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceUpdateEvaluatorResult) Field0DeepEqual(src *UpdateEvaluatorResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceUpdateEvaluatorDraftArgs struct {
	Request *UpdateEvaluatorDraftRequest `thrift:"request,1" frugal:"1,default,UpdateEvaluatorDraftRequest"`
}

func NewEvaluatorServiceUpdateEvaluatorDraftArgs() *EvaluatorServiceUpdateEvaluatorDraftArgs {
	return &EvaluatorServiceUpdateEvaluatorDraftArgs{}
}

func (p *EvaluatorServiceUpdateEvaluatorDraftArgs) InitDefault() {
}

var EvaluatorServiceUpdateEvaluatorDraftArgs_Request_DEFAULT *UpdateEvaluatorDraftRequest

func (p *EvaluatorServiceUpdateEvaluatorDraftArgs) GetRequest() (v *UpdateEvaluatorDraftRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceUpdateEvaluatorDraftArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceUpdateEvaluatorDraftArgs) SetRequest(val *UpdateEvaluatorDraftRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceUpdateEvaluatorDraftArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceUpdateEvaluatorDraftArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceUpdateEvaluatorDraftArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceUpdateEvaluatorDraftArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorDraftArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateEvaluatorDraftRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceUpdateEvaluatorDraftArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluatorDraft_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorDraftArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorDraftArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceUpdateEvaluatorDraftArgs(%+v)", *p)

}

func (p *EvaluatorServiceUpdateEvaluatorDraftArgs) DeepEqual(ano *EvaluatorServiceUpdateEvaluatorDraftArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceUpdateEvaluatorDraftArgs) Field1DeepEqual(src *UpdateEvaluatorDraftRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceUpdateEvaluatorDraftResult struct {
	Success *UpdateEvaluatorDraftResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateEvaluatorDraftResponse"`
}

func NewEvaluatorServiceUpdateEvaluatorDraftResult() *EvaluatorServiceUpdateEvaluatorDraftResult {
	return &EvaluatorServiceUpdateEvaluatorDraftResult{}
}

func (p *EvaluatorServiceUpdateEvaluatorDraftResult) InitDefault() {
}

var EvaluatorServiceUpdateEvaluatorDraftResult_Success_DEFAULT *UpdateEvaluatorDraftResponse

func (p *EvaluatorServiceUpdateEvaluatorDraftResult) GetSuccess() (v *UpdateEvaluatorDraftResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceUpdateEvaluatorDraftResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceUpdateEvaluatorDraftResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateEvaluatorDraftResponse)
}

var fieldIDToName_EvaluatorServiceUpdateEvaluatorDraftResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceUpdateEvaluatorDraftResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceUpdateEvaluatorDraftResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceUpdateEvaluatorDraftResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorDraftResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateEvaluatorDraftResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceUpdateEvaluatorDraftResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluatorDraft_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorDraftResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorDraftResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceUpdateEvaluatorDraftResult(%+v)", *p)

}

func (p *EvaluatorServiceUpdateEvaluatorDraftResult) DeepEqual(ano *EvaluatorServiceUpdateEvaluatorDraftResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceUpdateEvaluatorDraftResult) Field0DeepEqual(src *UpdateEvaluatorDraftResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceDeleteEvaluatorArgs struct {
	Request *DeleteEvaluatorRequest `thrift:"request,1" frugal:"1,default,DeleteEvaluatorRequest"`
}

func NewEvaluatorServiceDeleteEvaluatorArgs() *EvaluatorServiceDeleteEvaluatorArgs {
	return &EvaluatorServiceDeleteEvaluatorArgs{}
}

func (p *EvaluatorServiceDeleteEvaluatorArgs) InitDefault() {
}

var EvaluatorServiceDeleteEvaluatorArgs_Request_DEFAULT *DeleteEvaluatorRequest

func (p *EvaluatorServiceDeleteEvaluatorArgs) GetRequest() (v *DeleteEvaluatorRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceDeleteEvaluatorArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceDeleteEvaluatorArgs) SetRequest(val *DeleteEvaluatorRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceDeleteEvaluatorArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceDeleteEvaluatorArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceDeleteEvaluatorArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceDeleteEvaluatorArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceDeleteEvaluatorArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteEvaluatorRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceDeleteEvaluatorArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEvaluator_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceDeleteEvaluatorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceDeleteEvaluatorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceDeleteEvaluatorArgs(%+v)", *p)

}

func (p *EvaluatorServiceDeleteEvaluatorArgs) DeepEqual(ano *EvaluatorServiceDeleteEvaluatorArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceDeleteEvaluatorArgs) Field1DeepEqual(src *DeleteEvaluatorRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceDeleteEvaluatorResult struct {
	Success *DeleteEvaluatorResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteEvaluatorResponse"`
}

func NewEvaluatorServiceDeleteEvaluatorResult() *EvaluatorServiceDeleteEvaluatorResult {
	return &EvaluatorServiceDeleteEvaluatorResult{}
}

func (p *EvaluatorServiceDeleteEvaluatorResult) InitDefault() {
}

var EvaluatorServiceDeleteEvaluatorResult_Success_DEFAULT *DeleteEvaluatorResponse

func (p *EvaluatorServiceDeleteEvaluatorResult) GetSuccess() (v *DeleteEvaluatorResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceDeleteEvaluatorResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceDeleteEvaluatorResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteEvaluatorResponse)
}

var fieldIDToName_EvaluatorServiceDeleteEvaluatorResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceDeleteEvaluatorResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceDeleteEvaluatorResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceDeleteEvaluatorResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceDeleteEvaluatorResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteEvaluatorResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceDeleteEvaluatorResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEvaluator_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceDeleteEvaluatorResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceDeleteEvaluatorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceDeleteEvaluatorResult(%+v)", *p)

}

func (p *EvaluatorServiceDeleteEvaluatorResult) DeepEqual(ano *EvaluatorServiceDeleteEvaluatorResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceDeleteEvaluatorResult) Field0DeepEqual(src *DeleteEvaluatorResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceCheckEvaluatorNameArgs struct {
	Request *CheckEvaluatorNameRequest `thrift:"request,1" frugal:"1,default,CheckEvaluatorNameRequest"`
}

func NewEvaluatorServiceCheckEvaluatorNameArgs() *EvaluatorServiceCheckEvaluatorNameArgs {
	return &EvaluatorServiceCheckEvaluatorNameArgs{}
}

func (p *EvaluatorServiceCheckEvaluatorNameArgs) InitDefault() {
}

var EvaluatorServiceCheckEvaluatorNameArgs_Request_DEFAULT *CheckEvaluatorNameRequest

func (p *EvaluatorServiceCheckEvaluatorNameArgs) GetRequest() (v *CheckEvaluatorNameRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceCheckEvaluatorNameArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceCheckEvaluatorNameArgs) SetRequest(val *CheckEvaluatorNameRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceCheckEvaluatorNameArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceCheckEvaluatorNameArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceCheckEvaluatorNameArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceCheckEvaluatorNameArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceCheckEvaluatorNameArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCheckEvaluatorNameRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceCheckEvaluatorNameArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckEvaluatorName_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceCheckEvaluatorNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceCheckEvaluatorNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceCheckEvaluatorNameArgs(%+v)", *p)

}

func (p *EvaluatorServiceCheckEvaluatorNameArgs) DeepEqual(ano *EvaluatorServiceCheckEvaluatorNameArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceCheckEvaluatorNameArgs) Field1DeepEqual(src *CheckEvaluatorNameRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceCheckEvaluatorNameResult struct {
	Success *CheckEvaluatorNameResponse `thrift:"success,0,optional" frugal:"0,optional,CheckEvaluatorNameResponse"`
}

func NewEvaluatorServiceCheckEvaluatorNameResult() *EvaluatorServiceCheckEvaluatorNameResult {
	return &EvaluatorServiceCheckEvaluatorNameResult{}
}

func (p *EvaluatorServiceCheckEvaluatorNameResult) InitDefault() {
}

var EvaluatorServiceCheckEvaluatorNameResult_Success_DEFAULT *CheckEvaluatorNameResponse

func (p *EvaluatorServiceCheckEvaluatorNameResult) GetSuccess() (v *CheckEvaluatorNameResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceCheckEvaluatorNameResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceCheckEvaluatorNameResult) SetSuccess(x interface{}) {
	p.Success = x.(*CheckEvaluatorNameResponse)
}

var fieldIDToName_EvaluatorServiceCheckEvaluatorNameResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceCheckEvaluatorNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceCheckEvaluatorNameResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceCheckEvaluatorNameResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceCheckEvaluatorNameResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCheckEvaluatorNameResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceCheckEvaluatorNameResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckEvaluatorName_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceCheckEvaluatorNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceCheckEvaluatorNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceCheckEvaluatorNameResult(%+v)", *p)

}

func (p *EvaluatorServiceCheckEvaluatorNameResult) DeepEqual(ano *EvaluatorServiceCheckEvaluatorNameResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceCheckEvaluatorNameResult) Field0DeepEqual(src *CheckEvaluatorNameResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceListEvaluatorVersionsArgs struct {
	Request *ListEvaluatorVersionsRequest `thrift:"request,1" frugal:"1,default,ListEvaluatorVersionsRequest"`
}

func NewEvaluatorServiceListEvaluatorVersionsArgs() *EvaluatorServiceListEvaluatorVersionsArgs {
	return &EvaluatorServiceListEvaluatorVersionsArgs{}
}

func (p *EvaluatorServiceListEvaluatorVersionsArgs) InitDefault() {
}

var EvaluatorServiceListEvaluatorVersionsArgs_Request_DEFAULT *ListEvaluatorVersionsRequest

func (p *EvaluatorServiceListEvaluatorVersionsArgs) GetRequest() (v *ListEvaluatorVersionsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceListEvaluatorVersionsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceListEvaluatorVersionsArgs) SetRequest(val *ListEvaluatorVersionsRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceListEvaluatorVersionsArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceListEvaluatorVersionsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceListEvaluatorVersionsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceListEvaluatorVersionsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorVersionsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListEvaluatorVersionsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceListEvaluatorVersionsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluatorVersions_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorVersionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorVersionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceListEvaluatorVersionsArgs(%+v)", *p)

}

func (p *EvaluatorServiceListEvaluatorVersionsArgs) DeepEqual(ano *EvaluatorServiceListEvaluatorVersionsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceListEvaluatorVersionsArgs) Field1DeepEqual(src *ListEvaluatorVersionsRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceListEvaluatorVersionsResult struct {
	Success *ListEvaluatorVersionsResponse `thrift:"success,0,optional" frugal:"0,optional,ListEvaluatorVersionsResponse"`
}

func NewEvaluatorServiceListEvaluatorVersionsResult() *EvaluatorServiceListEvaluatorVersionsResult {
	return &EvaluatorServiceListEvaluatorVersionsResult{}
}

func (p *EvaluatorServiceListEvaluatorVersionsResult) InitDefault() {
}

var EvaluatorServiceListEvaluatorVersionsResult_Success_DEFAULT *ListEvaluatorVersionsResponse

func (p *EvaluatorServiceListEvaluatorVersionsResult) GetSuccess() (v *ListEvaluatorVersionsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceListEvaluatorVersionsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceListEvaluatorVersionsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListEvaluatorVersionsResponse)
}

var fieldIDToName_EvaluatorServiceListEvaluatorVersionsResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceListEvaluatorVersionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceListEvaluatorVersionsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceListEvaluatorVersionsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorVersionsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListEvaluatorVersionsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceListEvaluatorVersionsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluatorVersions_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorVersionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorVersionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceListEvaluatorVersionsResult(%+v)", *p)

}

func (p *EvaluatorServiceListEvaluatorVersionsResult) DeepEqual(ano *EvaluatorServiceListEvaluatorVersionsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceListEvaluatorVersionsResult) Field0DeepEqual(src *ListEvaluatorVersionsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceGetEvaluatorVersionArgs struct {
	Request *GetEvaluatorVersionRequest `thrift:"request,1" frugal:"1,default,GetEvaluatorVersionRequest"`
}

func NewEvaluatorServiceGetEvaluatorVersionArgs() *EvaluatorServiceGetEvaluatorVersionArgs {
	return &EvaluatorServiceGetEvaluatorVersionArgs{}
}

func (p *EvaluatorServiceGetEvaluatorVersionArgs) InitDefault() {
}

var EvaluatorServiceGetEvaluatorVersionArgs_Request_DEFAULT *GetEvaluatorVersionRequest

func (p *EvaluatorServiceGetEvaluatorVersionArgs) GetRequest() (v *GetEvaluatorVersionRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceGetEvaluatorVersionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceGetEvaluatorVersionArgs) SetRequest(val *GetEvaluatorVersionRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceGetEvaluatorVersionArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceGetEvaluatorVersionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceGetEvaluatorVersionArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceGetEvaluatorVersionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorVersionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorVersionRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceGetEvaluatorVersionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorVersion_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceGetEvaluatorVersionArgs(%+v)", *p)

}

func (p *EvaluatorServiceGetEvaluatorVersionArgs) DeepEqual(ano *EvaluatorServiceGetEvaluatorVersionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceGetEvaluatorVersionArgs) Field1DeepEqual(src *GetEvaluatorVersionRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceGetEvaluatorVersionResult struct {
	Success *GetEvaluatorVersionResponse `thrift:"success,0,optional" frugal:"0,optional,GetEvaluatorVersionResponse"`
}

func NewEvaluatorServiceGetEvaluatorVersionResult() *EvaluatorServiceGetEvaluatorVersionResult {
	return &EvaluatorServiceGetEvaluatorVersionResult{}
}

func (p *EvaluatorServiceGetEvaluatorVersionResult) InitDefault() {
}

var EvaluatorServiceGetEvaluatorVersionResult_Success_DEFAULT *GetEvaluatorVersionResponse

func (p *EvaluatorServiceGetEvaluatorVersionResult) GetSuccess() (v *GetEvaluatorVersionResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceGetEvaluatorVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceGetEvaluatorVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetEvaluatorVersionResponse)
}

var fieldIDToName_EvaluatorServiceGetEvaluatorVersionResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceGetEvaluatorVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceGetEvaluatorVersionResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceGetEvaluatorVersionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorVersionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorVersionResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceGetEvaluatorVersionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorVersion_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceGetEvaluatorVersionResult(%+v)", *p)

}

func (p *EvaluatorServiceGetEvaluatorVersionResult) DeepEqual(ano *EvaluatorServiceGetEvaluatorVersionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceGetEvaluatorVersionResult) Field0DeepEqual(src *GetEvaluatorVersionResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceBatchGetEvaluatorVersionsArgs struct {
	Request *BatchGetEvaluatorVersionsRequest `thrift:"request,1" frugal:"1,default,BatchGetEvaluatorVersionsRequest"`
}

func NewEvaluatorServiceBatchGetEvaluatorVersionsArgs() *EvaluatorServiceBatchGetEvaluatorVersionsArgs {
	return &EvaluatorServiceBatchGetEvaluatorVersionsArgs{}
}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsArgs) InitDefault() {
}

var EvaluatorServiceBatchGetEvaluatorVersionsArgs_Request_DEFAULT *BatchGetEvaluatorVersionsRequest

func (p *EvaluatorServiceBatchGetEvaluatorVersionsArgs) GetRequest() (v *BatchGetEvaluatorVersionsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceBatchGetEvaluatorVersionsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceBatchGetEvaluatorVersionsArgs) SetRequest(val *BatchGetEvaluatorVersionsRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceBatchGetEvaluatorVersionsArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceBatchGetEvaluatorVersionsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetEvaluatorVersionsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluatorVersions_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceBatchGetEvaluatorVersionsArgs(%+v)", *p)

}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsArgs) DeepEqual(ano *EvaluatorServiceBatchGetEvaluatorVersionsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsArgs) Field1DeepEqual(src *BatchGetEvaluatorVersionsRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceBatchGetEvaluatorVersionsResult struct {
	Success *BatchGetEvaluatorVersionsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetEvaluatorVersionsResponse"`
}

func NewEvaluatorServiceBatchGetEvaluatorVersionsResult() *EvaluatorServiceBatchGetEvaluatorVersionsResult {
	return &EvaluatorServiceBatchGetEvaluatorVersionsResult{}
}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsResult) InitDefault() {
}

var EvaluatorServiceBatchGetEvaluatorVersionsResult_Success_DEFAULT *BatchGetEvaluatorVersionsResponse

func (p *EvaluatorServiceBatchGetEvaluatorVersionsResult) GetSuccess() (v *BatchGetEvaluatorVersionsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceBatchGetEvaluatorVersionsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceBatchGetEvaluatorVersionsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetEvaluatorVersionsResponse)
}

var fieldIDToName_EvaluatorServiceBatchGetEvaluatorVersionsResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceBatchGetEvaluatorVersionsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetEvaluatorVersionsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluatorVersions_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceBatchGetEvaluatorVersionsResult(%+v)", *p)

}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsResult) DeepEqual(ano *EvaluatorServiceBatchGetEvaluatorVersionsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceBatchGetEvaluatorVersionsResult) Field0DeepEqual(src *BatchGetEvaluatorVersionsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceSubmitEvaluatorVersionArgs struct {
	Request *SubmitEvaluatorVersionRequest `thrift:"request,1" frugal:"1,default,SubmitEvaluatorVersionRequest"`
}

func NewEvaluatorServiceSubmitEvaluatorVersionArgs() *EvaluatorServiceSubmitEvaluatorVersionArgs {
	return &EvaluatorServiceSubmitEvaluatorVersionArgs{}
}

func (p *EvaluatorServiceSubmitEvaluatorVersionArgs) InitDefault() {
}

var EvaluatorServiceSubmitEvaluatorVersionArgs_Request_DEFAULT *SubmitEvaluatorVersionRequest

func (p *EvaluatorServiceSubmitEvaluatorVersionArgs) GetRequest() (v *SubmitEvaluatorVersionRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceSubmitEvaluatorVersionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceSubmitEvaluatorVersionArgs) SetRequest(val *SubmitEvaluatorVersionRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceSubmitEvaluatorVersionArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceSubmitEvaluatorVersionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceSubmitEvaluatorVersionArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceSubmitEvaluatorVersionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceSubmitEvaluatorVersionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSubmitEvaluatorVersionRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceSubmitEvaluatorVersionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitEvaluatorVersion_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceSubmitEvaluatorVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceSubmitEvaluatorVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceSubmitEvaluatorVersionArgs(%+v)", *p)

}

func (p *EvaluatorServiceSubmitEvaluatorVersionArgs) DeepEqual(ano *EvaluatorServiceSubmitEvaluatorVersionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceSubmitEvaluatorVersionArgs) Field1DeepEqual(src *SubmitEvaluatorVersionRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceSubmitEvaluatorVersionResult struct {
	Success *SubmitEvaluatorVersionResponse `thrift:"success,0,optional" frugal:"0,optional,SubmitEvaluatorVersionResponse"`
}

func NewEvaluatorServiceSubmitEvaluatorVersionResult() *EvaluatorServiceSubmitEvaluatorVersionResult {
	return &EvaluatorServiceSubmitEvaluatorVersionResult{}
}

func (p *EvaluatorServiceSubmitEvaluatorVersionResult) InitDefault() {
}

var EvaluatorServiceSubmitEvaluatorVersionResult_Success_DEFAULT *SubmitEvaluatorVersionResponse

func (p *EvaluatorServiceSubmitEvaluatorVersionResult) GetSuccess() (v *SubmitEvaluatorVersionResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceSubmitEvaluatorVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceSubmitEvaluatorVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*SubmitEvaluatorVersionResponse)
}

var fieldIDToName_EvaluatorServiceSubmitEvaluatorVersionResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceSubmitEvaluatorVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceSubmitEvaluatorVersionResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceSubmitEvaluatorVersionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceSubmitEvaluatorVersionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSubmitEvaluatorVersionResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceSubmitEvaluatorVersionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitEvaluatorVersion_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceSubmitEvaluatorVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceSubmitEvaluatorVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceSubmitEvaluatorVersionResult(%+v)", *p)

}

func (p *EvaluatorServiceSubmitEvaluatorVersionResult) DeepEqual(ano *EvaluatorServiceSubmitEvaluatorVersionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceSubmitEvaluatorVersionResult) Field0DeepEqual(src *SubmitEvaluatorVersionResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceListTemplatesArgs struct {
	Request *ListTemplatesRequest `thrift:"request,1" frugal:"1,default,ListTemplatesRequest"`
}

func NewEvaluatorServiceListTemplatesArgs() *EvaluatorServiceListTemplatesArgs {
	return &EvaluatorServiceListTemplatesArgs{}
}

func (p *EvaluatorServiceListTemplatesArgs) InitDefault() {
}

var EvaluatorServiceListTemplatesArgs_Request_DEFAULT *ListTemplatesRequest

func (p *EvaluatorServiceListTemplatesArgs) GetRequest() (v *ListTemplatesRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceListTemplatesArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceListTemplatesArgs) SetRequest(val *ListTemplatesRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceListTemplatesArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceListTemplatesArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceListTemplatesArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceListTemplatesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceListTemplatesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListTemplatesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceListTemplatesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListTemplates_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceListTemplatesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceListTemplatesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceListTemplatesArgs(%+v)", *p)

}

func (p *EvaluatorServiceListTemplatesArgs) DeepEqual(ano *EvaluatorServiceListTemplatesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceListTemplatesArgs) Field1DeepEqual(src *ListTemplatesRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceListTemplatesResult struct {
	Success *ListTemplatesResponse `thrift:"success,0,optional" frugal:"0,optional,ListTemplatesResponse"`
}

func NewEvaluatorServiceListTemplatesResult() *EvaluatorServiceListTemplatesResult {
	return &EvaluatorServiceListTemplatesResult{}
}

func (p *EvaluatorServiceListTemplatesResult) InitDefault() {
}

var EvaluatorServiceListTemplatesResult_Success_DEFAULT *ListTemplatesResponse

func (p *EvaluatorServiceListTemplatesResult) GetSuccess() (v *ListTemplatesResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceListTemplatesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceListTemplatesResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListTemplatesResponse)
}

var fieldIDToName_EvaluatorServiceListTemplatesResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceListTemplatesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceListTemplatesResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceListTemplatesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceListTemplatesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListTemplatesResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceListTemplatesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListTemplates_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceListTemplatesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceListTemplatesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceListTemplatesResult(%+v)", *p)

}

func (p *EvaluatorServiceListTemplatesResult) DeepEqual(ano *EvaluatorServiceListTemplatesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceListTemplatesResult) Field0DeepEqual(src *ListTemplatesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceGetTemplateInfoArgs struct {
	Request *GetTemplateInfoRequest `thrift:"request,1" frugal:"1,default,GetTemplateInfoRequest"`
}

func NewEvaluatorServiceGetTemplateInfoArgs() *EvaluatorServiceGetTemplateInfoArgs {
	return &EvaluatorServiceGetTemplateInfoArgs{}
}

func (p *EvaluatorServiceGetTemplateInfoArgs) InitDefault() {
}

var EvaluatorServiceGetTemplateInfoArgs_Request_DEFAULT *GetTemplateInfoRequest

func (p *EvaluatorServiceGetTemplateInfoArgs) GetRequest() (v *GetTemplateInfoRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceGetTemplateInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceGetTemplateInfoArgs) SetRequest(val *GetTemplateInfoRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceGetTemplateInfoArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceGetTemplateInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceGetTemplateInfoArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceGetTemplateInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceGetTemplateInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetTemplateInfoRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceGetTemplateInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTemplateInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceGetTemplateInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceGetTemplateInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceGetTemplateInfoArgs(%+v)", *p)

}

func (p *EvaluatorServiceGetTemplateInfoArgs) DeepEqual(ano *EvaluatorServiceGetTemplateInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceGetTemplateInfoArgs) Field1DeepEqual(src *GetTemplateInfoRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceGetTemplateInfoResult struct {
	Success *GetTemplateInfoResponse `thrift:"success,0,optional" frugal:"0,optional,GetTemplateInfoResponse"`
}

func NewEvaluatorServiceGetTemplateInfoResult() *EvaluatorServiceGetTemplateInfoResult {
	return &EvaluatorServiceGetTemplateInfoResult{}
}

func (p *EvaluatorServiceGetTemplateInfoResult) InitDefault() {
}

var EvaluatorServiceGetTemplateInfoResult_Success_DEFAULT *GetTemplateInfoResponse

func (p *EvaluatorServiceGetTemplateInfoResult) GetSuccess() (v *GetTemplateInfoResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceGetTemplateInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceGetTemplateInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetTemplateInfoResponse)
}

var fieldIDToName_EvaluatorServiceGetTemplateInfoResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceGetTemplateInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceGetTemplateInfoResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceGetTemplateInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceGetTemplateInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetTemplateInfoResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceGetTemplateInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTemplateInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceGetTemplateInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceGetTemplateInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceGetTemplateInfoResult(%+v)", *p)

}

func (p *EvaluatorServiceGetTemplateInfoResult) DeepEqual(ano *EvaluatorServiceGetTemplateInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceGetTemplateInfoResult) Field0DeepEqual(src *GetTemplateInfoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs struct {
	Req *GetDefaultPromptEvaluatorToolsRequest `thrift:"req,1" frugal:"1,default,GetDefaultPromptEvaluatorToolsRequest"`
}

func NewEvaluatorServiceGetDefaultPromptEvaluatorToolsArgs() *EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs {
	return &EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs{}
}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs) InitDefault() {
}

var EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs_Req_DEFAULT *GetDefaultPromptEvaluatorToolsRequest

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs) GetReq() (v *GetDefaultPromptEvaluatorToolsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs) SetReq(val *GetDefaultPromptEvaluatorToolsRequest) {
	p.Req = val
}

var fieldIDToName_EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs = map[int16]string{
	1: "req",
}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetDefaultPromptEvaluatorToolsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDefaultPromptEvaluatorTools_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs(%+v)", *p)

}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs) DeepEqual(ano *EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsArgs) Field1DeepEqual(src *GetDefaultPromptEvaluatorToolsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceGetDefaultPromptEvaluatorToolsResult struct {
	Success *GetDefaultPromptEvaluatorToolsResponse `thrift:"success,0,optional" frugal:"0,optional,GetDefaultPromptEvaluatorToolsResponse"`
}

func NewEvaluatorServiceGetDefaultPromptEvaluatorToolsResult() *EvaluatorServiceGetDefaultPromptEvaluatorToolsResult {
	return &EvaluatorServiceGetDefaultPromptEvaluatorToolsResult{}
}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsResult) InitDefault() {
}

var EvaluatorServiceGetDefaultPromptEvaluatorToolsResult_Success_DEFAULT *GetDefaultPromptEvaluatorToolsResponse

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsResult) GetSuccess() (v *GetDefaultPromptEvaluatorToolsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceGetDefaultPromptEvaluatorToolsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDefaultPromptEvaluatorToolsResponse)
}

var fieldIDToName_EvaluatorServiceGetDefaultPromptEvaluatorToolsResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceGetDefaultPromptEvaluatorToolsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetDefaultPromptEvaluatorToolsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDefaultPromptEvaluatorTools_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceGetDefaultPromptEvaluatorToolsResult(%+v)", *p)

}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsResult) DeepEqual(ano *EvaluatorServiceGetDefaultPromptEvaluatorToolsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceGetDefaultPromptEvaluatorToolsResult) Field0DeepEqual(src *GetDefaultPromptEvaluatorToolsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceRunEvaluatorArgs struct {
	Req *RunEvaluatorRequest `thrift:"req,1" frugal:"1,default,RunEvaluatorRequest"`
}

func NewEvaluatorServiceRunEvaluatorArgs() *EvaluatorServiceRunEvaluatorArgs {
	return &EvaluatorServiceRunEvaluatorArgs{}
}

func (p *EvaluatorServiceRunEvaluatorArgs) InitDefault() {
}

var EvaluatorServiceRunEvaluatorArgs_Req_DEFAULT *RunEvaluatorRequest

func (p *EvaluatorServiceRunEvaluatorArgs) GetReq() (v *RunEvaluatorRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluatorServiceRunEvaluatorArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluatorServiceRunEvaluatorArgs) SetReq(val *RunEvaluatorRequest) {
	p.Req = val
}

var fieldIDToName_EvaluatorServiceRunEvaluatorArgs = map[int16]string{
	1: "req",
}

func (p *EvaluatorServiceRunEvaluatorArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluatorServiceRunEvaluatorArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceRunEvaluatorArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceRunEvaluatorArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRunEvaluatorRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluatorServiceRunEvaluatorArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunEvaluator_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceRunEvaluatorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceRunEvaluatorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceRunEvaluatorArgs(%+v)", *p)

}

func (p *EvaluatorServiceRunEvaluatorArgs) DeepEqual(ano *EvaluatorServiceRunEvaluatorArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluatorServiceRunEvaluatorArgs) Field1DeepEqual(src *RunEvaluatorRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceRunEvaluatorResult struct {
	Success *RunEvaluatorResponse `thrift:"success,0,optional" frugal:"0,optional,RunEvaluatorResponse"`
}

func NewEvaluatorServiceRunEvaluatorResult() *EvaluatorServiceRunEvaluatorResult {
	return &EvaluatorServiceRunEvaluatorResult{}
}

func (p *EvaluatorServiceRunEvaluatorResult) InitDefault() {
}

var EvaluatorServiceRunEvaluatorResult_Success_DEFAULT *RunEvaluatorResponse

func (p *EvaluatorServiceRunEvaluatorResult) GetSuccess() (v *RunEvaluatorResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceRunEvaluatorResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceRunEvaluatorResult) SetSuccess(x interface{}) {
	p.Success = x.(*RunEvaluatorResponse)
}

var fieldIDToName_EvaluatorServiceRunEvaluatorResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceRunEvaluatorResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceRunEvaluatorResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceRunEvaluatorResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceRunEvaluatorResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRunEvaluatorResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceRunEvaluatorResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunEvaluator_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceRunEvaluatorResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceRunEvaluatorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceRunEvaluatorResult(%+v)", *p)

}

func (p *EvaluatorServiceRunEvaluatorResult) DeepEqual(ano *EvaluatorServiceRunEvaluatorResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceRunEvaluatorResult) Field0DeepEqual(src *RunEvaluatorResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceDebugEvaluatorArgs struct {
	Req *DebugEvaluatorRequest `thrift:"req,1" frugal:"1,default,DebugEvaluatorRequest"`
}

func NewEvaluatorServiceDebugEvaluatorArgs() *EvaluatorServiceDebugEvaluatorArgs {
	return &EvaluatorServiceDebugEvaluatorArgs{}
}

func (p *EvaluatorServiceDebugEvaluatorArgs) InitDefault() {
}

var EvaluatorServiceDebugEvaluatorArgs_Req_DEFAULT *DebugEvaluatorRequest

func (p *EvaluatorServiceDebugEvaluatorArgs) GetReq() (v *DebugEvaluatorRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluatorServiceDebugEvaluatorArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluatorServiceDebugEvaluatorArgs) SetReq(val *DebugEvaluatorRequest) {
	p.Req = val
}

var fieldIDToName_EvaluatorServiceDebugEvaluatorArgs = map[int16]string{
	1: "req",
}

func (p *EvaluatorServiceDebugEvaluatorArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluatorServiceDebugEvaluatorArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceDebugEvaluatorArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceDebugEvaluatorArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDebugEvaluatorRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluatorServiceDebugEvaluatorArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugEvaluator_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceDebugEvaluatorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceDebugEvaluatorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceDebugEvaluatorArgs(%+v)", *p)

}

func (p *EvaluatorServiceDebugEvaluatorArgs) DeepEqual(ano *EvaluatorServiceDebugEvaluatorArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluatorServiceDebugEvaluatorArgs) Field1DeepEqual(src *DebugEvaluatorRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceDebugEvaluatorResult struct {
	Success *DebugEvaluatorResponse `thrift:"success,0,optional" frugal:"0,optional,DebugEvaluatorResponse"`
}

func NewEvaluatorServiceDebugEvaluatorResult() *EvaluatorServiceDebugEvaluatorResult {
	return &EvaluatorServiceDebugEvaluatorResult{}
}

func (p *EvaluatorServiceDebugEvaluatorResult) InitDefault() {
}

var EvaluatorServiceDebugEvaluatorResult_Success_DEFAULT *DebugEvaluatorResponse

func (p *EvaluatorServiceDebugEvaluatorResult) GetSuccess() (v *DebugEvaluatorResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceDebugEvaluatorResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceDebugEvaluatorResult) SetSuccess(x interface{}) {
	p.Success = x.(*DebugEvaluatorResponse)
}

var fieldIDToName_EvaluatorServiceDebugEvaluatorResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceDebugEvaluatorResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceDebugEvaluatorResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceDebugEvaluatorResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceDebugEvaluatorResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDebugEvaluatorResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceDebugEvaluatorResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugEvaluator_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceDebugEvaluatorResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceDebugEvaluatorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceDebugEvaluatorResult(%+v)", *p)

}

func (p *EvaluatorServiceDebugEvaluatorResult) DeepEqual(ano *EvaluatorServiceDebugEvaluatorResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceDebugEvaluatorResult) Field0DeepEqual(src *DebugEvaluatorResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceBatchDebugEvaluatorArgs struct {
	Req *BatchDebugEvaluatorRequest `thrift:"req,1" frugal:"1,default,BatchDebugEvaluatorRequest"`
}

func NewEvaluatorServiceBatchDebugEvaluatorArgs() *EvaluatorServiceBatchDebugEvaluatorArgs {
	return &EvaluatorServiceBatchDebugEvaluatorArgs{}
}

func (p *EvaluatorServiceBatchDebugEvaluatorArgs) InitDefault() {
}

var EvaluatorServiceBatchDebugEvaluatorArgs_Req_DEFAULT *BatchDebugEvaluatorRequest

func (p *EvaluatorServiceBatchDebugEvaluatorArgs) GetReq() (v *BatchDebugEvaluatorRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluatorServiceBatchDebugEvaluatorArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluatorServiceBatchDebugEvaluatorArgs) SetReq(val *BatchDebugEvaluatorRequest) {
	p.Req = val
}

var fieldIDToName_EvaluatorServiceBatchDebugEvaluatorArgs = map[int16]string{
	1: "req",
}

func (p *EvaluatorServiceBatchDebugEvaluatorArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluatorServiceBatchDebugEvaluatorArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceBatchDebugEvaluatorArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceBatchDebugEvaluatorArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchDebugEvaluatorRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluatorServiceBatchDebugEvaluatorArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDebugEvaluator_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceBatchDebugEvaluatorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceBatchDebugEvaluatorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceBatchDebugEvaluatorArgs(%+v)", *p)

}

func (p *EvaluatorServiceBatchDebugEvaluatorArgs) DeepEqual(ano *EvaluatorServiceBatchDebugEvaluatorArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluatorServiceBatchDebugEvaluatorArgs) Field1DeepEqual(src *BatchDebugEvaluatorRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceBatchDebugEvaluatorResult struct {
	Success *BatchDebugEvaluatorResponse `thrift:"success,0,optional" frugal:"0,optional,BatchDebugEvaluatorResponse"`
}

func NewEvaluatorServiceBatchDebugEvaluatorResult() *EvaluatorServiceBatchDebugEvaluatorResult {
	return &EvaluatorServiceBatchDebugEvaluatorResult{}
}

func (p *EvaluatorServiceBatchDebugEvaluatorResult) InitDefault() {
}

var EvaluatorServiceBatchDebugEvaluatorResult_Success_DEFAULT *BatchDebugEvaluatorResponse

func (p *EvaluatorServiceBatchDebugEvaluatorResult) GetSuccess() (v *BatchDebugEvaluatorResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceBatchDebugEvaluatorResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceBatchDebugEvaluatorResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchDebugEvaluatorResponse)
}

var fieldIDToName_EvaluatorServiceBatchDebugEvaluatorResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceBatchDebugEvaluatorResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceBatchDebugEvaluatorResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceBatchDebugEvaluatorResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceBatchDebugEvaluatorResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchDebugEvaluatorResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceBatchDebugEvaluatorResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDebugEvaluator_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceBatchDebugEvaluatorResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceBatchDebugEvaluatorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceBatchDebugEvaluatorResult(%+v)", *p)

}

func (p *EvaluatorServiceBatchDebugEvaluatorResult) DeepEqual(ano *EvaluatorServiceBatchDebugEvaluatorResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceBatchDebugEvaluatorResult) Field0DeepEqual(src *BatchDebugEvaluatorResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceUpdateEvaluatorRecordArgs struct {
	Req *UpdateEvaluatorRecordRequest `thrift:"req,1" frugal:"1,default,UpdateEvaluatorRecordRequest"`
}

func NewEvaluatorServiceUpdateEvaluatorRecordArgs() *EvaluatorServiceUpdateEvaluatorRecordArgs {
	return &EvaluatorServiceUpdateEvaluatorRecordArgs{}
}

func (p *EvaluatorServiceUpdateEvaluatorRecordArgs) InitDefault() {
}

var EvaluatorServiceUpdateEvaluatorRecordArgs_Req_DEFAULT *UpdateEvaluatorRecordRequest

func (p *EvaluatorServiceUpdateEvaluatorRecordArgs) GetReq() (v *UpdateEvaluatorRecordRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluatorServiceUpdateEvaluatorRecordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluatorServiceUpdateEvaluatorRecordArgs) SetReq(val *UpdateEvaluatorRecordRequest) {
	p.Req = val
}

var fieldIDToName_EvaluatorServiceUpdateEvaluatorRecordArgs = map[int16]string{
	1: "req",
}

func (p *EvaluatorServiceUpdateEvaluatorRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluatorServiceUpdateEvaluatorRecordArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceUpdateEvaluatorRecordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateEvaluatorRecordRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluatorServiceUpdateEvaluatorRecordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluatorRecord_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceUpdateEvaluatorRecordArgs(%+v)", *p)

}

func (p *EvaluatorServiceUpdateEvaluatorRecordArgs) DeepEqual(ano *EvaluatorServiceUpdateEvaluatorRecordArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluatorServiceUpdateEvaluatorRecordArgs) Field1DeepEqual(src *UpdateEvaluatorRecordRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceUpdateEvaluatorRecordResult struct {
	Success *UpdateEvaluatorRecordResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateEvaluatorRecordResponse"`
}

func NewEvaluatorServiceUpdateEvaluatorRecordResult() *EvaluatorServiceUpdateEvaluatorRecordResult {
	return &EvaluatorServiceUpdateEvaluatorRecordResult{}
}

func (p *EvaluatorServiceUpdateEvaluatorRecordResult) InitDefault() {
}

var EvaluatorServiceUpdateEvaluatorRecordResult_Success_DEFAULT *UpdateEvaluatorRecordResponse

func (p *EvaluatorServiceUpdateEvaluatorRecordResult) GetSuccess() (v *UpdateEvaluatorRecordResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceUpdateEvaluatorRecordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceUpdateEvaluatorRecordResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateEvaluatorRecordResponse)
}

var fieldIDToName_EvaluatorServiceUpdateEvaluatorRecordResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceUpdateEvaluatorRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceUpdateEvaluatorRecordResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceUpdateEvaluatorRecordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorRecordResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateEvaluatorRecordResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceUpdateEvaluatorRecordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluatorRecord_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceUpdateEvaluatorRecordResult(%+v)", *p)

}

func (p *EvaluatorServiceUpdateEvaluatorRecordResult) DeepEqual(ano *EvaluatorServiceUpdateEvaluatorRecordResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceUpdateEvaluatorRecordResult) Field0DeepEqual(src *UpdateEvaluatorRecordResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceGetEvaluatorRecordArgs struct {
	Req *GetEvaluatorRecordRequest `thrift:"req,1" frugal:"1,default,GetEvaluatorRecordRequest"`
}

func NewEvaluatorServiceGetEvaluatorRecordArgs() *EvaluatorServiceGetEvaluatorRecordArgs {
	return &EvaluatorServiceGetEvaluatorRecordArgs{}
}

func (p *EvaluatorServiceGetEvaluatorRecordArgs) InitDefault() {
}

var EvaluatorServiceGetEvaluatorRecordArgs_Req_DEFAULT *GetEvaluatorRecordRequest

func (p *EvaluatorServiceGetEvaluatorRecordArgs) GetReq() (v *GetEvaluatorRecordRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluatorServiceGetEvaluatorRecordArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluatorServiceGetEvaluatorRecordArgs) SetReq(val *GetEvaluatorRecordRequest) {
	p.Req = val
}

var fieldIDToName_EvaluatorServiceGetEvaluatorRecordArgs = map[int16]string{
	1: "req",
}

func (p *EvaluatorServiceGetEvaluatorRecordArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluatorServiceGetEvaluatorRecordArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceGetEvaluatorRecordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorRecordRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluatorServiceGetEvaluatorRecordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorRecord_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceGetEvaluatorRecordArgs(%+v)", *p)

}

func (p *EvaluatorServiceGetEvaluatorRecordArgs) DeepEqual(ano *EvaluatorServiceGetEvaluatorRecordArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluatorServiceGetEvaluatorRecordArgs) Field1DeepEqual(src *GetEvaluatorRecordRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceGetEvaluatorRecordResult struct {
	Success *GetEvaluatorRecordResponse `thrift:"success,0,optional" frugal:"0,optional,GetEvaluatorRecordResponse"`
}

func NewEvaluatorServiceGetEvaluatorRecordResult() *EvaluatorServiceGetEvaluatorRecordResult {
	return &EvaluatorServiceGetEvaluatorRecordResult{}
}

func (p *EvaluatorServiceGetEvaluatorRecordResult) InitDefault() {
}

var EvaluatorServiceGetEvaluatorRecordResult_Success_DEFAULT *GetEvaluatorRecordResponse

func (p *EvaluatorServiceGetEvaluatorRecordResult) GetSuccess() (v *GetEvaluatorRecordResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceGetEvaluatorRecordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceGetEvaluatorRecordResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetEvaluatorRecordResponse)
}

var fieldIDToName_EvaluatorServiceGetEvaluatorRecordResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceGetEvaluatorRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceGetEvaluatorRecordResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceGetEvaluatorRecordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorRecordResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEvaluatorRecordResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceGetEvaluatorRecordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvaluatorRecord_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceGetEvaluatorRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceGetEvaluatorRecordResult(%+v)", *p)

}

func (p *EvaluatorServiceGetEvaluatorRecordResult) DeepEqual(ano *EvaluatorServiceGetEvaluatorRecordResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceGetEvaluatorRecordResult) Field0DeepEqual(src *GetEvaluatorRecordResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceBatchGetEvaluatorRecordsArgs struct {
	Req *BatchGetEvaluatorRecordsRequest `thrift:"req,1" frugal:"1,default,BatchGetEvaluatorRecordsRequest"`
}

func NewEvaluatorServiceBatchGetEvaluatorRecordsArgs() *EvaluatorServiceBatchGetEvaluatorRecordsArgs {
	return &EvaluatorServiceBatchGetEvaluatorRecordsArgs{}
}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsArgs) InitDefault() {
}

var EvaluatorServiceBatchGetEvaluatorRecordsArgs_Req_DEFAULT *BatchGetEvaluatorRecordsRequest

func (p *EvaluatorServiceBatchGetEvaluatorRecordsArgs) GetReq() (v *BatchGetEvaluatorRecordsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluatorServiceBatchGetEvaluatorRecordsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluatorServiceBatchGetEvaluatorRecordsArgs) SetReq(val *BatchGetEvaluatorRecordsRequest) {
	p.Req = val
}

var fieldIDToName_EvaluatorServiceBatchGetEvaluatorRecordsArgs = map[int16]string{
	1: "req",
}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceBatchGetEvaluatorRecordsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetEvaluatorRecordsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluatorRecords_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceBatchGetEvaluatorRecordsArgs(%+v)", *p)

}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsArgs) DeepEqual(ano *EvaluatorServiceBatchGetEvaluatorRecordsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsArgs) Field1DeepEqual(src *BatchGetEvaluatorRecordsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceBatchGetEvaluatorRecordsResult struct {
	Success *BatchGetEvaluatorRecordsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetEvaluatorRecordsResponse"`
}

func NewEvaluatorServiceBatchGetEvaluatorRecordsResult() *EvaluatorServiceBatchGetEvaluatorRecordsResult {
	return &EvaluatorServiceBatchGetEvaluatorRecordsResult{}
}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsResult) InitDefault() {
}

var EvaluatorServiceBatchGetEvaluatorRecordsResult_Success_DEFAULT *BatchGetEvaluatorRecordsResponse

func (p *EvaluatorServiceBatchGetEvaluatorRecordsResult) GetSuccess() (v *BatchGetEvaluatorRecordsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceBatchGetEvaluatorRecordsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceBatchGetEvaluatorRecordsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetEvaluatorRecordsResponse)
}

var fieldIDToName_EvaluatorServiceBatchGetEvaluatorRecordsResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceBatchGetEvaluatorRecordsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetEvaluatorRecordsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvaluatorRecords_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceBatchGetEvaluatorRecordsResult(%+v)", *p)

}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsResult) DeepEqual(ano *EvaluatorServiceBatchGetEvaluatorRecordsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceBatchGetEvaluatorRecordsResult) Field0DeepEqual(src *BatchGetEvaluatorRecordsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceValidateEvaluatorArgs struct {
	Request *ValidateEvaluatorRequest `thrift:"request,1" frugal:"1,default,ValidateEvaluatorRequest"`
}

func NewEvaluatorServiceValidateEvaluatorArgs() *EvaluatorServiceValidateEvaluatorArgs {
	return &EvaluatorServiceValidateEvaluatorArgs{}
}

func (p *EvaluatorServiceValidateEvaluatorArgs) InitDefault() {
}

var EvaluatorServiceValidateEvaluatorArgs_Request_DEFAULT *ValidateEvaluatorRequest

func (p *EvaluatorServiceValidateEvaluatorArgs) GetRequest() (v *ValidateEvaluatorRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceValidateEvaluatorArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceValidateEvaluatorArgs) SetRequest(val *ValidateEvaluatorRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceValidateEvaluatorArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceValidateEvaluatorArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceValidateEvaluatorArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceValidateEvaluatorArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceValidateEvaluatorArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewValidateEvaluatorRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceValidateEvaluatorArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ValidateEvaluator_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceValidateEvaluatorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceValidateEvaluatorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceValidateEvaluatorArgs(%+v)", *p)

}

func (p *EvaluatorServiceValidateEvaluatorArgs) DeepEqual(ano *EvaluatorServiceValidateEvaluatorArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceValidateEvaluatorArgs) Field1DeepEqual(src *ValidateEvaluatorRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceValidateEvaluatorResult struct {
	Success *ValidateEvaluatorResponse `thrift:"success,0,optional" frugal:"0,optional,ValidateEvaluatorResponse"`
}

func NewEvaluatorServiceValidateEvaluatorResult() *EvaluatorServiceValidateEvaluatorResult {
	return &EvaluatorServiceValidateEvaluatorResult{}
}

func (p *EvaluatorServiceValidateEvaluatorResult) InitDefault() {
}

var EvaluatorServiceValidateEvaluatorResult_Success_DEFAULT *ValidateEvaluatorResponse

func (p *EvaluatorServiceValidateEvaluatorResult) GetSuccess() (v *ValidateEvaluatorResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceValidateEvaluatorResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceValidateEvaluatorResult) SetSuccess(x interface{}) {
	p.Success = x.(*ValidateEvaluatorResponse)
}

var fieldIDToName_EvaluatorServiceValidateEvaluatorResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceValidateEvaluatorResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceValidateEvaluatorResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceValidateEvaluatorResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceValidateEvaluatorResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewValidateEvaluatorResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceValidateEvaluatorResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ValidateEvaluator_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceValidateEvaluatorResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceValidateEvaluatorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceValidateEvaluatorResult(%+v)", *p)

}

func (p *EvaluatorServiceValidateEvaluatorResult) DeepEqual(ano *EvaluatorServiceValidateEvaluatorResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceValidateEvaluatorResult) Field0DeepEqual(src *ValidateEvaluatorResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceListTemplatesV2Args struct {
	Request *ListTemplatesV2Request `thrift:"request,1" frugal:"1,default,ListTemplatesV2Request"`
}

func NewEvaluatorServiceListTemplatesV2Args() *EvaluatorServiceListTemplatesV2Args {
	return &EvaluatorServiceListTemplatesV2Args{}
}

func (p *EvaluatorServiceListTemplatesV2Args) InitDefault() {
}

var EvaluatorServiceListTemplatesV2Args_Request_DEFAULT *ListTemplatesV2Request

func (p *EvaluatorServiceListTemplatesV2Args) GetRequest() (v *ListTemplatesV2Request) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceListTemplatesV2Args_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceListTemplatesV2Args) SetRequest(val *ListTemplatesV2Request) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceListTemplatesV2Args = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceListTemplatesV2Args) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceListTemplatesV2Args) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceListTemplatesV2Args[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceListTemplatesV2Args) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListTemplatesV2Request()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceListTemplatesV2Args) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListTemplatesV2_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceListTemplatesV2Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceListTemplatesV2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceListTemplatesV2Args(%+v)", *p)

}

func (p *EvaluatorServiceListTemplatesV2Args) DeepEqual(ano *EvaluatorServiceListTemplatesV2Args) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceListTemplatesV2Args) Field1DeepEqual(src *ListTemplatesV2Request) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceListTemplatesV2Result struct {
	Success *ListTemplatesV2Response `thrift:"success,0,optional" frugal:"0,optional,ListTemplatesV2Response"`
}

func NewEvaluatorServiceListTemplatesV2Result() *EvaluatorServiceListTemplatesV2Result {
	return &EvaluatorServiceListTemplatesV2Result{}
}

func (p *EvaluatorServiceListTemplatesV2Result) InitDefault() {
}

var EvaluatorServiceListTemplatesV2Result_Success_DEFAULT *ListTemplatesV2Response

func (p *EvaluatorServiceListTemplatesV2Result) GetSuccess() (v *ListTemplatesV2Response) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceListTemplatesV2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceListTemplatesV2Result) SetSuccess(x interface{}) {
	p.Success = x.(*ListTemplatesV2Response)
}

var fieldIDToName_EvaluatorServiceListTemplatesV2Result = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceListTemplatesV2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceListTemplatesV2Result) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceListTemplatesV2Result[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceListTemplatesV2Result) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListTemplatesV2Response()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceListTemplatesV2Result) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListTemplatesV2_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceListTemplatesV2Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceListTemplatesV2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceListTemplatesV2Result(%+v)", *p)

}

func (p *EvaluatorServiceListTemplatesV2Result) DeepEqual(ano *EvaluatorServiceListTemplatesV2Result) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceListTemplatesV2Result) Field0DeepEqual(src *ListTemplatesV2Response) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceCreateEvaluatorTemplateArgs struct {
	Request *CreateEvaluatorTemplateRequest `thrift:"request,1" frugal:"1,default,CreateEvaluatorTemplateRequest"`
}

func NewEvaluatorServiceCreateEvaluatorTemplateArgs() *EvaluatorServiceCreateEvaluatorTemplateArgs {
	return &EvaluatorServiceCreateEvaluatorTemplateArgs{}
}

func (p *EvaluatorServiceCreateEvaluatorTemplateArgs) InitDefault() {
}

var EvaluatorServiceCreateEvaluatorTemplateArgs_Request_DEFAULT *CreateEvaluatorTemplateRequest

func (p *EvaluatorServiceCreateEvaluatorTemplateArgs) GetRequest() (v *CreateEvaluatorTemplateRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceCreateEvaluatorTemplateArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceCreateEvaluatorTemplateArgs) SetRequest(val *CreateEvaluatorTemplateRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceCreateEvaluatorTemplateArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceCreateEvaluatorTemplateArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceCreateEvaluatorTemplateArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceCreateEvaluatorTemplateArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceCreateEvaluatorTemplateArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluatorTemplateRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceCreateEvaluatorTemplateArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluatorTemplate_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceCreateEvaluatorTemplateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceCreateEvaluatorTemplateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceCreateEvaluatorTemplateArgs(%+v)", *p)

}

func (p *EvaluatorServiceCreateEvaluatorTemplateArgs) DeepEqual(ano *EvaluatorServiceCreateEvaluatorTemplateArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceCreateEvaluatorTemplateArgs) Field1DeepEqual(src *CreateEvaluatorTemplateRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceCreateEvaluatorTemplateResult struct {
	Success *CreateEvaluatorTemplateResponse `thrift:"success,0,optional" frugal:"0,optional,CreateEvaluatorTemplateResponse"`
}

func NewEvaluatorServiceCreateEvaluatorTemplateResult() *EvaluatorServiceCreateEvaluatorTemplateResult {
	return &EvaluatorServiceCreateEvaluatorTemplateResult{}
}

func (p *EvaluatorServiceCreateEvaluatorTemplateResult) InitDefault() {
}

var EvaluatorServiceCreateEvaluatorTemplateResult_Success_DEFAULT *CreateEvaluatorTemplateResponse

func (p *EvaluatorServiceCreateEvaluatorTemplateResult) GetSuccess() (v *CreateEvaluatorTemplateResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceCreateEvaluatorTemplateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceCreateEvaluatorTemplateResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEvaluatorTemplateResponse)
}

var fieldIDToName_EvaluatorServiceCreateEvaluatorTemplateResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceCreateEvaluatorTemplateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceCreateEvaluatorTemplateResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceCreateEvaluatorTemplateResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceCreateEvaluatorTemplateResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEvaluatorTemplateResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceCreateEvaluatorTemplateResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvaluatorTemplate_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceCreateEvaluatorTemplateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceCreateEvaluatorTemplateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceCreateEvaluatorTemplateResult(%+v)", *p)

}

func (p *EvaluatorServiceCreateEvaluatorTemplateResult) DeepEqual(ano *EvaluatorServiceCreateEvaluatorTemplateResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceCreateEvaluatorTemplateResult) Field0DeepEqual(src *CreateEvaluatorTemplateResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceUpdateEvaluatorTemplateArgs struct {
	Request *UpdateEvaluatorTemplateRequest `thrift:"request,1" frugal:"1,default,UpdateEvaluatorTemplateRequest"`
}

func NewEvaluatorServiceUpdateEvaluatorTemplateArgs() *EvaluatorServiceUpdateEvaluatorTemplateArgs {
	return &EvaluatorServiceUpdateEvaluatorTemplateArgs{}
}

func (p *EvaluatorServiceUpdateEvaluatorTemplateArgs) InitDefault() {
}

var EvaluatorServiceUpdateEvaluatorTemplateArgs_Request_DEFAULT *UpdateEvaluatorTemplateRequest

func (p *EvaluatorServiceUpdateEvaluatorTemplateArgs) GetRequest() (v *UpdateEvaluatorTemplateRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceUpdateEvaluatorTemplateArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceUpdateEvaluatorTemplateArgs) SetRequest(val *UpdateEvaluatorTemplateRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceUpdateEvaluatorTemplateArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceUpdateEvaluatorTemplateArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceUpdateEvaluatorTemplateArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceUpdateEvaluatorTemplateArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorTemplateArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateEvaluatorTemplateRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceUpdateEvaluatorTemplateArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluatorTemplate_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorTemplateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorTemplateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceUpdateEvaluatorTemplateArgs(%+v)", *p)

}

func (p *EvaluatorServiceUpdateEvaluatorTemplateArgs) DeepEqual(ano *EvaluatorServiceUpdateEvaluatorTemplateArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceUpdateEvaluatorTemplateArgs) Field1DeepEqual(src *UpdateEvaluatorTemplateRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceUpdateEvaluatorTemplateResult struct {
	Success *UpdateEvaluatorTemplateResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateEvaluatorTemplateResponse"`
}

func NewEvaluatorServiceUpdateEvaluatorTemplateResult() *EvaluatorServiceUpdateEvaluatorTemplateResult {
	return &EvaluatorServiceUpdateEvaluatorTemplateResult{}
}

func (p *EvaluatorServiceUpdateEvaluatorTemplateResult) InitDefault() {
}

var EvaluatorServiceUpdateEvaluatorTemplateResult_Success_DEFAULT *UpdateEvaluatorTemplateResponse

func (p *EvaluatorServiceUpdateEvaluatorTemplateResult) GetSuccess() (v *UpdateEvaluatorTemplateResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceUpdateEvaluatorTemplateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceUpdateEvaluatorTemplateResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateEvaluatorTemplateResponse)
}

var fieldIDToName_EvaluatorServiceUpdateEvaluatorTemplateResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceUpdateEvaluatorTemplateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceUpdateEvaluatorTemplateResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceUpdateEvaluatorTemplateResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorTemplateResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateEvaluatorTemplateResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceUpdateEvaluatorTemplateResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateEvaluatorTemplate_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorTemplateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceUpdateEvaluatorTemplateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceUpdateEvaluatorTemplateResult(%+v)", *p)

}

func (p *EvaluatorServiceUpdateEvaluatorTemplateResult) DeepEqual(ano *EvaluatorServiceUpdateEvaluatorTemplateResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceUpdateEvaluatorTemplateResult) Field0DeepEqual(src *UpdateEvaluatorTemplateResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceDeleteEvaluatorTemplateArgs struct {
	Request *DeleteEvaluatorTemplateRequest `thrift:"request,1" frugal:"1,default,DeleteEvaluatorTemplateRequest"`
}

func NewEvaluatorServiceDeleteEvaluatorTemplateArgs() *EvaluatorServiceDeleteEvaluatorTemplateArgs {
	return &EvaluatorServiceDeleteEvaluatorTemplateArgs{}
}

func (p *EvaluatorServiceDeleteEvaluatorTemplateArgs) InitDefault() {
}

var EvaluatorServiceDeleteEvaluatorTemplateArgs_Request_DEFAULT *DeleteEvaluatorTemplateRequest

func (p *EvaluatorServiceDeleteEvaluatorTemplateArgs) GetRequest() (v *DeleteEvaluatorTemplateRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvaluatorServiceDeleteEvaluatorTemplateArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvaluatorServiceDeleteEvaluatorTemplateArgs) SetRequest(val *DeleteEvaluatorTemplateRequest) {
	p.Request = val
}

var fieldIDToName_EvaluatorServiceDeleteEvaluatorTemplateArgs = map[int16]string{
	1: "request",
}

func (p *EvaluatorServiceDeleteEvaluatorTemplateArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvaluatorServiceDeleteEvaluatorTemplateArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceDeleteEvaluatorTemplateArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceDeleteEvaluatorTemplateArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteEvaluatorTemplateRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvaluatorServiceDeleteEvaluatorTemplateArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEvaluatorTemplate_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceDeleteEvaluatorTemplateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceDeleteEvaluatorTemplateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceDeleteEvaluatorTemplateArgs(%+v)", *p)

}

func (p *EvaluatorServiceDeleteEvaluatorTemplateArgs) DeepEqual(ano *EvaluatorServiceDeleteEvaluatorTemplateArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvaluatorServiceDeleteEvaluatorTemplateArgs) Field1DeepEqual(src *DeleteEvaluatorTemplateRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceDeleteEvaluatorTemplateResult struct {
	Success *DeleteEvaluatorTemplateResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteEvaluatorTemplateResponse"`
}

func NewEvaluatorServiceDeleteEvaluatorTemplateResult() *EvaluatorServiceDeleteEvaluatorTemplateResult {
	return &EvaluatorServiceDeleteEvaluatorTemplateResult{}
}

func (p *EvaluatorServiceDeleteEvaluatorTemplateResult) InitDefault() {
}

var EvaluatorServiceDeleteEvaluatorTemplateResult_Success_DEFAULT *DeleteEvaluatorTemplateResponse

func (p *EvaluatorServiceDeleteEvaluatorTemplateResult) GetSuccess() (v *DeleteEvaluatorTemplateResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceDeleteEvaluatorTemplateResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceDeleteEvaluatorTemplateResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteEvaluatorTemplateResponse)
}

var fieldIDToName_EvaluatorServiceDeleteEvaluatorTemplateResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceDeleteEvaluatorTemplateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceDeleteEvaluatorTemplateResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceDeleteEvaluatorTemplateResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceDeleteEvaluatorTemplateResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteEvaluatorTemplateResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceDeleteEvaluatorTemplateResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteEvaluatorTemplate_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceDeleteEvaluatorTemplateResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceDeleteEvaluatorTemplateResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceDeleteEvaluatorTemplateResult(%+v)", *p)

}

func (p *EvaluatorServiceDeleteEvaluatorTemplateResult) DeepEqual(ano *EvaluatorServiceDeleteEvaluatorTemplateResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceDeleteEvaluatorTemplateResult) Field0DeepEqual(src *DeleteEvaluatorTemplateResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceDebugBuiltinEvaluatorArgs struct {
	Req *DebugBuiltinEvaluatorRequest `thrift:"req,1" frugal:"1,default,DebugBuiltinEvaluatorRequest"`
}

func NewEvaluatorServiceDebugBuiltinEvaluatorArgs() *EvaluatorServiceDebugBuiltinEvaluatorArgs {
	return &EvaluatorServiceDebugBuiltinEvaluatorArgs{}
}

func (p *EvaluatorServiceDebugBuiltinEvaluatorArgs) InitDefault() {
}

var EvaluatorServiceDebugBuiltinEvaluatorArgs_Req_DEFAULT *DebugBuiltinEvaluatorRequest

func (p *EvaluatorServiceDebugBuiltinEvaluatorArgs) GetReq() (v *DebugBuiltinEvaluatorRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluatorServiceDebugBuiltinEvaluatorArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluatorServiceDebugBuiltinEvaluatorArgs) SetReq(val *DebugBuiltinEvaluatorRequest) {
	p.Req = val
}

var fieldIDToName_EvaluatorServiceDebugBuiltinEvaluatorArgs = map[int16]string{
	1: "req",
}

func (p *EvaluatorServiceDebugBuiltinEvaluatorArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluatorServiceDebugBuiltinEvaluatorArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceDebugBuiltinEvaluatorArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceDebugBuiltinEvaluatorArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDebugBuiltinEvaluatorRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluatorServiceDebugBuiltinEvaluatorArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugBuiltinEvaluator_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceDebugBuiltinEvaluatorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceDebugBuiltinEvaluatorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceDebugBuiltinEvaluatorArgs(%+v)", *p)

}

func (p *EvaluatorServiceDebugBuiltinEvaluatorArgs) DeepEqual(ano *EvaluatorServiceDebugBuiltinEvaluatorArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluatorServiceDebugBuiltinEvaluatorArgs) Field1DeepEqual(src *DebugBuiltinEvaluatorRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceDebugBuiltinEvaluatorResult struct {
	Success *DebugBuiltinEvaluatorResponse `thrift:"success,0,optional" frugal:"0,optional,DebugBuiltinEvaluatorResponse"`
}

func NewEvaluatorServiceDebugBuiltinEvaluatorResult() *EvaluatorServiceDebugBuiltinEvaluatorResult {
	return &EvaluatorServiceDebugBuiltinEvaluatorResult{}
}

func (p *EvaluatorServiceDebugBuiltinEvaluatorResult) InitDefault() {
}

var EvaluatorServiceDebugBuiltinEvaluatorResult_Success_DEFAULT *DebugBuiltinEvaluatorResponse

func (p *EvaluatorServiceDebugBuiltinEvaluatorResult) GetSuccess() (v *DebugBuiltinEvaluatorResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceDebugBuiltinEvaluatorResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceDebugBuiltinEvaluatorResult) SetSuccess(x interface{}) {
	p.Success = x.(*DebugBuiltinEvaluatorResponse)
}

var fieldIDToName_EvaluatorServiceDebugBuiltinEvaluatorResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceDebugBuiltinEvaluatorResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceDebugBuiltinEvaluatorResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceDebugBuiltinEvaluatorResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceDebugBuiltinEvaluatorResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDebugBuiltinEvaluatorResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceDebugBuiltinEvaluatorResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugBuiltinEvaluator_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceDebugBuiltinEvaluatorResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceDebugBuiltinEvaluatorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceDebugBuiltinEvaluatorResult(%+v)", *p)

}

func (p *EvaluatorServiceDebugBuiltinEvaluatorResult) DeepEqual(ano *EvaluatorServiceDebugBuiltinEvaluatorResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceDebugBuiltinEvaluatorResult) Field0DeepEqual(src *DebugBuiltinEvaluatorResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs struct {
	Req *UpdateBuiltinEvaluatorTagsRequest `thrift:"req,1" frugal:"1,default,UpdateBuiltinEvaluatorTagsRequest"`
}

func NewEvaluatorServiceUpdateBuiltinEvaluatorTagsArgs() *EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs {
	return &EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs{}
}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs) InitDefault() {
}

var EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs_Req_DEFAULT *UpdateBuiltinEvaluatorTagsRequest

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs) GetReq() (v *UpdateBuiltinEvaluatorTagsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs) SetReq(val *UpdateBuiltinEvaluatorTagsRequest) {
	p.Req = val
}

var fieldIDToName_EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs = map[int16]string{
	1: "req",
}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateBuiltinEvaluatorTagsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateBuiltinEvaluatorTags_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs(%+v)", *p)

}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs) DeepEqual(ano *EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsArgs) Field1DeepEqual(src *UpdateBuiltinEvaluatorTagsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceUpdateBuiltinEvaluatorTagsResult struct {
	Success *UpdateBuiltinEvaluatorTagsResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateBuiltinEvaluatorTagsResponse"`
}

func NewEvaluatorServiceUpdateBuiltinEvaluatorTagsResult() *EvaluatorServiceUpdateBuiltinEvaluatorTagsResult {
	return &EvaluatorServiceUpdateBuiltinEvaluatorTagsResult{}
}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsResult) InitDefault() {
}

var EvaluatorServiceUpdateBuiltinEvaluatorTagsResult_Success_DEFAULT *UpdateBuiltinEvaluatorTagsResponse

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsResult) GetSuccess() (v *UpdateBuiltinEvaluatorTagsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceUpdateBuiltinEvaluatorTagsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateBuiltinEvaluatorTagsResponse)
}

var fieldIDToName_EvaluatorServiceUpdateBuiltinEvaluatorTagsResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceUpdateBuiltinEvaluatorTagsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateBuiltinEvaluatorTagsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateBuiltinEvaluatorTags_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceUpdateBuiltinEvaluatorTagsResult(%+v)", *p)

}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsResult) DeepEqual(ano *EvaluatorServiceUpdateBuiltinEvaluatorTagsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceUpdateBuiltinEvaluatorTagsResult) Field0DeepEqual(src *UpdateBuiltinEvaluatorTagsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceListEvaluatorTagsArgs struct {
	Req *ListEvaluatorTagsRequest `thrift:"req,1" frugal:"1,default,ListEvaluatorTagsRequest"`
}

func NewEvaluatorServiceListEvaluatorTagsArgs() *EvaluatorServiceListEvaluatorTagsArgs {
	return &EvaluatorServiceListEvaluatorTagsArgs{}
}

func (p *EvaluatorServiceListEvaluatorTagsArgs) InitDefault() {
}

var EvaluatorServiceListEvaluatorTagsArgs_Req_DEFAULT *ListEvaluatorTagsRequest

func (p *EvaluatorServiceListEvaluatorTagsArgs) GetReq() (v *ListEvaluatorTagsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return EvaluatorServiceListEvaluatorTagsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *EvaluatorServiceListEvaluatorTagsArgs) SetReq(val *ListEvaluatorTagsRequest) {
	p.Req = val
}

var fieldIDToName_EvaluatorServiceListEvaluatorTagsArgs = map[int16]string{
	1: "req",
}

func (p *EvaluatorServiceListEvaluatorTagsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EvaluatorServiceListEvaluatorTagsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceListEvaluatorTagsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorTagsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListEvaluatorTagsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *EvaluatorServiceListEvaluatorTagsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluatorTags_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorTagsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorTagsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceListEvaluatorTagsArgs(%+v)", *p)

}

func (p *EvaluatorServiceListEvaluatorTagsArgs) DeepEqual(ano *EvaluatorServiceListEvaluatorTagsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *EvaluatorServiceListEvaluatorTagsArgs) Field1DeepEqual(src *ListEvaluatorTagsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorServiceListEvaluatorTagsResult struct {
	Success *ListEvaluatorTagsResponse `thrift:"success,0,optional" frugal:"0,optional,ListEvaluatorTagsResponse"`
}

func NewEvaluatorServiceListEvaluatorTagsResult() *EvaluatorServiceListEvaluatorTagsResult {
	return &EvaluatorServiceListEvaluatorTagsResult{}
}

func (p *EvaluatorServiceListEvaluatorTagsResult) InitDefault() {
}

var EvaluatorServiceListEvaluatorTagsResult_Success_DEFAULT *ListEvaluatorTagsResponse

func (p *EvaluatorServiceListEvaluatorTagsResult) GetSuccess() (v *ListEvaluatorTagsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvaluatorServiceListEvaluatorTagsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvaluatorServiceListEvaluatorTagsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListEvaluatorTagsResponse)
}

var fieldIDToName_EvaluatorServiceListEvaluatorTagsResult = map[int16]string{
	0: "success",
}

func (p *EvaluatorServiceListEvaluatorTagsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvaluatorServiceListEvaluatorTagsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorServiceListEvaluatorTagsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorTagsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListEvaluatorTagsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvaluatorServiceListEvaluatorTagsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvaluatorTags_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorTagsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvaluatorServiceListEvaluatorTagsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorServiceListEvaluatorTagsResult(%+v)", *p)

}

func (p *EvaluatorServiceListEvaluatorTagsResult) DeepEqual(ano *EvaluatorServiceListEvaluatorTagsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvaluatorServiceListEvaluatorTagsResult) Field0DeepEqual(src *ListEvaluatorTagsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

// Code generated by Validator v0.2.6. DO NOT EDIT.

package spi

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *SearchEvalTargetRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *SearchEvalTargetResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *CustomEvalTarget) IsValid() error {
	return nil
}
func (p *InvokeEvalTargetRequest) IsValid() error {
	if p.Input != nil {
		if err := p.Input.IsValid(); err != nil {
			return fmt.Errorf("field Input not valid, %w", err)
		}
	}
	if p.CustomEvalTarget != nil {
		if err := p.CustomEvalTarget.IsValid(); err != nil {
			return fmt.Errorf("field CustomEvalTarget not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *InvokeEvalTargetResponse) IsValid() error {
	if p.Output != nil {
		if err := p.Output.IsValid(); err != nil {
			return fmt.Errorf("field Output not valid, %w", err)
		}
	}
	if p.Usage != nil {
		if err := p.Usage.IsValid(); err != nil {
			return fmt.Errorf("field Usage not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *InvokeEvalTargetInput) IsValid() error {
	return nil
}
func (p *InvokeEvalTargetOutput) IsValid() error {
	if p.ActualOutput != nil {
		if err := p.ActualOutput.IsValid(); err != nil {
			return fmt.Errorf("field ActualOutput not valid, %w", err)
		}
	}
	return nil
}
func (p *Content) IsValid() error {
	if p.Image != nil {
		if err := p.Image.IsValid(); err != nil {
			return fmt.Errorf("field Image not valid, %w", err)
		}
	}
	return nil
}
func (p *Image) IsValid() error {
	return nil
}
func (p *InvokeEvalTargetUsage) IsValid() error {
	return nil
}
func (p *AsyncInvokeEvalTargetRequest) IsValid() error {
	if p.Input != nil {
		if err := p.Input.IsValid(); err != nil {
			return fmt.Errorf("field Input not valid, %w", err)
		}
	}
	if p.CustomEvalTarget != nil {
		if err := p.CustomEvalTarget.IsValid(); err != nil {
			return fmt.Errorf("field CustomEvalTarget not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *AsyncInvokeEvalTargetResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *InvokeCustomEvaluator) IsValid() error {
	return nil
}
func (p *InvokeEvaluatorInputData) IsValid() error {
	return nil
}
func (p *InvokeEvaluatorOutputData) IsValid() error {
	if p.EvaluatorResult_ != nil {
		if err := p.EvaluatorResult_.IsValid(); err != nil {
			return fmt.Errorf("field EvaluatorResult_ not valid, %w", err)
		}
	}
	if p.EvaluatorUsage != nil {
		if err := p.EvaluatorUsage.IsValid(); err != nil {
			return fmt.Errorf("field EvaluatorUsage not valid, %w", err)
		}
	}
	if p.EvaluatorRunError != nil {
		if err := p.EvaluatorRunError.IsValid(); err != nil {
			return fmt.Errorf("field EvaluatorRunError not valid, %w", err)
		}
	}
	return nil
}
func (p *InvokeEvaluatorResult_) IsValid() error {
	return nil
}
func (p *InvokeEvaluatorUsage) IsValid() error {
	return nil
}
func (p *InvokeEvaluatorRunError) IsValid() error {
	return nil
}
func (p *InvokeEvaluatorRequest) IsValid() error {
	if p.Evaluator != nil {
		if err := p.Evaluator.IsValid(); err != nil {
			return fmt.Errorf("field Evaluator not valid, %w", err)
		}
	}
	if p.InputData != nil {
		if err := p.InputData.IsValid(); err != nil {
			return fmt.Errorf("field InputData not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *InvokeEvaluatorResponse) IsValid() error {
	if p.EvaluatorOutputData != nil {
		if err := p.EvaluatorOutputData.IsValid(); err != nil {
			return fmt.Errorf("field EvaluatorOutputData not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}

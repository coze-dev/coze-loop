// Code generated by Kitex v0.13.1. DO NOT EDIT.

package evaluationspiservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	spi "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/spi"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"SearchEvalTarget": kitex.NewMethodInfo(
		searchEvalTargetHandler,
		newEvaluationSPIServiceSearchEvalTargetArgs,
		newEvaluationSPIServiceSearchEvalTargetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"InvokeEvalTarget": kitex.NewMethodInfo(
		invokeEvalTargetHandler,
		newEvaluationSPIServiceInvokeEvalTargetArgs,
		newEvaluationSPIServiceInvokeEvalTargetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"AsyncInvokeEvalTarget": kitex.NewMethodInfo(
		asyncInvokeEvalTargetHandler,
		newEvaluationSPIServiceAsyncInvokeEvalTargetArgs,
		newEvaluationSPIServiceAsyncInvokeEvalTargetResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	evaluationSPIServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return evaluationSPIServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "EvaluationSPIService"
	handlerType := (*spi.EvaluationSPIService)(nil)
	extra := map[string]interface{}{
		"PackageName": "spi",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func searchEvalTargetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*spi.EvaluationSPIServiceSearchEvalTargetArgs)
	realResult := result.(*spi.EvaluationSPIServiceSearchEvalTargetResult)
	success, err := handler.(spi.EvaluationSPIService).SearchEvalTarget(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationSPIServiceSearchEvalTargetArgs() interface{} {
	return spi.NewEvaluationSPIServiceSearchEvalTargetArgs()
}

func newEvaluationSPIServiceSearchEvalTargetResult() interface{} {
	return spi.NewEvaluationSPIServiceSearchEvalTargetResult()
}

func invokeEvalTargetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*spi.EvaluationSPIServiceInvokeEvalTargetArgs)
	realResult := result.(*spi.EvaluationSPIServiceInvokeEvalTargetResult)
	success, err := handler.(spi.EvaluationSPIService).InvokeEvalTarget(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationSPIServiceInvokeEvalTargetArgs() interface{} {
	return spi.NewEvaluationSPIServiceInvokeEvalTargetArgs()
}

func newEvaluationSPIServiceInvokeEvalTargetResult() interface{} {
	return spi.NewEvaluationSPIServiceInvokeEvalTargetResult()
}

func asyncInvokeEvalTargetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*spi.EvaluationSPIServiceAsyncInvokeEvalTargetArgs)
	realResult := result.(*spi.EvaluationSPIServiceAsyncInvokeEvalTargetResult)
	success, err := handler.(spi.EvaluationSPIService).AsyncInvokeEvalTarget(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newEvaluationSPIServiceAsyncInvokeEvalTargetArgs() interface{} {
	return spi.NewEvaluationSPIServiceAsyncInvokeEvalTargetArgs()
}

func newEvaluationSPIServiceAsyncInvokeEvalTargetResult() interface{} {
	return spi.NewEvaluationSPIServiceAsyncInvokeEvalTargetResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) SearchEvalTarget(ctx context.Context, req *spi.SearchEvalTargetRequest) (r *spi.SearchEvalTargetResponse, err error) {
	var _args spi.EvaluationSPIServiceSearchEvalTargetArgs
	_args.Req = req
	var _result spi.EvaluationSPIServiceSearchEvalTargetResult
	if err = p.c.Call(ctx, "SearchEvalTarget", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InvokeEvalTarget(ctx context.Context, req *spi.InvokeEvalTargetRequest) (r *spi.InvokeEvalTargetResponse, err error) {
	var _args spi.EvaluationSPIServiceInvokeEvalTargetArgs
	_args.Req = req
	var _result spi.EvaluationSPIServiceInvokeEvalTargetResult
	if err = p.c.Call(ctx, "InvokeEvalTarget", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AsyncInvokeEvalTarget(ctx context.Context, req *spi.AsyncInvokeEvalTargetRequest) (r *spi.AsyncInvokeEvalTargetResponse, err error) {
	var _args spi.EvaluationSPIServiceAsyncInvokeEvalTargetArgs
	_args.Req = req
	var _result spi.EvaluationSPIServiceAsyncInvokeEvalTargetResult
	if err = p.c.Call(ctx, "AsyncInvokeEvalTarget", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

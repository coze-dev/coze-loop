// Code generated by Kitex v0.13.1. DO NOT EDIT.

package promptmanageservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	prompt "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt"
	manage "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/manage"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreatePrompt": kitex.NewMethodInfo(
		createPromptHandler,
		newPromptManageServiceCreatePromptArgs,
		newPromptManageServiceCreatePromptResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ClonePrompt": kitex.NewMethodInfo(
		clonePromptHandler,
		newPromptManageServiceClonePromptArgs,
		newPromptManageServiceClonePromptResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeletePrompt": kitex.NewMethodInfo(
		deletePromptHandler,
		newPromptManageServiceDeletePromptArgs,
		newPromptManageServiceDeletePromptResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetPrompt": kitex.NewMethodInfo(
		getPromptHandler,
		newPromptManageServiceGetPromptArgs,
		newPromptManageServiceGetPromptResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchGetPrompt": kitex.NewMethodInfo(
		batchGetPromptHandler,
		newPromptManageServiceBatchGetPromptArgs,
		newPromptManageServiceBatchGetPromptResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListPrompt": kitex.NewMethodInfo(
		listPromptHandler,
		newPromptManageServiceListPromptArgs,
		newPromptManageServiceListPromptResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdatePrompt": kitex.NewMethodInfo(
		updatePromptHandler,
		newPromptManageServiceUpdatePromptArgs,
		newPromptManageServiceUpdatePromptResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SaveDraft": kitex.NewMethodInfo(
		saveDraftHandler,
		newPromptManageServiceSaveDraftArgs,
		newPromptManageServiceSaveDraftResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateLabel": kitex.NewMethodInfo(
		createLabelHandler,
		newPromptManageServiceCreateLabelArgs,
		newPromptManageServiceCreateLabelResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListLabel": kitex.NewMethodInfo(
		listLabelHandler,
		newPromptManageServiceListLabelArgs,
		newPromptManageServiceListLabelResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchGetLabel": kitex.NewMethodInfo(
		batchGetLabelHandler,
		newPromptManageServiceBatchGetLabelArgs,
		newPromptManageServiceBatchGetLabelResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListCommit": kitex.NewMethodInfo(
		listCommitHandler,
		newPromptManageServiceListCommitArgs,
		newPromptManageServiceListCommitResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CommitDraft": kitex.NewMethodInfo(
		commitDraftHandler,
		newPromptManageServiceCommitDraftArgs,
		newPromptManageServiceCommitDraftResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RevertDraftFromCommit": kitex.NewMethodInfo(
		revertDraftFromCommitHandler,
		newPromptManageServiceRevertDraftFromCommitArgs,
		newPromptManageServiceRevertDraftFromCommitResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateCommitLabels": kitex.NewMethodInfo(
		updateCommitLabelsHandler,
		newPromptManageServiceUpdateCommitLabelsArgs,
		newPromptManageServiceUpdateCommitLabelsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	promptManageServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return promptManageServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "PromptManageService"
	handlerType := (*prompt.PromptManageService)(nil)
	extra := map[string]interface{}{
		"PackageName": "prompt",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func createPromptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manage.PromptManageServiceCreatePromptArgs)
	realResult := result.(*manage.PromptManageServiceCreatePromptResult)
	success, err := handler.(manage.PromptManageService).CreatePrompt(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptManageServiceCreatePromptArgs() interface{} {
	return manage.NewPromptManageServiceCreatePromptArgs()
}

func newPromptManageServiceCreatePromptResult() interface{} {
	return manage.NewPromptManageServiceCreatePromptResult()
}

func clonePromptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manage.PromptManageServiceClonePromptArgs)
	realResult := result.(*manage.PromptManageServiceClonePromptResult)
	success, err := handler.(manage.PromptManageService).ClonePrompt(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptManageServiceClonePromptArgs() interface{} {
	return manage.NewPromptManageServiceClonePromptArgs()
}

func newPromptManageServiceClonePromptResult() interface{} {
	return manage.NewPromptManageServiceClonePromptResult()
}

func deletePromptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manage.PromptManageServiceDeletePromptArgs)
	realResult := result.(*manage.PromptManageServiceDeletePromptResult)
	success, err := handler.(manage.PromptManageService).DeletePrompt(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptManageServiceDeletePromptArgs() interface{} {
	return manage.NewPromptManageServiceDeletePromptArgs()
}

func newPromptManageServiceDeletePromptResult() interface{} {
	return manage.NewPromptManageServiceDeletePromptResult()
}

func getPromptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manage.PromptManageServiceGetPromptArgs)
	realResult := result.(*manage.PromptManageServiceGetPromptResult)
	success, err := handler.(manage.PromptManageService).GetPrompt(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptManageServiceGetPromptArgs() interface{} {
	return manage.NewPromptManageServiceGetPromptArgs()
}

func newPromptManageServiceGetPromptResult() interface{} {
	return manage.NewPromptManageServiceGetPromptResult()
}

func batchGetPromptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manage.PromptManageServiceBatchGetPromptArgs)
	realResult := result.(*manage.PromptManageServiceBatchGetPromptResult)
	success, err := handler.(manage.PromptManageService).BatchGetPrompt(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptManageServiceBatchGetPromptArgs() interface{} {
	return manage.NewPromptManageServiceBatchGetPromptArgs()
}

func newPromptManageServiceBatchGetPromptResult() interface{} {
	return manage.NewPromptManageServiceBatchGetPromptResult()
}

func listPromptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manage.PromptManageServiceListPromptArgs)
	realResult := result.(*manage.PromptManageServiceListPromptResult)
	success, err := handler.(manage.PromptManageService).ListPrompt(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptManageServiceListPromptArgs() interface{} {
	return manage.NewPromptManageServiceListPromptArgs()
}

func newPromptManageServiceListPromptResult() interface{} {
	return manage.NewPromptManageServiceListPromptResult()
}

func updatePromptHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manage.PromptManageServiceUpdatePromptArgs)
	realResult := result.(*manage.PromptManageServiceUpdatePromptResult)
	success, err := handler.(manage.PromptManageService).UpdatePrompt(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptManageServiceUpdatePromptArgs() interface{} {
	return manage.NewPromptManageServiceUpdatePromptArgs()
}

func newPromptManageServiceUpdatePromptResult() interface{} {
	return manage.NewPromptManageServiceUpdatePromptResult()
}

func saveDraftHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manage.PromptManageServiceSaveDraftArgs)
	realResult := result.(*manage.PromptManageServiceSaveDraftResult)
	success, err := handler.(manage.PromptManageService).SaveDraft(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptManageServiceSaveDraftArgs() interface{} {
	return manage.NewPromptManageServiceSaveDraftArgs()
}

func newPromptManageServiceSaveDraftResult() interface{} {
	return manage.NewPromptManageServiceSaveDraftResult()
}

func createLabelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manage.PromptManageServiceCreateLabelArgs)
	realResult := result.(*manage.PromptManageServiceCreateLabelResult)
	success, err := handler.(manage.PromptManageService).CreateLabel(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptManageServiceCreateLabelArgs() interface{} {
	return manage.NewPromptManageServiceCreateLabelArgs()
}

func newPromptManageServiceCreateLabelResult() interface{} {
	return manage.NewPromptManageServiceCreateLabelResult()
}

func listLabelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manage.PromptManageServiceListLabelArgs)
	realResult := result.(*manage.PromptManageServiceListLabelResult)
	success, err := handler.(manage.PromptManageService).ListLabel(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptManageServiceListLabelArgs() interface{} {
	return manage.NewPromptManageServiceListLabelArgs()
}

func newPromptManageServiceListLabelResult() interface{} {
	return manage.NewPromptManageServiceListLabelResult()
}

func batchGetLabelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manage.PromptManageServiceBatchGetLabelArgs)
	realResult := result.(*manage.PromptManageServiceBatchGetLabelResult)
	success, err := handler.(manage.PromptManageService).BatchGetLabel(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptManageServiceBatchGetLabelArgs() interface{} {
	return manage.NewPromptManageServiceBatchGetLabelArgs()
}

func newPromptManageServiceBatchGetLabelResult() interface{} {
	return manage.NewPromptManageServiceBatchGetLabelResult()
}

func listCommitHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manage.PromptManageServiceListCommitArgs)
	realResult := result.(*manage.PromptManageServiceListCommitResult)
	success, err := handler.(manage.PromptManageService).ListCommit(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptManageServiceListCommitArgs() interface{} {
	return manage.NewPromptManageServiceListCommitArgs()
}

func newPromptManageServiceListCommitResult() interface{} {
	return manage.NewPromptManageServiceListCommitResult()
}

func commitDraftHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manage.PromptManageServiceCommitDraftArgs)
	realResult := result.(*manage.PromptManageServiceCommitDraftResult)
	success, err := handler.(manage.PromptManageService).CommitDraft(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptManageServiceCommitDraftArgs() interface{} {
	return manage.NewPromptManageServiceCommitDraftArgs()
}

func newPromptManageServiceCommitDraftResult() interface{} {
	return manage.NewPromptManageServiceCommitDraftResult()
}

func revertDraftFromCommitHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manage.PromptManageServiceRevertDraftFromCommitArgs)
	realResult := result.(*manage.PromptManageServiceRevertDraftFromCommitResult)
	success, err := handler.(manage.PromptManageService).RevertDraftFromCommit(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptManageServiceRevertDraftFromCommitArgs() interface{} {
	return manage.NewPromptManageServiceRevertDraftFromCommitArgs()
}

func newPromptManageServiceRevertDraftFromCommitResult() interface{} {
	return manage.NewPromptManageServiceRevertDraftFromCommitResult()
}

func updateCommitLabelsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*manage.PromptManageServiceUpdateCommitLabelsArgs)
	realResult := result.(*manage.PromptManageServiceUpdateCommitLabelsResult)
	success, err := handler.(manage.PromptManageService).UpdateCommitLabels(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newPromptManageServiceUpdateCommitLabelsArgs() interface{} {
	return manage.NewPromptManageServiceUpdateCommitLabelsArgs()
}

func newPromptManageServiceUpdateCommitLabelsResult() interface{} {
	return manage.NewPromptManageServiceUpdateCommitLabelsResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) CreatePrompt(ctx context.Context, request *manage.CreatePromptRequest) (r *manage.CreatePromptResponse, err error) {
	var _args manage.PromptManageServiceCreatePromptArgs
	_args.Request = request
	var _result manage.PromptManageServiceCreatePromptResult
	if err = p.c.Call(ctx, "CreatePrompt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ClonePrompt(ctx context.Context, request *manage.ClonePromptRequest) (r *manage.ClonePromptResponse, err error) {
	var _args manage.PromptManageServiceClonePromptArgs
	_args.Request = request
	var _result manage.PromptManageServiceClonePromptResult
	if err = p.c.Call(ctx, "ClonePrompt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeletePrompt(ctx context.Context, request *manage.DeletePromptRequest) (r *manage.DeletePromptResponse, err error) {
	var _args manage.PromptManageServiceDeletePromptArgs
	_args.Request = request
	var _result manage.PromptManageServiceDeletePromptResult
	if err = p.c.Call(ctx, "DeletePrompt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPrompt(ctx context.Context, request *manage.GetPromptRequest) (r *manage.GetPromptResponse, err error) {
	var _args manage.PromptManageServiceGetPromptArgs
	_args.Request = request
	var _result manage.PromptManageServiceGetPromptResult
	if err = p.c.Call(ctx, "GetPrompt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetPrompt(ctx context.Context, request *manage.BatchGetPromptRequest) (r *manage.BatchGetPromptResponse, err error) {
	var _args manage.PromptManageServiceBatchGetPromptArgs
	_args.Request = request
	var _result manage.PromptManageServiceBatchGetPromptResult
	if err = p.c.Call(ctx, "BatchGetPrompt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListPrompt(ctx context.Context, request *manage.ListPromptRequest) (r *manage.ListPromptResponse, err error) {
	var _args manage.PromptManageServiceListPromptArgs
	_args.Request = request
	var _result manage.PromptManageServiceListPromptResult
	if err = p.c.Call(ctx, "ListPrompt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdatePrompt(ctx context.Context, request *manage.UpdatePromptRequest) (r *manage.UpdatePromptResponse, err error) {
	var _args manage.PromptManageServiceUpdatePromptArgs
	_args.Request = request
	var _result manage.PromptManageServiceUpdatePromptResult
	if err = p.c.Call(ctx, "UpdatePrompt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SaveDraft(ctx context.Context, request *manage.SaveDraftRequest) (r *manage.SaveDraftResponse, err error) {
	var _args manage.PromptManageServiceSaveDraftArgs
	_args.Request = request
	var _result manage.PromptManageServiceSaveDraftResult
	if err = p.c.Call(ctx, "SaveDraft", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateLabel(ctx context.Context, request *manage.CreateLabelRequest) (r *manage.CreateLabelResponse, err error) {
	var _args manage.PromptManageServiceCreateLabelArgs
	_args.Request = request
	var _result manage.PromptManageServiceCreateLabelResult
	if err = p.c.Call(ctx, "CreateLabel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListLabel(ctx context.Context, request *manage.ListLabelRequest) (r *manage.ListLabelResponse, err error) {
	var _args manage.PromptManageServiceListLabelArgs
	_args.Request = request
	var _result manage.PromptManageServiceListLabelResult
	if err = p.c.Call(ctx, "ListLabel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetLabel(ctx context.Context, request *manage.BatchGetLabelRequest) (r *manage.BatchGetLabelResponse, err error) {
	var _args manage.PromptManageServiceBatchGetLabelArgs
	_args.Request = request
	var _result manage.PromptManageServiceBatchGetLabelResult
	if err = p.c.Call(ctx, "BatchGetLabel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListCommit(ctx context.Context, request *manage.ListCommitRequest) (r *manage.ListCommitResponse, err error) {
	var _args manage.PromptManageServiceListCommitArgs
	_args.Request = request
	var _result manage.PromptManageServiceListCommitResult
	if err = p.c.Call(ctx, "ListCommit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommitDraft(ctx context.Context, request *manage.CommitDraftRequest) (r *manage.CommitDraftResponse, err error) {
	var _args manage.PromptManageServiceCommitDraftArgs
	_args.Request = request
	var _result manage.PromptManageServiceCommitDraftResult
	if err = p.c.Call(ctx, "CommitDraft", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RevertDraftFromCommit(ctx context.Context, request *manage.RevertDraftFromCommitRequest) (r *manage.RevertDraftFromCommitResponse, err error) {
	var _args manage.PromptManageServiceRevertDraftFromCommitArgs
	_args.Request = request
	var _result manage.PromptManageServiceRevertDraftFromCommitResult
	if err = p.c.Call(ctx, "RevertDraftFromCommit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCommitLabels(ctx context.Context, request *manage.UpdateCommitLabelsRequest) (r *manage.UpdateCommitLabelsResponse, err error) {
	var _args manage.PromptManageServiceUpdateCommitLabelsArgs
	_args.Request = request
	var _result manage.PromptManageServiceUpdateCommitLabelsResult
	if err = p.c.Call(ctx, "UpdateCommitLabels", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

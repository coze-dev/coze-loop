// Code generated by Kitex v0.13.1. DO NOT EDIT.

package taskservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	task "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/task"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CheckTaskName": kitex.NewMethodInfo(
		checkTaskNameHandler,
		newTaskServiceCheckTaskNameArgs,
		newTaskServiceCheckTaskNameResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateTask": kitex.NewMethodInfo(
		createTaskHandler,
		newTaskServiceCreateTaskArgs,
		newTaskServiceCreateTaskResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateTask": kitex.NewMethodInfo(
		updateTaskHandler,
		newTaskServiceUpdateTaskArgs,
		newTaskServiceUpdateTaskResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListTasks": kitex.NewMethodInfo(
		listTasksHandler,
		newTaskServiceListTasksArgs,
		newTaskServiceListTasksResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTask": kitex.NewMethodInfo(
		getTaskHandler,
		newTaskServiceGetTaskArgs,
		newTaskServiceGetTaskResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	taskServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return taskServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "TaskService"
	handlerType := (*task.TaskService)(nil)
	extra := map[string]interface{}{
		"PackageName": "task",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func checkTaskNameHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*task.TaskServiceCheckTaskNameArgs)
	realResult := result.(*task.TaskServiceCheckTaskNameResult)
	success, err := handler.(task.TaskService).CheckTaskName(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTaskServiceCheckTaskNameArgs() interface{} {
	return task.NewTaskServiceCheckTaskNameArgs()
}

func newTaskServiceCheckTaskNameResult() interface{} {
	return task.NewTaskServiceCheckTaskNameResult()
}

func createTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*task.TaskServiceCreateTaskArgs)
	realResult := result.(*task.TaskServiceCreateTaskResult)
	success, err := handler.(task.TaskService).CreateTask(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTaskServiceCreateTaskArgs() interface{} {
	return task.NewTaskServiceCreateTaskArgs()
}

func newTaskServiceCreateTaskResult() interface{} {
	return task.NewTaskServiceCreateTaskResult()
}

func updateTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*task.TaskServiceUpdateTaskArgs)
	realResult := result.(*task.TaskServiceUpdateTaskResult)
	success, err := handler.(task.TaskService).UpdateTask(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTaskServiceUpdateTaskArgs() interface{} {
	return task.NewTaskServiceUpdateTaskArgs()
}

func newTaskServiceUpdateTaskResult() interface{} {
	return task.NewTaskServiceUpdateTaskResult()
}

func listTasksHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*task.TaskServiceListTasksArgs)
	realResult := result.(*task.TaskServiceListTasksResult)
	success, err := handler.(task.TaskService).ListTasks(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTaskServiceListTasksArgs() interface{} {
	return task.NewTaskServiceListTasksArgs()
}

func newTaskServiceListTasksResult() interface{} {
	return task.NewTaskServiceListTasksResult()
}

func getTaskHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*task.TaskServiceGetTaskArgs)
	realResult := result.(*task.TaskServiceGetTaskResult)
	success, err := handler.(task.TaskService).GetTask(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTaskServiceGetTaskArgs() interface{} {
	return task.NewTaskServiceGetTaskArgs()
}

func newTaskServiceGetTaskResult() interface{} {
	return task.NewTaskServiceGetTaskResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) CheckTaskName(ctx context.Context, req *task.CheckTaskNameRequest) (r *task.CheckTaskNameResponse, err error) {
	var _args task.TaskServiceCheckTaskNameArgs
	_args.Req = req
	var _result task.TaskServiceCheckTaskNameResult
	if err = p.c.Call(ctx, "CheckTaskName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateTask(ctx context.Context, req *task.CreateTaskRequest) (r *task.CreateTaskResponse, err error) {
	var _args task.TaskServiceCreateTaskArgs
	_args.Req = req
	var _result task.TaskServiceCreateTaskResult
	if err = p.c.Call(ctx, "CreateTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTask(ctx context.Context, req *task.UpdateTaskRequest) (r *task.UpdateTaskResponse, err error) {
	var _args task.TaskServiceUpdateTaskArgs
	_args.Req = req
	var _result task.TaskServiceUpdateTaskResult
	if err = p.c.Call(ctx, "UpdateTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListTasks(ctx context.Context, req *task.ListTasksRequest) (r *task.ListTasksResponse, err error) {
	var _args task.TaskServiceListTasksArgs
	_args.Req = req
	var _result task.TaskServiceListTasksResult
	if err = p.c.Call(ctx, "ListTasks", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTask(ctx context.Context, req *task.GetTaskRequest) (r *task.GetTaskResponse, err error) {
	var _args task.TaskServiceGetTaskArgs
	_args.Req = req
	var _result task.TaskServiceGetTaskResult
	if err = p.c.Call(ctx, "GetTask", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

// Code generated by Validator v0.2.6. DO NOT EDIT.

package task

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *CreateTaskRequest) IsValid() error {
	if p.Task != nil {
		if err := p.Task.IsValid(); err != nil {
			return fmt.Errorf("field Task not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateTaskResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateTaskRequest) IsValid() error {
	if p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", p.WorkspaceID)
	}
	if p.EffectiveTime != nil {
		if err := p.EffectiveTime.IsValid(); err != nil {
			return fmt.Errorf("field EffectiveTime not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateTaskResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListTasksRequest) IsValid() error {
	if p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", p.WorkspaceID)
	}
	if p.TaskFilters != nil {
		if err := p.TaskFilters.IsValid(); err != nil {
			return fmt.Errorf("field TaskFilters not valid, %w", err)
		}
	}
	if p.OrderBy != nil {
		if err := p.OrderBy.IsValid(); err != nil {
			return fmt.Errorf("field OrderBy not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListTasksResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetTaskRequest) IsValid() error {
	if p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", p.WorkspaceID)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetTaskResponse) IsValid() error {
	if p.Task != nil {
		if err := p.Task.IsValid(); err != nil {
			return fmt.Errorf("field Task not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *CheckTaskNameRequest) IsValid() error {
	if p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", p.WorkspaceID)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CheckTaskNameResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}

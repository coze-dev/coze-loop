// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package metric

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/domain/common"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/domain/filter"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/domain/metric"
	"strings"
)

type GetMetricsRequest struct {
	WorkspaceID     int64                 `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	StartTime       int64                 `thrift:"start_time,2,required" frugal:"2,required,i64" json:"start_time" form:"start_time,required" `
	EndTime         int64                 `thrift:"end_time,3,required" frugal:"3,required,i64" json:"end_time" form:"end_time,required" `
	MetricNames     []string              `thrift:"metric_names,4,required" frugal:"4,required,list<string>" form:"metric_names,required" json:"metric_names,required"`
	Granularity     *string               `thrift:"granularity,5,optional" frugal:"5,optional,string" form:"granularity" json:"granularity,omitempty"`
	Filters         *filter.FilterFields  `thrift:"filters,6,optional" frugal:"6,optional,filter.FilterFields" form:"filters" json:"filters,omitempty"`
	PlatformType    *common.PlatformType  `thrift:"platform_type,7,optional" frugal:"7,optional,string" form:"platform_type" json:"platform_type,omitempty"`
	DrillDownFields []*filter.FilterField `thrift:"drill_down_fields,8,optional" frugal:"8,optional,list<filter.FilterField>" form:"drill_down_fields" json:"drill_down_fields,omitempty"`
	Compare         *metric.Compare       `thrift:"compare,9,optional" frugal:"9,optional,metric.Compare" form:"compare" json:"compare,omitempty"`
	Base            *base.Base            `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetMetricsRequest() *GetMetricsRequest {
	return &GetMetricsRequest{}
}

func (p *GetMetricsRequest) InitDefault() {
}

func (p *GetMetricsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *GetMetricsRequest) GetStartTime() (v int64) {
	if p != nil {
		return p.StartTime
	}
	return
}

func (p *GetMetricsRequest) GetEndTime() (v int64) {
	if p != nil {
		return p.EndTime
	}
	return
}

func (p *GetMetricsRequest) GetMetricNames() (v []string) {
	if p != nil {
		return p.MetricNames
	}
	return
}

var GetMetricsRequest_Granularity_DEFAULT string

func (p *GetMetricsRequest) GetGranularity() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetGranularity() {
		return GetMetricsRequest_Granularity_DEFAULT
	}
	return *p.Granularity
}

var GetMetricsRequest_Filters_DEFAULT *filter.FilterFields

func (p *GetMetricsRequest) GetFilters() (v *filter.FilterFields) {
	if p == nil {
		return
	}
	if !p.IsSetFilters() {
		return GetMetricsRequest_Filters_DEFAULT
	}
	return p.Filters
}

var GetMetricsRequest_PlatformType_DEFAULT common.PlatformType

func (p *GetMetricsRequest) GetPlatformType() (v common.PlatformType) {
	if p == nil {
		return
	}
	if !p.IsSetPlatformType() {
		return GetMetricsRequest_PlatformType_DEFAULT
	}
	return *p.PlatformType
}

var GetMetricsRequest_DrillDownFields_DEFAULT []*filter.FilterField

func (p *GetMetricsRequest) GetDrillDownFields() (v []*filter.FilterField) {
	if p == nil {
		return
	}
	if !p.IsSetDrillDownFields() {
		return GetMetricsRequest_DrillDownFields_DEFAULT
	}
	return p.DrillDownFields
}

var GetMetricsRequest_Compare_DEFAULT *metric.Compare

func (p *GetMetricsRequest) GetCompare() (v *metric.Compare) {
	if p == nil {
		return
	}
	if !p.IsSetCompare() {
		return GetMetricsRequest_Compare_DEFAULT
	}
	return p.Compare
}

var GetMetricsRequest_Base_DEFAULT *base.Base

func (p *GetMetricsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetMetricsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetMetricsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *GetMetricsRequest) SetStartTime(val int64) {
	p.StartTime = val
}
func (p *GetMetricsRequest) SetEndTime(val int64) {
	p.EndTime = val
}
func (p *GetMetricsRequest) SetMetricNames(val []string) {
	p.MetricNames = val
}
func (p *GetMetricsRequest) SetGranularity(val *string) {
	p.Granularity = val
}
func (p *GetMetricsRequest) SetFilters(val *filter.FilterFields) {
	p.Filters = val
}
func (p *GetMetricsRequest) SetPlatformType(val *common.PlatformType) {
	p.PlatformType = val
}
func (p *GetMetricsRequest) SetDrillDownFields(val []*filter.FilterField) {
	p.DrillDownFields = val
}
func (p *GetMetricsRequest) SetCompare(val *metric.Compare) {
	p.Compare = val
}
func (p *GetMetricsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetMetricsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "start_time",
	3:   "end_time",
	4:   "metric_names",
	5:   "granularity",
	6:   "filters",
	7:   "platform_type",
	8:   "drill_down_fields",
	9:   "compare",
	255: "Base",
}

func (p *GetMetricsRequest) IsSetGranularity() bool {
	return p.Granularity != nil
}

func (p *GetMetricsRequest) IsSetFilters() bool {
	return p.Filters != nil
}

func (p *GetMetricsRequest) IsSetPlatformType() bool {
	return p.PlatformType != nil
}

func (p *GetMetricsRequest) IsSetDrillDownFields() bool {
	return p.DrillDownFields != nil
}

func (p *GetMetricsRequest) IsSetCompare() bool {
	return p.Compare != nil
}

func (p *GetMetricsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetMetricsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetStartTime bool = false
	var issetEndTime bool = false
	var issetMetricNames bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetEndTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetMetricNames = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetStartTime {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetEndTime {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetMetricNames {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetMetricsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetMetricsRequest[fieldId]))
}

func (p *GetMetricsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetMetricsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartTime = _field
	return nil
}
func (p *GetMetricsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndTime = _field
	return nil
}
func (p *GetMetricsRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MetricNames = _field
	return nil
}
func (p *GetMetricsRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Granularity = _field
	return nil
}
func (p *GetMetricsRequest) ReadField6(iprot thrift.TProtocol) error {
	_field := filter.NewFilterFields()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Filters = _field
	return nil
}
func (p *GetMetricsRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *common.PlatformType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PlatformType = _field
	return nil
}
func (p *GetMetricsRequest) ReadField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*filter.FilterField, 0, size)
	values := make([]filter.FilterField, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DrillDownFields = _field
	return nil
}
func (p *GetMetricsRequest) ReadField9(iprot thrift.TProtocol) error {
	_field := metric.NewCompare()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Compare = _field
	return nil
}
func (p *GetMetricsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetMetricsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMetricsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetMetricsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetMetricsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_time", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetMetricsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_time", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetMetricsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("metric_names", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.MetricNames)); err != nil {
		return err
	}
	for _, v := range p.MetricNames {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *GetMetricsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetGranularity() {
		if err = oprot.WriteFieldBegin("granularity", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Granularity); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *GetMetricsRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilters() {
		if err = oprot.WriteFieldBegin("filters", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Filters.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *GetMetricsRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlatformType() {
		if err = oprot.WriteFieldBegin("platform_type", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PlatformType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *GetMetricsRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDrillDownFields() {
		if err = oprot.WriteFieldBegin("drill_down_fields", thrift.LIST, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DrillDownFields)); err != nil {
			return err
		}
		for _, v := range p.DrillDownFields {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *GetMetricsRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompare() {
		if err = oprot.WriteFieldBegin("compare", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Compare.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *GetMetricsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetMetricsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMetricsRequest(%+v)", *p)

}

func (p *GetMetricsRequest) DeepEqual(ano *GetMetricsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field3DeepEqual(ano.EndTime) {
		return false
	}
	if !p.Field4DeepEqual(ano.MetricNames) {
		return false
	}
	if !p.Field5DeepEqual(ano.Granularity) {
		return false
	}
	if !p.Field6DeepEqual(ano.Filters) {
		return false
	}
	if !p.Field7DeepEqual(ano.PlatformType) {
		return false
	}
	if !p.Field8DeepEqual(ano.DrillDownFields) {
		return false
	}
	if !p.Field9DeepEqual(ano.Compare) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetMetricsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *GetMetricsRequest) Field2DeepEqual(src int64) bool {

	if p.StartTime != src {
		return false
	}
	return true
}
func (p *GetMetricsRequest) Field3DeepEqual(src int64) bool {

	if p.EndTime != src {
		return false
	}
	return true
}
func (p *GetMetricsRequest) Field4DeepEqual(src []string) bool {

	if len(p.MetricNames) != len(src) {
		return false
	}
	for i, v := range p.MetricNames {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *GetMetricsRequest) Field5DeepEqual(src *string) bool {

	if p.Granularity == src {
		return true
	} else if p.Granularity == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Granularity, *src) != 0 {
		return false
	}
	return true
}
func (p *GetMetricsRequest) Field6DeepEqual(src *filter.FilterFields) bool {

	if !p.Filters.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetMetricsRequest) Field7DeepEqual(src *common.PlatformType) bool {

	if p.PlatformType == src {
		return true
	} else if p.PlatformType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PlatformType, *src) != 0 {
		return false
	}
	return true
}
func (p *GetMetricsRequest) Field8DeepEqual(src []*filter.FilterField) bool {

	if len(p.DrillDownFields) != len(src) {
		return false
	}
	for i, v := range p.DrillDownFields {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetMetricsRequest) Field9DeepEqual(src *metric.Compare) bool {

	if !p.Compare.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetMetricsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetMetricsResponse struct {
	Metrics         map[string]*metric.Metric `thrift:"metrics,1,optional" frugal:"1,optional,map<string:metric.Metric>" form:"metrics" json:"metrics,omitempty" query:"metrics"`
	ComparedMetrics map[string]*metric.Metric `thrift:"compared_metrics,2,optional" frugal:"2,optional,map<string:metric.Metric>" form:"compared_metrics" json:"compared_metrics,omitempty" query:"compared_metrics"`
	BaseResp        *base.BaseResp            `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewGetMetricsResponse() *GetMetricsResponse {
	return &GetMetricsResponse{}
}

func (p *GetMetricsResponse) InitDefault() {
}

var GetMetricsResponse_Metrics_DEFAULT map[string]*metric.Metric

func (p *GetMetricsResponse) GetMetrics() (v map[string]*metric.Metric) {
	if p == nil {
		return
	}
	if !p.IsSetMetrics() {
		return GetMetricsResponse_Metrics_DEFAULT
	}
	return p.Metrics
}

var GetMetricsResponse_ComparedMetrics_DEFAULT map[string]*metric.Metric

func (p *GetMetricsResponse) GetComparedMetrics() (v map[string]*metric.Metric) {
	if p == nil {
		return
	}
	if !p.IsSetComparedMetrics() {
		return GetMetricsResponse_ComparedMetrics_DEFAULT
	}
	return p.ComparedMetrics
}

var GetMetricsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetMetricsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetMetricsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetMetricsResponse) SetMetrics(val map[string]*metric.Metric) {
	p.Metrics = val
}
func (p *GetMetricsResponse) SetComparedMetrics(val map[string]*metric.Metric) {
	p.ComparedMetrics = val
}
func (p *GetMetricsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetMetricsResponse = map[int16]string{
	1:   "metrics",
	2:   "compared_metrics",
	255: "BaseResp",
}

func (p *GetMetricsResponse) IsSetMetrics() bool {
	return p.Metrics != nil
}

func (p *GetMetricsResponse) IsSetComparedMetrics() bool {
	return p.ComparedMetrics != nil
}

func (p *GetMetricsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetMetricsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetMetricsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetMetricsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]*metric.Metric, size)
	values := make([]metric.Metric, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Metrics = _field
	return nil
}
func (p *GetMetricsResponse) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]*metric.Metric, size)
	values := make([]metric.Metric, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.ComparedMetrics = _field
	return nil
}
func (p *GetMetricsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetMetricsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMetricsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetMetricsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMetrics() {
		if err = oprot.WriteFieldBegin("metrics", thrift.MAP, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Metrics)); err != nil {
			return err
		}
		for k, v := range p.Metrics {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetMetricsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetComparedMetrics() {
		if err = oprot.WriteFieldBegin("compared_metrics", thrift.MAP, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ComparedMetrics)); err != nil {
			return err
		}
		for k, v := range p.ComparedMetrics {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetMetricsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetMetricsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMetricsResponse(%+v)", *p)

}

func (p *GetMetricsResponse) DeepEqual(ano *GetMetricsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Metrics) {
		return false
	}
	if !p.Field2DeepEqual(ano.ComparedMetrics) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetMetricsResponse) Field1DeepEqual(src map[string]*metric.Metric) bool {

	if len(p.Metrics) != len(src) {
		return false
	}
	for k, v := range p.Metrics {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetMetricsResponse) Field2DeepEqual(src map[string]*metric.Metric) bool {

	if len(p.ComparedMetrics) != len(src) {
		return false
	}
	for k, v := range p.ComparedMetrics {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetMetricsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetDrillDownValuesRequest struct {
	WorkspaceID        int64                     `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	StartTime          int64                     `thrift:"start_time,2,required" frugal:"2,required,i64" json:"start_time" form:"start_time,required" `
	EndTime            int64                     `thrift:"end_time,3,required" frugal:"3,required,i64" json:"end_time" form:"end_time,required" `
	Filters            *filter.FilterFields      `thrift:"filters,4,optional" frugal:"4,optional,filter.FilterFields" form:"filters" json:"filters,omitempty"`
	PlatformType       *common.PlatformType      `thrift:"platform_type,5,optional" frugal:"5,optional,string" form:"platform_type" json:"platform_type,omitempty"`
	DrillDownValueType metric.DrillDownValueType `thrift:"drill_down_value_type,6,required" frugal:"6,required,string" form:"drill_down_value_type,required" json:"drill_down_value_type,required"`
	Base               *base.Base                `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetDrillDownValuesRequest() *GetDrillDownValuesRequest {
	return &GetDrillDownValuesRequest{}
}

func (p *GetDrillDownValuesRequest) InitDefault() {
}

func (p *GetDrillDownValuesRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *GetDrillDownValuesRequest) GetStartTime() (v int64) {
	if p != nil {
		return p.StartTime
	}
	return
}

func (p *GetDrillDownValuesRequest) GetEndTime() (v int64) {
	if p != nil {
		return p.EndTime
	}
	return
}

var GetDrillDownValuesRequest_Filters_DEFAULT *filter.FilterFields

func (p *GetDrillDownValuesRequest) GetFilters() (v *filter.FilterFields) {
	if p == nil {
		return
	}
	if !p.IsSetFilters() {
		return GetDrillDownValuesRequest_Filters_DEFAULT
	}
	return p.Filters
}

var GetDrillDownValuesRequest_PlatformType_DEFAULT common.PlatformType

func (p *GetDrillDownValuesRequest) GetPlatformType() (v common.PlatformType) {
	if p == nil {
		return
	}
	if !p.IsSetPlatformType() {
		return GetDrillDownValuesRequest_PlatformType_DEFAULT
	}
	return *p.PlatformType
}

func (p *GetDrillDownValuesRequest) GetDrillDownValueType() (v metric.DrillDownValueType) {
	if p != nil {
		return p.DrillDownValueType
	}
	return
}

var GetDrillDownValuesRequest_Base_DEFAULT *base.Base

func (p *GetDrillDownValuesRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetDrillDownValuesRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetDrillDownValuesRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *GetDrillDownValuesRequest) SetStartTime(val int64) {
	p.StartTime = val
}
func (p *GetDrillDownValuesRequest) SetEndTime(val int64) {
	p.EndTime = val
}
func (p *GetDrillDownValuesRequest) SetFilters(val *filter.FilterFields) {
	p.Filters = val
}
func (p *GetDrillDownValuesRequest) SetPlatformType(val *common.PlatformType) {
	p.PlatformType = val
}
func (p *GetDrillDownValuesRequest) SetDrillDownValueType(val metric.DrillDownValueType) {
	p.DrillDownValueType = val
}
func (p *GetDrillDownValuesRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetDrillDownValuesRequest = map[int16]string{
	1:   "workspace_id",
	2:   "start_time",
	3:   "end_time",
	4:   "filters",
	5:   "platform_type",
	6:   "drill_down_value_type",
	255: "Base",
}

func (p *GetDrillDownValuesRequest) IsSetFilters() bool {
	return p.Filters != nil
}

func (p *GetDrillDownValuesRequest) IsSetPlatformType() bool {
	return p.PlatformType != nil
}

func (p *GetDrillDownValuesRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetDrillDownValuesRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetStartTime bool = false
	var issetEndTime bool = false
	var issetDrillDownValueType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetEndTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetDrillDownValueType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetStartTime {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetEndTime {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDrillDownValueType {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDrillDownValuesRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetDrillDownValuesRequest[fieldId]))
}

func (p *GetDrillDownValuesRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetDrillDownValuesRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartTime = _field
	return nil
}
func (p *GetDrillDownValuesRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndTime = _field
	return nil
}
func (p *GetDrillDownValuesRequest) ReadField4(iprot thrift.TProtocol) error {
	_field := filter.NewFilterFields()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Filters = _field
	return nil
}
func (p *GetDrillDownValuesRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *common.PlatformType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PlatformType = _field
	return nil
}
func (p *GetDrillDownValuesRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field metric.DrillDownValueType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DrillDownValueType = _field
	return nil
}
func (p *GetDrillDownValuesRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetDrillDownValuesRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDrillDownValuesRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDrillDownValuesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetDrillDownValuesRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_time", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetDrillDownValuesRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_time", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetDrillDownValuesRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilters() {
		if err = oprot.WriteFieldBegin("filters", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Filters.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *GetDrillDownValuesRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlatformType() {
		if err = oprot.WriteFieldBegin("platform_type", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PlatformType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *GetDrillDownValuesRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("drill_down_value_type", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.DrillDownValueType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *GetDrillDownValuesRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetDrillDownValuesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDrillDownValuesRequest(%+v)", *p)

}

func (p *GetDrillDownValuesRequest) DeepEqual(ano *GetDrillDownValuesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field3DeepEqual(ano.EndTime) {
		return false
	}
	if !p.Field4DeepEqual(ano.Filters) {
		return false
	}
	if !p.Field5DeepEqual(ano.PlatformType) {
		return false
	}
	if !p.Field6DeepEqual(ano.DrillDownValueType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetDrillDownValuesRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *GetDrillDownValuesRequest) Field2DeepEqual(src int64) bool {

	if p.StartTime != src {
		return false
	}
	return true
}
func (p *GetDrillDownValuesRequest) Field3DeepEqual(src int64) bool {

	if p.EndTime != src {
		return false
	}
	return true
}
func (p *GetDrillDownValuesRequest) Field4DeepEqual(src *filter.FilterFields) bool {

	if !p.Filters.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetDrillDownValuesRequest) Field5DeepEqual(src *common.PlatformType) bool {

	if p.PlatformType == src {
		return true
	} else if p.PlatformType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PlatformType, *src) != 0 {
		return false
	}
	return true
}
func (p *GetDrillDownValuesRequest) Field6DeepEqual(src metric.DrillDownValueType) bool {

	if strings.Compare(p.DrillDownValueType, src) != 0 {
		return false
	}
	return true
}
func (p *GetDrillDownValuesRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DrillDownValue struct {
	Value       string  `thrift:"value,1,required" frugal:"1,required,string" form:"value,required" json:"value,required" query:"value,required"`
	DisplayName *string `thrift:"display_name,2,optional" frugal:"2,optional,string" form:"display_name" json:"display_name,omitempty" query:"display_name"`
}

func NewDrillDownValue() *DrillDownValue {
	return &DrillDownValue{}
}

func (p *DrillDownValue) InitDefault() {
}

func (p *DrillDownValue) GetValue() (v string) {
	if p != nil {
		return p.Value
	}
	return
}

var DrillDownValue_DisplayName_DEFAULT string

func (p *DrillDownValue) GetDisplayName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDisplayName() {
		return DrillDownValue_DisplayName_DEFAULT
	}
	return *p.DisplayName
}
func (p *DrillDownValue) SetValue(val string) {
	p.Value = val
}
func (p *DrillDownValue) SetDisplayName(val *string) {
	p.DisplayName = val
}

var fieldIDToName_DrillDownValue = map[int16]string{
	1: "value",
	2: "display_name",
}

func (p *DrillDownValue) IsSetDisplayName() bool {
	return p.DisplayName != nil
}

func (p *DrillDownValue) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetValue bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetValue = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetValue {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DrillDownValue[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DrillDownValue[fieldId]))
}

func (p *DrillDownValue) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}
func (p *DrillDownValue) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DisplayName = _field
	return nil
}

func (p *DrillDownValue) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DrillDownValue"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DrillDownValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DrillDownValue) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisplayName() {
		if err = oprot.WriteFieldBegin("display_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DisplayName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *DrillDownValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DrillDownValue(%+v)", *p)

}

func (p *DrillDownValue) DeepEqual(ano *DrillDownValue) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Value) {
		return false
	}
	if !p.Field2DeepEqual(ano.DisplayName) {
		return false
	}
	return true
}

func (p *DrillDownValue) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Value, src) != 0 {
		return false
	}
	return true
}
func (p *DrillDownValue) Field2DeepEqual(src *string) bool {

	if p.DisplayName == src {
		return true
	} else if p.DisplayName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DisplayName, *src) != 0 {
		return false
	}
	return true
}

type GetDrillDownValuesResponse struct {
	DrillDownValues []*DrillDownValue `thrift:"drill_down_values,1,optional" frugal:"1,optional,list<DrillDownValue>" form:"drill_down_values" json:"drill_down_values,omitempty" query:"drill_down_values"`
	BaseResp        *base.BaseResp    `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewGetDrillDownValuesResponse() *GetDrillDownValuesResponse {
	return &GetDrillDownValuesResponse{}
}

func (p *GetDrillDownValuesResponse) InitDefault() {
}

var GetDrillDownValuesResponse_DrillDownValues_DEFAULT []*DrillDownValue

func (p *GetDrillDownValuesResponse) GetDrillDownValues() (v []*DrillDownValue) {
	if p == nil {
		return
	}
	if !p.IsSetDrillDownValues() {
		return GetDrillDownValuesResponse_DrillDownValues_DEFAULT
	}
	return p.DrillDownValues
}

var GetDrillDownValuesResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetDrillDownValuesResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetDrillDownValuesResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetDrillDownValuesResponse) SetDrillDownValues(val []*DrillDownValue) {
	p.DrillDownValues = val
}
func (p *GetDrillDownValuesResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetDrillDownValuesResponse = map[int16]string{
	1:   "drill_down_values",
	255: "BaseResp",
}

func (p *GetDrillDownValuesResponse) IsSetDrillDownValues() bool {
	return p.DrillDownValues != nil
}

func (p *GetDrillDownValuesResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetDrillDownValuesResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetDrillDownValuesResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetDrillDownValuesResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*DrillDownValue, 0, size)
	values := make([]DrillDownValue, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DrillDownValues = _field
	return nil
}
func (p *GetDrillDownValuesResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetDrillDownValuesResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDrillDownValuesResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetDrillDownValuesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDrillDownValues() {
		if err = oprot.WriteFieldBegin("drill_down_values", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DrillDownValues)); err != nil {
			return err
		}
		for _, v := range p.DrillDownValues {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetDrillDownValuesResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetDrillDownValuesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetDrillDownValuesResponse(%+v)", *p)

}

func (p *GetDrillDownValuesResponse) DeepEqual(ano *GetDrillDownValuesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DrillDownValues) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetDrillDownValuesResponse) Field1DeepEqual(src []*DrillDownValue) bool {

	if len(p.DrillDownValues) != len(src) {
		return false
	}
	for i, v := range p.DrillDownValues {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetDrillDownValuesResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type MetricService interface {
	GetMetrics(ctx context.Context, req *GetMetricsRequest) (r *GetMetricsResponse, err error)

	GetDrillDownValues(ctx context.Context, req *GetDrillDownValuesRequest) (r *GetDrillDownValuesResponse, err error)
}

type MetricServiceClient struct {
	c thrift.TClient
}

func NewMetricServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MetricServiceClient {
	return &MetricServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMetricServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MetricServiceClient {
	return &MetricServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMetricServiceClient(c thrift.TClient) *MetricServiceClient {
	return &MetricServiceClient{
		c: c,
	}
}

func (p *MetricServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *MetricServiceClient) GetMetrics(ctx context.Context, req *GetMetricsRequest) (r *GetMetricsResponse, err error) {
	var _args MetricServiceGetMetricsArgs
	_args.Req = req
	var _result MetricServiceGetMetricsResult
	if err = p.Client_().Call(ctx, "GetMetrics", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *MetricServiceClient) GetDrillDownValues(ctx context.Context, req *GetDrillDownValuesRequest) (r *GetDrillDownValuesResponse, err error) {
	var _args MetricServiceGetDrillDownValuesArgs
	_args.Req = req
	var _result MetricServiceGetDrillDownValuesResult
	if err = p.Client_().Call(ctx, "GetDrillDownValues", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MetricServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MetricService
}

func (p *MetricServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MetricServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MetricServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMetricServiceProcessor(handler MetricService) *MetricServiceProcessor {
	self := &MetricServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GetMetrics", &metricServiceProcessorGetMetrics{handler: handler})
	self.AddToProcessorMap("GetDrillDownValues", &metricServiceProcessorGetDrillDownValues{handler: handler})
	return self
}
func (p *MetricServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type metricServiceProcessorGetMetrics struct {
	handler MetricService
}

func (p *metricServiceProcessorGetMetrics) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetricServiceGetMetricsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetMetrics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MetricServiceGetMetricsResult{}
	var retval *GetMetricsResponse
	if retval, err2 = p.handler.GetMetrics(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetMetrics: "+err2.Error())
		oprot.WriteMessageBegin("GetMetrics", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetMetrics", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type metricServiceProcessorGetDrillDownValues struct {
	handler MetricService
}

func (p *metricServiceProcessorGetDrillDownValues) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MetricServiceGetDrillDownValuesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetDrillDownValues", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MetricServiceGetDrillDownValuesResult{}
	var retval *GetDrillDownValuesResponse
	if retval, err2 = p.handler.GetDrillDownValues(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetDrillDownValues: "+err2.Error())
		oprot.WriteMessageBegin("GetDrillDownValues", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetDrillDownValues", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MetricServiceGetMetricsArgs struct {
	Req *GetMetricsRequest `thrift:"Req,1" frugal:"1,default,GetMetricsRequest"`
}

func NewMetricServiceGetMetricsArgs() *MetricServiceGetMetricsArgs {
	return &MetricServiceGetMetricsArgs{}
}

func (p *MetricServiceGetMetricsArgs) InitDefault() {
}

var MetricServiceGetMetricsArgs_Req_DEFAULT *GetMetricsRequest

func (p *MetricServiceGetMetricsArgs) GetReq() (v *GetMetricsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return MetricServiceGetMetricsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MetricServiceGetMetricsArgs) SetReq(val *GetMetricsRequest) {
	p.Req = val
}

var fieldIDToName_MetricServiceGetMetricsArgs = map[int16]string{
	1: "Req",
}

func (p *MetricServiceGetMetricsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MetricServiceGetMetricsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MetricServiceGetMetricsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MetricServiceGetMetricsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetMetricsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MetricServiceGetMetricsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMetrics_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MetricServiceGetMetricsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MetricServiceGetMetricsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetricServiceGetMetricsArgs(%+v)", *p)

}

func (p *MetricServiceGetMetricsArgs) DeepEqual(ano *MetricServiceGetMetricsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MetricServiceGetMetricsArgs) Field1DeepEqual(src *GetMetricsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MetricServiceGetMetricsResult struct {
	Success *GetMetricsResponse `thrift:"success,0,optional" frugal:"0,optional,GetMetricsResponse"`
}

func NewMetricServiceGetMetricsResult() *MetricServiceGetMetricsResult {
	return &MetricServiceGetMetricsResult{}
}

func (p *MetricServiceGetMetricsResult) InitDefault() {
}

var MetricServiceGetMetricsResult_Success_DEFAULT *GetMetricsResponse

func (p *MetricServiceGetMetricsResult) GetSuccess() (v *GetMetricsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return MetricServiceGetMetricsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MetricServiceGetMetricsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetMetricsResponse)
}

var fieldIDToName_MetricServiceGetMetricsResult = map[int16]string{
	0: "success",
}

func (p *MetricServiceGetMetricsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetricServiceGetMetricsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MetricServiceGetMetricsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MetricServiceGetMetricsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetMetricsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MetricServiceGetMetricsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMetrics_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MetricServiceGetMetricsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MetricServiceGetMetricsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetricServiceGetMetricsResult(%+v)", *p)

}

func (p *MetricServiceGetMetricsResult) DeepEqual(ano *MetricServiceGetMetricsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MetricServiceGetMetricsResult) Field0DeepEqual(src *GetMetricsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MetricServiceGetDrillDownValuesArgs struct {
	Req *GetDrillDownValuesRequest `thrift:"Req,1" frugal:"1,default,GetDrillDownValuesRequest"`
}

func NewMetricServiceGetDrillDownValuesArgs() *MetricServiceGetDrillDownValuesArgs {
	return &MetricServiceGetDrillDownValuesArgs{}
}

func (p *MetricServiceGetDrillDownValuesArgs) InitDefault() {
}

var MetricServiceGetDrillDownValuesArgs_Req_DEFAULT *GetDrillDownValuesRequest

func (p *MetricServiceGetDrillDownValuesArgs) GetReq() (v *GetDrillDownValuesRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return MetricServiceGetDrillDownValuesArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MetricServiceGetDrillDownValuesArgs) SetReq(val *GetDrillDownValuesRequest) {
	p.Req = val
}

var fieldIDToName_MetricServiceGetDrillDownValuesArgs = map[int16]string{
	1: "Req",
}

func (p *MetricServiceGetDrillDownValuesArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MetricServiceGetDrillDownValuesArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MetricServiceGetDrillDownValuesArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MetricServiceGetDrillDownValuesArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetDrillDownValuesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *MetricServiceGetDrillDownValuesArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDrillDownValues_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MetricServiceGetDrillDownValuesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MetricServiceGetDrillDownValuesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetricServiceGetDrillDownValuesArgs(%+v)", *p)

}

func (p *MetricServiceGetDrillDownValuesArgs) DeepEqual(ano *MetricServiceGetDrillDownValuesArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MetricServiceGetDrillDownValuesArgs) Field1DeepEqual(src *GetDrillDownValuesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MetricServiceGetDrillDownValuesResult struct {
	Success *GetDrillDownValuesResponse `thrift:"success,0,optional" frugal:"0,optional,GetDrillDownValuesResponse"`
}

func NewMetricServiceGetDrillDownValuesResult() *MetricServiceGetDrillDownValuesResult {
	return &MetricServiceGetDrillDownValuesResult{}
}

func (p *MetricServiceGetDrillDownValuesResult) InitDefault() {
}

var MetricServiceGetDrillDownValuesResult_Success_DEFAULT *GetDrillDownValuesResponse

func (p *MetricServiceGetDrillDownValuesResult) GetSuccess() (v *GetDrillDownValuesResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return MetricServiceGetDrillDownValuesResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MetricServiceGetDrillDownValuesResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetDrillDownValuesResponse)
}

var fieldIDToName_MetricServiceGetDrillDownValuesResult = map[int16]string{
	0: "success",
}

func (p *MetricServiceGetDrillDownValuesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MetricServiceGetDrillDownValuesResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MetricServiceGetDrillDownValuesResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MetricServiceGetDrillDownValuesResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetDrillDownValuesResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *MetricServiceGetDrillDownValuesResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetDrillDownValues_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MetricServiceGetDrillDownValuesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MetricServiceGetDrillDownValuesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetricServiceGetDrillDownValuesResult(%+v)", *p)

}

func (p *MetricServiceGetDrillDownValuesResult) DeepEqual(ano *MetricServiceGetDrillDownValuesResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MetricServiceGetDrillDownValuesResult) Field0DeepEqual(src *GetDrillDownValuesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

// Code generated by Kitex v0.13.1. DO NOT EDIT.

package metricservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	metric "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/metric"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetMetrics": kitex.NewMethodInfo(
		getMetricsHandler,
		newMetricServiceGetMetricsArgs,
		newMetricServiceGetMetricsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetDrillDownValues": kitex.NewMethodInfo(
		getDrillDownValuesHandler,
		newMetricServiceGetDrillDownValuesArgs,
		newMetricServiceGetDrillDownValuesResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	metricServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return metricServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "MetricService"
	handlerType := (*metric.MetricService)(nil)
	extra := map[string]interface{}{
		"PackageName": "metric",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func getMetricsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*metric.MetricServiceGetMetricsArgs)
	realResult := result.(*metric.MetricServiceGetMetricsResult)
	success, err := handler.(metric.MetricService).GetMetrics(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newMetricServiceGetMetricsArgs() interface{} {
	return metric.NewMetricServiceGetMetricsArgs()
}

func newMetricServiceGetMetricsResult() interface{} {
	return metric.NewMetricServiceGetMetricsResult()
}

func getDrillDownValuesHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*metric.MetricServiceGetDrillDownValuesArgs)
	realResult := result.(*metric.MetricServiceGetDrillDownValuesResult)
	success, err := handler.(metric.MetricService).GetDrillDownValues(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newMetricServiceGetDrillDownValuesArgs() interface{} {
	return metric.NewMetricServiceGetDrillDownValuesArgs()
}

func newMetricServiceGetDrillDownValuesResult() interface{} {
	return metric.NewMetricServiceGetDrillDownValuesResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) GetMetrics(ctx context.Context, req *metric.GetMetricsRequest) (r *metric.GetMetricsResponse, err error) {
	var _args metric.MetricServiceGetMetricsArgs
	_args.Req = req
	var _result metric.MetricServiceGetMetricsResult
	if err = p.c.Call(ctx, "GetMetrics", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetDrillDownValues(ctx context.Context, req *metric.GetDrillDownValuesRequest) (r *metric.GetDrillDownValuesResponse, err error) {
	var _args metric.MetricServiceGetDrillDownValuesArgs
	_args.Req = req
	var _result metric.MetricServiceGetDrillDownValuesResult
	if err = p.c.Call(ctx, "GetDrillDownValues", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package trace

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type Trace struct {
	TraceID *string    `thrift:"trace_id,1,optional" frugal:"1,optional,string" form:"trace_id" json:"trace_id,omitempty" query:"trace_id"`
	Tokens  *TokenCost `thrift:"tokens,2,optional" frugal:"2,optional,TokenCost" form:"tokens" json:"tokens,omitempty" query:"tokens"`
}

func NewTrace() *Trace {
	return &Trace{}
}

func (p *Trace) InitDefault() {
}

var Trace_TraceID_DEFAULT string

func (p *Trace) GetTraceID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTraceID() {
		return Trace_TraceID_DEFAULT
	}
	return *p.TraceID
}

var Trace_Tokens_DEFAULT *TokenCost

func (p *Trace) GetTokens() (v *TokenCost) {
	if p == nil {
		return
	}
	if !p.IsSetTokens() {
		return Trace_Tokens_DEFAULT
	}
	return p.Tokens
}
func (p *Trace) SetTraceID(val *string) {
	p.TraceID = val
}
func (p *Trace) SetTokens(val *TokenCost) {
	p.Tokens = val
}

var fieldIDToName_Trace = map[int16]string{
	1: "trace_id",
	2: "tokens",
}

func (p *Trace) IsSetTraceID() bool {
	return p.TraceID != nil
}

func (p *Trace) IsSetTokens() bool {
	return p.Tokens != nil
}

func (p *Trace) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Trace[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Trace) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TraceID = _field
	return nil
}
func (p *Trace) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTokenCost()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Tokens = _field
	return nil
}

func (p *Trace) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Trace"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Trace) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTraceID() {
		if err = oprot.WriteFieldBegin("trace_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TraceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Trace) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTokens() {
		if err = oprot.WriteFieldBegin("tokens", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Tokens.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Trace) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Trace(%+v)", *p)

}

func (p *Trace) DeepEqual(ano *Trace) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TraceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Tokens) {
		return false
	}
	return true
}

func (p *Trace) Field1DeepEqual(src *string) bool {

	if p.TraceID == src {
		return true
	} else if p.TraceID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TraceID, *src) != 0 {
		return false
	}
	return true
}
func (p *Trace) Field2DeepEqual(src *TokenCost) bool {

	if !p.Tokens.DeepEqual(src) {
		return false
	}
	return true
}

type TokenCost struct {
	InputToken  int64 `thrift:"input_token,1,required" frugal:"1,required,i64" json:"input_token" form:"input_token,required" query:"input_token,required"`
	OutputToken int64 `thrift:"output_token,2,required" frugal:"2,required,i64" json:"output_token" form:"output_token,required" query:"output_token,required"`
}

func NewTokenCost() *TokenCost {
	return &TokenCost{}
}

func (p *TokenCost) InitDefault() {
}

func (p *TokenCost) GetInputToken() (v int64) {
	if p != nil {
		return p.InputToken
	}
	return
}

func (p *TokenCost) GetOutputToken() (v int64) {
	if p != nil {
		return p.OutputToken
	}
	return
}
func (p *TokenCost) SetInputToken(val int64) {
	p.InputToken = val
}
func (p *TokenCost) SetOutputToken(val int64) {
	p.OutputToken = val
}

var fieldIDToName_TokenCost = map[int16]string{
	1: "input_token",
	2: "output_token",
}

func (p *TokenCost) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetInputToken bool = false
	var issetOutputToken bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetInputToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetOutputToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetInputToken {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetOutputToken {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TokenCost[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TokenCost[fieldId]))
}

func (p *TokenCost) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.InputToken = _field
	return nil
}
func (p *TokenCost) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OutputToken = _field
	return nil
}

func (p *TokenCost) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TokenCost"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TokenCost) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("input_token", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.InputToken); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *TokenCost) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("output_token", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OutputToken); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TokenCost) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TokenCost(%+v)", *p)

}

func (p *TokenCost) DeepEqual(ano *TokenCost) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.InputToken) {
		return false
	}
	if !p.Field2DeepEqual(ano.OutputToken) {
		return false
	}
	return true
}

func (p *TokenCost) Field1DeepEqual(src int64) bool {

	if p.InputToken != src {
		return false
	}
	return true
}
func (p *TokenCost) Field2DeepEqual(src int64) bool {

	if p.OutputToken != src {
		return false
	}
	return true
}

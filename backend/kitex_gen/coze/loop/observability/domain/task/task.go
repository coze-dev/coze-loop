// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package task

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/domain/common"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/domain/dataset"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/domain/filter"
	"strings"
)

const (
	TimeUnitDay = "day"

	TimeUnitWeek = "week"

	TaskTypeAutoEval = "auto_evaluate"

	TaskStatusUnstarted = "unstarted"

	TaskStatusRunning = "running"

	TaskStatusFailed = "failed"

	TaskStatusSuccess = "success"

	TaskStatusPending = "pending"

	TaskStatusDisabled = "disabled"
)

type TimeUnit = string

type TaskType = string

type TaskStatus = string

// Task
type Task struct {
	// 任务 id
	ID *int64 `thrift:"id,1,optional" frugal:"1,optional,i64" form:"id" json:"id,omitempty" query:"id"`
	// 名称
	Name string `thrift:"name,2,required" frugal:"2,required,string" form:"name,required" json:"name,required" query:"name,required"`
	// 描述
	Description *string `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty" query:"description"`
	// 所在空间
	WorkspaceID *int64 `thrift:"workspace_id,4,optional" frugal:"4,optional,i64" form:"workspace_id" json:"workspace_id,omitempty" query:"workspace_id"`
	// 类型
	TaskType TaskType `thrift:"task_type,5,required" frugal:"5,required,string" form:"task_type,required" json:"task_type,required" query:"task_type,required"`
	// 状态
	TaskStatus *TaskStatus `thrift:"task_status,6,optional" frugal:"6,optional,string" form:"task_status" json:"task_status,omitempty" query:"task_status"`
	// 规则
	Rule *Rule `thrift:"rule,7,optional" frugal:"7,optional,Rule" form:"rule" json:"rule,omitempty" query:"rule"`
	// 配置
	TaskConfig *TaskConfig `thrift:"task_config,8,optional" frugal:"8,optional,TaskConfig" form:"task_config" json:"task_config,omitempty" query:"task_config"`
	// 任务状态详情
	TaskDetail *TaskDetail `thrift:"task_detail,9,optional" frugal:"9,optional,TaskDetail" form:"task_detail" json:"task_detail,omitempty" query:"task_detail"`
	// 基础信息
	BaseInfo *common.BaseInfo `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" form:"base_info" json:"base_info,omitempty" query:"base_info"`
}

func NewTask() *Task {
	return &Task{}
}

func (p *Task) InitDefault() {
}

var Task_ID_DEFAULT int64

func (p *Task) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return Task_ID_DEFAULT
	}
	return *p.ID
}

func (p *Task) GetName() (v string) {
	if p != nil {
		return p.Name
	}
	return
}

var Task_Description_DEFAULT string

func (p *Task) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return Task_Description_DEFAULT
	}
	return *p.Description
}

var Task_WorkspaceID_DEFAULT int64

func (p *Task) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return Task_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

func (p *Task) GetTaskType() (v TaskType) {
	if p != nil {
		return p.TaskType
	}
	return
}

var Task_TaskStatus_DEFAULT TaskStatus

func (p *Task) GetTaskStatus() (v TaskStatus) {
	if p == nil {
		return
	}
	if !p.IsSetTaskStatus() {
		return Task_TaskStatus_DEFAULT
	}
	return *p.TaskStatus
}

var Task_Rule_DEFAULT *Rule

func (p *Task) GetRule() (v *Rule) {
	if p == nil {
		return
	}
	if !p.IsSetRule() {
		return Task_Rule_DEFAULT
	}
	return p.Rule
}

var Task_TaskConfig_DEFAULT *TaskConfig

func (p *Task) GetTaskConfig() (v *TaskConfig) {
	if p == nil {
		return
	}
	if !p.IsSetTaskConfig() {
		return Task_TaskConfig_DEFAULT
	}
	return p.TaskConfig
}

var Task_TaskDetail_DEFAULT *TaskDetail

func (p *Task) GetTaskDetail() (v *TaskDetail) {
	if p == nil {
		return
	}
	if !p.IsSetTaskDetail() {
		return Task_TaskDetail_DEFAULT
	}
	return p.TaskDetail
}

var Task_BaseInfo_DEFAULT *common.BaseInfo

func (p *Task) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return Task_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *Task) SetID(val *int64) {
	p.ID = val
}
func (p *Task) SetName(val string) {
	p.Name = val
}
func (p *Task) SetDescription(val *string) {
	p.Description = val
}
func (p *Task) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *Task) SetTaskType(val TaskType) {
	p.TaskType = val
}
func (p *Task) SetTaskStatus(val *TaskStatus) {
	p.TaskStatus = val
}
func (p *Task) SetRule(val *Rule) {
	p.Rule = val
}
func (p *Task) SetTaskConfig(val *TaskConfig) {
	p.TaskConfig = val
}
func (p *Task) SetTaskDetail(val *TaskDetail) {
	p.TaskDetail = val
}
func (p *Task) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_Task = map[int16]string{
	1:   "id",
	2:   "name",
	3:   "description",
	4:   "workspace_id",
	5:   "task_type",
	6:   "task_status",
	7:   "rule",
	8:   "task_config",
	9:   "task_detail",
	100: "base_info",
}

func (p *Task) IsSetID() bool {
	return p.ID != nil
}

func (p *Task) IsSetDescription() bool {
	return p.Description != nil
}

func (p *Task) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *Task) IsSetTaskStatus() bool {
	return p.TaskStatus != nil
}

func (p *Task) IsSetRule() bool {
	return p.Rule != nil
}

func (p *Task) IsSetTaskConfig() bool {
	return p.TaskConfig != nil
}

func (p *Task) IsSetTaskDetail() bool {
	return p.TaskDetail != nil
}

func (p *Task) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *Task) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetTaskType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetTaskType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTaskType {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Task[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Task[fieldId]))
}

func (p *Task) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *Task) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Name = _field
	return nil
}
func (p *Task) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *Task) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *Task) ReadField5(iprot thrift.TProtocol) error {

	var _field TaskType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskType = _field
	return nil
}
func (p *Task) ReadField6(iprot thrift.TProtocol) error {

	var _field *TaskStatus
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TaskStatus = _field
	return nil
}
func (p *Task) ReadField7(iprot thrift.TProtocol) error {
	_field := NewRule()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Rule = _field
	return nil
}
func (p *Task) ReadField8(iprot thrift.TProtocol) error {
	_field := NewTaskConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TaskConfig = _field
	return nil
}
func (p *Task) ReadField9(iprot thrift.TProtocol) error {
	_field := NewTaskDetail()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TaskDetail = _field
	return nil
}
func (p *Task) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *Task) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Task"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Task) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Task) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Task) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *Task) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *Task) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_type", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TaskType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *Task) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskStatus() {
		if err = oprot.WriteFieldBegin("task_status", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TaskStatus); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *Task) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetRule() {
		if err = oprot.WriteFieldBegin("rule", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Rule.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *Task) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskConfig() {
		if err = oprot.WriteFieldBegin("task_config", thrift.STRUCT, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TaskConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *Task) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskDetail() {
		if err = oprot.WriteFieldBegin("task_detail", thrift.STRUCT, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TaskDetail.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *Task) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *Task) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Task(%+v)", *p)

}

func (p *Task) DeepEqual(ano *Task) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field5DeepEqual(ano.TaskType) {
		return false
	}
	if !p.Field6DeepEqual(ano.TaskStatus) {
		return false
	}
	if !p.Field7DeepEqual(ano.Rule) {
		return false
	}
	if !p.Field8DeepEqual(ano.TaskConfig) {
		return false
	}
	if !p.Field9DeepEqual(ano.TaskDetail) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *Task) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *Task) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *Task) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *Task) Field4DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *Task) Field5DeepEqual(src TaskType) bool {

	if strings.Compare(p.TaskType, src) != 0 {
		return false
	}
	return true
}
func (p *Task) Field6DeepEqual(src *TaskStatus) bool {

	if p.TaskStatus == src {
		return true
	} else if p.TaskStatus == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TaskStatus, *src) != 0 {
		return false
	}
	return true
}
func (p *Task) Field7DeepEqual(src *Rule) bool {

	if !p.Rule.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Task) Field8DeepEqual(src *TaskConfig) bool {

	if !p.TaskConfig.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Task) Field9DeepEqual(src *TaskDetail) bool {

	if !p.TaskDetail.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Task) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

// Rule
type Rule struct {
	// Span 过滤条件
	SpanFilters *filter.SpanFilterFields `thrift:"span_filters,1,optional" frugal:"1,optional,filter.SpanFilterFields" form:"span_filters" json:"span_filters,omitempty" query:"span_filters"`
	// 采样配置
	Sampler *Sampler `thrift:"sampler,2,optional" frugal:"2,optional,Sampler" form:"sampler" json:"sampler,omitempty" query:"sampler"`
	// 生效时间窗口
	EffectiveTime *EffectiveTime `thrift:"effective_time,3,optional" frugal:"3,optional,EffectiveTime" form:"effective_time" json:"effective_time,omitempty" query:"effective_time"`
}

func NewRule() *Rule {
	return &Rule{}
}

func (p *Rule) InitDefault() {
}

var Rule_SpanFilters_DEFAULT *filter.SpanFilterFields

func (p *Rule) GetSpanFilters() (v *filter.SpanFilterFields) {
	if p == nil {
		return
	}
	if !p.IsSetSpanFilters() {
		return Rule_SpanFilters_DEFAULT
	}
	return p.SpanFilters
}

var Rule_Sampler_DEFAULT *Sampler

func (p *Rule) GetSampler() (v *Sampler) {
	if p == nil {
		return
	}
	if !p.IsSetSampler() {
		return Rule_Sampler_DEFAULT
	}
	return p.Sampler
}

var Rule_EffectiveTime_DEFAULT *EffectiveTime

func (p *Rule) GetEffectiveTime() (v *EffectiveTime) {
	if p == nil {
		return
	}
	if !p.IsSetEffectiveTime() {
		return Rule_EffectiveTime_DEFAULT
	}
	return p.EffectiveTime
}
func (p *Rule) SetSpanFilters(val *filter.SpanFilterFields) {
	p.SpanFilters = val
}
func (p *Rule) SetSampler(val *Sampler) {
	p.Sampler = val
}
func (p *Rule) SetEffectiveTime(val *EffectiveTime) {
	p.EffectiveTime = val
}

var fieldIDToName_Rule = map[int16]string{
	1: "span_filters",
	2: "sampler",
	3: "effective_time",
}

func (p *Rule) IsSetSpanFilters() bool {
	return p.SpanFilters != nil
}

func (p *Rule) IsSetSampler() bool {
	return p.Sampler != nil
}

func (p *Rule) IsSetEffectiveTime() bool {
	return p.EffectiveTime != nil
}

func (p *Rule) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Rule[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Rule) ReadField1(iprot thrift.TProtocol) error {
	_field := filter.NewSpanFilterFields()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SpanFilters = _field
	return nil
}
func (p *Rule) ReadField2(iprot thrift.TProtocol) error {
	_field := NewSampler()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Sampler = _field
	return nil
}
func (p *Rule) ReadField3(iprot thrift.TProtocol) error {
	_field := NewEffectiveTime()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EffectiveTime = _field
	return nil
}

func (p *Rule) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Rule"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Rule) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpanFilters() {
		if err = oprot.WriteFieldBegin("span_filters", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SpanFilters.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Rule) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSampler() {
		if err = oprot.WriteFieldBegin("sampler", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Sampler.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Rule) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEffectiveTime() {
		if err = oprot.WriteFieldBegin("effective_time", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EffectiveTime.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Rule) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Rule(%+v)", *p)

}

func (p *Rule) DeepEqual(ano *Rule) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SpanFilters) {
		return false
	}
	if !p.Field2DeepEqual(ano.Sampler) {
		return false
	}
	if !p.Field3DeepEqual(ano.EffectiveTime) {
		return false
	}
	return true
}

func (p *Rule) Field1DeepEqual(src *filter.SpanFilterFields) bool {

	if !p.SpanFilters.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Rule) Field2DeepEqual(src *Sampler) bool {

	if !p.Sampler.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Rule) Field3DeepEqual(src *EffectiveTime) bool {

	if !p.EffectiveTime.DeepEqual(src) {
		return false
	}
	return true
}

type Sampler struct {
	// 采样率
	SampleRate *float64 `thrift:"sample_rate,1,optional" frugal:"1,optional,double" form:"sample_rate" json:"sample_rate,omitempty" query:"sample_rate"`
	// 采样上限
	SampleSize *int64 `thrift:"sample_size,2,optional" frugal:"2,optional,i64" form:"sample_size" json:"sample_size,omitempty" query:"sample_size"`
	// 是否启动任务循环
	IsCycle *bool `thrift:"is_cycle,3,optional" frugal:"3,optional,bool" form:"is_cycle" json:"is_cycle,omitempty" query:"is_cycle"`
	// 采样单次上限
	CycleCount *int64 `thrift:"cycle_count,4,optional" frugal:"4,optional,i64" form:"cycle_count" json:"cycle_count,omitempty" query:"cycle_count"`
	// 循环间隔
	CycleInterval *int64 `thrift:"cycle_interval,5,optional" frugal:"5,optional,i64" form:"cycle_interval" json:"cycle_interval,omitempty" query:"cycle_interval"`
	// 循环时间单位
	CycleTimeUnit *TimeUnit `thrift:"cycle_time_unit,6,optional" frugal:"6,optional,string" form:"cycle_time_unit" json:"cycle_time_unit,omitempty" query:"cycle_time_unit"`
}

func NewSampler() *Sampler {
	return &Sampler{}
}

func (p *Sampler) InitDefault() {
}

var Sampler_SampleRate_DEFAULT float64

func (p *Sampler) GetSampleRate() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetSampleRate() {
		return Sampler_SampleRate_DEFAULT
	}
	return *p.SampleRate
}

var Sampler_SampleSize_DEFAULT int64

func (p *Sampler) GetSampleSize() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetSampleSize() {
		return Sampler_SampleSize_DEFAULT
	}
	return *p.SampleSize
}

var Sampler_IsCycle_DEFAULT bool

func (p *Sampler) GetIsCycle() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsCycle() {
		return Sampler_IsCycle_DEFAULT
	}
	return *p.IsCycle
}

var Sampler_CycleCount_DEFAULT int64

func (p *Sampler) GetCycleCount() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetCycleCount() {
		return Sampler_CycleCount_DEFAULT
	}
	return *p.CycleCount
}

var Sampler_CycleInterval_DEFAULT int64

func (p *Sampler) GetCycleInterval() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetCycleInterval() {
		return Sampler_CycleInterval_DEFAULT
	}
	return *p.CycleInterval
}

var Sampler_CycleTimeUnit_DEFAULT TimeUnit

func (p *Sampler) GetCycleTimeUnit() (v TimeUnit) {
	if p == nil {
		return
	}
	if !p.IsSetCycleTimeUnit() {
		return Sampler_CycleTimeUnit_DEFAULT
	}
	return *p.CycleTimeUnit
}
func (p *Sampler) SetSampleRate(val *float64) {
	p.SampleRate = val
}
func (p *Sampler) SetSampleSize(val *int64) {
	p.SampleSize = val
}
func (p *Sampler) SetIsCycle(val *bool) {
	p.IsCycle = val
}
func (p *Sampler) SetCycleCount(val *int64) {
	p.CycleCount = val
}
func (p *Sampler) SetCycleInterval(val *int64) {
	p.CycleInterval = val
}
func (p *Sampler) SetCycleTimeUnit(val *TimeUnit) {
	p.CycleTimeUnit = val
}

var fieldIDToName_Sampler = map[int16]string{
	1: "sample_rate",
	2: "sample_size",
	3: "is_cycle",
	4: "cycle_count",
	5: "cycle_interval",
	6: "cycle_time_unit",
}

func (p *Sampler) IsSetSampleRate() bool {
	return p.SampleRate != nil
}

func (p *Sampler) IsSetSampleSize() bool {
	return p.SampleSize != nil
}

func (p *Sampler) IsSetIsCycle() bool {
	return p.IsCycle != nil
}

func (p *Sampler) IsSetCycleCount() bool {
	return p.CycleCount != nil
}

func (p *Sampler) IsSetCycleInterval() bool {
	return p.CycleInterval != nil
}

func (p *Sampler) IsSetCycleTimeUnit() bool {
	return p.CycleTimeUnit != nil
}

func (p *Sampler) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Sampler[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Sampler) ReadField1(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SampleRate = _field
	return nil
}
func (p *Sampler) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SampleSize = _field
	return nil
}
func (p *Sampler) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsCycle = _field
	return nil
}
func (p *Sampler) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CycleCount = _field
	return nil
}
func (p *Sampler) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CycleInterval = _field
	return nil
}
func (p *Sampler) ReadField6(iprot thrift.TProtocol) error {

	var _field *TimeUnit
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CycleTimeUnit = _field
	return nil
}

func (p *Sampler) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Sampler"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Sampler) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSampleRate() {
		if err = oprot.WriteFieldBegin("sample_rate", thrift.DOUBLE, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.SampleRate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Sampler) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSampleSize() {
		if err = oprot.WriteFieldBegin("sample_size", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SampleSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Sampler) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsCycle() {
		if err = oprot.WriteFieldBegin("is_cycle", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsCycle); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *Sampler) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCycleCount() {
		if err = oprot.WriteFieldBegin("cycle_count", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CycleCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *Sampler) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCycleInterval() {
		if err = oprot.WriteFieldBegin("cycle_interval", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CycleInterval); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *Sampler) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCycleTimeUnit() {
		if err = oprot.WriteFieldBegin("cycle_time_unit", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CycleTimeUnit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Sampler) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Sampler(%+v)", *p)

}

func (p *Sampler) DeepEqual(ano *Sampler) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SampleRate) {
		return false
	}
	if !p.Field2DeepEqual(ano.SampleSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.IsCycle) {
		return false
	}
	if !p.Field4DeepEqual(ano.CycleCount) {
		return false
	}
	if !p.Field5DeepEqual(ano.CycleInterval) {
		return false
	}
	if !p.Field6DeepEqual(ano.CycleTimeUnit) {
		return false
	}
	return true
}

func (p *Sampler) Field1DeepEqual(src *float64) bool {

	if p.SampleRate == src {
		return true
	} else if p.SampleRate == nil || src == nil {
		return false
	}
	if *p.SampleRate != *src {
		return false
	}
	return true
}
func (p *Sampler) Field2DeepEqual(src *int64) bool {

	if p.SampleSize == src {
		return true
	} else if p.SampleSize == nil || src == nil {
		return false
	}
	if *p.SampleSize != *src {
		return false
	}
	return true
}
func (p *Sampler) Field3DeepEqual(src *bool) bool {

	if p.IsCycle == src {
		return true
	} else if p.IsCycle == nil || src == nil {
		return false
	}
	if *p.IsCycle != *src {
		return false
	}
	return true
}
func (p *Sampler) Field4DeepEqual(src *int64) bool {

	if p.CycleCount == src {
		return true
	} else if p.CycleCount == nil || src == nil {
		return false
	}
	if *p.CycleCount != *src {
		return false
	}
	return true
}
func (p *Sampler) Field5DeepEqual(src *int64) bool {

	if p.CycleInterval == src {
		return true
	} else if p.CycleInterval == nil || src == nil {
		return false
	}
	if *p.CycleInterval != *src {
		return false
	}
	return true
}
func (p *Sampler) Field6DeepEqual(src *TimeUnit) bool {

	if p.CycleTimeUnit == src {
		return true
	} else if p.CycleTimeUnit == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CycleTimeUnit, *src) != 0 {
		return false
	}
	return true
}

type EffectiveTime struct {
	// ms timestamp
	StartAt *int64 `thrift:"start_at,1,optional" frugal:"1,optional,i64" form:"start_at" json:"start_at,omitempty" query:"start_at"`
	// ms timestamp
	EndAt *int64 `thrift:"end_at,2,optional" frugal:"2,optional,i64" form:"end_at" json:"end_at,omitempty" query:"end_at"`
}

func NewEffectiveTime() *EffectiveTime {
	return &EffectiveTime{}
}

func (p *EffectiveTime) InitDefault() {
}

var EffectiveTime_StartAt_DEFAULT int64

func (p *EffectiveTime) GetStartAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetStartAt() {
		return EffectiveTime_StartAt_DEFAULT
	}
	return *p.StartAt
}

var EffectiveTime_EndAt_DEFAULT int64

func (p *EffectiveTime) GetEndAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEndAt() {
		return EffectiveTime_EndAt_DEFAULT
	}
	return *p.EndAt
}
func (p *EffectiveTime) SetStartAt(val *int64) {
	p.StartAt = val
}
func (p *EffectiveTime) SetEndAt(val *int64) {
	p.EndAt = val
}

var fieldIDToName_EffectiveTime = map[int16]string{
	1: "start_at",
	2: "end_at",
}

func (p *EffectiveTime) IsSetStartAt() bool {
	return p.StartAt != nil
}

func (p *EffectiveTime) IsSetEndAt() bool {
	return p.EndAt != nil
}

func (p *EffectiveTime) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EffectiveTime[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EffectiveTime) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StartAt = _field
	return nil
}
func (p *EffectiveTime) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EndAt = _field
	return nil
}

func (p *EffectiveTime) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EffectiveTime"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EffectiveTime) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartAt() {
		if err = oprot.WriteFieldBegin("start_at", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.StartAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EffectiveTime) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndAt() {
		if err = oprot.WriteFieldBegin("end_at", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EndAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EffectiveTime) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EffectiveTime(%+v)", *p)

}

func (p *EffectiveTime) DeepEqual(ano *EffectiveTime) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.StartAt) {
		return false
	}
	if !p.Field2DeepEqual(ano.EndAt) {
		return false
	}
	return true
}

func (p *EffectiveTime) Field1DeepEqual(src *int64) bool {

	if p.StartAt == src {
		return true
	} else if p.StartAt == nil || src == nil {
		return false
	}
	if *p.StartAt != *src {
		return false
	}
	return true
}
func (p *EffectiveTime) Field2DeepEqual(src *int64) bool {

	if p.EndAt == src {
		return true
	} else if p.EndAt == nil || src == nil {
		return false
	}
	if *p.EndAt != *src {
		return false
	}
	return true
}

// TaskConfig
type TaskConfig struct {
	// 配置的评测规则信息
	AutoEvaluateConfigs []*AutoEvaluateConfig `thrift:"auto_evaluate_configs,1,optional" frugal:"1,optional,list<AutoEvaluateConfig>" form:"auto_evaluate_configs" json:"auto_evaluate_configs,omitempty" query:"auto_evaluate_configs"`
}

func NewTaskConfig() *TaskConfig {
	return &TaskConfig{}
}

func (p *TaskConfig) InitDefault() {
}

var TaskConfig_AutoEvaluateConfigs_DEFAULT []*AutoEvaluateConfig

func (p *TaskConfig) GetAutoEvaluateConfigs() (v []*AutoEvaluateConfig) {
	if p == nil {
		return
	}
	if !p.IsSetAutoEvaluateConfigs() {
		return TaskConfig_AutoEvaluateConfigs_DEFAULT
	}
	return p.AutoEvaluateConfigs
}
func (p *TaskConfig) SetAutoEvaluateConfigs(val []*AutoEvaluateConfig) {
	p.AutoEvaluateConfigs = val
}

var fieldIDToName_TaskConfig = map[int16]string{
	1: "auto_evaluate_configs",
}

func (p *TaskConfig) IsSetAutoEvaluateConfigs() bool {
	return p.AutoEvaluateConfigs != nil
}

func (p *TaskConfig) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TaskConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TaskConfig) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*AutoEvaluateConfig, 0, size)
	values := make([]AutoEvaluateConfig, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.AutoEvaluateConfigs = _field
	return nil
}

func (p *TaskConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TaskConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TaskConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAutoEvaluateConfigs() {
		if err = oprot.WriteFieldBegin("auto_evaluate_configs", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AutoEvaluateConfigs)); err != nil {
			return err
		}
		for _, v := range p.AutoEvaluateConfigs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TaskConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TaskConfig(%+v)", *p)

}

func (p *TaskConfig) DeepEqual(ano *TaskConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AutoEvaluateConfigs) {
		return false
	}
	return true
}

func (p *TaskConfig) Field1DeepEqual(src []*AutoEvaluateConfig) bool {

	if len(p.AutoEvaluateConfigs) != len(src) {
		return false
	}
	for i, v := range p.AutoEvaluateConfigs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type AutoEvaluateConfig struct {
	EvaluatorVersionID int64           `thrift:"evaluator_version_id,1,required" frugal:"1,required,i64" form:"evaluator_version_id,required" json:"evaluator_version_id,required" query:"evaluator_version_id,required"`
	EvaluatorID        int64           `thrift:"evaluator_id,2,required" frugal:"2,required,i64" form:"evaluator_id,required" json:"evaluator_id,required" query:"evaluator_id,required"`
	FieldMappings      []*FieldMapping `thrift:"field_mappings,3,required" frugal:"3,required,list<FieldMapping>" form:"field_mappings,required" json:"field_mappings,required" query:"field_mappings,required"`
}

func NewAutoEvaluateConfig() *AutoEvaluateConfig {
	return &AutoEvaluateConfig{}
}

func (p *AutoEvaluateConfig) InitDefault() {
}

func (p *AutoEvaluateConfig) GetEvaluatorVersionID() (v int64) {
	if p != nil {
		return p.EvaluatorVersionID
	}
	return
}

func (p *AutoEvaluateConfig) GetEvaluatorID() (v int64) {
	if p != nil {
		return p.EvaluatorID
	}
	return
}

func (p *AutoEvaluateConfig) GetFieldMappings() (v []*FieldMapping) {
	if p != nil {
		return p.FieldMappings
	}
	return
}
func (p *AutoEvaluateConfig) SetEvaluatorVersionID(val int64) {
	p.EvaluatorVersionID = val
}
func (p *AutoEvaluateConfig) SetEvaluatorID(val int64) {
	p.EvaluatorID = val
}
func (p *AutoEvaluateConfig) SetFieldMappings(val []*FieldMapping) {
	p.FieldMappings = val
}

var fieldIDToName_AutoEvaluateConfig = map[int16]string{
	1: "evaluator_version_id",
	2: "evaluator_id",
	3: "field_mappings",
}

func (p *AutoEvaluateConfig) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluatorVersionID bool = false
	var issetEvaluatorID bool = false
	var issetFieldMappings bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorVersionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetFieldMappings = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluatorVersionID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetFieldMappings {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AutoEvaluateConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AutoEvaluateConfig[fieldId]))
}

func (p *AutoEvaluateConfig) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorVersionID = _field
	return nil
}
func (p *AutoEvaluateConfig) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *AutoEvaluateConfig) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldMapping, 0, size)
	values := make([]FieldMapping, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FieldMappings = _field
	return nil
}

func (p *AutoEvaluateConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AutoEvaluateConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AutoEvaluateConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_version_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorVersionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *AutoEvaluateConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *AutoEvaluateConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("field_mappings", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FieldMappings)); err != nil {
		return err
	}
	for _, v := range p.FieldMappings {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AutoEvaluateConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AutoEvaluateConfig(%+v)", *p)

}

func (p *AutoEvaluateConfig) DeepEqual(ano *AutoEvaluateConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorVersionID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.FieldMappings) {
		return false
	}
	return true
}

func (p *AutoEvaluateConfig) Field1DeepEqual(src int64) bool {

	if p.EvaluatorVersionID != src {
		return false
	}
	return true
}
func (p *AutoEvaluateConfig) Field2DeepEqual(src int64) bool {

	if p.EvaluatorID != src {
		return false
	}
	return true
}
func (p *AutoEvaluateConfig) Field3DeepEqual(src []*FieldMapping) bool {

	if len(p.FieldMappings) != len(src) {
		return false
	}
	for i, v := range p.FieldMappings {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// TaskDetail
type TaskDetail struct {
	SuccessCount *int64 `thrift:"success_count,1,optional" frugal:"1,optional,i64" form:"success_count" json:"success_count,omitempty" query:"success_count"`
	FailedCount  *int64 `thrift:"failed_count,2,optional" frugal:"2,optional,i64" form:"failed_count" json:"failed_count,omitempty" query:"failed_count"`
}

func NewTaskDetail() *TaskDetail {
	return &TaskDetail{}
}

func (p *TaskDetail) InitDefault() {
}

var TaskDetail_SuccessCount_DEFAULT int64

func (p *TaskDetail) GetSuccessCount() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetSuccessCount() {
		return TaskDetail_SuccessCount_DEFAULT
	}
	return *p.SuccessCount
}

var TaskDetail_FailedCount_DEFAULT int64

func (p *TaskDetail) GetFailedCount() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetFailedCount() {
		return TaskDetail_FailedCount_DEFAULT
	}
	return *p.FailedCount
}
func (p *TaskDetail) SetSuccessCount(val *int64) {
	p.SuccessCount = val
}
func (p *TaskDetail) SetFailedCount(val *int64) {
	p.FailedCount = val
}

var fieldIDToName_TaskDetail = map[int16]string{
	1: "success_count",
	2: "failed_count",
}

func (p *TaskDetail) IsSetSuccessCount() bool {
	return p.SuccessCount != nil
}

func (p *TaskDetail) IsSetFailedCount() bool {
	return p.FailedCount != nil
}

func (p *TaskDetail) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TaskDetail[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TaskDetail) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SuccessCount = _field
	return nil
}
func (p *TaskDetail) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FailedCount = _field
	return nil
}

func (p *TaskDetail) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TaskDetail"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TaskDetail) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccessCount() {
		if err = oprot.WriteFieldBegin("success_count", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SuccessCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *TaskDetail) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFailedCount() {
		if err = oprot.WriteFieldBegin("failed_count", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.FailedCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TaskDetail) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TaskDetail(%+v)", *p)

}

func (p *TaskDetail) DeepEqual(ano *TaskDetail) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SuccessCount) {
		return false
	}
	if !p.Field2DeepEqual(ano.FailedCount) {
		return false
	}
	return true
}

func (p *TaskDetail) Field1DeepEqual(src *int64) bool {

	if p.SuccessCount == src {
		return true
	} else if p.SuccessCount == nil || src == nil {
		return false
	}
	if *p.SuccessCount != *src {
		return false
	}
	return true
}
func (p *TaskDetail) Field2DeepEqual(src *int64) bool {

	if p.FailedCount == src {
		return true
	} else if p.FailedCount == nil || src == nil {
		return false
	}
	if *p.FailedCount != *src {
		return false
	}
	return true
}

type FieldMapping struct {
	// 数据集字段约束
	FieldSchema        *dataset.FieldSchema `thrift:"field_schema,1,required" frugal:"1,required,dataset.FieldSchema" form:"field_schema,required" json:"field_schema,required" query:"field_schema,required"`
	TraceFieldKey      string               `thrift:"trace_field_key,2,required" frugal:"2,required,string" form:"trace_field_key,required" json:"trace_field_key,required" query:"trace_field_key,required"`
	TraceFieldJsonpath string               `thrift:"trace_field_jsonpath,3,required" frugal:"3,required,string" form:"trace_field_jsonpath,required" json:"trace_field_jsonpath,required" query:"trace_field_jsonpath,required"`
	EvalSetName        *string              `thrift:"eval_set_name,4,optional" frugal:"4,optional,string" form:"eval_set_name" json:"eval_set_name,omitempty" query:"eval_set_name"`
}

func NewFieldMapping() *FieldMapping {
	return &FieldMapping{}
}

func (p *FieldMapping) InitDefault() {
}

var FieldMapping_FieldSchema_DEFAULT *dataset.FieldSchema

func (p *FieldMapping) GetFieldSchema() (v *dataset.FieldSchema) {
	if p == nil {
		return
	}
	if !p.IsSetFieldSchema() {
		return FieldMapping_FieldSchema_DEFAULT
	}
	return p.FieldSchema
}

func (p *FieldMapping) GetTraceFieldKey() (v string) {
	if p != nil {
		return p.TraceFieldKey
	}
	return
}

func (p *FieldMapping) GetTraceFieldJsonpath() (v string) {
	if p != nil {
		return p.TraceFieldJsonpath
	}
	return
}

var FieldMapping_EvalSetName_DEFAULT string

func (p *FieldMapping) GetEvalSetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEvalSetName() {
		return FieldMapping_EvalSetName_DEFAULT
	}
	return *p.EvalSetName
}
func (p *FieldMapping) SetFieldSchema(val *dataset.FieldSchema) {
	p.FieldSchema = val
}
func (p *FieldMapping) SetTraceFieldKey(val string) {
	p.TraceFieldKey = val
}
func (p *FieldMapping) SetTraceFieldJsonpath(val string) {
	p.TraceFieldJsonpath = val
}
func (p *FieldMapping) SetEvalSetName(val *string) {
	p.EvalSetName = val
}

var fieldIDToName_FieldMapping = map[int16]string{
	1: "field_schema",
	2: "trace_field_key",
	3: "trace_field_jsonpath",
	4: "eval_set_name",
}

func (p *FieldMapping) IsSetFieldSchema() bool {
	return p.FieldSchema != nil
}

func (p *FieldMapping) IsSetEvalSetName() bool {
	return p.EvalSetName != nil
}

func (p *FieldMapping) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFieldSchema bool = false
	var issetTraceFieldKey bool = false
	var issetTraceFieldJsonpath bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFieldSchema = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTraceFieldKey = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetTraceFieldJsonpath = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFieldSchema {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTraceFieldKey {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTraceFieldJsonpath {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FieldMapping[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_FieldMapping[fieldId]))
}

func (p *FieldMapping) ReadField1(iprot thrift.TProtocol) error {
	_field := dataset.NewFieldSchema()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FieldSchema = _field
	return nil
}
func (p *FieldMapping) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TraceFieldKey = _field
	return nil
}
func (p *FieldMapping) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TraceFieldJsonpath = _field
	return nil
}
func (p *FieldMapping) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvalSetName = _field
	return nil
}

func (p *FieldMapping) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FieldMapping"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FieldMapping) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("field_schema", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.FieldSchema.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FieldMapping) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("trace_field_key", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TraceFieldKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *FieldMapping) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("trace_field_jsonpath", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TraceFieldJsonpath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *FieldMapping) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalSetName() {
		if err = oprot.WriteFieldBegin("eval_set_name", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EvalSetName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *FieldMapping) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldMapping(%+v)", *p)

}

func (p *FieldMapping) DeepEqual(ano *FieldMapping) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FieldSchema) {
		return false
	}
	if !p.Field2DeepEqual(ano.TraceFieldKey) {
		return false
	}
	if !p.Field3DeepEqual(ano.TraceFieldJsonpath) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvalSetName) {
		return false
	}
	return true
}

func (p *FieldMapping) Field1DeepEqual(src *dataset.FieldSchema) bool {

	if !p.FieldSchema.DeepEqual(src) {
		return false
	}
	return true
}
func (p *FieldMapping) Field2DeepEqual(src string) bool {

	if strings.Compare(p.TraceFieldKey, src) != 0 {
		return false
	}
	return true
}
func (p *FieldMapping) Field3DeepEqual(src string) bool {

	if strings.Compare(p.TraceFieldJsonpath, src) != 0 {
		return false
	}
	return true
}
func (p *FieldMapping) Field4DeepEqual(src *string) bool {

	if p.EvalSetName == src {
		return true
	} else if p.EvalSetName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EvalSetName, *src) != 0 {
		return false
	}
	return true
}

// TaskRun
type TaskRun struct {
	// 任务 run id
	ID *int64 `thrift:"id,1,optional" frugal:"1,optional,i64" form:"id" json:"id,omitempty" query:"id"`
	// 所在空间
	WorkspaceID *int64 `thrift:"workspace_id,2,optional" frugal:"2,optional,i64" form:"workspace_id" json:"workspace_id,omitempty" query:"workspace_id"`
	// 任务 id
	TaskID *int64 `thrift:"task_id,3,optional" frugal:"3,optional,i64" form:"task_id" json:"task_id,omitempty" query:"task_id"`
	// 类型
	TaskType   *TaskType `thrift:"task_type,4,optional" frugal:"4,optional,string" form:"task_type" json:"task_type,omitempty" query:"task_type"`
	StartRunAt int64     `thrift:"start_run_at,5,required" frugal:"5,required,i64" form:"start_run_at,required" json:"start_run_at,required" query:"start_run_at,required"`
	EndRunAt   int64     `thrift:"end_run_at,6,required" frugal:"6,required,i64" form:"end_run_at,required" json:"end_run_at,required" query:"end_run_at,required"`
	// 配置
	TaskRunConfig *TaskRunConfig `thrift:"task_run_config,7,optional" frugal:"7,optional,TaskRunConfig" form:"task_run_config" json:"task_run_config,omitempty" query:"task_run_config"`
}

func NewTaskRun() *TaskRun {
	return &TaskRun{}
}

func (p *TaskRun) InitDefault() {
}

var TaskRun_ID_DEFAULT int64

func (p *TaskRun) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return TaskRun_ID_DEFAULT
	}
	return *p.ID
}

var TaskRun_WorkspaceID_DEFAULT int64

func (p *TaskRun) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return TaskRun_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var TaskRun_TaskID_DEFAULT int64

func (p *TaskRun) GetTaskID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTaskID() {
		return TaskRun_TaskID_DEFAULT
	}
	return *p.TaskID
}

var TaskRun_TaskType_DEFAULT TaskType

func (p *TaskRun) GetTaskType() (v TaskType) {
	if p == nil {
		return
	}
	if !p.IsSetTaskType() {
		return TaskRun_TaskType_DEFAULT
	}
	return *p.TaskType
}

func (p *TaskRun) GetStartRunAt() (v int64) {
	if p != nil {
		return p.StartRunAt
	}
	return
}

func (p *TaskRun) GetEndRunAt() (v int64) {
	if p != nil {
		return p.EndRunAt
	}
	return
}

var TaskRun_TaskRunConfig_DEFAULT *TaskRunConfig

func (p *TaskRun) GetTaskRunConfig() (v *TaskRunConfig) {
	if p == nil {
		return
	}
	if !p.IsSetTaskRunConfig() {
		return TaskRun_TaskRunConfig_DEFAULT
	}
	return p.TaskRunConfig
}
func (p *TaskRun) SetID(val *int64) {
	p.ID = val
}
func (p *TaskRun) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *TaskRun) SetTaskID(val *int64) {
	p.TaskID = val
}
func (p *TaskRun) SetTaskType(val *TaskType) {
	p.TaskType = val
}
func (p *TaskRun) SetStartRunAt(val int64) {
	p.StartRunAt = val
}
func (p *TaskRun) SetEndRunAt(val int64) {
	p.EndRunAt = val
}
func (p *TaskRun) SetTaskRunConfig(val *TaskRunConfig) {
	p.TaskRunConfig = val
}

var fieldIDToName_TaskRun = map[int16]string{
	1: "id",
	2: "workspace_id",
	3: "task_id",
	4: "task_type",
	5: "start_run_at",
	6: "end_run_at",
	7: "task_run_config",
}

func (p *TaskRun) IsSetID() bool {
	return p.ID != nil
}

func (p *TaskRun) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *TaskRun) IsSetTaskID() bool {
	return p.TaskID != nil
}

func (p *TaskRun) IsSetTaskType() bool {
	return p.TaskType != nil
}

func (p *TaskRun) IsSetTaskRunConfig() bool {
	return p.TaskRunConfig != nil
}

func (p *TaskRun) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStartRunAt bool = false
	var issetEndRunAt bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartRunAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetEndRunAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStartRunAt {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetEndRunAt {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TaskRun[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TaskRun[fieldId]))
}

func (p *TaskRun) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *TaskRun) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *TaskRun) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TaskID = _field
	return nil
}
func (p *TaskRun) ReadField4(iprot thrift.TProtocol) error {

	var _field *TaskType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TaskType = _field
	return nil
}
func (p *TaskRun) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartRunAt = _field
	return nil
}
func (p *TaskRun) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndRunAt = _field
	return nil
}
func (p *TaskRun) ReadField7(iprot thrift.TProtocol) error {
	_field := NewTaskRunConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TaskRunConfig = _field
	return nil
}

func (p *TaskRun) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TaskRun"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TaskRun) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *TaskRun) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *TaskRun) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskID() {
		if err = oprot.WriteFieldBegin("task_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TaskID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *TaskRun) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskType() {
		if err = oprot.WriteFieldBegin("task_type", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TaskType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *TaskRun) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_run_at", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.StartRunAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *TaskRun) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_run_at", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EndRunAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *TaskRun) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskRunConfig() {
		if err = oprot.WriteFieldBegin("task_run_config", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TaskRunConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *TaskRun) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TaskRun(%+v)", *p)

}

func (p *TaskRun) DeepEqual(ano *TaskRun) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.TaskID) {
		return false
	}
	if !p.Field4DeepEqual(ano.TaskType) {
		return false
	}
	if !p.Field5DeepEqual(ano.StartRunAt) {
		return false
	}
	if !p.Field6DeepEqual(ano.EndRunAt) {
		return false
	}
	if !p.Field7DeepEqual(ano.TaskRunConfig) {
		return false
	}
	return true
}

func (p *TaskRun) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *TaskRun) Field2DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *TaskRun) Field3DeepEqual(src *int64) bool {

	if p.TaskID == src {
		return true
	} else if p.TaskID == nil || src == nil {
		return false
	}
	if *p.TaskID != *src {
		return false
	}
	return true
}
func (p *TaskRun) Field4DeepEqual(src *TaskType) bool {

	if p.TaskType == src {
		return true
	} else if p.TaskType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TaskType, *src) != 0 {
		return false
	}
	return true
}
func (p *TaskRun) Field5DeepEqual(src int64) bool {

	if p.StartRunAt != src {
		return false
	}
	return true
}
func (p *TaskRun) Field6DeepEqual(src int64) bool {

	if p.EndRunAt != src {
		return false
	}
	return true
}
func (p *TaskRun) Field7DeepEqual(src *TaskRunConfig) bool {

	if !p.TaskRunConfig.DeepEqual(src) {
		return false
	}
	return true
}

type TaskRunConfig struct {
	// 自动评测对应的运行配置信息
	AutoEvaluateRunConfig *AutoEvaluateRunConfig `thrift:"auto_evaluate_run_config,1,optional" frugal:"1,optional,AutoEvaluateRunConfig" form:"auto_evaluate_run_config" json:"auto_evaluate_run_config,omitempty" query:"auto_evaluate_run_config"`
}

func NewTaskRunConfig() *TaskRunConfig {
	return &TaskRunConfig{}
}

func (p *TaskRunConfig) InitDefault() {
}

var TaskRunConfig_AutoEvaluateRunConfig_DEFAULT *AutoEvaluateRunConfig

func (p *TaskRunConfig) GetAutoEvaluateRunConfig() (v *AutoEvaluateRunConfig) {
	if p == nil {
		return
	}
	if !p.IsSetAutoEvaluateRunConfig() {
		return TaskRunConfig_AutoEvaluateRunConfig_DEFAULT
	}
	return p.AutoEvaluateRunConfig
}
func (p *TaskRunConfig) SetAutoEvaluateRunConfig(val *AutoEvaluateRunConfig) {
	p.AutoEvaluateRunConfig = val
}

var fieldIDToName_TaskRunConfig = map[int16]string{
	1: "auto_evaluate_run_config",
}

func (p *TaskRunConfig) IsSetAutoEvaluateRunConfig() bool {
	return p.AutoEvaluateRunConfig != nil
}

func (p *TaskRunConfig) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TaskRunConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TaskRunConfig) ReadField1(iprot thrift.TProtocol) error {
	_field := NewAutoEvaluateRunConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AutoEvaluateRunConfig = _field
	return nil
}

func (p *TaskRunConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TaskRunConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TaskRunConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAutoEvaluateRunConfig() {
		if err = oprot.WriteFieldBegin("auto_evaluate_run_config", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AutoEvaluateRunConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TaskRunConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TaskRunConfig(%+v)", *p)

}

func (p *TaskRunConfig) DeepEqual(ano *TaskRunConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AutoEvaluateRunConfig) {
		return false
	}
	return true
}

func (p *TaskRunConfig) Field1DeepEqual(src *AutoEvaluateRunConfig) bool {

	if !p.AutoEvaluateRunConfig.DeepEqual(src) {
		return false
	}
	return true
}

type AutoEvaluateRunConfig struct {
	EvaluatorVersionID int64           `thrift:"evaluator_version_id,1,required" frugal:"1,required,i64" form:"evaluator_version_id,required" json:"evaluator_version_id,required" query:"evaluator_version_id,required"`
	EvaluatorID        int64           `thrift:"evaluator_id,2,required" frugal:"2,required,i64" form:"evaluator_id,required" json:"evaluator_id,required" query:"evaluator_id,required"`
	FieldMappings      []*FieldMapping `thrift:"field_mappings,3,required" frugal:"3,required,list<FieldMapping>" form:"field_mappings,required" json:"field_mappings,required" query:"field_mappings,required"`
}

func NewAutoEvaluateRunConfig() *AutoEvaluateRunConfig {
	return &AutoEvaluateRunConfig{}
}

func (p *AutoEvaluateRunConfig) InitDefault() {
}

func (p *AutoEvaluateRunConfig) GetEvaluatorVersionID() (v int64) {
	if p != nil {
		return p.EvaluatorVersionID
	}
	return
}

func (p *AutoEvaluateRunConfig) GetEvaluatorID() (v int64) {
	if p != nil {
		return p.EvaluatorID
	}
	return
}

func (p *AutoEvaluateRunConfig) GetFieldMappings() (v []*FieldMapping) {
	if p != nil {
		return p.FieldMappings
	}
	return
}
func (p *AutoEvaluateRunConfig) SetEvaluatorVersionID(val int64) {
	p.EvaluatorVersionID = val
}
func (p *AutoEvaluateRunConfig) SetEvaluatorID(val int64) {
	p.EvaluatorID = val
}
func (p *AutoEvaluateRunConfig) SetFieldMappings(val []*FieldMapping) {
	p.FieldMappings = val
}

var fieldIDToName_AutoEvaluateRunConfig = map[int16]string{
	1: "evaluator_version_id",
	2: "evaluator_id",
	3: "field_mappings",
}

func (p *AutoEvaluateRunConfig) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluatorVersionID bool = false
	var issetEvaluatorID bool = false
	var issetFieldMappings bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorVersionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetFieldMappings = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluatorVersionID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetFieldMappings {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AutoEvaluateRunConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AutoEvaluateRunConfig[fieldId]))
}

func (p *AutoEvaluateRunConfig) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorVersionID = _field
	return nil
}
func (p *AutoEvaluateRunConfig) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *AutoEvaluateRunConfig) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldMapping, 0, size)
	values := make([]FieldMapping, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FieldMappings = _field
	return nil
}

func (p *AutoEvaluateRunConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AutoEvaluateRunConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AutoEvaluateRunConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_version_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorVersionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *AutoEvaluateRunConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *AutoEvaluateRunConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("field_mappings", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FieldMappings)); err != nil {
		return err
	}
	for _, v := range p.FieldMappings {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AutoEvaluateRunConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AutoEvaluateRunConfig(%+v)", *p)

}

func (p *AutoEvaluateRunConfig) DeepEqual(ano *AutoEvaluateRunConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorVersionID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.FieldMappings) {
		return false
	}
	return true
}

func (p *AutoEvaluateRunConfig) Field1DeepEqual(src int64) bool {

	if p.EvaluatorVersionID != src {
		return false
	}
	return true
}
func (p *AutoEvaluateRunConfig) Field2DeepEqual(src int64) bool {

	if p.EvaluatorID != src {
		return false
	}
	return true
}
func (p *AutoEvaluateRunConfig) Field3DeepEqual(src []*FieldMapping) bool {

	if len(p.FieldMappings) != len(src) {
		return false
	}
	for i, v := range p.FieldMappings {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

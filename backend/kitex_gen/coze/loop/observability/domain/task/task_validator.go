// Code generated by Validator v0.2.6. DO NOT EDIT.

package task

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *Task) IsValid() error {
	if p.Rule != nil {
		if err := p.Rule.IsValid(); err != nil {
			return fmt.Errorf("field Rule not valid, %w", err)
		}
	}
	if p.TaskConfig != nil {
		if err := p.TaskConfig.IsValid(); err != nil {
			return fmt.Errorf("field TaskConfig not valid, %w", err)
		}
	}
	if p.TaskDetail != nil {
		if err := p.TaskDetail.IsValid(); err != nil {
			return fmt.Errorf("field TaskDetail not valid, %w", err)
		}
	}
	if p.BackfillTaskDetail != nil {
		if err := p.BackfillTaskDetail.IsValid(); err != nil {
			return fmt.Errorf("field BackfillTaskDetail not valid, %w", err)
		}
	}
	if p.BaseInfo != nil {
		if err := p.BaseInfo.IsValid(); err != nil {
			return fmt.Errorf("field BaseInfo not valid, %w", err)
		}
	}
	return nil
}
func (p *Rule) IsValid() error {
	if p.SpanFilters != nil {
		if err := p.SpanFilters.IsValid(); err != nil {
			return fmt.Errorf("field SpanFilters not valid, %w", err)
		}
	}
	if p.Sampler != nil {
		if err := p.Sampler.IsValid(); err != nil {
			return fmt.Errorf("field Sampler not valid, %w", err)
		}
	}
	if p.EffectiveTime != nil {
		if err := p.EffectiveTime.IsValid(); err != nil {
			return fmt.Errorf("field EffectiveTime not valid, %w", err)
		}
	}
	if p.BackfillEffectiveTime != nil {
		if err := p.BackfillEffectiveTime.IsValid(); err != nil {
			return fmt.Errorf("field BackfillEffectiveTime not valid, %w", err)
		}
	}
	return nil
}
func (p *Sampler) IsValid() error {
	return nil
}
func (p *EffectiveTime) IsValid() error {
	return nil
}
func (p *TaskConfig) IsValid() error {
	return nil
}
func (p *DataReflowConfig) IsValid() error {
	if p.DatasetSchema == nil {
		return fmt.Errorf("field DatasetSchema not_nil rule failed")
	}
	if err := p.DatasetSchema.IsValid(); err != nil {
		return fmt.Errorf("field DatasetSchema not valid, %w", err)
	}
	if len(p.FieldMappings) < int(1) {
		return fmt.Errorf("field FieldMappings MinLen rule failed, current value: %v", p.FieldMappings)
	}
	if len(p.FieldMappings) > int(100) {
		return fmt.Errorf("field FieldMappings MaxLen rule failed, current value: %v", p.FieldMappings)
	}
	return nil
}
func (p *AutoEvaluateConfig) IsValid() error {
	return nil
}
func (p *RunDetail) IsValid() error {
	return nil
}
func (p *BackfillDetail) IsValid() error {
	return nil
}
func (p *EvaluateFieldMapping) IsValid() error {
	if p.FieldSchema != nil {
		if err := p.FieldSchema.IsValid(); err != nil {
			return fmt.Errorf("field FieldSchema not valid, %w", err)
		}
	}
	return nil
}
func (p *TaskRun) IsValid() error {
	if p.RunDetail != nil {
		if err := p.RunDetail.IsValid(); err != nil {
			return fmt.Errorf("field RunDetail not valid, %w", err)
		}
	}
	if p.BackfillRunDetail != nil {
		if err := p.BackfillRunDetail.IsValid(); err != nil {
			return fmt.Errorf("field BackfillRunDetail not valid, %w", err)
		}
	}
	if p.TaskRunConfig != nil {
		if err := p.TaskRunConfig.IsValid(); err != nil {
			return fmt.Errorf("field TaskRunConfig not valid, %w", err)
		}
	}
	if p.BaseInfo != nil {
		if err := p.BaseInfo.IsValid(); err != nil {
			return fmt.Errorf("field BaseInfo not valid, %w", err)
		}
	}
	return nil
}
func (p *TaskRunConfig) IsValid() error {
	if p.AutoEvaluateRunConfig != nil {
		if err := p.AutoEvaluateRunConfig.IsValid(); err != nil {
			return fmt.Errorf("field AutoEvaluateRunConfig not valid, %w", err)
		}
	}
	if p.DataReflowRunConfig != nil {
		if err := p.DataReflowRunConfig.IsValid(); err != nil {
			return fmt.Errorf("field DataReflowRunConfig not valid, %w", err)
		}
	}
	return nil
}
func (p *AutoEvaluateRunConfig) IsValid() error {
	return nil
}
func (p *DataReflowRunConfig) IsValid() error {
	return nil
}

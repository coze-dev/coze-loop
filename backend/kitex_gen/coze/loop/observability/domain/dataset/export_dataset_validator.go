// Code generated by Validator v0.2.6. DO NOT EDIT.

package dataset

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *DatasetSchema) IsValid() error {
	return nil
}
func (p *FieldSchema) IsValid() error {
	if p.Name != nil {
		if len(*p.Name) < int(1) {
			return fmt.Errorf("field Name min_len rule failed, current value: %d", len(*p.Name))
		}
		if len(*p.Name) > int(128) {
			return fmt.Errorf("field Name max_len rule failed, current value: %d", len(*p.Name))
		}
	}
	if p.Description != nil {
		if len(*p.Description) > int(1024) {
			return fmt.Errorf("field Description max_len rule failed, current value: %d", len(*p.Description))
		}
	}
	if p.ContentType == nil {
		return fmt.Errorf("field ContentType not_nil rule failed")
	}
	if p.DefaultFormat != nil {
		if p.DefaultFormat.String() == "<UNSET>" {
			return fmt.Errorf("field DefaultFormat defined_only rule failed")
		}
	}
	return nil
}
func (p *Item) IsValid() error {
	return nil
}
func (p *FieldData) IsValid() error {
	if p.Content != nil {
		if err := p.Content.IsValid(); err != nil {
			return fmt.Errorf("field Content not valid, %w", err)
		}
	}
	return nil
}
func (p *Content) IsValid() error {
	if p.Image != nil {
		if err := p.Image.IsValid(); err != nil {
			return fmt.Errorf("field Image not valid, %w", err)
		}
	}
	return nil
}
func (p *Image) IsValid() error {
	return nil
}
func (p *ItemError) IsValid() error {
	return nil
}
func (p *FieldMapping) IsValid() error {
	if p.FieldSchema != nil {
		if err := p.FieldSchema.IsValid(); err != nil {
			return fmt.Errorf("field FieldSchema not valid, %w", err)
		}
	}
	return nil
}

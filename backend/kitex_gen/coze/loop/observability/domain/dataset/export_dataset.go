// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package dataset

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/domain/dataset"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/domain/common"
	"strings"
)

const (
	ExportTypeAppend = "append"

	ExportTypeOverwrite = "overwrite"

	ItemStatusSuccess = "success"

	ItemStatusError = "error"
)

type ExportType = string

type ItemStatus = string

// DatasetSchema 数据集 Schema，包含字段的类型限制等信息
type DatasetSchema struct {
	// 数据集字段约束
	FieldSchemas []*FieldSchema `thrift:"field_schemas,10,optional" frugal:"10,optional,list<FieldSchema>" form:"field_schemas" json:"field_schemas,omitempty" query:"field_schemas"`
}

func NewDatasetSchema() *DatasetSchema {
	return &DatasetSchema{}
}

func (p *DatasetSchema) InitDefault() {
}

var DatasetSchema_FieldSchemas_DEFAULT []*FieldSchema

func (p *DatasetSchema) GetFieldSchemas() (v []*FieldSchema) {
	if p == nil {
		return
	}
	if !p.IsSetFieldSchemas() {
		return DatasetSchema_FieldSchemas_DEFAULT
	}
	return p.FieldSchemas
}
func (p *DatasetSchema) SetFieldSchemas(val []*FieldSchema) {
	p.FieldSchemas = val
}

var fieldIDToName_DatasetSchema = map[int16]string{
	10: "field_schemas",
}

func (p *DatasetSchema) IsSetFieldSchemas() bool {
	return p.FieldSchemas != nil
}

func (p *DatasetSchema) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetSchema[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetSchema) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldSchema, 0, size)
	values := make([]FieldSchema, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FieldSchemas = _field
	return nil
}

func (p *DatasetSchema) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DatasetSchema"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetSchema) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldSchemas() {
		if err = oprot.WriteFieldBegin("field_schemas", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FieldSchemas)); err != nil {
			return err
		}
		for _, v := range p.FieldSchemas {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *DatasetSchema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetSchema(%+v)", *p)

}

func (p *DatasetSchema) DeepEqual(ano *DatasetSchema) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field10DeepEqual(ano.FieldSchemas) {
		return false
	}
	return true
}

func (p *DatasetSchema) Field10DeepEqual(src []*FieldSchema) bool {

	if len(p.FieldSchemas) != len(src) {
		return false
	}
	for i, v := range p.FieldSchemas {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type FieldSchema struct {
	// 数据集 schema 版本变化中 key 唯一，新建时自动生成，不需传入
	Key *string `thrift:"key,1,optional" frugal:"1,optional,string" form:"key" json:"key,omitempty" query:"key"`
	// 展示名称
	Name *string `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty" query:"name"`
	// 描述
	Description *string `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty" query:"description"`
	// 类型，如 文本，图片，etc.
	ContentType *common.ContentType `thrift:"content_type,4,optional" frugal:"4,optional,string" form:"content_type" json:"content_type,omitempty" query:"content_type"`
	// 默认渲染格式，如 code, json, etc.
	DefaultFormat *dataset.FieldDisplayFormat `thrift:"default_format,5,optional" frugal:"5,optional,FieldDisplayFormat" form:"default_format" json:"default_format,omitempty" query:"default_format"`
	/* [20,50) 内容格式限制相关 */
	TextSchema *string `thrift:"text_schema,20,optional" frugal:"20,optional,string" form:"text_schema" json:"text_schema,omitempty" query:"text_schema"`
}

func NewFieldSchema() *FieldSchema {
	return &FieldSchema{}
}

func (p *FieldSchema) InitDefault() {
}

var FieldSchema_Key_DEFAULT string

func (p *FieldSchema) GetKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetKey() {
		return FieldSchema_Key_DEFAULT
	}
	return *p.Key
}

var FieldSchema_Name_DEFAULT string

func (p *FieldSchema) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return FieldSchema_Name_DEFAULT
	}
	return *p.Name
}

var FieldSchema_Description_DEFAULT string

func (p *FieldSchema) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return FieldSchema_Description_DEFAULT
	}
	return *p.Description
}

var FieldSchema_ContentType_DEFAULT common.ContentType

func (p *FieldSchema) GetContentType() (v common.ContentType) {
	if p == nil {
		return
	}
	if !p.IsSetContentType() {
		return FieldSchema_ContentType_DEFAULT
	}
	return *p.ContentType
}

var FieldSchema_DefaultFormat_DEFAULT dataset.FieldDisplayFormat

func (p *FieldSchema) GetDefaultFormat() (v dataset.FieldDisplayFormat) {
	if p == nil {
		return
	}
	if !p.IsSetDefaultFormat() {
		return FieldSchema_DefaultFormat_DEFAULT
	}
	return *p.DefaultFormat
}

var FieldSchema_TextSchema_DEFAULT string

func (p *FieldSchema) GetTextSchema() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTextSchema() {
		return FieldSchema_TextSchema_DEFAULT
	}
	return *p.TextSchema
}
func (p *FieldSchema) SetKey(val *string) {
	p.Key = val
}
func (p *FieldSchema) SetName(val *string) {
	p.Name = val
}
func (p *FieldSchema) SetDescription(val *string) {
	p.Description = val
}
func (p *FieldSchema) SetContentType(val *common.ContentType) {
	p.ContentType = val
}
func (p *FieldSchema) SetDefaultFormat(val *dataset.FieldDisplayFormat) {
	p.DefaultFormat = val
}
func (p *FieldSchema) SetTextSchema(val *string) {
	p.TextSchema = val
}

var fieldIDToName_FieldSchema = map[int16]string{
	1:  "key",
	2:  "name",
	3:  "description",
	4:  "content_type",
	5:  "default_format",
	20: "text_schema",
}

func (p *FieldSchema) IsSetKey() bool {
	return p.Key != nil
}

func (p *FieldSchema) IsSetName() bool {
	return p.Name != nil
}

func (p *FieldSchema) IsSetDescription() bool {
	return p.Description != nil
}

func (p *FieldSchema) IsSetContentType() bool {
	return p.ContentType != nil
}

func (p *FieldSchema) IsSetDefaultFormat() bool {
	return p.DefaultFormat != nil
}

func (p *FieldSchema) IsSetTextSchema() bool {
	return p.TextSchema != nil
}

func (p *FieldSchema) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FieldSchema[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FieldSchema) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}
func (p *FieldSchema) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *FieldSchema) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *FieldSchema) ReadField4(iprot thrift.TProtocol) error {

	var _field *common.ContentType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ContentType = _field
	return nil
}
func (p *FieldSchema) ReadField5(iprot thrift.TProtocol) error {

	var _field *dataset.FieldDisplayFormat
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := dataset.FieldDisplayFormat(v)
		_field = &tmp
	}
	p.DefaultFormat = _field
	return nil
}
func (p *FieldSchema) ReadField20(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TextSchema = _field
	return nil
}

func (p *FieldSchema) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FieldSchema"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FieldSchema) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FieldSchema) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *FieldSchema) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *FieldSchema) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentType() {
		if err = oprot.WriteFieldBegin("content_type", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ContentType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *FieldSchema) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultFormat() {
		if err = oprot.WriteFieldBegin("default_format", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.DefaultFormat)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *FieldSchema) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetTextSchema() {
		if err = oprot.WriteFieldBegin("text_schema", thrift.STRING, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TextSchema); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}

func (p *FieldSchema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldSchema(%+v)", *p)

}

func (p *FieldSchema) DeepEqual(ano *FieldSchema) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.ContentType) {
		return false
	}
	if !p.Field5DeepEqual(ano.DefaultFormat) {
		return false
	}
	if !p.Field20DeepEqual(ano.TextSchema) {
		return false
	}
	return true
}

func (p *FieldSchema) Field1DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field4DeepEqual(src *common.ContentType) bool {

	if p.ContentType == src {
		return true
	} else if p.ContentType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ContentType, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field5DeepEqual(src *dataset.FieldDisplayFormat) bool {

	if p.DefaultFormat == src {
		return true
	} else if p.DefaultFormat == nil || src == nil {
		return false
	}
	if *p.DefaultFormat != *src {
		return false
	}
	return true
}
func (p *FieldSchema) Field20DeepEqual(src *string) bool {

	if p.TextSchema == src {
		return true
	} else if p.TextSchema == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TextSchema, *src) != 0 {
		return false
	}
	return true
}

type Item struct {
	Status ItemStatus `thrift:"status,1,required" frugal:"1,required,string" form:"status,required" json:"status,required" query:"status,required"`
	// todo 多模态需要修改
	FieldList []*FieldData `thrift:"field_list,2,optional" frugal:"2,optional,list<FieldData>" form:"field_list" json:"field_list,omitempty" query:"field_list"`
	// 错误信息
	Errors []*ItemError `thrift:"errors,3,optional" frugal:"3,optional,list<ItemError>" form:"errors" json:"errors,omitempty" query:"errors"`
}

func NewItem() *Item {
	return &Item{}
}

func (p *Item) InitDefault() {
}

func (p *Item) GetStatus() (v ItemStatus) {
	if p != nil {
		return p.Status
	}
	return
}

var Item_FieldList_DEFAULT []*FieldData

func (p *Item) GetFieldList() (v []*FieldData) {
	if p == nil {
		return
	}
	if !p.IsSetFieldList() {
		return Item_FieldList_DEFAULT
	}
	return p.FieldList
}

var Item_Errors_DEFAULT []*ItemError

func (p *Item) GetErrors() (v []*ItemError) {
	if p == nil {
		return
	}
	if !p.IsSetErrors() {
		return Item_Errors_DEFAULT
	}
	return p.Errors
}
func (p *Item) SetStatus(val ItemStatus) {
	p.Status = val
}
func (p *Item) SetFieldList(val []*FieldData) {
	p.FieldList = val
}
func (p *Item) SetErrors(val []*ItemError) {
	p.Errors = val
}

var fieldIDToName_Item = map[int16]string{
	1: "status",
	2: "field_list",
	3: "errors",
}

func (p *Item) IsSetFieldList() bool {
	return p.FieldList != nil
}

func (p *Item) IsSetErrors() bool {
	return p.Errors != nil
}

func (p *Item) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStatus {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Item[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Item[fieldId]))
}

func (p *Item) ReadField1(iprot thrift.TProtocol) error {

	var _field ItemStatus
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *Item) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldData, 0, size)
	values := make([]FieldData, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FieldList = _field
	return nil
}
func (p *Item) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ItemError, 0, size)
	values := make([]ItemError, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Errors = _field
	return nil
}

func (p *Item) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Item"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Item) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Item) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldList() {
		if err = oprot.WriteFieldBegin("field_list", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FieldList)); err != nil {
			return err
		}
		for _, v := range p.FieldList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Item) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrors() {
		if err = oprot.WriteFieldBegin("errors", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Errors)); err != nil {
			return err
		}
		for _, v := range p.Errors {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Item) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Item(%+v)", *p)

}

func (p *Item) DeepEqual(ano *Item) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Status) {
		return false
	}
	if !p.Field2DeepEqual(ano.FieldList) {
		return false
	}
	if !p.Field3DeepEqual(ano.Errors) {
		return false
	}
	return true
}

func (p *Item) Field1DeepEqual(src ItemStatus) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *Item) Field2DeepEqual(src []*FieldData) bool {

	if len(p.FieldList) != len(src) {
		return false
	}
	for i, v := range p.FieldList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Item) Field3DeepEqual(src []*ItemError) bool {

	if len(p.Errors) != len(src) {
		return false
	}
	for i, v := range p.Errors {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type FieldData struct {
	Key     *string  `thrift:"key,1,optional" frugal:"1,optional,string" form:"key" json:"key,omitempty" query:"key"`
	Name    *string  `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Content *Content `thrift:"content,3,optional" frugal:"3,optional,Content" form:"content" json:"content,omitempty" query:"content"`
}

func NewFieldData() *FieldData {
	return &FieldData{}
}

func (p *FieldData) InitDefault() {
}

var FieldData_Key_DEFAULT string

func (p *FieldData) GetKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetKey() {
		return FieldData_Key_DEFAULT
	}
	return *p.Key
}

var FieldData_Name_DEFAULT string

func (p *FieldData) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return FieldData_Name_DEFAULT
	}
	return *p.Name
}

var FieldData_Content_DEFAULT *Content

func (p *FieldData) GetContent() (v *Content) {
	if p == nil {
		return
	}
	if !p.IsSetContent() {
		return FieldData_Content_DEFAULT
	}
	return p.Content
}
func (p *FieldData) SetKey(val *string) {
	p.Key = val
}
func (p *FieldData) SetName(val *string) {
	p.Name = val
}
func (p *FieldData) SetContent(val *Content) {
	p.Content = val
}

var fieldIDToName_FieldData = map[int16]string{
	1: "key",
	2: "name",
	3: "content",
}

func (p *FieldData) IsSetKey() bool {
	return p.Key != nil
}

func (p *FieldData) IsSetName() bool {
	return p.Name != nil
}

func (p *FieldData) IsSetContent() bool {
	return p.Content != nil
}

func (p *FieldData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FieldData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FieldData) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}
func (p *FieldData) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *FieldData) ReadField3(iprot thrift.TProtocol) error {
	_field := NewContent()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Content = _field
	return nil
}

func (p *FieldData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FieldData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FieldData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FieldData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *FieldData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Content.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *FieldData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldData(%+v)", *p)

}

func (p *FieldData) DeepEqual(ano *FieldData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Content) {
		return false
	}
	return true
}

func (p *FieldData) Field1DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldData) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldData) Field3DeepEqual(src *Content) bool {

	if !p.Content.DeepEqual(src) {
		return false
	}
	return true
}

type Content struct {
	ContentType *common.ContentType `thrift:"contentType,1,optional" frugal:"1,optional,string" json:"content_type" form:"contentType" query:"contentType"`
	Text        *string             `thrift:"text,10,optional" frugal:"10,optional,string" json:"text" form:"text" query:"text"`
	// 图片内容
	Image *Image `thrift:"image,11,optional" frugal:"11,optional,Image" json:"image" form:"image" query:"image"`
	// 图文混排时，图文内容
	MultiPart []*Content `thrift:"multiPart,12,optional" frugal:"12,optional,list<Content>" json:"multi_part" form:"multiPart" query:"multiPart"`
}

func NewContent() *Content {
	return &Content{}
}

func (p *Content) InitDefault() {
}

var Content_ContentType_DEFAULT common.ContentType

func (p *Content) GetContentType() (v common.ContentType) {
	if p == nil {
		return
	}
	if !p.IsSetContentType() {
		return Content_ContentType_DEFAULT
	}
	return *p.ContentType
}

var Content_Text_DEFAULT string

func (p *Content) GetText() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetText() {
		return Content_Text_DEFAULT
	}
	return *p.Text
}

var Content_Image_DEFAULT *Image

func (p *Content) GetImage() (v *Image) {
	if p == nil {
		return
	}
	if !p.IsSetImage() {
		return Content_Image_DEFAULT
	}
	return p.Image
}

var Content_MultiPart_DEFAULT []*Content

func (p *Content) GetMultiPart() (v []*Content) {
	if p == nil {
		return
	}
	if !p.IsSetMultiPart() {
		return Content_MultiPart_DEFAULT
	}
	return p.MultiPart
}
func (p *Content) SetContentType(val *common.ContentType) {
	p.ContentType = val
}
func (p *Content) SetText(val *string) {
	p.Text = val
}
func (p *Content) SetImage(val *Image) {
	p.Image = val
}
func (p *Content) SetMultiPart(val []*Content) {
	p.MultiPart = val
}

var fieldIDToName_Content = map[int16]string{
	1:  "contentType",
	10: "text",
	11: "image",
	12: "multiPart",
}

func (p *Content) IsSetContentType() bool {
	return p.ContentType != nil
}

func (p *Content) IsSetText() bool {
	return p.Text != nil
}

func (p *Content) IsSetImage() bool {
	return p.Image != nil
}

func (p *Content) IsSetMultiPart() bool {
	return p.MultiPart != nil
}

func (p *Content) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Content[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Content) ReadField1(iprot thrift.TProtocol) error {

	var _field *common.ContentType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ContentType = _field
	return nil
}
func (p *Content) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Text = _field
	return nil
}
func (p *Content) ReadField11(iprot thrift.TProtocol) error {
	_field := NewImage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Image = _field
	return nil
}
func (p *Content) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Content, 0, size)
	values := make([]Content, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MultiPart = _field
	return nil
}

func (p *Content) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Content"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Content) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentType() {
		if err = oprot.WriteFieldBegin("contentType", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ContentType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Content) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetText() {
		if err = oprot.WriteFieldBegin("text", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Text); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *Content) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetImage() {
		if err = oprot.WriteFieldBegin("image", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Image.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *Content) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetMultiPart() {
		if err = oprot.WriteFieldBegin("multiPart", thrift.LIST, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MultiPart)); err != nil {
			return err
		}
		for _, v := range p.MultiPart {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *Content) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Content(%+v)", *p)

}

func (p *Content) DeepEqual(ano *Content) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ContentType) {
		return false
	}
	if !p.Field10DeepEqual(ano.Text) {
		return false
	}
	if !p.Field11DeepEqual(ano.Image) {
		return false
	}
	if !p.Field12DeepEqual(ano.MultiPart) {
		return false
	}
	return true
}

func (p *Content) Field1DeepEqual(src *common.ContentType) bool {

	if p.ContentType == src {
		return true
	} else if p.ContentType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ContentType, *src) != 0 {
		return false
	}
	return true
}
func (p *Content) Field10DeepEqual(src *string) bool {

	if p.Text == src {
		return true
	} else if p.Text == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Text, *src) != 0 {
		return false
	}
	return true
}
func (p *Content) Field11DeepEqual(src *Image) bool {

	if !p.Image.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Content) Field12DeepEqual(src []*Content) bool {

	if len(p.MultiPart) != len(src) {
		return false
	}
	for i, v := range p.MultiPart {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type Image struct {
	Name *string `thrift:"name,1,optional" frugal:"1,optional,string" json:"name" form:"name" query:"name"`
	URL  *string `thrift:"url,2,optional" frugal:"2,optional,string" json:"url" form:"url" query:"url"`
}

func NewImage() *Image {
	return &Image{}
}

func (p *Image) InitDefault() {
}

var Image_Name_DEFAULT string

func (p *Image) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return Image_Name_DEFAULT
	}
	return *p.Name
}

var Image_URL_DEFAULT string

func (p *Image) GetURL() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetURL() {
		return Image_URL_DEFAULT
	}
	return *p.URL
}
func (p *Image) SetName(val *string) {
	p.Name = val
}
func (p *Image) SetURL(val *string) {
	p.URL = val
}

var fieldIDToName_Image = map[int16]string{
	1: "name",
	2: "url",
}

func (p *Image) IsSetName() bool {
	return p.Name != nil
}

func (p *Image) IsSetURL() bool {
	return p.URL != nil
}

func (p *Image) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Image[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Image) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *Image) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.URL = _field
	return nil
}

func (p *Image) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Image"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Image) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Image) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetURL() {
		if err = oprot.WriteFieldBegin("url", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.URL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Image) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Image(%+v)", *p)

}

func (p *Image) DeepEqual(ano *Image) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.URL) {
		return false
	}
	return true
}

func (p *Image) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *Image) Field2DeepEqual(src *string) bool {

	if p.URL == src {
		return true
	} else if p.URL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.URL, *src) != 0 {
		return false
	}
	return true
}

type ItemError struct {
	Type *dataset.ItemErrorType `thrift:"type,1,optional" frugal:"1,optional,ItemErrorType" form:"type" json:"type,omitempty" query:"type"`
	// 有错误的字段名，非必填
	FieldNames []string `thrift:"field_names,2,optional" frugal:"2,optional,list<string>" form:"field_names" json:"field_names,omitempty" query:"field_names"`
}

func NewItemError() *ItemError {
	return &ItemError{}
}

func (p *ItemError) InitDefault() {
}

var ItemError_Type_DEFAULT dataset.ItemErrorType

func (p *ItemError) GetType() (v dataset.ItemErrorType) {
	if p == nil {
		return
	}
	if !p.IsSetType() {
		return ItemError_Type_DEFAULT
	}
	return *p.Type
}

var ItemError_FieldNames_DEFAULT []string

func (p *ItemError) GetFieldNames() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetFieldNames() {
		return ItemError_FieldNames_DEFAULT
	}
	return p.FieldNames
}
func (p *ItemError) SetType(val *dataset.ItemErrorType) {
	p.Type = val
}
func (p *ItemError) SetFieldNames(val []string) {
	p.FieldNames = val
}

var fieldIDToName_ItemError = map[int16]string{
	1: "type",
	2: "field_names",
}

func (p *ItemError) IsSetType() bool {
	return p.Type != nil
}

func (p *ItemError) IsSetFieldNames() bool {
	return p.FieldNames != nil
}

func (p *ItemError) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItemError[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItemError) ReadField1(iprot thrift.TProtocol) error {

	var _field *dataset.ItemErrorType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := dataset.ItemErrorType(v)
		_field = &tmp
	}
	p.Type = _field
	return nil
}
func (p *ItemError) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FieldNames = _field
	return nil
}

func (p *ItemError) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ItemError"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItemError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ItemError) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldNames() {
		if err = oprot.WriteFieldBegin("field_names", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.FieldNames)); err != nil {
			return err
		}
		for _, v := range p.FieldNames {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ItemError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemError(%+v)", *p)

}

func (p *ItemError) DeepEqual(ano *ItemError) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.FieldNames) {
		return false
	}
	return true
}

func (p *ItemError) Field1DeepEqual(src *dataset.ItemErrorType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if *p.Type != *src {
		return false
	}
	return true
}
func (p *ItemError) Field2DeepEqual(src []string) bool {

	if len(p.FieldNames) != len(src) {
		return false
	}
	for i, v := range p.FieldNames {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type FieldMapping struct {
	// 数据集字段约束
	FieldSchema        *FieldSchema `thrift:"field_schema,1,required" frugal:"1,required,FieldSchema" form:"field_schema,required" json:"field_schema,required" query:"field_schema,required"`
	TraceFieldKey      string       `thrift:"trace_field_key,2,required" frugal:"2,required,string" form:"trace_field_key,required" json:"trace_field_key,required" query:"trace_field_key,required"`
	TraceFieldJsonpath string       `thrift:"trace_field_jsonpath,3,required" frugal:"3,required,string" form:"trace_field_jsonpath,required" json:"trace_field_jsonpath,required" query:"trace_field_jsonpath,required"`
}

func NewFieldMapping() *FieldMapping {
	return &FieldMapping{}
}

func (p *FieldMapping) InitDefault() {
}

var FieldMapping_FieldSchema_DEFAULT *FieldSchema

func (p *FieldMapping) GetFieldSchema() (v *FieldSchema) {
	if p == nil {
		return
	}
	if !p.IsSetFieldSchema() {
		return FieldMapping_FieldSchema_DEFAULT
	}
	return p.FieldSchema
}

func (p *FieldMapping) GetTraceFieldKey() (v string) {
	if p != nil {
		return p.TraceFieldKey
	}
	return
}

func (p *FieldMapping) GetTraceFieldJsonpath() (v string) {
	if p != nil {
		return p.TraceFieldJsonpath
	}
	return
}
func (p *FieldMapping) SetFieldSchema(val *FieldSchema) {
	p.FieldSchema = val
}
func (p *FieldMapping) SetTraceFieldKey(val string) {
	p.TraceFieldKey = val
}
func (p *FieldMapping) SetTraceFieldJsonpath(val string) {
	p.TraceFieldJsonpath = val
}

var fieldIDToName_FieldMapping = map[int16]string{
	1: "field_schema",
	2: "trace_field_key",
	3: "trace_field_jsonpath",
}

func (p *FieldMapping) IsSetFieldSchema() bool {
	return p.FieldSchema != nil
}

func (p *FieldMapping) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFieldSchema bool = false
	var issetTraceFieldKey bool = false
	var issetTraceFieldJsonpath bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFieldSchema = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTraceFieldKey = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetTraceFieldJsonpath = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFieldSchema {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTraceFieldKey {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTraceFieldJsonpath {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FieldMapping[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_FieldMapping[fieldId]))
}

func (p *FieldMapping) ReadField1(iprot thrift.TProtocol) error {
	_field := NewFieldSchema()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FieldSchema = _field
	return nil
}
func (p *FieldMapping) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TraceFieldKey = _field
	return nil
}
func (p *FieldMapping) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TraceFieldJsonpath = _field
	return nil
}

func (p *FieldMapping) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FieldMapping"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FieldMapping) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("field_schema", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.FieldSchema.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FieldMapping) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("trace_field_key", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TraceFieldKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *FieldMapping) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("trace_field_jsonpath", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TraceFieldJsonpath); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *FieldMapping) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldMapping(%+v)", *p)

}

func (p *FieldMapping) DeepEqual(ano *FieldMapping) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FieldSchema) {
		return false
	}
	if !p.Field2DeepEqual(ano.TraceFieldKey) {
		return false
	}
	if !p.Field3DeepEqual(ano.TraceFieldJsonpath) {
		return false
	}
	return true
}

func (p *FieldMapping) Field1DeepEqual(src *FieldSchema) bool {

	if !p.FieldSchema.DeepEqual(src) {
		return false
	}
	return true
}
func (p *FieldMapping) Field2DeepEqual(src string) bool {

	if strings.Compare(p.TraceFieldKey, src) != 0 {
		return false
	}
	return true
}
func (p *FieldMapping) Field3DeepEqual(src string) bool {

	if strings.Compare(p.TraceFieldJsonpath, src) != 0 {
		return false
	}
	return true
}

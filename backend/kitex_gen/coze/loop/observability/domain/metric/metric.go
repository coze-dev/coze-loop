// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package metric

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

const (
	CompareTypeYoY = "yoy"

	CompareTypeMoM = "mom"

	DrillDownValueTypeModelName = "model_name"

	DrillDownValueTypeToolName = "tool_name"
)

type CompareType = string

type DrillDownValueType = string

type Metric struct {
	Summary    *string                   `thrift:"summary,1,optional" frugal:"1,optional,string" form:"summary" json:"summary,omitempty" query:"summary"`
	Pie        map[string]string         `thrift:"pie,2,optional" frugal:"2,optional,map<string:string>" form:"pie" json:"pie,omitempty" query:"pie"`
	TimeSeries map[string][]*MetricPoint `thrift:"time_series,3,optional" frugal:"3,optional,map<string:list<MetricPoint>>" form:"time_series" json:"time_series,omitempty" query:"time_series"`
}

func NewMetric() *Metric {
	return &Metric{}
}

func (p *Metric) InitDefault() {
}

var Metric_Summary_DEFAULT string

func (p *Metric) GetSummary() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSummary() {
		return Metric_Summary_DEFAULT
	}
	return *p.Summary
}

var Metric_Pie_DEFAULT map[string]string

func (p *Metric) GetPie() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetPie() {
		return Metric_Pie_DEFAULT
	}
	return p.Pie
}

var Metric_TimeSeries_DEFAULT map[string][]*MetricPoint

func (p *Metric) GetTimeSeries() (v map[string][]*MetricPoint) {
	if p == nil {
		return
	}
	if !p.IsSetTimeSeries() {
		return Metric_TimeSeries_DEFAULT
	}
	return p.TimeSeries
}
func (p *Metric) SetSummary(val *string) {
	p.Summary = val
}
func (p *Metric) SetPie(val map[string]string) {
	p.Pie = val
}
func (p *Metric) SetTimeSeries(val map[string][]*MetricPoint) {
	p.TimeSeries = val
}

var fieldIDToName_Metric = map[int16]string{
	1: "summary",
	2: "pie",
	3: "time_series",
}

func (p *Metric) IsSetSummary() bool {
	return p.Summary != nil
}

func (p *Metric) IsSetPie() bool {
	return p.Pie != nil
}

func (p *Metric) IsSetTimeSeries() bool {
	return p.TimeSeries != nil
}

func (p *Metric) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Metric[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Metric) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Summary = _field
	return nil
}
func (p *Metric) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Pie = _field
	return nil
}
func (p *Metric) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string][]*MetricPoint, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return err
		}
		_val := make([]*MetricPoint, 0, size)
		values := make([]MetricPoint, size)
		for i := 0; i < size; i++ {
			_elem := &values[i]
			_elem.InitDefault()

			if err := _elem.Read(iprot); err != nil {
				return err
			}

			_val = append(_val, _elem)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.TimeSeries = _field
	return nil
}

func (p *Metric) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Metric"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Metric) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSummary() {
		if err = oprot.WriteFieldBegin("summary", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Summary); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Metric) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPie() {
		if err = oprot.WriteFieldBegin("pie", thrift.MAP, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Pie)); err != nil {
			return err
		}
		for k, v := range p.Pie {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Metric) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeSeries() {
		if err = oprot.WriteFieldBegin("time_series", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.TimeSeries)); err != nil {
			return err
		}
		for k, v := range p.TimeSeries {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
				return err
			}
			for _, v := range v {
				if err := v.Write(oprot); err != nil {
					return err
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Metric) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Metric(%+v)", *p)

}

func (p *Metric) DeepEqual(ano *Metric) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Summary) {
		return false
	}
	if !p.Field2DeepEqual(ano.Pie) {
		return false
	}
	if !p.Field3DeepEqual(ano.TimeSeries) {
		return false
	}
	return true
}

func (p *Metric) Field1DeepEqual(src *string) bool {

	if p.Summary == src {
		return true
	} else if p.Summary == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Summary, *src) != 0 {
		return false
	}
	return true
}
func (p *Metric) Field2DeepEqual(src map[string]string) bool {

	if len(p.Pie) != len(src) {
		return false
	}
	for k, v := range p.Pie {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *Metric) Field3DeepEqual(src map[string][]*MetricPoint) bool {

	if len(p.TimeSeries) != len(src) {
		return false
	}
	for k, v := range p.TimeSeries {
		_src := src[k]
		if len(v) != len(_src) {
			return false
		}
		for i, v := range v {
			_src1 := _src[i]
			if !v.DeepEqual(_src1) {
				return false
			}
		}
	}
	return true
}

type MetricPoint struct {
	Timestamp *string `thrift:"timestamp,1,optional" frugal:"1,optional,string" form:"timestamp" json:"timestamp,omitempty" query:"timestamp"`
	Value     *string `thrift:"value,2,optional" frugal:"2,optional,string" form:"value" json:"value,omitempty" query:"value"`
}

func NewMetricPoint() *MetricPoint {
	return &MetricPoint{}
}

func (p *MetricPoint) InitDefault() {
}

var MetricPoint_Timestamp_DEFAULT string

func (p *MetricPoint) GetTimestamp() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTimestamp() {
		return MetricPoint_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var MetricPoint_Value_DEFAULT string

func (p *MetricPoint) GetValue() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetValue() {
		return MetricPoint_Value_DEFAULT
	}
	return *p.Value
}
func (p *MetricPoint) SetTimestamp(val *string) {
	p.Timestamp = val
}
func (p *MetricPoint) SetValue(val *string) {
	p.Value = val
}

var fieldIDToName_MetricPoint = map[int16]string{
	1: "timestamp",
	2: "value",
}

func (p *MetricPoint) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *MetricPoint) IsSetValue() bool {
	return p.Value != nil
}

func (p *MetricPoint) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MetricPoint[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MetricPoint) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Timestamp = _field
	return nil
}
func (p *MetricPoint) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Value = _field
	return nil
}

func (p *MetricPoint) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MetricPoint"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MetricPoint) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err = oprot.WriteFieldBegin("timestamp", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Timestamp); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *MetricPoint) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err = oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Value); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MetricPoint) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MetricPoint(%+v)", *p)

}

func (p *MetricPoint) DeepEqual(ano *MetricPoint) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Timestamp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Value) {
		return false
	}
	return true
}

func (p *MetricPoint) Field1DeepEqual(src *string) bool {

	if p.Timestamp == src {
		return true
	} else if p.Timestamp == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Timestamp, *src) != 0 {
		return false
	}
	return true
}
func (p *MetricPoint) Field2DeepEqual(src *string) bool {

	if p.Value == src {
		return true
	} else if p.Value == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Value, *src) != 0 {
		return false
	}
	return true
}

type Compare struct {
	CompareType  *CompareType `thrift:"compare_type,1,optional" frugal:"1,optional,string" form:"compare_type" json:"compare_type,omitempty" query:"compare_type"`
	ShiftSeconds *int64       `thrift:"shift_seconds,2,optional" frugal:"2,optional,i64" json:"shift_seconds" form:"shift_seconds" query:"shift_seconds"`
}

func NewCompare() *Compare {
	return &Compare{}
}

func (p *Compare) InitDefault() {
}

var Compare_CompareType_DEFAULT CompareType

func (p *Compare) GetCompareType() (v CompareType) {
	if p == nil {
		return
	}
	if !p.IsSetCompareType() {
		return Compare_CompareType_DEFAULT
	}
	return *p.CompareType
}

var Compare_ShiftSeconds_DEFAULT int64

func (p *Compare) GetShiftSeconds() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetShiftSeconds() {
		return Compare_ShiftSeconds_DEFAULT
	}
	return *p.ShiftSeconds
}
func (p *Compare) SetCompareType(val *CompareType) {
	p.CompareType = val
}
func (p *Compare) SetShiftSeconds(val *int64) {
	p.ShiftSeconds = val
}

var fieldIDToName_Compare = map[int16]string{
	1: "compare_type",
	2: "shift_seconds",
}

func (p *Compare) IsSetCompareType() bool {
	return p.CompareType != nil
}

func (p *Compare) IsSetShiftSeconds() bool {
	return p.ShiftSeconds != nil
}

func (p *Compare) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Compare[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Compare) ReadField1(iprot thrift.TProtocol) error {

	var _field *CompareType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CompareType = _field
	return nil
}
func (p *Compare) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ShiftSeconds = _field
	return nil
}

func (p *Compare) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Compare"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Compare) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompareType() {
		if err = oprot.WriteFieldBegin("compare_type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CompareType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Compare) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetShiftSeconds() {
		if err = oprot.WriteFieldBegin("shift_seconds", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ShiftSeconds); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Compare) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Compare(%+v)", *p)

}

func (p *Compare) DeepEqual(ano *Compare) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CompareType) {
		return false
	}
	if !p.Field2DeepEqual(ano.ShiftSeconds) {
		return false
	}
	return true
}

func (p *Compare) Field1DeepEqual(src *CompareType) bool {

	if p.CompareType == src {
		return true
	} else if p.CompareType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CompareType, *src) != 0 {
		return false
	}
	return true
}
func (p *Compare) Field2DeepEqual(src *int64) bool {

	if p.ShiftSeconds == src {
		return true
	} else if p.ShiftSeconds == nil || src == nil {
		return false
	}
	if *p.ShiftSeconds != *src {
		return false
	}
	return true
}

// Code generated by Kitex v0.13.1. DO NOT EDIT.

package observabilitytaskservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	task "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/task"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CheckTaskName(ctx context.Context, req *task.CheckTaskNameRequest, callOptions ...callopt.Option) (r *task.CheckTaskNameResponse, err error)
	CreateTask(ctx context.Context, req *task.CreateTaskRequest, callOptions ...callopt.Option) (r *task.CreateTaskResponse, err error)
	UpdateTask(ctx context.Context, req *task.UpdateTaskRequest, callOptions ...callopt.Option) (r *task.UpdateTaskResponse, err error)
	ListTasks(ctx context.Context, req *task.ListTasksRequest, callOptions ...callopt.Option) (r *task.ListTasksResponse, err error)
	GetTask(ctx context.Context, req *task.GetTaskRequest, callOptions ...callopt.Option) (r *task.GetTaskResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kObservabilityTaskServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kObservabilityTaskServiceClient struct {
	*kClient
}

func (p *kObservabilityTaskServiceClient) CheckTaskName(ctx context.Context, req *task.CheckTaskNameRequest, callOptions ...callopt.Option) (r *task.CheckTaskNameResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckTaskName(ctx, req)
}

func (p *kObservabilityTaskServiceClient) CreateTask(ctx context.Context, req *task.CreateTaskRequest, callOptions ...callopt.Option) (r *task.CreateTaskResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateTask(ctx, req)
}

func (p *kObservabilityTaskServiceClient) UpdateTask(ctx context.Context, req *task.UpdateTaskRequest, callOptions ...callopt.Option) (r *task.UpdateTaskResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateTask(ctx, req)
}

func (p *kObservabilityTaskServiceClient) ListTasks(ctx context.Context, req *task.ListTasksRequest, callOptions ...callopt.Option) (r *task.ListTasksResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListTasks(ctx, req)
}

func (p *kObservabilityTaskServiceClient) GetTask(ctx context.Context, req *task.GetTaskRequest, callOptions ...callopt.Option) (r *task.GetTaskResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTask(ctx, req)
}

// Copyright (c) 2025 coze-dev Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by hertz generator.

package apis

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/eval_target"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/evaltargetservice"
)

var localEvalTargetSvc evaltargetservice.Client

// CreateEvalTarget .
// @router /api/evaluation/v2/eval_targets [POST]
func CreateEvalTarget(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalTargetSvc.CreateEvalTarget)
}

// BatchGetEvalTargetsBySource .
// @router /api/evaluation/v2/eval_targets/batch_get_by_source [POST]
func BatchGetEvalTargetsBySource(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalTargetSvc.BatchGetEvalTargetsBySource)
}

// GetEvalTargetVersion .
// @router /api/evaluation/v2/eval_targets/versions/:eval_target_version_id [GET]
func GetEvalTargetVersion(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalTargetSvc.GetEvalTargetVersion)
}

// BatchGetEvalTargetVersions .
// @router /api/evaluation/v2/eval_target_versions/batch_get [POST]
func BatchGetEvalTargetVersions(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalTargetSvc.BatchGetEvalTargetVersions)
}

// ListSourceEvalTargets .
// @router /api/evaluation/v2/eval_targets/list_source [POST]
func ListSourceEvalTargets(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalTargetSvc.ListSourceEvalTargets)
}

// ListSourceEvalTargetVersions .
// @router /api/evaluation/v2/eval_targets/list_source_version [POST]
func ListSourceEvalTargetVersions(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalTargetSvc.ListSourceEvalTargetVersions)
}

// ExecuteEvalTarget .
// @router /api/evaluation/v2/eval_targets/execute [POST]
func ExecuteEvalTarget(ctx context.Context, c *app.RequestContext) {
	var err error
	var req eval_target.ExecuteEvalTargetRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(eval_target.ExecuteEvalTargetResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetEvalTargetRecord .
// @router /api/evaluation/v2/eval_targets/records/:eval_target_record_id [GET]
func GetEvalTargetRecord(ctx context.Context, c *app.RequestContext) {
	var err error
	var req eval_target.GetEvalTargetRecordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(eval_target.GetEvalTargetRecordResponse)

	c.JSON(consts.StatusOK, resp)
}

// BatchGetEvalTargetRecords
// @router /api/evaluation/v2/eval_targets/records/batch_get [POST]
func BatchGetEvalTargetRecords(ctx context.Context, c *app.RequestContext) {
	var err error
	var req eval_target.BatchGetEvalTargetRecordsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(eval_target.BatchGetEvalTargetRecordsResponse)

	c.JSON(consts.StatusOK, resp)
}

// BatchGetSourceEvalTargets .
// @router /api/evaluation/v1/eval_targets/batch_get_source [POST]
func BatchGetSourceEvalTargets(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalTargetSvc.BatchGetSourceEvalTargets)
}

// SearchCustomEvalTarget .
// @router /api/evaluation/v1/eval_targets/search_custom [POST]
func SearchCustomEvalTarget(ctx context.Context, c *app.RequestContext) {
	var err error
	var req eval_target.SearchCustomEvalTargetRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(eval_target.SearchCustomEvalTargetResponse)

	c.JSON(consts.StatusOK, resp)
}

// DebugEvalTarget .
// @router /api/evaluation/v1/eval_targets/debug [POST]
func DebugEvalTarget(ctx context.Context, c *app.RequestContext) {
	var err error
	var req eval_target.DebugEvalTargetRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(eval_target.DebugEvalTargetResponse)

	c.JSON(consts.StatusOK, resp)
}

// AsyncDebugEvalTarget .
// @router /api/evaluation/v1/eval_targets/async_debug [POST]
func AsyncDebugEvalTarget(ctx context.Context, c *app.RequestContext) {
	var err error
	var req eval_target.AsyncDebugEvalTargetRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(eval_target.AsyncDebugEvalTargetResponse)

	c.JSON(consts.StatusOK, resp)
}

// PassbackEvalTargetInvokeResult .
// @router /api/evaluation/v1/eval_targets/passback_result [POST]
func PassbackEvalTargetInvokeResult(ctx context.Context, c *app.RequestContext) {
	var err error
	var req eval_target.PassbackEvalTargetInvokeResultRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(eval_target.PassbackEvalTargetInvokeResultResponse)

	c.JSON(consts.StatusOK, resp)
}

// Copyright (c) 2025 coze-dev Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by hertz generator.

package apis

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/evalopenapiservice"
	openapi0 "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/openapi"
)

var localEvalOpenAPIClient evalopenapiservice.Client

// ReportEvalTargetInvokeResult .
// @router /v1/loop/evaluation/eval_targets/result [POST]
func ReportEvalTargetInvokeResult(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalOpenAPIClient.ReportEvalTargetInvokeResult_)
}

// CreateEvaluationSetOApi .
// @router /v1/loop/evaluation/evaluation_sets [POST]
func CreateEvaluationSetOApi(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalOpenAPIClient.CreateEvaluationSetOApi)
}

// GetEvaluationSetOApi .
// @router /v1/loop/evaluation/evaluation_sets/:evaluation_set_id [GET]
func GetEvaluationSetOApi(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalOpenAPIClient.GetEvaluationSetOApi)
}

// ListEvaluationSetsOApi .
// @router /v1/loop/evaluation/evaluation_sets [GET]
func ListEvaluationSetsOApi(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalOpenAPIClient.ListEvaluationSetsOApi)
}

// CreateEvaluationSetVersionOApi .
// @router /v1/loop/evaluation/evaluation_sets/:evaluation_set_id/versions [POST]
func CreateEvaluationSetVersionOApi(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalOpenAPIClient.CreateEvaluationSetVersionOApi)
}

// ListEvaluationSetVersionsOApi .
// @router /v1/loop/evaluation/evaluation_sets/:evaluation_set_id/versions [GET]
func ListEvaluationSetVersionsOApi(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalOpenAPIClient.ListEvaluationSetVersionsOApi)
}

// BatchCreateEvaluationSetItemsOApi .
// @router /v1/loop/evaluation/evaluation_sets/:evaluation_set_id/items [POST]
func BatchCreateEvaluationSetItemsOApi(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalOpenAPIClient.BatchCreateEvaluationSetItemsOApi)
}

// BatchUpdateEvaluationSetItemsOApi .
// @router /v1/loop/evaluation/evaluation_sets/:evaluation_set_id/items [PUT]
func BatchUpdateEvaluationSetItemsOApi(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalOpenAPIClient.BatchUpdateEvaluationSetItemsOApi)
}

// BatchDeleteEvaluationSetItemsOApi .
// @router /v1/loop/evaluation/evaluation_sets/:evaluation_set_id/items [DELETE]
func BatchDeleteEvaluationSetItemsOApi(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalOpenAPIClient.BatchDeleteEvaluationSetItemsOApi)
}

// ListEvaluationSetVersionItemsOApi .
// @router /v1/loop/evaluation/evaluation_sets/:evaluation_set_id/items [GET]
func ListEvaluationSetVersionItemsOApi(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalOpenAPIClient.ListEvaluationSetVersionItemsOApi)
}

// UpdateEvaluationSetSchemaOApi .
// @router /v1/loop/evaluation/evaluation_sets/:evaluation_set_id/schema [PUT]
func UpdateEvaluationSetSchemaOApi(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localEvalOpenAPIClient.UpdateEvaluationSetSchemaOApi)
}

// SubmitExperimentOApi .
// @router /v1/loop/evaluation/experiments [POST]
func SubmitExperimentOApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req openapi0.SubmitExperimentOApiRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(openapi0.SubmitExperimentOApiResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetExperimentsOApi .
// @router /api/evaluation/v1/experiments/:experiment_id [GET]
func GetExperimentsOApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req openapi0.GetExperimentsOApiRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(openapi0.GetExperimentsOApiResponse)

	c.JSON(consts.StatusOK, resp)
}

// ListExperimentResultOApi .
// @router /v1/loop/evaluation/experiments/:experiment_id/results [POST]
func ListExperimentResultOApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req openapi0.ListExperimentResultOApiRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(openapi0.ListExperimentResultOApiResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetExperimentAggrResultOApi .
// @router /v1/loop/evaluation/experiments/:experiment_id/aggr_results [POST]
func GetExperimentAggrResultOApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req openapi0.GetExperimentAggrResultOApiRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(openapi0.GetExperimentAggrResultOApiResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpdateEvaluationSetOApi .
// @router /v1/loop/evaluation/evaluation_sets/:evaluation_set_id [PATCH]
func UpdateEvaluationSetOApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req openapi0.UpdateEvaluationSetOApiRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(openapi0.UpdateEvaluationSetOApiResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteEvaluationSetOApi .
// @router /v1/loop/evaluation/evaluation_sets/:evaluation_set_id [DELETE]
func DeleteEvaluationSetOApi(ctx context.Context, c *app.RequestContext) {
	var err error
	var req openapi0.DeleteEvaluationSetOApiRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(openapi0.DeleteEvaluationSetOApiResponse)

	c.JSON(consts.StatusOK, resp)
}

// Code generated by cozeloop. DO NOT EDIT.
package lotask // import github.com/coze-dev/coze-loop/backend/lotask

import (
	"context"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/task"
)

type LocalTaskService struct {
	impl task.TaskService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalTaskService(impl task.TaskService, mds ...endpoint.Middleware) *LocalTaskService {
	return &LocalTaskService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

func (l *LocalTaskService) CheckTaskName(ctx context.Context, req *task.CheckTaskNameRequest, callOptions ...callopt.Option) (*task.CheckTaskNameResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*task.TaskServiceCheckTaskNameArgs)
		result := out.(*task.TaskServiceCheckTaskNameResult)
		resp, err := l.impl.CheckTaskName(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &task.TaskServiceCheckTaskNameArgs{Req: req}
	result := &task.TaskServiceCheckTaskNameResult{}
	ctx = l.injectRPCInfo(ctx, "CheckTaskName")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalTaskService) CreateTask(ctx context.Context, req *task.CreateTaskRequest, callOptions ...callopt.Option) (*task.CreateTaskResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*task.TaskServiceCreateTaskArgs)
		result := out.(*task.TaskServiceCreateTaskResult)
		resp, err := l.impl.CreateTask(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &task.TaskServiceCreateTaskArgs{Req: req}
	result := &task.TaskServiceCreateTaskResult{}
	ctx = l.injectRPCInfo(ctx, "CreateTask")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalTaskService) UpdateTask(ctx context.Context, req *task.UpdateTaskRequest, callOptions ...callopt.Option) (*task.UpdateTaskResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*task.TaskServiceUpdateTaskArgs)
		result := out.(*task.TaskServiceUpdateTaskResult)
		resp, err := l.impl.UpdateTask(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &task.TaskServiceUpdateTaskArgs{Req: req}
	result := &task.TaskServiceUpdateTaskResult{}
	ctx = l.injectRPCInfo(ctx, "UpdateTask")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalTaskService) ListTasks(ctx context.Context, req *task.ListTasksRequest, callOptions ...callopt.Option) (*task.ListTasksResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*task.TaskServiceListTasksArgs)
		result := out.(*task.TaskServiceListTasksResult)
		resp, err := l.impl.ListTasks(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &task.TaskServiceListTasksArgs{Req: req}
	result := &task.TaskServiceListTasksResult{}
	ctx = l.injectRPCInfo(ctx, "ListTasks")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalTaskService) GetTask(ctx context.Context, req *task.GetTaskRequest, callOptions ...callopt.Option) (*task.GetTaskResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*task.TaskServiceGetTaskArgs)
		result := out.(*task.TaskServiceGetTaskResult)
		resp, err := l.impl.GetTask(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &task.TaskServiceGetTaskArgs{Req: req}
	result := &task.TaskServiceGetTaskResult{}
	ctx = l.injectRPCInfo(ctx, "GetTask")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalTaskService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("TaskService", method, nil, nil),
		rpcinfo.NewEndpointInfo("TaskService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}

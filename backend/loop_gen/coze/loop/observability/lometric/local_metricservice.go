// Code generated by cozeloop. DO NOT EDIT.
package lometric // import github.com/coze-dev/coze-loop/backend/lometric

import (
	"context"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/metric"
)

type LocalMetricService struct {
	impl metric.MetricService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalMetricService(impl metric.MetricService, mds ...endpoint.Middleware) *LocalMetricService {
	return &LocalMetricService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

func (l *LocalMetricService) GetMetrics(ctx context.Context, Req *metric.GetMetricsRequest, callOptions ...callopt.Option) (*metric.GetMetricsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*metric.MetricServiceGetMetricsArgs)
		result := out.(*metric.MetricServiceGetMetricsResult)
		resp, err := l.impl.GetMetrics(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &metric.MetricServiceGetMetricsArgs{Req: Req}
	result := &metric.MetricServiceGetMetricsResult{}
	ctx = l.injectRPCInfo(ctx, "GetMetrics")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalMetricService) GetDrillDownValues(ctx context.Context, Req *metric.GetDrillDownValuesRequest, callOptions ...callopt.Option) (*metric.GetDrillDownValuesResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*metric.MetricServiceGetDrillDownValuesArgs)
		result := out.(*metric.MetricServiceGetDrillDownValuesResult)
		resp, err := l.impl.GetDrillDownValues(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &metric.MetricServiceGetDrillDownValuesArgs{Req: Req}
	result := &metric.MetricServiceGetDrillDownValuesResult{}
	ctx = l.injectRPCInfo(ctx, "GetDrillDownValues")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalMetricService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("MetricService", method, nil, nil),
		rpcinfo.NewEndpointInfo("MetricService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}

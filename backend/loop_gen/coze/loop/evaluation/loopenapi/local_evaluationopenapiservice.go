// Code generated by cozeloop. DO NOT EDIT.
package loopenapi // import github.com/coze-dev/coze-loop/backend/loopenapi

import (
	"context"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/openapi"
)

type LocalEvaluationOpenAPIService struct {
	impl openapi.EvaluationOpenAPIService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalEvaluationOpenAPIService(impl openapi.EvaluationOpenAPIService, mds ...endpoint.Middleware) *LocalEvaluationOpenAPIService {
	return &LocalEvaluationOpenAPIService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

// CreateEvaluationSet
// 评测集接口 (9个)
// 1.1 创建评测集
func (l *LocalEvaluationOpenAPIService) CreateEvaluationSet(ctx context.Context, req *openapi.CreateEvaluationSetOpenAPIRequest, callOptions ...callopt.Option) (*openapi.CreateEvaluationSetOpenAPIResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceCreateEvaluationSetArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceCreateEvaluationSetResult)
		resp, err := l.impl.CreateEvaluationSet(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceCreateEvaluationSetArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceCreateEvaluationSetResult{}
	ctx = l.injectRPCInfo(ctx, "CreateEvaluationSet")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// GetEvaluationSet
// 1.2 获取评测集详情
func (l *LocalEvaluationOpenAPIService) GetEvaluationSet(ctx context.Context, req *openapi.GetEvaluationSetOpenAPIRequest, callOptions ...callopt.Option) (*openapi.GetEvaluationSetOpenAPIResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceGetEvaluationSetArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceGetEvaluationSetResult)
		resp, err := l.impl.GetEvaluationSet(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceGetEvaluationSetArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceGetEvaluationSetResult{}
	ctx = l.injectRPCInfo(ctx, "GetEvaluationSet")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// ListEvaluationSets
// 1.3 查询评测集列表
func (l *LocalEvaluationOpenAPIService) ListEvaluationSets(ctx context.Context, req *openapi.ListEvaluationSetsOpenAPIRequest, callOptions ...callopt.Option) (*openapi.ListEvaluationSetsOpenAPIResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceListEvaluationSetsArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceListEvaluationSetsResult)
		resp, err := l.impl.ListEvaluationSets(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceListEvaluationSetsArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceListEvaluationSetsResult{}
	ctx = l.injectRPCInfo(ctx, "ListEvaluationSets")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// CreateEvaluationSetVersion
// 1.4 创建评测集版本
func (l *LocalEvaluationOpenAPIService) CreateEvaluationSetVersion(ctx context.Context, req *openapi.CreateEvaluationSetVersionOpenAPIRequest, callOptions ...callopt.Option) (*openapi.CreateEvaluationSetVersionOpenAPIResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceCreateEvaluationSetVersionResult)
		resp, err := l.impl.CreateEvaluationSetVersion(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceCreateEvaluationSetVersionArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceCreateEvaluationSetVersionResult{}
	ctx = l.injectRPCInfo(ctx, "CreateEvaluationSetVersion")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// BatchCreateEvaluationSetItems
// 1.5 批量添加评测集数据
func (l *LocalEvaluationOpenAPIService) BatchCreateEvaluationSetItems(ctx context.Context, req *openapi.BatchCreateEvaluationSetItemsOpenAPIRequest, callOptions ...callopt.Option) (*openapi.BatchCreateEvaluationSetItemsOpenAPIResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult)
		resp, err := l.impl.BatchCreateEvaluationSetItems(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsResult{}
	ctx = l.injectRPCInfo(ctx, "BatchCreateEvaluationSetItems")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// BatchUpdateEvaluationSetItems
// 1.6 批量更新评测集数据
func (l *LocalEvaluationOpenAPIService) BatchUpdateEvaluationSetItems(ctx context.Context, req *openapi.BatchUpdateEvaluationSetItemsOpenAPIRequest, callOptions ...callopt.Option) (*openapi.BatchUpdateEvaluationSetItemsOpenAPIResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult)
		resp, err := l.impl.BatchUpdateEvaluationSetItems(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsResult{}
	ctx = l.injectRPCInfo(ctx, "BatchUpdateEvaluationSetItems")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// BatchDeleteEvaluationSetItems
// 1.7 批量删除评测集数据
func (l *LocalEvaluationOpenAPIService) BatchDeleteEvaluationSetItems(ctx context.Context, req *openapi.BatchDeleteEvaluationSetItemsOpenAPIRequest, callOptions ...callopt.Option) (*openapi.BatchDeleteEvaluationSetItemsOpenAPIResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult)
		resp, err := l.impl.BatchDeleteEvaluationSetItems(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsResult{}
	ctx = l.injectRPCInfo(ctx, "BatchDeleteEvaluationSetItems")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// ClearEvaluationSetDraftItems
// 1.8 清空评测集草稿数据
func (l *LocalEvaluationOpenAPIService) ClearEvaluationSetDraftItems(ctx context.Context, req *openapi.ClearEvaluationSetDraftItemsOpenAPIRequest, callOptions ...callopt.Option) (*openapi.ClearEvaluationSetDraftItemsOpenAPIResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult)
		resp, err := l.impl.ClearEvaluationSetDraftItems(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceClearEvaluationSetDraftItemsArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceClearEvaluationSetDraftItemsResult{}
	ctx = l.injectRPCInfo(ctx, "ClearEvaluationSetDraftItems")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// ListEvaluationSetVersionItems
// 1.9 查询评测集特定版本数据
func (l *LocalEvaluationOpenAPIService) ListEvaluationSetVersionItems(ctx context.Context, req *openapi.ListEvaluationSetVersionItemsOpenAPIRequest, callOptions ...callopt.Option) (*openapi.ListEvaluationSetVersionItemsOpenAPIResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult)
		resp, err := l.impl.ListEvaluationSetVersionItems(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceListEvaluationSetVersionItemsArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceListEvaluationSetVersionItemsResult{}
	ctx = l.injectRPCInfo(ctx, "ListEvaluationSetVersionItems")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// CreateEvaluator
// 评估器接口 (5个)
// 2.1 创建评估器
func (l *LocalEvaluationOpenAPIService) CreateEvaluator(ctx context.Context, req *openapi.CreateEvaluatorOpenAPIRequest, callOptions ...callopt.Option) (*openapi.CreateEvaluatorOpenAPIResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceCreateEvaluatorArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceCreateEvaluatorResult)
		resp, err := l.impl.CreateEvaluator(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceCreateEvaluatorArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceCreateEvaluatorResult{}
	ctx = l.injectRPCInfo(ctx, "CreateEvaluator")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// SubmitEvaluatorVersion
// 2.2 提交评估器版本
func (l *LocalEvaluationOpenAPIService) SubmitEvaluatorVersion(ctx context.Context, req *openapi.SubmitEvaluatorVersionOpenAPIRequest, callOptions ...callopt.Option) (*openapi.SubmitEvaluatorVersionOpenAPIResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceSubmitEvaluatorVersionResult)
		resp, err := l.impl.SubmitEvaluatorVersion(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceSubmitEvaluatorVersionArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceSubmitEvaluatorVersionResult{}
	ctx = l.injectRPCInfo(ctx, "SubmitEvaluatorVersion")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// GetEvaluatorVersion
// 2.3 获取评估器版本详情
func (l *LocalEvaluationOpenAPIService) GetEvaluatorVersion(ctx context.Context, req *openapi.GetEvaluatorVersionOpenAPIRequest, callOptions ...callopt.Option) (*openapi.GetEvaluatorVersionOpenAPIResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceGetEvaluatorVersionArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceGetEvaluatorVersionResult)
		resp, err := l.impl.GetEvaluatorVersion(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceGetEvaluatorVersionArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceGetEvaluatorVersionResult{}
	ctx = l.injectRPCInfo(ctx, "GetEvaluatorVersion")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// RunEvaluator
// 2.4 执行评估器
func (l *LocalEvaluationOpenAPIService) RunEvaluator(ctx context.Context, req *openapi.RunEvaluatorOpenAPIRequest, callOptions ...callopt.Option) (*openapi.RunEvaluatorOpenAPIResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceRunEvaluatorArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceRunEvaluatorResult)
		resp, err := l.impl.RunEvaluator(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceRunEvaluatorArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceRunEvaluatorResult{}
	ctx = l.injectRPCInfo(ctx, "RunEvaluator")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// GetEvaluatorRecord
// 2.5 获取评估器执行结果
func (l *LocalEvaluationOpenAPIService) GetEvaluatorRecord(ctx context.Context, req *openapi.GetEvaluatorRecordOpenAPIRequest, callOptions ...callopt.Option) (*openapi.GetEvaluatorRecordOpenAPIResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceGetEvaluatorRecordArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceGetEvaluatorRecordResult)
		resp, err := l.impl.GetEvaluatorRecord(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceGetEvaluatorRecordArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceGetEvaluatorRecordResult{}
	ctx = l.injectRPCInfo(ctx, "GetEvaluatorRecord")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// CreateExperiment
// 评测实验接口 (2个)
// 3.1 创建评测实验
func (l *LocalEvaluationOpenAPIService) CreateExperiment(ctx context.Context, req *openapi.CreateExperimentOpenAPIRequest, callOptions ...callopt.Option) (*openapi.CreateExperimentOpenAPIResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceCreateExperimentArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceCreateExperimentResult)
		resp, err := l.impl.CreateExperiment(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceCreateExperimentArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceCreateExperimentResult{}
	ctx = l.injectRPCInfo(ctx, "CreateExperiment")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// GetExperimentResult_
// 3.2 获取评测实验结果
func (l *LocalEvaluationOpenAPIService) GetExperimentResult_(ctx context.Context, req *openapi.GetExperimentResultOpenAPIRequest, callOptions ...callopt.Option) (*openapi.GetExperimentResultOpenAPIResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceGetExperimentResultArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceGetExperimentResultResult)
		resp, err := l.impl.GetExperimentResult_(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceGetExperimentResultArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceGetExperimentResultResult{}
	ctx = l.injectRPCInfo(ctx, "GetExperimentResult_")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationOpenAPIService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("EvaluationOpenAPIService", method, nil, nil),
		rpcinfo.NewEndpointInfo("EvaluationOpenAPIService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}

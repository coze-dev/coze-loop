// Code generated by cozeloop. DO NOT EDIT.
package loopenapi // import github.com/coze-dev/coze-loop/backend/loopenapi

import (
	"context"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/openapi"
)

type LocalEvaluationOpenAPIService struct {
	impl openapi.EvaluationOpenAPIService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalEvaluationOpenAPIService(impl openapi.EvaluationOpenAPIService, mds ...endpoint.Middleware) *LocalEvaluationOpenAPIService {
	return &LocalEvaluationOpenAPIService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

// CreateEvaluationSetOApi
// 评测集接口
// 创建评测集
func (l *LocalEvaluationOpenAPIService) CreateEvaluationSetOApi(ctx context.Context, req *openapi.CreateEvaluationSetOApiRequest, callOptions ...callopt.Option) (*openapi.CreateEvaluationSetOApiResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceCreateEvaluationSetOApiResult)
		resp, err := l.impl.CreateEvaluationSetOApi(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceCreateEvaluationSetOApiArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceCreateEvaluationSetOApiResult{}
	ctx = l.injectRPCInfo(ctx, "CreateEvaluationSetOApi")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// GetEvaluationSetOApi
// 获取评测集详情
func (l *LocalEvaluationOpenAPIService) GetEvaluationSetOApi(ctx context.Context, req *openapi.GetEvaluationSetOApiRequest, callOptions ...callopt.Option) (*openapi.GetEvaluationSetOApiResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceGetEvaluationSetOApiArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceGetEvaluationSetOApiResult)
		resp, err := l.impl.GetEvaluationSetOApi(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceGetEvaluationSetOApiArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceGetEvaluationSetOApiResult{}
	ctx = l.injectRPCInfo(ctx, "GetEvaluationSetOApi")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// ListEvaluationSetsOApi
// 查询评测集列表
func (l *LocalEvaluationOpenAPIService) ListEvaluationSetsOApi(ctx context.Context, req *openapi.ListEvaluationSetsOApiRequest, callOptions ...callopt.Option) (*openapi.ListEvaluationSetsOApiResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceListEvaluationSetsOApiArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceListEvaluationSetsOApiResult)
		resp, err := l.impl.ListEvaluationSetsOApi(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceListEvaluationSetsOApiArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceListEvaluationSetsOApiResult{}
	ctx = l.injectRPCInfo(ctx, "ListEvaluationSetsOApi")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// CreateEvaluationSetVersionOApi
// 创建评测集版本
func (l *LocalEvaluationOpenAPIService) CreateEvaluationSetVersionOApi(ctx context.Context, req *openapi.CreateEvaluationSetVersionOApiRequest, callOptions ...callopt.Option) (*openapi.CreateEvaluationSetVersionOApiResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult)
		resp, err := l.impl.CreateEvaluationSetVersionOApi(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceCreateEvaluationSetVersionOApiResult{}
	ctx = l.injectRPCInfo(ctx, "CreateEvaluationSetVersionOApi")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// ListEvaluationSetVersionsOApi
// 获取评测集版本列表
func (l *LocalEvaluationOpenAPIService) ListEvaluationSetVersionsOApi(ctx context.Context, req *openapi.ListEvaluationSetVersionsOApiRequest, callOptions ...callopt.Option) (*openapi.ListEvaluationSetVersionsOApiResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult)
		resp, err := l.impl.ListEvaluationSetVersionsOApi(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceListEvaluationSetVersionsOApiArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceListEvaluationSetVersionsOApiResult{}
	ctx = l.injectRPCInfo(ctx, "ListEvaluationSetVersionsOApi")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// BatchCreateEvaluationSetItemsOApi
// 批量添加评测集数据
func (l *LocalEvaluationOpenAPIService) BatchCreateEvaluationSetItemsOApi(ctx context.Context, req *openapi.BatchCreateEvaluationSetItemsOApiRequest, callOptions ...callopt.Option) (*openapi.BatchCreateEvaluationSetItemsOApiResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult)
		resp, err := l.impl.BatchCreateEvaluationSetItemsOApi(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceBatchCreateEvaluationSetItemsOApiResult{}
	ctx = l.injectRPCInfo(ctx, "BatchCreateEvaluationSetItemsOApi")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// BatchUpdateEvaluationSetItemsOApi
// 批量更新评测集数据
func (l *LocalEvaluationOpenAPIService) BatchUpdateEvaluationSetItemsOApi(ctx context.Context, req *openapi.BatchUpdateEvaluationSetItemsOApiRequest, callOptions ...callopt.Option) (*openapi.BatchUpdateEvaluationSetItemsOApiResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult)
		resp, err := l.impl.BatchUpdateEvaluationSetItemsOApi(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceBatchUpdateEvaluationSetItemsOApiResult{}
	ctx = l.injectRPCInfo(ctx, "BatchUpdateEvaluationSetItemsOApi")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// BatchDeleteEvaluationSetItemsOApi
// 批量删除评测集数据
func (l *LocalEvaluationOpenAPIService) BatchDeleteEvaluationSetItemsOApi(ctx context.Context, req *openapi.BatchDeleteEvaluationSetItemsOApiRequest, callOptions ...callopt.Option) (*openapi.BatchDeleteEvaluationSetItemsOApiResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult)
		resp, err := l.impl.BatchDeleteEvaluationSetItemsOApi(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceBatchDeleteEvaluationSetItemsOApiResult{}
	ctx = l.injectRPCInfo(ctx, "BatchDeleteEvaluationSetItemsOApi")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// ListEvaluationSetVersionItemsOApi
// 查询评测集特定版本数据
func (l *LocalEvaluationOpenAPIService) ListEvaluationSetVersionItemsOApi(ctx context.Context, req *openapi.ListEvaluationSetVersionItemsOApiRequest, callOptions ...callopt.Option) (*openapi.ListEvaluationSetVersionItemsOApiResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult)
		resp, err := l.impl.ListEvaluationSetVersionItemsOApi(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceListEvaluationSetVersionItemsOApiResult{}
	ctx = l.injectRPCInfo(ctx, "ListEvaluationSetVersionItemsOApi")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// UpdateEvaluationSetSchemaOApi
// 更新评测集字段信息
func (l *LocalEvaluationOpenAPIService) UpdateEvaluationSetSchemaOApi(ctx context.Context, req *openapi.UpdateEvaluationSetSchemaOApiRequest, callOptions ...callopt.Option) (*openapi.UpdateEvaluationSetSchemaOApiResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult)
		resp, err := l.impl.UpdateEvaluationSetSchemaOApi(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceUpdateEvaluationSetSchemaOApiResult{}
	ctx = l.injectRPCInfo(ctx, "UpdateEvaluationSetSchemaOApi")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// ReportEvalTargetInvokeResult_
// 评测目标调用结果上报接口
func (l *LocalEvaluationOpenAPIService) ReportEvalTargetInvokeResult_(ctx context.Context, req *openapi.ReportEvalTargetInvokeResultRequest, callOptions ...callopt.Option) (*openapi.ReportEvalTargetInvokeResultResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs)
		result := out.(*openapi.EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult)
		resp, err := l.impl.ReportEvalTargetInvokeResult_(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.EvaluationOpenAPIServiceReportEvalTargetInvokeResultArgs{Req: req}
	result := &openapi.EvaluationOpenAPIServiceReportEvalTargetInvokeResultResult{}
	ctx = l.injectRPCInfo(ctx, "ReportEvalTargetInvokeResult_")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationOpenAPIService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("EvaluationOpenAPIService", method, nil, nil),
		rpcinfo.NewEndpointInfo("EvaluationOpenAPIService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}

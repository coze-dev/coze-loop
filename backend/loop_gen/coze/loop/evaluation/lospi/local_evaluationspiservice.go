// Code generated by cozeloop. DO NOT EDIT.
package lospi // import github.com/coze-dev/coze-loop/backend/lospi

import (
	"context"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/spi"
)

type LocalEvaluationSPIService struct {
	impl spi.EvaluationSPIService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalEvaluationSPIService(impl spi.EvaluationSPIService, mds ...endpoint.Middleware) *LocalEvaluationSPIService {
	return &LocalEvaluationSPIService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

func (l *LocalEvaluationSPIService) SearchEvalTarget(ctx context.Context, req *spi.SearchEvalTargetRequest, callOptions ...callopt.Option) (*spi.SearchEvalTargetResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*spi.EvaluationSPIServiceSearchEvalTargetArgs)
		result := out.(*spi.EvaluationSPIServiceSearchEvalTargetResult)
		resp, err := l.impl.SearchEvalTarget(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &spi.EvaluationSPIServiceSearchEvalTargetArgs{Req: req}
	result := &spi.EvaluationSPIServiceSearchEvalTargetResult{}
	ctx = l.injectRPCInfo(ctx, "SearchEvalTarget")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationSPIService) InvokeEvalTarget(ctx context.Context, req *spi.InvokeEvalTargetRequest, callOptions ...callopt.Option) (*spi.InvokeEvalTargetResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*spi.EvaluationSPIServiceInvokeEvalTargetArgs)
		result := out.(*spi.EvaluationSPIServiceInvokeEvalTargetResult)
		resp, err := l.impl.InvokeEvalTarget(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &spi.EvaluationSPIServiceInvokeEvalTargetArgs{Req: req}
	result := &spi.EvaluationSPIServiceInvokeEvalTargetResult{}
	ctx = l.injectRPCInfo(ctx, "InvokeEvalTarget")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationSPIService) AsyncInvokeEvalTarget(ctx context.Context, req *spi.AsyncInvokeEvalTargetRequest, callOptions ...callopt.Option) (*spi.AsyncInvokeEvalTargetResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*spi.EvaluationSPIServiceAsyncInvokeEvalTargetArgs)
		result := out.(*spi.EvaluationSPIServiceAsyncInvokeEvalTargetResult)
		resp, err := l.impl.AsyncInvokeEvalTarget(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &spi.EvaluationSPIServiceAsyncInvokeEvalTargetArgs{Req: req}
	result := &spi.EvaluationSPIServiceAsyncInvokeEvalTargetResult{}
	ctx = l.injectRPCInfo(ctx, "AsyncInvokeEvalTarget")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvaluationSPIService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("EvaluationSPIService", method, nil, nil),
		rpcinfo.NewEndpointInfo("EvaluationSPIService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}
